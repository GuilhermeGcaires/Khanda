// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CMsgProtoBufHeader)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgProtoBufHeader {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgProtoBufHeader.client_steam_id)
    pub client_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgProtoBufHeader.client_session_id)
    pub client_session_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgProtoBufHeader.source_app_id)
    pub source_app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgProtoBufHeader.job_id_source)
    pub job_id_source: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgProtoBufHeader.job_id_target)
    pub job_id_target: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgProtoBufHeader.target_job_name)
    pub target_job_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgProtoBufHeader.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgProtoBufHeader.error_message)
    pub error_message: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgProtoBufHeader.gc_msg_src)
    pub gc_msg_src: ::std::option::Option<::protobuf::EnumOrUnknown<GCProtoBufMsgSrc>>,
    // @@protoc_insertion_point(field:dota.CMsgProtoBufHeader.gc_dir_index_source)
    pub gc_dir_index_source: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgProtoBufHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgProtoBufHeader {
    fn default() -> &'a CMsgProtoBufHeader {
        <CMsgProtoBufHeader as ::protobuf::Message>::default_instance()
    }
}

impl CMsgProtoBufHeader {
    pub fn new() -> CMsgProtoBufHeader {
        ::std::default::Default::default()
    }

    // optional fixed64 client_steam_id = 1;

    pub fn client_steam_id(&self) -> u64 {
        self.client_steam_id.unwrap_or(0)
    }

    pub fn clear_client_steam_id(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
    }

    pub fn has_client_steam_id(&self) -> bool {
        self.client_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_steam_id(&mut self, v: u64) {
        self.client_steam_id = ::std::option::Option::Some(v);
    }

    // optional int32 client_session_id = 2;

    pub fn client_session_id(&self) -> i32 {
        self.client_session_id.unwrap_or(0)
    }

    pub fn clear_client_session_id(&mut self) {
        self.client_session_id = ::std::option::Option::None;
    }

    pub fn has_client_session_id(&self) -> bool {
        self.client_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_session_id(&mut self, v: i32) {
        self.client_session_id = ::std::option::Option::Some(v);
    }

    // optional uint32 source_app_id = 3;

    pub fn source_app_id(&self) -> u32 {
        self.source_app_id.unwrap_or(0)
    }

    pub fn clear_source_app_id(&mut self) {
        self.source_app_id = ::std::option::Option::None;
    }

    pub fn has_source_app_id(&self) -> bool {
        self.source_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_app_id(&mut self, v: u32) {
        self.source_app_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 job_id_source = 10;

    pub fn job_id_source(&self) -> u64 {
        self.job_id_source.unwrap_or(0)
    }

    pub fn clear_job_id_source(&mut self) {
        self.job_id_source = ::std::option::Option::None;
    }

    pub fn has_job_id_source(&self) -> bool {
        self.job_id_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id_source(&mut self, v: u64) {
        self.job_id_source = ::std::option::Option::Some(v);
    }

    // optional fixed64 job_id_target = 11;

    pub fn job_id_target(&self) -> u64 {
        self.job_id_target.unwrap_or(0)
    }

    pub fn clear_job_id_target(&mut self) {
        self.job_id_target = ::std::option::Option::None;
    }

    pub fn has_job_id_target(&self) -> bool {
        self.job_id_target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id_target(&mut self, v: u64) {
        self.job_id_target = ::std::option::Option::Some(v);
    }

    // optional string target_job_name = 12;

    pub fn target_job_name(&self) -> &str {
        match self.target_job_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_target_job_name(&mut self) {
        self.target_job_name = ::std::option::Option::None;
    }

    pub fn has_target_job_name(&self) -> bool {
        self.target_job_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target_job_name(&mut self, v: ::std::string::String) {
        self.target_job_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target_job_name(&mut self) -> &mut ::std::string::String {
        if self.target_job_name.is_none() {
            self.target_job_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.target_job_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_target_job_name(&mut self) -> ::std::string::String {
        self.target_job_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 eresult = 13;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional string error_message = 14;

    pub fn error_message(&self) -> &str {
        match self.error_message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_error_message(&mut self) {
        self.error_message = ::std::option::Option::None;
    }

    pub fn has_error_message(&self) -> bool {
        self.error_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        if self.error_message.is_none() {
            self.error_message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.error_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        self.error_message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .dota.GCProtoBufMsgSrc gc_msg_src = 200;

    pub fn gc_msg_src(&self) -> GCProtoBufMsgSrc {
        match self.gc_msg_src {
            Some(e) => e.enum_value_or(GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified),
            None => GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified,
        }
    }

    pub fn clear_gc_msg_src(&mut self) {
        self.gc_msg_src = ::std::option::Option::None;
    }

    pub fn has_gc_msg_src(&self) -> bool {
        self.gc_msg_src.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_msg_src(&mut self, v: GCProtoBufMsgSrc) {
        self.gc_msg_src = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 gc_dir_index_source = 201;

    pub fn gc_dir_index_source(&self) -> i32 {
        self.gc_dir_index_source.unwrap_or(0)
    }

    pub fn clear_gc_dir_index_source(&mut self) {
        self.gc_dir_index_source = ::std::option::Option::None;
    }

    pub fn has_gc_dir_index_source(&self) -> bool {
        self.gc_dir_index_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_dir_index_source(&mut self, v: i32) {
        self.gc_dir_index_source = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_steam_id",
            |m: &CMsgProtoBufHeader| { &m.client_steam_id },
            |m: &mut CMsgProtoBufHeader| { &mut m.client_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_session_id",
            |m: &CMsgProtoBufHeader| { &m.client_session_id },
            |m: &mut CMsgProtoBufHeader| { &mut m.client_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_app_id",
            |m: &CMsgProtoBufHeader| { &m.source_app_id },
            |m: &mut CMsgProtoBufHeader| { &mut m.source_app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "job_id_source",
            |m: &CMsgProtoBufHeader| { &m.job_id_source },
            |m: &mut CMsgProtoBufHeader| { &mut m.job_id_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "job_id_target",
            |m: &CMsgProtoBufHeader| { &m.job_id_target },
            |m: &mut CMsgProtoBufHeader| { &mut m.job_id_target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "target_job_name",
            |m: &CMsgProtoBufHeader| { &m.target_job_name },
            |m: &mut CMsgProtoBufHeader| { &mut m.target_job_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgProtoBufHeader| { &m.eresult },
            |m: &mut CMsgProtoBufHeader| { &mut m.eresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "error_message",
            |m: &CMsgProtoBufHeader| { &m.error_message },
            |m: &mut CMsgProtoBufHeader| { &mut m.error_message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gc_msg_src",
            |m: &CMsgProtoBufHeader| { &m.gc_msg_src },
            |m: &mut CMsgProtoBufHeader| { &mut m.gc_msg_src },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gc_dir_index_source",
            |m: &CMsgProtoBufHeader| { &m.gc_dir_index_source },
            |m: &mut CMsgProtoBufHeader| { &mut m.gc_dir_index_source },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgProtoBufHeader>(
            "CMsgProtoBufHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgProtoBufHeader {
    const NAME: &'static str = "CMsgProtoBufHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.client_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.client_session_id = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.source_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.job_id_source = ::std::option::Option::Some(is.read_fixed64()?);
                },
                89 => {
                    self.job_id_target = ::std::option::Option::Some(is.read_fixed64()?);
                },
                98 => {
                    self.target_job_name = ::std::option::Option::Some(is.read_string()?);
                },
                104 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                114 => {
                    self.error_message = ::std::option::Option::Some(is.read_string()?);
                },
                1600 => {
                    self.gc_msg_src = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                1608 => {
                    self.gc_dir_index_source = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_session_id {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.source_app_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.job_id_source {
            my_size += 1 + 8;
        }
        if let Some(v) = self.job_id_target {
            my_size += 1 + 8;
        }
        if let Some(v) = self.target_job_name.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(13, v);
        }
        if let Some(v) = self.error_message.as_ref() {
            my_size += ::protobuf::rt::string_size(14, &v);
        }
        if let Some(v) = self.gc_msg_src {
            my_size += ::protobuf::rt::int32_size(200, v.value());
        }
        if let Some(v) = self.gc_dir_index_source {
            my_size += ::protobuf::rt::int32_size(201, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.client_steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.client_session_id {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.source_app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.job_id_source {
            os.write_fixed64(10, v)?;
        }
        if let Some(v) = self.job_id_target {
            os.write_fixed64(11, v)?;
        }
        if let Some(v) = self.target_job_name.as_ref() {
            os.write_string(12, v)?;
        }
        if let Some(v) = self.eresult {
            os.write_int32(13, v)?;
        }
        if let Some(v) = self.error_message.as_ref() {
            os.write_string(14, v)?;
        }
        if let Some(v) = self.gc_msg_src {
            os.write_enum(200, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.gc_dir_index_source {
            os.write_int32(201, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgProtoBufHeader {
        CMsgProtoBufHeader::new()
    }

    fn clear(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
        self.client_session_id = ::std::option::Option::None;
        self.source_app_id = ::std::option::Option::None;
        self.job_id_source = ::std::option::Option::None;
        self.job_id_target = ::std::option::Option::None;
        self.target_job_name = ::std::option::Option::None;
        self.eresult = ::std::option::Option::None;
        self.error_message = ::std::option::Option::None;
        self.gc_msg_src = ::std::option::Option::None;
        self.gc_dir_index_source = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgProtoBufHeader {
        static instance: CMsgProtoBufHeader = CMsgProtoBufHeader {
            client_steam_id: ::std::option::Option::None,
            client_session_id: ::std::option::Option::None,
            source_app_id: ::std::option::Option::None,
            job_id_source: ::std::option::Option::None,
            job_id_target: ::std::option::Option::None,
            target_job_name: ::std::option::Option::None,
            eresult: ::std::option::Option::None,
            error_message: ::std::option::Option::None,
            gc_msg_src: ::std::option::Option::None,
            gc_dir_index_source: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgProtoBufHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgProtoBufHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgProtoBufHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgProtoBufHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCSystemMsg_GetAccountDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_GetAccountDetails {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCSystemMsg_GetAccountDetails.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_GetAccountDetails {
    fn default() -> &'a CGCSystemMsg_GetAccountDetails {
        <CGCSystemMsg_GetAccountDetails as ::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_GetAccountDetails {
    pub fn new() -> CGCSystemMsg_GetAccountDetails {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGCSystemMsg_GetAccountDetails| { &m.steamid },
            |m: &mut CGCSystemMsg_GetAccountDetails| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGCSystemMsg_GetAccountDetails| { &m.appid },
            |m: &mut CGCSystemMsg_GetAccountDetails| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCSystemMsg_GetAccountDetails>(
            "CGCSystemMsg_GetAccountDetails",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCSystemMsg_GetAccountDetails {
    const NAME: &'static str = "CGCSystemMsg_GetAccountDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_GetAccountDetails {
        CGCSystemMsg_GetAccountDetails::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_GetAccountDetails {
        static instance: CGCSystemMsg_GetAccountDetails = CGCSystemMsg_GetAccountDetails {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCSystemMsg_GetAccountDetails {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCSystemMsg_GetAccountDetails").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCSystemMsg_GetAccountDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCSystemMsg_GetAccountDetails {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCSystemMsg_GetAccountDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_GetAccountDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.eresult_deprecated)
    pub eresult_deprecated: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.account_name)
    pub account_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.persona_name)
    pub persona_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_profile_created)
    pub is_profile_created: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_profile_public)
    pub is_profile_public: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_inventory_public)
    pub is_inventory_public: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_vac_banned)
    pub is_vac_banned: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_cyber_cafe)
    pub is_cyber_cafe: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_school_account)
    pub is_school_account: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_limited)
    pub is_limited: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_subscribed)
    pub is_subscribed: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.package)
    pub package: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_free_trial_account)
    pub is_free_trial_account: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.free_trial_expiration)
    pub free_trial_expiration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_low_violence)
    pub is_low_violence: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_account_locked_down)
    pub is_account_locked_down: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_community_banned)
    pub is_community_banned: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_trade_banned)
    pub is_trade_banned: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.trade_ban_expiration)
    pub trade_ban_expiration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.suspension_end_time)
    pub suspension_end_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.currency)
    pub currency: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.steam_level)
    pub steam_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.friend_count)
    pub friend_count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.account_creation_time)
    pub account_creation_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_steamguard_enabled)
    pub is_steamguard_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_phone_verified)
    pub is_phone_verified: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_two_factor_auth_enabled)
    pub is_two_factor_auth_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.two_factor_enabled_time)
    pub two_factor_enabled_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.phone_verification_time)
    pub phone_verification_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.phone_id)
    pub phone_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_phone_identifying)
    pub is_phone_identifying: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.rt_identity_linked)
    pub rt_identity_linked: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.rt_birth_date)
    pub rt_birth_date: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.txn_country_code)
    pub txn_country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.has_accepted_china_ssa)
    pub has_accepted_china_ssa: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetAccountDetails_Response.is_banned_steam_china)
    pub is_banned_steam_china: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCSystemMsg_GetAccountDetails_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_GetAccountDetails_Response {
    fn default() -> &'a CGCSystemMsg_GetAccountDetails_Response {
        <CGCSystemMsg_GetAccountDetails_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_GetAccountDetails_Response {
    pub fn new() -> CGCSystemMsg_GetAccountDetails_Response {
        ::std::default::Default::default()
    }

    // optional uint32 eresult_deprecated = 1;

    pub fn eresult_deprecated(&self) -> u32 {
        self.eresult_deprecated.unwrap_or(0)
    }

    pub fn clear_eresult_deprecated(&mut self) {
        self.eresult_deprecated = ::std::option::Option::None;
    }

    pub fn has_eresult_deprecated(&self) -> bool {
        self.eresult_deprecated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult_deprecated(&mut self, v: u32) {
        self.eresult_deprecated = ::std::option::Option::Some(v);
    }

    // optional string account_name = 2;

    pub fn account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_account_name(&mut self) {
        self.account_name = ::std::option::Option::None;
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string persona_name = 3;

    pub fn persona_name(&self) -> &str {
        match self.persona_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_persona_name(&mut self) {
        self.persona_name = ::std::option::Option::None;
    }

    pub fn has_persona_name(&self) -> bool {
        self.persona_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persona_name(&mut self, v: ::std::string::String) {
        self.persona_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
        if self.persona_name.is_none() {
            self.persona_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.persona_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_persona_name(&mut self) -> ::std::string::String {
        self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_profile_created = 26;

    pub fn is_profile_created(&self) -> bool {
        self.is_profile_created.unwrap_or(false)
    }

    pub fn clear_is_profile_created(&mut self) {
        self.is_profile_created = ::std::option::Option::None;
    }

    pub fn has_is_profile_created(&self) -> bool {
        self.is_profile_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_profile_created(&mut self, v: bool) {
        self.is_profile_created = ::std::option::Option::Some(v);
    }

    // optional bool is_profile_public = 4;

    pub fn is_profile_public(&self) -> bool {
        self.is_profile_public.unwrap_or(false)
    }

    pub fn clear_is_profile_public(&mut self) {
        self.is_profile_public = ::std::option::Option::None;
    }

    pub fn has_is_profile_public(&self) -> bool {
        self.is_profile_public.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_profile_public(&mut self, v: bool) {
        self.is_profile_public = ::std::option::Option::Some(v);
    }

    // optional bool is_inventory_public = 5;

    pub fn is_inventory_public(&self) -> bool {
        self.is_inventory_public.unwrap_or(false)
    }

    pub fn clear_is_inventory_public(&mut self) {
        self.is_inventory_public = ::std::option::Option::None;
    }

    pub fn has_is_inventory_public(&self) -> bool {
        self.is_inventory_public.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_inventory_public(&mut self, v: bool) {
        self.is_inventory_public = ::std::option::Option::Some(v);
    }

    // optional bool is_vac_banned = 7;

    pub fn is_vac_banned(&self) -> bool {
        self.is_vac_banned.unwrap_or(false)
    }

    pub fn clear_is_vac_banned(&mut self) {
        self.is_vac_banned = ::std::option::Option::None;
    }

    pub fn has_is_vac_banned(&self) -> bool {
        self.is_vac_banned.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_vac_banned(&mut self, v: bool) {
        self.is_vac_banned = ::std::option::Option::Some(v);
    }

    // optional bool is_cyber_cafe = 8;

    pub fn is_cyber_cafe(&self) -> bool {
        self.is_cyber_cafe.unwrap_or(false)
    }

    pub fn clear_is_cyber_cafe(&mut self) {
        self.is_cyber_cafe = ::std::option::Option::None;
    }

    pub fn has_is_cyber_cafe(&self) -> bool {
        self.is_cyber_cafe.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_cyber_cafe(&mut self, v: bool) {
        self.is_cyber_cafe = ::std::option::Option::Some(v);
    }

    // optional bool is_school_account = 9;

    pub fn is_school_account(&self) -> bool {
        self.is_school_account.unwrap_or(false)
    }

    pub fn clear_is_school_account(&mut self) {
        self.is_school_account = ::std::option::Option::None;
    }

    pub fn has_is_school_account(&self) -> bool {
        self.is_school_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_school_account(&mut self, v: bool) {
        self.is_school_account = ::std::option::Option::Some(v);
    }

    // optional bool is_limited = 10;

    pub fn is_limited(&self) -> bool {
        self.is_limited.unwrap_or(false)
    }

    pub fn clear_is_limited(&mut self) {
        self.is_limited = ::std::option::Option::None;
    }

    pub fn has_is_limited(&self) -> bool {
        self.is_limited.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_limited(&mut self, v: bool) {
        self.is_limited = ::std::option::Option::Some(v);
    }

    // optional bool is_subscribed = 11;

    pub fn is_subscribed(&self) -> bool {
        self.is_subscribed.unwrap_or(false)
    }

    pub fn clear_is_subscribed(&mut self) {
        self.is_subscribed = ::std::option::Option::None;
    }

    pub fn has_is_subscribed(&self) -> bool {
        self.is_subscribed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_subscribed(&mut self, v: bool) {
        self.is_subscribed = ::std::option::Option::Some(v);
    }

    // optional uint32 package = 12;

    pub fn package(&self) -> u32 {
        self.package.unwrap_or(0)
    }

    pub fn clear_package(&mut self) {
        self.package = ::std::option::Option::None;
    }

    pub fn has_package(&self) -> bool {
        self.package.is_some()
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: u32) {
        self.package = ::std::option::Option::Some(v);
    }

    // optional bool is_free_trial_account = 13;

    pub fn is_free_trial_account(&self) -> bool {
        self.is_free_trial_account.unwrap_or(false)
    }

    pub fn clear_is_free_trial_account(&mut self) {
        self.is_free_trial_account = ::std::option::Option::None;
    }

    pub fn has_is_free_trial_account(&self) -> bool {
        self.is_free_trial_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_free_trial_account(&mut self, v: bool) {
        self.is_free_trial_account = ::std::option::Option::Some(v);
    }

    // optional uint32 free_trial_expiration = 14;

    pub fn free_trial_expiration(&self) -> u32 {
        self.free_trial_expiration.unwrap_or(0)
    }

    pub fn clear_free_trial_expiration(&mut self) {
        self.free_trial_expiration = ::std::option::Option::None;
    }

    pub fn has_free_trial_expiration(&self) -> bool {
        self.free_trial_expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_free_trial_expiration(&mut self, v: u32) {
        self.free_trial_expiration = ::std::option::Option::Some(v);
    }

    // optional bool is_low_violence = 15;

    pub fn is_low_violence(&self) -> bool {
        self.is_low_violence.unwrap_or(false)
    }

    pub fn clear_is_low_violence(&mut self) {
        self.is_low_violence = ::std::option::Option::None;
    }

    pub fn has_is_low_violence(&self) -> bool {
        self.is_low_violence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_low_violence(&mut self, v: bool) {
        self.is_low_violence = ::std::option::Option::Some(v);
    }

    // optional bool is_account_locked_down = 16;

    pub fn is_account_locked_down(&self) -> bool {
        self.is_account_locked_down.unwrap_or(false)
    }

    pub fn clear_is_account_locked_down(&mut self) {
        self.is_account_locked_down = ::std::option::Option::None;
    }

    pub fn has_is_account_locked_down(&self) -> bool {
        self.is_account_locked_down.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_account_locked_down(&mut self, v: bool) {
        self.is_account_locked_down = ::std::option::Option::Some(v);
    }

    // optional bool is_community_banned = 17;

    pub fn is_community_banned(&self) -> bool {
        self.is_community_banned.unwrap_or(false)
    }

    pub fn clear_is_community_banned(&mut self) {
        self.is_community_banned = ::std::option::Option::None;
    }

    pub fn has_is_community_banned(&self) -> bool {
        self.is_community_banned.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_community_banned(&mut self, v: bool) {
        self.is_community_banned = ::std::option::Option::Some(v);
    }

    // optional bool is_trade_banned = 18;

    pub fn is_trade_banned(&self) -> bool {
        self.is_trade_banned.unwrap_or(false)
    }

    pub fn clear_is_trade_banned(&mut self) {
        self.is_trade_banned = ::std::option::Option::None;
    }

    pub fn has_is_trade_banned(&self) -> bool {
        self.is_trade_banned.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_trade_banned(&mut self, v: bool) {
        self.is_trade_banned = ::std::option::Option::Some(v);
    }

    // optional uint32 trade_ban_expiration = 19;

    pub fn trade_ban_expiration(&self) -> u32 {
        self.trade_ban_expiration.unwrap_or(0)
    }

    pub fn clear_trade_ban_expiration(&mut self) {
        self.trade_ban_expiration = ::std::option::Option::None;
    }

    pub fn has_trade_ban_expiration(&self) -> bool {
        self.trade_ban_expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trade_ban_expiration(&mut self, v: u32) {
        self.trade_ban_expiration = ::std::option::Option::Some(v);
    }

    // optional uint32 accountid = 20;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional uint32 suspension_end_time = 21;

    pub fn suspension_end_time(&self) -> u32 {
        self.suspension_end_time.unwrap_or(0)
    }

    pub fn clear_suspension_end_time(&mut self) {
        self.suspension_end_time = ::std::option::Option::None;
    }

    pub fn has_suspension_end_time(&self) -> bool {
        self.suspension_end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suspension_end_time(&mut self, v: u32) {
        self.suspension_end_time = ::std::option::Option::Some(v);
    }

    // optional string currency = 22;

    pub fn currency(&self) -> &str {
        match self.currency.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_currency(&mut self) {
        self.currency = ::std::option::Option::None;
    }

    pub fn has_currency(&self) -> bool {
        self.currency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        if self.currency.is_none() {
            self.currency = ::std::option::Option::Some(::std::string::String::new());
        }
        self.currency.as_mut().unwrap()
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        self.currency.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 steam_level = 23;

    pub fn steam_level(&self) -> u32 {
        self.steam_level.unwrap_or(0)
    }

    pub fn clear_steam_level(&mut self) {
        self.steam_level = ::std::option::Option::None;
    }

    pub fn has_steam_level(&self) -> bool {
        self.steam_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_level(&mut self, v: u32) {
        self.steam_level = ::std::option::Option::Some(v);
    }

    // optional uint32 friend_count = 24;

    pub fn friend_count(&self) -> u32 {
        self.friend_count.unwrap_or(0)
    }

    pub fn clear_friend_count(&mut self) {
        self.friend_count = ::std::option::Option::None;
    }

    pub fn has_friend_count(&self) -> bool {
        self.friend_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friend_count(&mut self, v: u32) {
        self.friend_count = ::std::option::Option::Some(v);
    }

    // optional uint32 account_creation_time = 25;

    pub fn account_creation_time(&self) -> u32 {
        self.account_creation_time.unwrap_or(0)
    }

    pub fn clear_account_creation_time(&mut self) {
        self.account_creation_time = ::std::option::Option::None;
    }

    pub fn has_account_creation_time(&self) -> bool {
        self.account_creation_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_creation_time(&mut self, v: u32) {
        self.account_creation_time = ::std::option::Option::Some(v);
    }

    // optional bool is_steamguard_enabled = 27;

    pub fn is_steamguard_enabled(&self) -> bool {
        self.is_steamguard_enabled.unwrap_or(false)
    }

    pub fn clear_is_steamguard_enabled(&mut self) {
        self.is_steamguard_enabled = ::std::option::Option::None;
    }

    pub fn has_is_steamguard_enabled(&self) -> bool {
        self.is_steamguard_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_steamguard_enabled(&mut self, v: bool) {
        self.is_steamguard_enabled = ::std::option::Option::Some(v);
    }

    // optional bool is_phone_verified = 28;

    pub fn is_phone_verified(&self) -> bool {
        self.is_phone_verified.unwrap_or(false)
    }

    pub fn clear_is_phone_verified(&mut self) {
        self.is_phone_verified = ::std::option::Option::None;
    }

    pub fn has_is_phone_verified(&self) -> bool {
        self.is_phone_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_phone_verified(&mut self, v: bool) {
        self.is_phone_verified = ::std::option::Option::Some(v);
    }

    // optional bool is_two_factor_auth_enabled = 29;

    pub fn is_two_factor_auth_enabled(&self) -> bool {
        self.is_two_factor_auth_enabled.unwrap_or(false)
    }

    pub fn clear_is_two_factor_auth_enabled(&mut self) {
        self.is_two_factor_auth_enabled = ::std::option::Option::None;
    }

    pub fn has_is_two_factor_auth_enabled(&self) -> bool {
        self.is_two_factor_auth_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_two_factor_auth_enabled(&mut self, v: bool) {
        self.is_two_factor_auth_enabled = ::std::option::Option::Some(v);
    }

    // optional uint32 two_factor_enabled_time = 30;

    pub fn two_factor_enabled_time(&self) -> u32 {
        self.two_factor_enabled_time.unwrap_or(0)
    }

    pub fn clear_two_factor_enabled_time(&mut self) {
        self.two_factor_enabled_time = ::std::option::Option::None;
    }

    pub fn has_two_factor_enabled_time(&self) -> bool {
        self.two_factor_enabled_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_two_factor_enabled_time(&mut self, v: u32) {
        self.two_factor_enabled_time = ::std::option::Option::Some(v);
    }

    // optional uint32 phone_verification_time = 31;

    pub fn phone_verification_time(&self) -> u32 {
        self.phone_verification_time.unwrap_or(0)
    }

    pub fn clear_phone_verification_time(&mut self) {
        self.phone_verification_time = ::std::option::Option::None;
    }

    pub fn has_phone_verification_time(&self) -> bool {
        self.phone_verification_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phone_verification_time(&mut self, v: u32) {
        self.phone_verification_time = ::std::option::Option::Some(v);
    }

    // optional uint64 phone_id = 33;

    pub fn phone_id(&self) -> u64 {
        self.phone_id.unwrap_or(0)
    }

    pub fn clear_phone_id(&mut self) {
        self.phone_id = ::std::option::Option::None;
    }

    pub fn has_phone_id(&self) -> bool {
        self.phone_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phone_id(&mut self, v: u64) {
        self.phone_id = ::std::option::Option::Some(v);
    }

    // optional bool is_phone_identifying = 34;

    pub fn is_phone_identifying(&self) -> bool {
        self.is_phone_identifying.unwrap_or(false)
    }

    pub fn clear_is_phone_identifying(&mut self) {
        self.is_phone_identifying = ::std::option::Option::None;
    }

    pub fn has_is_phone_identifying(&self) -> bool {
        self.is_phone_identifying.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_phone_identifying(&mut self, v: bool) {
        self.is_phone_identifying = ::std::option::Option::Some(v);
    }

    // optional uint32 rt_identity_linked = 35;

    pub fn rt_identity_linked(&self) -> u32 {
        self.rt_identity_linked.unwrap_or(0)
    }

    pub fn clear_rt_identity_linked(&mut self) {
        self.rt_identity_linked = ::std::option::Option::None;
    }

    pub fn has_rt_identity_linked(&self) -> bool {
        self.rt_identity_linked.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_identity_linked(&mut self, v: u32) {
        self.rt_identity_linked = ::std::option::Option::Some(v);
    }

    // optional uint32 rt_birth_date = 36;

    pub fn rt_birth_date(&self) -> u32 {
        self.rt_birth_date.unwrap_or(0)
    }

    pub fn clear_rt_birth_date(&mut self) {
        self.rt_birth_date = ::std::option::Option::None;
    }

    pub fn has_rt_birth_date(&self) -> bool {
        self.rt_birth_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_birth_date(&mut self, v: u32) {
        self.rt_birth_date = ::std::option::Option::Some(v);
    }

    // optional string txn_country_code = 37;

    pub fn txn_country_code(&self) -> &str {
        match self.txn_country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_txn_country_code(&mut self) {
        self.txn_country_code = ::std::option::Option::None;
    }

    pub fn has_txn_country_code(&self) -> bool {
        self.txn_country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txn_country_code(&mut self, v: ::std::string::String) {
        self.txn_country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txn_country_code(&mut self) -> &mut ::std::string::String {
        if self.txn_country_code.is_none() {
            self.txn_country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.txn_country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_txn_country_code(&mut self) -> ::std::string::String {
        self.txn_country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool has_accepted_china_ssa = 38;

    pub fn has_accepted_china_ssa(&self) -> bool {
        self.has_accepted_china_ssa.unwrap_or(false)
    }

    pub fn clear_has_accepted_china_ssa(&mut self) {
        self.has_accepted_china_ssa = ::std::option::Option::None;
    }

    pub fn has_has_accepted_china_ssa(&self) -> bool {
        self.has_accepted_china_ssa.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_accepted_china_ssa(&mut self, v: bool) {
        self.has_accepted_china_ssa = ::std::option::Option::Some(v);
    }

    // optional bool is_banned_steam_china = 39;

    pub fn is_banned_steam_china(&self) -> bool {
        self.is_banned_steam_china.unwrap_or(false)
    }

    pub fn clear_is_banned_steam_china(&mut self) {
        self.is_banned_steam_china = ::std::option::Option::None;
    }

    pub fn has_is_banned_steam_china(&self) -> bool {
        self.is_banned_steam_china.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_banned_steam_china(&mut self, v: bool) {
        self.is_banned_steam_china = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(37);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult_deprecated",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.eresult_deprecated },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.eresult_deprecated },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_name",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.account_name },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.account_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "persona_name",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.persona_name },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.persona_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_profile_created",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_profile_created },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_profile_created },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_profile_public",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_profile_public },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_profile_public },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_inventory_public",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_inventory_public },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_inventory_public },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_vac_banned",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_vac_banned },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_vac_banned },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_cyber_cafe",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_cyber_cafe },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_cyber_cafe },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_school_account",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_school_account },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_school_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_limited",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_limited },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_limited },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_subscribed",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_subscribed },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_subscribed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "package",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.package },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.package },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_free_trial_account",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_free_trial_account },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_free_trial_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "free_trial_expiration",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.free_trial_expiration },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.free_trial_expiration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_low_violence",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_low_violence },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_low_violence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_account_locked_down",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_account_locked_down },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_account_locked_down },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_community_banned",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_community_banned },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_community_banned },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_trade_banned",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_trade_banned },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_trade_banned },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "trade_ban_expiration",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.trade_ban_expiration },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.trade_ban_expiration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.accountid },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.accountid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suspension_end_time",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.suspension_end_time },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.suspension_end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "currency",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.currency },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.currency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_level",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.steam_level },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.steam_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "friend_count",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.friend_count },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.friend_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_creation_time",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.account_creation_time },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.account_creation_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_steamguard_enabled",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_steamguard_enabled },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_steamguard_enabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_phone_verified",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_phone_verified },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_phone_verified },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_two_factor_auth_enabled",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_two_factor_auth_enabled },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_two_factor_auth_enabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "two_factor_enabled_time",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.two_factor_enabled_time },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.two_factor_enabled_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "phone_verification_time",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.phone_verification_time },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.phone_verification_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "phone_id",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.phone_id },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.phone_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_phone_identifying",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_phone_identifying },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_phone_identifying },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_identity_linked",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.rt_identity_linked },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.rt_identity_linked },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_birth_date",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.rt_birth_date },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.rt_birth_date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txn_country_code",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.txn_country_code },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.txn_country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_accepted_china_ssa",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.has_accepted_china_ssa },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.has_accepted_china_ssa },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_banned_steam_china",
            |m: &CGCSystemMsg_GetAccountDetails_Response| { &m.is_banned_steam_china },
            |m: &mut CGCSystemMsg_GetAccountDetails_Response| { &mut m.is_banned_steam_china },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCSystemMsg_GetAccountDetails_Response>(
            "CGCSystemMsg_GetAccountDetails_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCSystemMsg_GetAccountDetails_Response {
    const NAME: &'static str = "CGCSystemMsg_GetAccountDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult_deprecated = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.account_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.persona_name = ::std::option::Option::Some(is.read_string()?);
                },
                208 => {
                    self.is_profile_created = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.is_profile_public = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_inventory_public = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.is_vac_banned = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.is_cyber_cafe = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.is_school_account = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.is_limited = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.is_subscribed = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.package = ::std::option::Option::Some(is.read_uint32()?);
                },
                104 => {
                    self.is_free_trial_account = ::std::option::Option::Some(is.read_bool()?);
                },
                112 => {
                    self.free_trial_expiration = ::std::option::Option::Some(is.read_uint32()?);
                },
                120 => {
                    self.is_low_violence = ::std::option::Option::Some(is.read_bool()?);
                },
                128 => {
                    self.is_account_locked_down = ::std::option::Option::Some(is.read_bool()?);
                },
                136 => {
                    self.is_community_banned = ::std::option::Option::Some(is.read_bool()?);
                },
                144 => {
                    self.is_trade_banned = ::std::option::Option::Some(is.read_bool()?);
                },
                152 => {
                    self.trade_ban_expiration = ::std::option::Option::Some(is.read_uint32()?);
                },
                160 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                168 => {
                    self.suspension_end_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                178 => {
                    self.currency = ::std::option::Option::Some(is.read_string()?);
                },
                184 => {
                    self.steam_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                192 => {
                    self.friend_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                200 => {
                    self.account_creation_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                216 => {
                    self.is_steamguard_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                224 => {
                    self.is_phone_verified = ::std::option::Option::Some(is.read_bool()?);
                },
                232 => {
                    self.is_two_factor_auth_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                240 => {
                    self.two_factor_enabled_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                248 => {
                    self.phone_verification_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                264 => {
                    self.phone_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                272 => {
                    self.is_phone_identifying = ::std::option::Option::Some(is.read_bool()?);
                },
                280 => {
                    self.rt_identity_linked = ::std::option::Option::Some(is.read_uint32()?);
                },
                288 => {
                    self.rt_birth_date = ::std::option::Option::Some(is.read_uint32()?);
                },
                298 => {
                    self.txn_country_code = ::std::option::Option::Some(is.read_string()?);
                },
                304 => {
                    self.has_accepted_china_ssa = ::std::option::Option::Some(is.read_bool()?);
                },
                312 => {
                    self.is_banned_steam_china = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult_deprecated {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.account_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.persona_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.is_profile_created {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_profile_public {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_inventory_public {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_vac_banned {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_cyber_cafe {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_school_account {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_limited {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_subscribed {
            my_size += 1 + 1;
        }
        if let Some(v) = self.package {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        if let Some(v) = self.is_free_trial_account {
            my_size += 1 + 1;
        }
        if let Some(v) = self.free_trial_expiration {
            my_size += ::protobuf::rt::uint32_size(14, v);
        }
        if let Some(v) = self.is_low_violence {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_account_locked_down {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_community_banned {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_trade_banned {
            my_size += 2 + 1;
        }
        if let Some(v) = self.trade_ban_expiration {
            my_size += ::protobuf::rt::uint32_size(19, v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(20, v);
        }
        if let Some(v) = self.suspension_end_time {
            my_size += ::protobuf::rt::uint32_size(21, v);
        }
        if let Some(v) = self.currency.as_ref() {
            my_size += ::protobuf::rt::string_size(22, &v);
        }
        if let Some(v) = self.steam_level {
            my_size += ::protobuf::rt::uint32_size(23, v);
        }
        if let Some(v) = self.friend_count {
            my_size += ::protobuf::rt::uint32_size(24, v);
        }
        if let Some(v) = self.account_creation_time {
            my_size += ::protobuf::rt::uint32_size(25, v);
        }
        if let Some(v) = self.is_steamguard_enabled {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_phone_verified {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_two_factor_auth_enabled {
            my_size += 2 + 1;
        }
        if let Some(v) = self.two_factor_enabled_time {
            my_size += ::protobuf::rt::uint32_size(30, v);
        }
        if let Some(v) = self.phone_verification_time {
            my_size += ::protobuf::rt::uint32_size(31, v);
        }
        if let Some(v) = self.phone_id {
            my_size += ::protobuf::rt::uint64_size(33, v);
        }
        if let Some(v) = self.is_phone_identifying {
            my_size += 2 + 1;
        }
        if let Some(v) = self.rt_identity_linked {
            my_size += ::protobuf::rt::uint32_size(35, v);
        }
        if let Some(v) = self.rt_birth_date {
            my_size += ::protobuf::rt::uint32_size(36, v);
        }
        if let Some(v) = self.txn_country_code.as_ref() {
            my_size += ::protobuf::rt::string_size(37, &v);
        }
        if let Some(v) = self.has_accepted_china_ssa {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_banned_steam_china {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult_deprecated {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.account_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.persona_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.is_profile_created {
            os.write_bool(26, v)?;
        }
        if let Some(v) = self.is_profile_public {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_inventory_public {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.is_vac_banned {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.is_cyber_cafe {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.is_school_account {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.is_limited {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.is_subscribed {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.package {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.is_free_trial_account {
            os.write_bool(13, v)?;
        }
        if let Some(v) = self.free_trial_expiration {
            os.write_uint32(14, v)?;
        }
        if let Some(v) = self.is_low_violence {
            os.write_bool(15, v)?;
        }
        if let Some(v) = self.is_account_locked_down {
            os.write_bool(16, v)?;
        }
        if let Some(v) = self.is_community_banned {
            os.write_bool(17, v)?;
        }
        if let Some(v) = self.is_trade_banned {
            os.write_bool(18, v)?;
        }
        if let Some(v) = self.trade_ban_expiration {
            os.write_uint32(19, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(20, v)?;
        }
        if let Some(v) = self.suspension_end_time {
            os.write_uint32(21, v)?;
        }
        if let Some(v) = self.currency.as_ref() {
            os.write_string(22, v)?;
        }
        if let Some(v) = self.steam_level {
            os.write_uint32(23, v)?;
        }
        if let Some(v) = self.friend_count {
            os.write_uint32(24, v)?;
        }
        if let Some(v) = self.account_creation_time {
            os.write_uint32(25, v)?;
        }
        if let Some(v) = self.is_steamguard_enabled {
            os.write_bool(27, v)?;
        }
        if let Some(v) = self.is_phone_verified {
            os.write_bool(28, v)?;
        }
        if let Some(v) = self.is_two_factor_auth_enabled {
            os.write_bool(29, v)?;
        }
        if let Some(v) = self.two_factor_enabled_time {
            os.write_uint32(30, v)?;
        }
        if let Some(v) = self.phone_verification_time {
            os.write_uint32(31, v)?;
        }
        if let Some(v) = self.phone_id {
            os.write_uint64(33, v)?;
        }
        if let Some(v) = self.is_phone_identifying {
            os.write_bool(34, v)?;
        }
        if let Some(v) = self.rt_identity_linked {
            os.write_uint32(35, v)?;
        }
        if let Some(v) = self.rt_birth_date {
            os.write_uint32(36, v)?;
        }
        if let Some(v) = self.txn_country_code.as_ref() {
            os.write_string(37, v)?;
        }
        if let Some(v) = self.has_accepted_china_ssa {
            os.write_bool(38, v)?;
        }
        if let Some(v) = self.is_banned_steam_china {
            os.write_bool(39, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_GetAccountDetails_Response {
        CGCSystemMsg_GetAccountDetails_Response::new()
    }

    fn clear(&mut self) {
        self.eresult_deprecated = ::std::option::Option::None;
        self.account_name = ::std::option::Option::None;
        self.persona_name = ::std::option::Option::None;
        self.is_profile_created = ::std::option::Option::None;
        self.is_profile_public = ::std::option::Option::None;
        self.is_inventory_public = ::std::option::Option::None;
        self.is_vac_banned = ::std::option::Option::None;
        self.is_cyber_cafe = ::std::option::Option::None;
        self.is_school_account = ::std::option::Option::None;
        self.is_limited = ::std::option::Option::None;
        self.is_subscribed = ::std::option::Option::None;
        self.package = ::std::option::Option::None;
        self.is_free_trial_account = ::std::option::Option::None;
        self.free_trial_expiration = ::std::option::Option::None;
        self.is_low_violence = ::std::option::Option::None;
        self.is_account_locked_down = ::std::option::Option::None;
        self.is_community_banned = ::std::option::Option::None;
        self.is_trade_banned = ::std::option::Option::None;
        self.trade_ban_expiration = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.suspension_end_time = ::std::option::Option::None;
        self.currency = ::std::option::Option::None;
        self.steam_level = ::std::option::Option::None;
        self.friend_count = ::std::option::Option::None;
        self.account_creation_time = ::std::option::Option::None;
        self.is_steamguard_enabled = ::std::option::Option::None;
        self.is_phone_verified = ::std::option::Option::None;
        self.is_two_factor_auth_enabled = ::std::option::Option::None;
        self.two_factor_enabled_time = ::std::option::Option::None;
        self.phone_verification_time = ::std::option::Option::None;
        self.phone_id = ::std::option::Option::None;
        self.is_phone_identifying = ::std::option::Option::None;
        self.rt_identity_linked = ::std::option::Option::None;
        self.rt_birth_date = ::std::option::Option::None;
        self.txn_country_code = ::std::option::Option::None;
        self.has_accepted_china_ssa = ::std::option::Option::None;
        self.is_banned_steam_china = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_GetAccountDetails_Response {
        static instance: CGCSystemMsg_GetAccountDetails_Response = CGCSystemMsg_GetAccountDetails_Response {
            eresult_deprecated: ::std::option::Option::None,
            account_name: ::std::option::Option::None,
            persona_name: ::std::option::Option::None,
            is_profile_created: ::std::option::Option::None,
            is_profile_public: ::std::option::Option::None,
            is_inventory_public: ::std::option::Option::None,
            is_vac_banned: ::std::option::Option::None,
            is_cyber_cafe: ::std::option::Option::None,
            is_school_account: ::std::option::Option::None,
            is_limited: ::std::option::Option::None,
            is_subscribed: ::std::option::Option::None,
            package: ::std::option::Option::None,
            is_free_trial_account: ::std::option::Option::None,
            free_trial_expiration: ::std::option::Option::None,
            is_low_violence: ::std::option::Option::None,
            is_account_locked_down: ::std::option::Option::None,
            is_community_banned: ::std::option::Option::None,
            is_trade_banned: ::std::option::Option::None,
            trade_ban_expiration: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            suspension_end_time: ::std::option::Option::None,
            currency: ::std::option::Option::None,
            steam_level: ::std::option::Option::None,
            friend_count: ::std::option::Option::None,
            account_creation_time: ::std::option::Option::None,
            is_steamguard_enabled: ::std::option::Option::None,
            is_phone_verified: ::std::option::Option::None,
            is_two_factor_auth_enabled: ::std::option::Option::None,
            two_factor_enabled_time: ::std::option::Option::None,
            phone_verification_time: ::std::option::Option::None,
            phone_id: ::std::option::Option::None,
            is_phone_identifying: ::std::option::Option::None,
            rt_identity_linked: ::std::option::Option::None,
            rt_birth_date: ::std::option::Option::None,
            txn_country_code: ::std::option::Option::None,
            has_accepted_china_ssa: ::std::option::Option::None,
            is_banned_steam_china: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCSystemMsg_GetAccountDetails_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCSystemMsg_GetAccountDetails_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCSystemMsg_GetAccountDetails_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCSystemMsg_GetAccountDetails_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CIPLocationInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CIPLocationInfo {
    // message fields
    // @@protoc_insertion_point(field:dota.CIPLocationInfo.ip)
    pub ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CIPLocationInfo.latitude)
    pub latitude: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:dota.CIPLocationInfo.longitude)
    pub longitude: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:dota.CIPLocationInfo.country)
    pub country: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CIPLocationInfo.state)
    pub state: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CIPLocationInfo.city)
    pub city: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CIPLocationInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CIPLocationInfo {
    fn default() -> &'a CIPLocationInfo {
        <CIPLocationInfo as ::protobuf::Message>::default_instance()
    }
}

impl CIPLocationInfo {
    pub fn new() -> CIPLocationInfo {
        ::std::default::Default::default()
    }

    // optional uint32 ip = 1;

    pub fn ip(&self) -> u32 {
        self.ip.unwrap_or(0)
    }

    pub fn clear_ip(&mut self) {
        self.ip = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: u32) {
        self.ip = ::std::option::Option::Some(v);
    }

    // optional float latitude = 2;

    pub fn latitude(&self) -> f32 {
        self.latitude.unwrap_or(0.)
    }

    pub fn clear_latitude(&mut self) {
        self.latitude = ::std::option::Option::None;
    }

    pub fn has_latitude(&self) -> bool {
        self.latitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f32) {
        self.latitude = ::std::option::Option::Some(v);
    }

    // optional float longitude = 3;

    pub fn longitude(&self) -> f32 {
        self.longitude.unwrap_or(0.)
    }

    pub fn clear_longitude(&mut self) {
        self.longitude = ::std::option::Option::None;
    }

    pub fn has_longitude(&self) -> bool {
        self.longitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f32) {
        self.longitude = ::std::option::Option::Some(v);
    }

    // optional string country = 4;

    pub fn country(&self) -> &str {
        match self.country.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country(&mut self) {
        self.country = ::std::option::Option::None;
    }

    pub fn has_country(&self) -> bool {
        self.country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        if self.country.is_none() {
            self.country = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country.as_mut().unwrap()
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        self.country.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string state = 5;

    pub fn state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state = ::std::option::Option::Some(::std::string::String::new());
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string city = 6;

    pub fn city(&self) -> &str {
        match self.city.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_city(&mut self) {
        self.city = ::std::option::Option::None;
    }

    pub fn has_city(&self) -> bool {
        self.city.is_some()
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        if self.city.is_none() {
            self.city = ::std::option::Option::Some(::std::string::String::new());
        }
        self.city.as_mut().unwrap()
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        self.city.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ip",
            |m: &CIPLocationInfo| { &m.ip },
            |m: &mut CIPLocationInfo| { &mut m.ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "latitude",
            |m: &CIPLocationInfo| { &m.latitude },
            |m: &mut CIPLocationInfo| { &mut m.latitude },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "longitude",
            |m: &CIPLocationInfo| { &m.longitude },
            |m: &mut CIPLocationInfo| { &mut m.longitude },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "country",
            |m: &CIPLocationInfo| { &m.country },
            |m: &mut CIPLocationInfo| { &mut m.country },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CIPLocationInfo| { &m.state },
            |m: &mut CIPLocationInfo| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "city",
            |m: &CIPLocationInfo| { &m.city },
            |m: &mut CIPLocationInfo| { &mut m.city },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CIPLocationInfo>(
            "CIPLocationInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CIPLocationInfo {
    const NAME: &'static str = "CIPLocationInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ip = ::std::option::Option::Some(is.read_uint32()?);
                },
                21 => {
                    self.latitude = ::std::option::Option::Some(is.read_float()?);
                },
                29 => {
                    self.longitude = ::std::option::Option::Some(is.read_float()?);
                },
                34 => {
                    self.country = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.state = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.city = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ip {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.latitude {
            my_size += 1 + 4;
        }
        if let Some(v) = self.longitude {
            my_size += 1 + 4;
        }
        if let Some(v) = self.country.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.state.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.city.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ip {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.latitude {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.longitude {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.country.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.state.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.city.as_ref() {
            os.write_string(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CIPLocationInfo {
        CIPLocationInfo::new()
    }

    fn clear(&mut self) {
        self.ip = ::std::option::Option::None;
        self.latitude = ::std::option::Option::None;
        self.longitude = ::std::option::Option::None;
        self.country = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.city = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CIPLocationInfo {
        static instance: CIPLocationInfo = CIPLocationInfo {
            ip: ::std::option::Option::None,
            latitude: ::std::option::Option::None,
            longitude: ::std::option::Option::None,
            country: ::std::option::Option::None,
            state: ::std::option::Option::None,
            city: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CIPLocationInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CIPLocationInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CIPLocationInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CIPLocationInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgGetIPLocationResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetIPLocationResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgGetIPLocationResponse.infos)
    pub infos: ::std::vec::Vec<CIPLocationInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgGetIPLocationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetIPLocationResponse {
    fn default() -> &'a CGCMsgGetIPLocationResponse {
        <CGCMsgGetIPLocationResponse as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetIPLocationResponse {
    pub fn new() -> CGCMsgGetIPLocationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "infos",
            |m: &CGCMsgGetIPLocationResponse| { &m.infos },
            |m: &mut CGCMsgGetIPLocationResponse| { &mut m.infos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgGetIPLocationResponse>(
            "CGCMsgGetIPLocationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgGetIPLocationResponse {
    const NAME: &'static str = "CGCMsgGetIPLocationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.infos.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.infos {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetIPLocationResponse {
        CGCMsgGetIPLocationResponse::new()
    }

    fn clear(&mut self) {
        self.infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetIPLocationResponse {
        static instance: CGCMsgGetIPLocationResponse = CGCMsgGetIPLocationResponse {
            infos: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgGetIPLocationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgGetIPLocationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgGetIPLocationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgGetIPLocationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EGCPlatform)
pub enum EGCPlatform {
    // @@protoc_insertion_point(enum_value:dota.EGCPlatform.k_eGCPlatform_None)
    k_eGCPlatform_None = 0,
    // @@protoc_insertion_point(enum_value:dota.EGCPlatform.k_eGCPlatform_PC)
    k_eGCPlatform_PC = 1,
    // @@protoc_insertion_point(enum_value:dota.EGCPlatform.k_eGCPlatform_Mac)
    k_eGCPlatform_Mac = 2,
    // @@protoc_insertion_point(enum_value:dota.EGCPlatform.k_eGCPlatform_Linux)
    k_eGCPlatform_Linux = 3,
    // @@protoc_insertion_point(enum_value:dota.EGCPlatform.k_eGCPlatform_Android)
    k_eGCPlatform_Android = 4,
    // @@protoc_insertion_point(enum_value:dota.EGCPlatform.k_eGCPlatform_iOS)
    k_eGCPlatform_iOS = 5,
}

impl ::protobuf::Enum for EGCPlatform {
    const NAME: &'static str = "EGCPlatform";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCPlatform> {
        match value {
            0 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_None),
            1 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_PC),
            2 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Mac),
            3 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Linux),
            4 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Android),
            5 => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_iOS),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCPlatform> {
        match str {
            "k_eGCPlatform_None" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_None),
            "k_eGCPlatform_PC" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_PC),
            "k_eGCPlatform_Mac" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Mac),
            "k_eGCPlatform_Linux" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Linux),
            "k_eGCPlatform_Android" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_Android),
            "k_eGCPlatform_iOS" => ::std::option::Option::Some(EGCPlatform::k_eGCPlatform_iOS),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCPlatform] = &[
        EGCPlatform::k_eGCPlatform_None,
        EGCPlatform::k_eGCPlatform_PC,
        EGCPlatform::k_eGCPlatform_Mac,
        EGCPlatform::k_eGCPlatform_Linux,
        EGCPlatform::k_eGCPlatform_Android,
        EGCPlatform::k_eGCPlatform_iOS,
    ];
}

impl ::protobuf::EnumFull for EGCPlatform {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCPlatform").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EGCPlatform {
    fn default() -> Self {
        EGCPlatform::k_eGCPlatform_None
    }
}

impl EGCPlatform {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCPlatform>("EGCPlatform")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.GCProtoBufMsgSrc)
pub enum GCProtoBufMsgSrc {
    // @@protoc_insertion_point(enum_value:dota.GCProtoBufMsgSrc.GCProtoBufMsgSrc_Unspecified)
    GCProtoBufMsgSrc_Unspecified = 0,
    // @@protoc_insertion_point(enum_value:dota.GCProtoBufMsgSrc.GCProtoBufMsgSrc_FromSystem)
    GCProtoBufMsgSrc_FromSystem = 1,
    // @@protoc_insertion_point(enum_value:dota.GCProtoBufMsgSrc.GCProtoBufMsgSrc_FromSteamID)
    GCProtoBufMsgSrc_FromSteamID = 2,
    // @@protoc_insertion_point(enum_value:dota.GCProtoBufMsgSrc.GCProtoBufMsgSrc_FromGC)
    GCProtoBufMsgSrc_FromGC = 3,
    // @@protoc_insertion_point(enum_value:dota.GCProtoBufMsgSrc.GCProtoBufMsgSrc_ReplySystem)
    GCProtoBufMsgSrc_ReplySystem = 4,
    // @@protoc_insertion_point(enum_value:dota.GCProtoBufMsgSrc.GCProtoBufMsgSrc_SpoofedSteamID)
    GCProtoBufMsgSrc_SpoofedSteamID = 5,
}

impl ::protobuf::Enum for GCProtoBufMsgSrc {
    const NAME: &'static str = "GCProtoBufMsgSrc";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GCProtoBufMsgSrc> {
        match value {
            0 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified),
            1 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSystem),
            2 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSteamID),
            3 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromGC),
            4 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_ReplySystem),
            5 => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_SpoofedSteamID),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<GCProtoBufMsgSrc> {
        match str {
            "GCProtoBufMsgSrc_Unspecified" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified),
            "GCProtoBufMsgSrc_FromSystem" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSystem),
            "GCProtoBufMsgSrc_FromSteamID" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSteamID),
            "GCProtoBufMsgSrc_FromGC" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromGC),
            "GCProtoBufMsgSrc_ReplySystem" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_ReplySystem),
            "GCProtoBufMsgSrc_SpoofedSteamID" => ::std::option::Option::Some(GCProtoBufMsgSrc::GCProtoBufMsgSrc_SpoofedSteamID),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [GCProtoBufMsgSrc] = &[
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSystem,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromSteamID,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_FromGC,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_ReplySystem,
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_SpoofedSteamID,
    ];
}

impl ::protobuf::EnumFull for GCProtoBufMsgSrc {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("GCProtoBufMsgSrc").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for GCProtoBufMsgSrc {
    fn default() -> Self {
        GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified
    }
}

impl GCProtoBufMsgSrc {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<GCProtoBufMsgSrc>("GCProtoBufMsgSrc")
    }
}

/// Extension fields
pub mod exts {

    pub const key_field: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(60000, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const msgpool_soft_limit: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, i32> = ::protobuf::ext::ExtFieldOptional::new(60000, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_INT32);

    pub const msgpool_hard_limit: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, i32> = ::protobuf::ext::ExtFieldOptional::new(60001, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_INT32);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13steammessages.proto\x12\x04dota\x1a\x20google/protobuf/descriptor.\
    proto\"\xae\x03\n\x12CMsgProtoBufHeader\x12&\n\x0fclient_steam_id\x18\
    \x01\x20\x01(\x06R\rclientSteamId\x12*\n\x11client_session_id\x18\x02\
    \x20\x01(\x05R\x0fclientSessionId\x12\"\n\rsource_app_id\x18\x03\x20\x01\
    (\rR\x0bsourceAppId\x12\"\n\rjob_id_source\x18\n\x20\x01(\x06R\x0bjobIdS\
    ource\x12\"\n\rjob_id_target\x18\x0b\x20\x01(\x06R\x0bjobIdTarget\x12&\n\
    \x0ftarget_job_name\x18\x0c\x20\x01(\tR\rtargetJobName\x12\x18\n\x07eres\
    ult\x18\r\x20\x01(\x05R\x07eresult\x12#\n\rerror_message\x18\x0e\x20\x01\
    (\tR\x0cerrorMessage\x125\n\ngc_msg_src\x18\xc8\x01\x20\x01(\x0e2\x16.do\
    ta.GCProtoBufMsgSrcR\x08gcMsgSrc\x12.\n\x13gc_dir_index_source\x18\xc9\
    \x01\x20\x01(\x05R\x10gcDirIndexSource:\n\x80\xa6\x1d\x80\x02\x88\xa6\
    \x1d\x80\x08\"\\\n\x1eCGCSystemMsg_GetAccountDetails\x12\x18\n\x07steami\
    d\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05appid\x18\x02\x20\x01(\r\
    R\x05appid:\n\x80\xa6\x1d\x80\x01\x88\xa6\x1d\x80\x04\"\xf2\x0c\n'CGCSys\
    temMsg_GetAccountDetails_Response\x12-\n\x12eresult_deprecated\x18\x01\
    \x20\x01(\rR\x11eresultDeprecated\x12!\n\x0caccount_name\x18\x02\x20\x01\
    (\tR\x0baccountName\x12!\n\x0cpersona_name\x18\x03\x20\x01(\tR\x0bperson\
    aName\x12,\n\x12is_profile_created\x18\x1a\x20\x01(\x08R\x10isProfileCre\
    ated\x12*\n\x11is_profile_public\x18\x04\x20\x01(\x08R\x0fisProfilePubli\
    c\x12.\n\x13is_inventory_public\x18\x05\x20\x01(\x08R\x11isInventoryPubl\
    ic\x12\"\n\ris_vac_banned\x18\x07\x20\x01(\x08R\x0bisVacBanned\x12\"\n\r\
    is_cyber_cafe\x18\x08\x20\x01(\x08R\x0bisCyberCafe\x12*\n\x11is_school_a\
    ccount\x18\t\x20\x01(\x08R\x0fisSchoolAccount\x12\x1d\n\nis_limited\x18\
    \n\x20\x01(\x08R\tisLimited\x12#\n\ris_subscribed\x18\x0b\x20\x01(\x08R\
    \x0cisSubscribed\x12\x18\n\x07package\x18\x0c\x20\x01(\rR\x07package\x12\
    1\n\x15is_free_trial_account\x18\r\x20\x01(\x08R\x12isFreeTrialAccount\
    \x122\n\x15free_trial_expiration\x18\x0e\x20\x01(\rR\x13freeTrialExpirat\
    ion\x12&\n\x0fis_low_violence\x18\x0f\x20\x01(\x08R\risLowViolence\x123\
    \n\x16is_account_locked_down\x18\x10\x20\x01(\x08R\x13isAccountLockedDow\
    n\x12.\n\x13is_community_banned\x18\x11\x20\x01(\x08R\x11isCommunityBann\
    ed\x12&\n\x0fis_trade_banned\x18\x12\x20\x01(\x08R\risTradeBanned\x120\n\
    \x14trade_ban_expiration\x18\x13\x20\x01(\rR\x12tradeBanExpiration\x12\
    \x1c\n\taccountid\x18\x14\x20\x01(\rR\taccountid\x12.\n\x13suspension_en\
    d_time\x18\x15\x20\x01(\rR\x11suspensionEndTime\x12\x1a\n\x08currency\
    \x18\x16\x20\x01(\tR\x08currency\x12\x1f\n\x0bsteam_level\x18\x17\x20\
    \x01(\rR\nsteamLevel\x12!\n\x0cfriend_count\x18\x18\x20\x01(\rR\x0bfrien\
    dCount\x122\n\x15account_creation_time\x18\x19\x20\x01(\rR\x13accountCre\
    ationTime\x122\n\x15is_steamguard_enabled\x18\x1b\x20\x01(\x08R\x13isSte\
    amguardEnabled\x12*\n\x11is_phone_verified\x18\x1c\x20\x01(\x08R\x0fisPh\
    oneVerified\x12:\n\x1ais_two_factor_auth_enabled\x18\x1d\x20\x01(\x08R\
    \x16isTwoFactorAuthEnabled\x125\n\x17two_factor_enabled_time\x18\x1e\x20\
    \x01(\rR\x14twoFactorEnabledTime\x126\n\x17phone_verification_time\x18\
    \x1f\x20\x01(\rR\x15phoneVerificationTime\x12\x19\n\x08phone_id\x18!\x20\
    \x01(\x04R\x07phoneId\x120\n\x14is_phone_identifying\x18\"\x20\x01(\x08R\
    \x12isPhoneIdentifying\x12,\n\x12rt_identity_linked\x18#\x20\x01(\rR\x10\
    rtIdentityLinked\x12\"\n\rrt_birth_date\x18$\x20\x01(\rR\x0brtBirthDate\
    \x12(\n\x10txn_country_code\x18%\x20\x01(\tR\x0etxnCountryCode\x123\n\
    \x16has_accepted_china_ssa\x18&\x20\x01(\x08R\x13hasAcceptedChinaSsa\x12\
    1\n\x15is_banned_steam_china\x18'\x20\x01(\x08R\x12isBannedSteamChina:\n\
    \x80\xa6\x1d\x80\x01\x88\xa6\x1d\x80\x04\"\x9f\x01\n\x0fCIPLocationInfo\
    \x12\x0e\n\x02ip\x18\x01\x20\x01(\rR\x02ip\x12\x1a\n\x08latitude\x18\x02\
    \x20\x01(\x02R\x08latitude\x12\x1c\n\tlongitude\x18\x03\x20\x01(\x02R\tl\
    ongitude\x12\x18\n\x07country\x18\x04\x20\x01(\tR\x07country\x12\x14\n\
    \x05state\x18\x05\x20\x01(\tR\x05state\x12\x12\n\x04city\x18\x06\x20\x01\
    (\tR\x04city\"J\n\x1bCGCMsgGetIPLocationResponse\x12+\n\x05infos\x18\x01\
    \x20\x03(\x0b2\x15.dota.CIPLocationInfoR\x05infos*\x9d\x01\n\x0bEGCPlatf\
    orm\x12\x16\n\x12k_eGCPlatform_None\x10\0\x12\x14\n\x10k_eGCPlatform_PC\
    \x10\x01\x12\x15\n\x11k_eGCPlatform_Mac\x10\x02\x12\x17\n\x13k_eGCPlatfo\
    rm_Linux\x10\x03\x12\x19\n\x15k_eGCPlatform_Android\x10\x04\x12\x15\n\
    \x11k_eGCPlatform_iOS\x10\x05*\xdb\x01\n\x10GCProtoBufMsgSrc\x12\x20\n\
    \x1cGCProtoBufMsgSrc_Unspecified\x10\0\x12\x1f\n\x1bGCProtoBufMsgSrc_Fro\
    mSystem\x10\x01\x12\x20\n\x1cGCProtoBufMsgSrc_FromSteamID\x10\x02\x12\
    \x1b\n\x17GCProtoBufMsgSrc_FromGC\x10\x03\x12\x20\n\x1cGCProtoBufMsgSrc_\
    ReplySystem\x10\x04\x12#\n\x1fGCProtoBufMsgSrc_SpoofedSteamID\x10\x05:<\
    \n\tkey_field\x18\xe0\xd4\x03\x20\x01(\x08\x12\x1d.google.protobuf.Field\
    OptionsR\x08keyField:O\n\x12msgpool_soft_limit\x18\xe0\xd4\x03\x20\x01(\
    \x05\x12\x1f.google.protobuf.MessageOptionsR\x10msgpoolSoftLimit:O\n\x12\
    msgpool_hard_limit\x18\xe1\xd4\x03\x20\x01(\x05\x12\x1f.google.protobuf.\
    MessageOptionsR\x10msgpoolHardLimitB%Z#github.com/dotabuff/manta/dota;do\
    taJ\xf5&\n\x06\x12\x04\0\0p\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x03\0:\n\t\n\x02\
    \x08\x0b\x12\x03\x03\0:\n\t\n\x02\x03\0\x12\x03\x05\x07)\n\t\n\x01\x07\
    \x12\x04\x07\0\t\x01\n\t\n\x02\x07\0\x12\x03\x08\x08(\n\n\n\x03\x07\0\
    \x02\x12\x03\x07\x07#\n\n\n\x03\x07\0\x04\x12\x03\x08\x08\x10\n\n\n\x03\
    \x07\0\x05\x12\x03\x08\x11\x15\n\n\n\x03\x07\0\x01\x12\x03\x08\x16\x1f\n\
    \n\n\x03\x07\0\x03\x12\x03\x08\"'\n\t\n\x01\x07\x12\x04\x0b\0\x0e\x01\n\
    \t\n\x02\x07\x01\x12\x03\x0c\x082\n\n\n\x03\x07\x01\x02\x12\x03\x0b\x07%\
    \n\n\n\x03\x07\x01\x04\x12\x03\x0c\x08\x10\n\n\n\x03\x07\x01\x05\x12\x03\
    \x0c\x11\x16\n\n\n\x03\x07\x01\x01\x12\x03\x0c\x17)\n\n\n\x03\x07\x01\
    \x03\x12\x03\x0c,1\n\t\n\x02\x07\x02\x12\x03\r\x082\n\n\n\x03\x07\x02\
    \x02\x12\x03\x0b\x07%\n\n\n\x03\x07\x02\x04\x12\x03\r\x08\x10\n\n\n\x03\
    \x07\x02\x05\x12\x03\r\x11\x16\n\n\n\x03\x07\x02\x01\x12\x03\r\x17)\n\n\
    \n\x03\x07\x02\x03\x12\x03\r,1\n\n\n\x02\x05\0\x12\x04\x10\0\x17\x01\n\n\
    \n\x03\x05\0\x01\x12\x03\x10\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03\x11\
    \x08\x1f\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x11\x08\x1a\n\x0c\n\x05\x05\
    \0\x02\0\x02\x12\x03\x11\x1d\x1e\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x12\
    \x08\x1d\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x12\x08\x18\n\x0c\n\x05\
    \x05\0\x02\x01\x02\x12\x03\x12\x1b\x1c\n\x0b\n\x04\x05\0\x02\x02\x12\x03\
    \x13\x08\x1e\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x13\x08\x19\n\x0c\n\
    \x05\x05\0\x02\x02\x02\x12\x03\x13\x1c\x1d\n\x0b\n\x04\x05\0\x02\x03\x12\
    \x03\x14\x08\x20\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x14\x08\x1b\n\x0c\
    \n\x05\x05\0\x02\x03\x02\x12\x03\x14\x1e\x1f\n\x0b\n\x04\x05\0\x02\x04\
    \x12\x03\x15\x08\"\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x15\x08\x1d\n\
    \x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x15\x20!\n\x0b\n\x04\x05\0\x02\x05\
    \x12\x03\x16\x08\x1e\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x16\x08\x19\n\
    \x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x16\x1c\x1d\n\n\n\x02\x05\x01\x12\
    \x04\x19\0\x20\x01\n\n\n\x03\x05\x01\x01\x12\x03\x19\x05\x15\n\x0b\n\x04\
    \x05\x01\x02\0\x12\x03\x1a\x08)\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\
    \x1a\x08$\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x1a'(\n\x0b\n\x04\x05\
    \x01\x02\x01\x12\x03\x1b\x08(\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\
    \x1b\x08#\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x1b&'\n\x0b\n\x04\x05\
    \x01\x02\x02\x12\x03\x1c\x08)\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\
    \x1c\x08$\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x1c'(\n\x0b\n\x04\x05\
    \x01\x02\x03\x12\x03\x1d\x08$\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\
    \x1d\x08\x1f\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x1d\"#\n\x0b\n\x04\
    \x05\x01\x02\x04\x12\x03\x1e\x08)\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\
    \x03\x1e\x08$\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x1e'(\n\x0b\n\x04\
    \x05\x01\x02\x05\x12\x03\x1f\x08,\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\
    \x03\x1f\x08'\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03\x1f*+\n\n\n\x02\
    \x04\0\x12\x04\"\00\x01\n\n\n\x03\x04\0\x01\x12\x03\"\x08\x1a\n\n\n\x03\
    \x04\0\x07\x12\x03#\x08*\n\r\n\x06\x04\0\x07\xe0\xd4\x03\x12\x03#\x08*\n\
    \n\n\x03\x04\0\x07\x12\x03$\x08+\n\r\n\x06\x04\0\x07\xe1\xd4\x03\x12\x03\
    $\x08+\n\x0b\n\x04\x04\0\x02\0\x12\x03&\x08-\n\x0c\n\x05\x04\0\x02\0\x04\
    \x12\x03&\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03&\x11\x18\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03&\x19(\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03&+\
    ,\n\x0b\n\x04\x04\0\x02\x01\x12\x03'\x08-\n\x0c\n\x05\x04\0\x02\x01\x04\
    \x12\x03'\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03'\x11\x16\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03'\x17(\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03'+,\n\x0b\n\x04\x04\0\x02\x02\x12\x03(\x08*\n\x0c\n\x05\x04\0\x02\
    \x02\x04\x12\x03(\x08\x10\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03(\x11\x17\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03(\x18%\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03(()\n\x0b\n\x04\x04\0\x02\x03\x12\x03)\x08,\n\x0c\n\x05\x04\
    \0\x02\x03\x04\x12\x03)\x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03)\
    \x11\x18\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03)\x19&\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03))+\n\x0b\n\x04\x04\0\x02\x04\x12\x03*\x08,\n\x0c\n\
    \x05\x04\0\x02\x04\x04\x12\x03*\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x05\
    \x12\x03*\x11\x18\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03*\x19&\n\x0c\n\
    \x05\x04\0\x02\x04\x03\x12\x03*)+\n\x0b\n\x04\x04\0\x02\x05\x12\x03+\x08\
    -\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03+\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x05\x05\x12\x03+\x11\x17\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03+\x18'\n\
    \x0c\n\x05\x04\0\x02\x05\x03\x12\x03+*,\n\x0b\n\x04\x04\0\x02\x06\x12\
    \x03,\x08$\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03,\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x06\x05\x12\x03,\x11\x16\n\x0c\n\x05\x04\0\x02\x06\x01\x12\
    \x03,\x17\x1e\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03,!#\n\x0b\n\x04\x04\0\
    \x02\x07\x12\x03-\x08+\n\x0c\n\x05\x04\0\x02\x07\x04\x12\x03-\x08\x10\n\
    \x0c\n\x05\x04\0\x02\x07\x05\x12\x03-\x11\x17\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03-\x18%\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03-(*\n\x0b\n\x04\
    \x04\0\x02\x08\x12\x03.\x083\n\x0c\n\x05\x04\0\x02\x08\x04\x12\x03.\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03.\x11!\n\x0c\n\x05\x04\0\x02\
    \x08\x01\x12\x03.\",\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03./2\n\x0b\n\
    \x04\x04\0\x02\t\x12\x03/\x081\n\x0c\n\x05\x04\0\x02\t\x04\x12\x03/\x08\
    \x10\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03/\x11\x16\n\x0c\n\x05\x04\0\x02\
    \t\x01\x12\x03/\x17*\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03/-0\n\n\n\x02\
    \x04\x01\x12\x042\08\x01\n\n\n\x03\x04\x01\x01\x12\x032\x08&\n\n\n\x03\
    \x04\x01\x07\x12\x033\x08*\n\r\n\x06\x04\x01\x07\xe0\xd4\x03\x12\x033\
    \x08*\n\n\n\x03\x04\x01\x07\x12\x034\x08*\n\r\n\x06\x04\x01\x07\xe1\xd4\
    \x03\x12\x034\x08*\n\x0b\n\x04\x04\x01\x02\0\x12\x036\x08%\n\x0c\n\x05\
    \x04\x01\x02\0\x04\x12\x036\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x036\x11\x18\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x036\x19\x20\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x036#$\n\x0b\n\x04\x04\x01\x02\x01\x12\x037\x08\"\
    \n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x037\x08\x10\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x037\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x037\
    \x18\x1d\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x037\x20!\n\n\n\x02\x04\x02\
    \x12\x04:\0c\x01\n\n\n\x03\x04\x02\x01\x12\x03:\x08/\n\n\n\x03\x04\x02\
    \x07\x12\x03;\x08*\n\r\n\x06\x04\x02\x07\xe0\xd4\x03\x12\x03;\x08*\n\n\n\
    \x03\x04\x02\x07\x12\x03<\x08*\n\r\n\x06\x04\x02\x07\xe1\xd4\x03\x12\x03\
    <\x08*\n\x0b\n\x04\x04\x02\x02\0\x12\x03>\x08/\n\x0c\n\x05\x04\x02\x02\0\
    \x04\x12\x03>\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03>\x11\x17\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03>\x18*\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03>-.\n\x0b\n\x04\x04\x02\x02\x01\x12\x03?\x08)\n\x0c\n\x05\x04\
    \x02\x02\x01\x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03?\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03?\x18$\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03?'(\n\x0b\n\x04\x04\x02\x02\x02\x12\x03@\x08\
    )\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03@\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x02\x05\x12\x03@\x11\x17\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03@\
    \x18$\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03@'(\n\x0b\n\x04\x04\x02\x02\
    \x03\x12\x03A\x08.\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03A\x08\x10\n\
    \x0c\n\x05\x04\x02\x02\x03\x05\x12\x03A\x11\x15\n\x0c\n\x05\x04\x02\x02\
    \x03\x01\x12\x03A\x16(\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03A+-\n\x0b\
    \n\x04\x04\x02\x02\x04\x12\x03B\x08,\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\
    \x03B\x08\x10\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03B\x11\x15\n\x0c\n\
    \x05\x04\x02\x02\x04\x01\x12\x03B\x16'\n\x0c\n\x05\x04\x02\x02\x04\x03\
    \x12\x03B*+\n\x0b\n\x04\x04\x02\x02\x05\x12\x03C\x08.\n\x0c\n\x05\x04\
    \x02\x02\x05\x04\x12\x03C\x08\x10\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\
    \x03C\x11\x15\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03C\x16)\n\x0c\n\x05\
    \x04\x02\x02\x05\x03\x12\x03C,-\n\x0b\n\x04\x04\x02\x02\x06\x12\x03D\x08\
    (\n\x0c\n\x05\x04\x02\x02\x06\x04\x12\x03D\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x06\x05\x12\x03D\x11\x15\n\x0c\n\x05\x04\x02\x02\x06\x01\x12\x03D\
    \x16#\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03D&'\n\x0b\n\x04\x04\x02\x02\
    \x07\x12\x03E\x08(\n\x0c\n\x05\x04\x02\x02\x07\x04\x12\x03E\x08\x10\n\
    \x0c\n\x05\x04\x02\x02\x07\x05\x12\x03E\x11\x15\n\x0c\n\x05\x04\x02\x02\
    \x07\x01\x12\x03E\x16#\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03E&'\n\x0b\
    \n\x04\x04\x02\x02\x08\x12\x03F\x08,\n\x0c\n\x05\x04\x02\x02\x08\x04\x12\
    \x03F\x08\x10\n\x0c\n\x05\x04\x02\x02\x08\x05\x12\x03F\x11\x15\n\x0c\n\
    \x05\x04\x02\x02\x08\x01\x12\x03F\x16'\n\x0c\n\x05\x04\x02\x02\x08\x03\
    \x12\x03F*+\n\x0b\n\x04\x04\x02\x02\t\x12\x03G\x08&\n\x0c\n\x05\x04\x02\
    \x02\t\x04\x12\x03G\x08\x10\n\x0c\n\x05\x04\x02\x02\t\x05\x12\x03G\x11\
    \x15\n\x0c\n\x05\x04\x02\x02\t\x01\x12\x03G\x16\x20\n\x0c\n\x05\x04\x02\
    \x02\t\x03\x12\x03G#%\n\x0b\n\x04\x04\x02\x02\n\x12\x03H\x08)\n\x0c\n\
    \x05\x04\x02\x02\n\x04\x12\x03H\x08\x10\n\x0c\n\x05\x04\x02\x02\n\x05\
    \x12\x03H\x11\x15\n\x0c\n\x05\x04\x02\x02\n\x01\x12\x03H\x16#\n\x0c\n\
    \x05\x04\x02\x02\n\x03\x12\x03H&(\n\x0b\n\x04\x04\x02\x02\x0b\x12\x03I\
    \x08%\n\x0c\n\x05\x04\x02\x02\x0b\x04\x12\x03I\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x0b\x05\x12\x03I\x11\x17\n\x0c\n\x05\x04\x02\x02\x0b\x01\x12\
    \x03I\x18\x1f\n\x0c\n\x05\x04\x02\x02\x0b\x03\x12\x03I\"$\n\x0b\n\x04\
    \x04\x02\x02\x0c\x12\x03J\x081\n\x0c\n\x05\x04\x02\x02\x0c\x04\x12\x03J\
    \x08\x10\n\x0c\n\x05\x04\x02\x02\x0c\x05\x12\x03J\x11\x15\n\x0c\n\x05\
    \x04\x02\x02\x0c\x01\x12\x03J\x16+\n\x0c\n\x05\x04\x02\x02\x0c\x03\x12\
    \x03J.0\n\x0b\n\x04\x04\x02\x02\r\x12\x03K\x083\n\x0c\n\x05\x04\x02\x02\
    \r\x04\x12\x03K\x08\x10\n\x0c\n\x05\x04\x02\x02\r\x05\x12\x03K\x11\x17\n\
    \x0c\n\x05\x04\x02\x02\r\x01\x12\x03K\x18-\n\x0c\n\x05\x04\x02\x02\r\x03\
    \x12\x03K02\n\x0b\n\x04\x04\x02\x02\x0e\x12\x03L\x08+\n\x0c\n\x05\x04\
    \x02\x02\x0e\x04\x12\x03L\x08\x10\n\x0c\n\x05\x04\x02\x02\x0e\x05\x12\
    \x03L\x11\x15\n\x0c\n\x05\x04\x02\x02\x0e\x01\x12\x03L\x16%\n\x0c\n\x05\
    \x04\x02\x02\x0e\x03\x12\x03L(*\n\x0b\n\x04\x04\x02\x02\x0f\x12\x03M\x08\
    2\n\x0c\n\x05\x04\x02\x02\x0f\x04\x12\x03M\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x0f\x05\x12\x03M\x11\x15\n\x0c\n\x05\x04\x02\x02\x0f\x01\x12\x03M\
    \x16,\n\x0c\n\x05\x04\x02\x02\x0f\x03\x12\x03M/1\n\x0b\n\x04\x04\x02\x02\
    \x10\x12\x03N\x08/\n\x0c\n\x05\x04\x02\x02\x10\x04\x12\x03N\x08\x10\n\
    \x0c\n\x05\x04\x02\x02\x10\x05\x12\x03N\x11\x15\n\x0c\n\x05\x04\x02\x02\
    \x10\x01\x12\x03N\x16)\n\x0c\n\x05\x04\x02\x02\x10\x03\x12\x03N,.\n\x0b\
    \n\x04\x04\x02\x02\x11\x12\x03O\x08+\n\x0c\n\x05\x04\x02\x02\x11\x04\x12\
    \x03O\x08\x10\n\x0c\n\x05\x04\x02\x02\x11\x05\x12\x03O\x11\x15\n\x0c\n\
    \x05\x04\x02\x02\x11\x01\x12\x03O\x16%\n\x0c\n\x05\x04\x02\x02\x11\x03\
    \x12\x03O(*\n\x0b\n\x04\x04\x02\x02\x12\x12\x03P\x082\n\x0c\n\x05\x04\
    \x02\x02\x12\x04\x12\x03P\x08\x10\n\x0c\n\x05\x04\x02\x02\x12\x05\x12\
    \x03P\x11\x17\n\x0c\n\x05\x04\x02\x02\x12\x01\x12\x03P\x18,\n\x0c\n\x05\
    \x04\x02\x02\x12\x03\x12\x03P/1\n\x0b\n\x04\x04\x02\x02\x13\x12\x03Q\x08\
    '\n\x0c\n\x05\x04\x02\x02\x13\x04\x12\x03Q\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x13\x05\x12\x03Q\x11\x17\n\x0c\n\x05\x04\x02\x02\x13\x01\x12\x03Q\
    \x18!\n\x0c\n\x05\x04\x02\x02\x13\x03\x12\x03Q$&\n\x0b\n\x04\x04\x02\x02\
    \x14\x12\x03R\x081\n\x0c\n\x05\x04\x02\x02\x14\x04\x12\x03R\x08\x10\n\
    \x0c\n\x05\x04\x02\x02\x14\x05\x12\x03R\x11\x17\n\x0c\n\x05\x04\x02\x02\
    \x14\x01\x12\x03R\x18+\n\x0c\n\x05\x04\x02\x02\x14\x03\x12\x03R.0\n\x0b\
    \n\x04\x04\x02\x02\x15\x12\x03S\x08&\n\x0c\n\x05\x04\x02\x02\x15\x04\x12\
    \x03S\x08\x10\n\x0c\n\x05\x04\x02\x02\x15\x05\x12\x03S\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\x15\x01\x12\x03S\x18\x20\n\x0c\n\x05\x04\x02\x02\x15\
    \x03\x12\x03S#%\n\x0b\n\x04\x04\x02\x02\x16\x12\x03T\x08)\n\x0c\n\x05\
    \x04\x02\x02\x16\x04\x12\x03T\x08\x10\n\x0c\n\x05\x04\x02\x02\x16\x05\
    \x12\x03T\x11\x17\n\x0c\n\x05\x04\x02\x02\x16\x01\x12\x03T\x18#\n\x0c\n\
    \x05\x04\x02\x02\x16\x03\x12\x03T&(\n\x0b\n\x04\x04\x02\x02\x17\x12\x03U\
    \x08*\n\x0c\n\x05\x04\x02\x02\x17\x04\x12\x03U\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x17\x05\x12\x03U\x11\x17\n\x0c\n\x05\x04\x02\x02\x17\x01\x12\
    \x03U\x18$\n\x0c\n\x05\x04\x02\x02\x17\x03\x12\x03U')\n\x0b\n\x04\x04\
    \x02\x02\x18\x12\x03V\x083\n\x0c\n\x05\x04\x02\x02\x18\x04\x12\x03V\x08\
    \x10\n\x0c\n\x05\x04\x02\x02\x18\x05\x12\x03V\x11\x17\n\x0c\n\x05\x04\
    \x02\x02\x18\x01\x12\x03V\x18-\n\x0c\n\x05\x04\x02\x02\x18\x03\x12\x03V0\
    2\n\x0b\n\x04\x04\x02\x02\x19\x12\x03W\x081\n\x0c\n\x05\x04\x02\x02\x19\
    \x04\x12\x03W\x08\x10\n\x0c\n\x05\x04\x02\x02\x19\x05\x12\x03W\x11\x15\n\
    \x0c\n\x05\x04\x02\x02\x19\x01\x12\x03W\x16+\n\x0c\n\x05\x04\x02\x02\x19\
    \x03\x12\x03W.0\n\x0b\n\x04\x04\x02\x02\x1a\x12\x03X\x08-\n\x0c\n\x05\
    \x04\x02\x02\x1a\x04\x12\x03X\x08\x10\n\x0c\n\x05\x04\x02\x02\x1a\x05\
    \x12\x03X\x11\x15\n\x0c\n\x05\x04\x02\x02\x1a\x01\x12\x03X\x16'\n\x0c\n\
    \x05\x04\x02\x02\x1a\x03\x12\x03X*,\n\x0b\n\x04\x04\x02\x02\x1b\x12\x03Y\
    \x086\n\x0c\n\x05\x04\x02\x02\x1b\x04\x12\x03Y\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x1b\x05\x12\x03Y\x11\x15\n\x0c\n\x05\x04\x02\x02\x1b\x01\x12\
    \x03Y\x160\n\x0c\n\x05\x04\x02\x02\x1b\x03\x12\x03Y35\n\x0b\n\x04\x04\
    \x02\x02\x1c\x12\x03Z\x085\n\x0c\n\x05\x04\x02\x02\x1c\x04\x12\x03Z\x08\
    \x10\n\x0c\n\x05\x04\x02\x02\x1c\x05\x12\x03Z\x11\x17\n\x0c\n\x05\x04\
    \x02\x02\x1c\x01\x12\x03Z\x18/\n\x0c\n\x05\x04\x02\x02\x1c\x03\x12\x03Z2\
    4\n\x0b\n\x04\x04\x02\x02\x1d\x12\x03[\x085\n\x0c\n\x05\x04\x02\x02\x1d\
    \x04\x12\x03[\x08\x10\n\x0c\n\x05\x04\x02\x02\x1d\x05\x12\x03[\x11\x17\n\
    \x0c\n\x05\x04\x02\x02\x1d\x01\x12\x03[\x18/\n\x0c\n\x05\x04\x02\x02\x1d\
    \x03\x12\x03[24\n\x0b\n\x04\x04\x02\x02\x1e\x12\x03\\\x08&\n\x0c\n\x05\
    \x04\x02\x02\x1e\x04\x12\x03\\\x08\x10\n\x0c\n\x05\x04\x02\x02\x1e\x05\
    \x12\x03\\\x11\x17\n\x0c\n\x05\x04\x02\x02\x1e\x01\x12\x03\\\x18\x20\n\
    \x0c\n\x05\x04\x02\x02\x1e\x03\x12\x03\\#%\n\x0b\n\x04\x04\x02\x02\x1f\
    \x12\x03]\x080\n\x0c\n\x05\x04\x02\x02\x1f\x04\x12\x03]\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x1f\x05\x12\x03]\x11\x15\n\x0c\n\x05\x04\x02\x02\x1f\
    \x01\x12\x03]\x16*\n\x0c\n\x05\x04\x02\x02\x1f\x03\x12\x03]-/\n\x0b\n\
    \x04\x04\x02\x02\x20\x12\x03^\x080\n\x0c\n\x05\x04\x02\x02\x20\x04\x12\
    \x03^\x08\x10\n\x0c\n\x05\x04\x02\x02\x20\x05\x12\x03^\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\x20\x01\x12\x03^\x18*\n\x0c\n\x05\x04\x02\x02\x20\x03\
    \x12\x03^-/\n\x0b\n\x04\x04\x02\x02!\x12\x03_\x08+\n\x0c\n\x05\x04\x02\
    \x02!\x04\x12\x03_\x08\x10\n\x0c\n\x05\x04\x02\x02!\x05\x12\x03_\x11\x17\
    \n\x0c\n\x05\x04\x02\x02!\x01\x12\x03_\x18%\n\x0c\n\x05\x04\x02\x02!\x03\
    \x12\x03_(*\n\x0b\n\x04\x04\x02\x02\"\x12\x03`\x08.\n\x0c\n\x05\x04\x02\
    \x02\"\x04\x12\x03`\x08\x10\n\x0c\n\x05\x04\x02\x02\"\x05\x12\x03`\x11\
    \x17\n\x0c\n\x05\x04\x02\x02\"\x01\x12\x03`\x18(\n\x0c\n\x05\x04\x02\x02\
    \"\x03\x12\x03`+-\n\x0b\n\x04\x04\x02\x02#\x12\x03a\x082\n\x0c\n\x05\x04\
    \x02\x02#\x04\x12\x03a\x08\x10\n\x0c\n\x05\x04\x02\x02#\x05\x12\x03a\x11\
    \x15\n\x0c\n\x05\x04\x02\x02#\x01\x12\x03a\x16,\n\x0c\n\x05\x04\x02\x02#\
    \x03\x12\x03a/1\n\x0b\n\x04\x04\x02\x02$\x12\x03b\x081\n\x0c\n\x05\x04\
    \x02\x02$\x04\x12\x03b\x08\x10\n\x0c\n\x05\x04\x02\x02$\x05\x12\x03b\x11\
    \x15\n\x0c\n\x05\x04\x02\x02$\x01\x12\x03b\x16+\n\x0c\n\x05\x04\x02\x02$\
    \x03\x12\x03b.0\n\n\n\x02\x04\x03\x12\x04e\0l\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03e\x08\x17\n\x0b\n\x04\x04\x03\x02\0\x12\x03f\x08\x1f\n\x0c\n\x05\
    \x04\x03\x02\0\x04\x12\x03f\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03f\x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03f\x18\x1a\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03f\x1d\x1e\n\x0b\n\x04\x04\x03\x02\x01\x12\x03g\
    \x08$\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03g\x08\x10\n\x0c\n\x05\x04\
    \x03\x02\x01\x05\x12\x03g\x11\x16\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03g\x17\x1f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03g\"#\n\x0b\n\x04\
    \x04\x03\x02\x02\x12\x03h\x08%\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03h\
    \x08\x10\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03h\x11\x16\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x03h\x17\x20\n\x0c\n\x05\x04\x03\x02\x02\x03\
    \x12\x03h#$\n\x0b\n\x04\x04\x03\x02\x03\x12\x03i\x08$\n\x0c\n\x05\x04\
    \x03\x02\x03\x04\x12\x03i\x08\x10\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\
    \x03i\x11\x17\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03i\x18\x1f\n\x0c\n\
    \x05\x04\x03\x02\x03\x03\x12\x03i\"#\n\x0b\n\x04\x04\x03\x02\x04\x12\x03\
    j\x08\"\n\x0c\n\x05\x04\x03\x02\x04\x04\x12\x03j\x08\x10\n\x0c\n\x05\x04\
    \x03\x02\x04\x05\x12\x03j\x11\x17\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\
    \x03j\x18\x1d\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03j\x20!\n\x0b\n\x04\
    \x04\x03\x02\x05\x12\x03k\x08!\n\x0c\n\x05\x04\x03\x02\x05\x04\x12\x03k\
    \x08\x10\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03k\x11\x17\n\x0c\n\x05\
    \x04\x03\x02\x05\x01\x12\x03k\x18\x1c\n\x0c\n\x05\x04\x03\x02\x05\x03\
    \x12\x03k\x1f\x20\n\n\n\x02\x04\x04\x12\x04n\0p\x01\n\n\n\x03\x04\x04\
    \x01\x12\x03n\x08#\n\x0b\n\x04\x04\x04\x02\0\x12\x03o\x08+\n\x0c\n\x05\
    \x04\x04\x02\0\x04\x12\x03o\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x06\x12\
    \x03o\x11\x20\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03o!&\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x03o)*\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(CMsgProtoBufHeader::generated_message_descriptor_data());
            messages.push(CGCSystemMsg_GetAccountDetails::generated_message_descriptor_data());
            messages.push(CGCSystemMsg_GetAccountDetails_Response::generated_message_descriptor_data());
            messages.push(CIPLocationInfo::generated_message_descriptor_data());
            messages.push(CGCMsgGetIPLocationResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(EGCPlatform::generated_enum_descriptor_data());
            enums.push(GCProtoBufMsgSrc::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
