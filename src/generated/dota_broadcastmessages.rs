// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_broadcastmessages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CDOTABroadcastMsg)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTABroadcastMsg {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<EDotaBroadcastMessages>>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg.msg)
    pub msg: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTABroadcastMsg.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTABroadcastMsg {
    fn default() -> &'a CDOTABroadcastMsg {
        <CDOTABroadcastMsg as ::protobuf::Message>::default_instance()
    }
}

impl CDOTABroadcastMsg {
    pub fn new() -> CDOTABroadcastMsg {
        ::std::default::Default::default()
    }

    // required .dota.EDotaBroadcastMessages type = 1;

    pub fn type_(&self) -> EDotaBroadcastMessages {
        match self.type_ {
            Some(e) => e.enum_value_or(EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest),
            None => EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: EDotaBroadcastMessages) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bytes msg = 2;

    pub fn msg(&self) -> &[u8] {
        match self.msg.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_msg(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_msg(&self) -> bool {
        self.msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.msg = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.msg.is_none() {
            self.msg = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::vec::Vec<u8> {
        self.msg.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CDOTABroadcastMsg| { &m.type_ },
            |m: &mut CDOTABroadcastMsg| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "msg",
            |m: &CDOTABroadcastMsg| { &m.msg },
            |m: &mut CDOTABroadcastMsg| { &mut m.msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTABroadcastMsg>(
            "CDOTABroadcastMsg",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTABroadcastMsg {
    const NAME: &'static str = "CDOTABroadcastMsg";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.msg = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.msg.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.msg.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTABroadcastMsg {
        CDOTABroadcastMsg::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTABroadcastMsg {
        static instance: CDOTABroadcastMsg = CDOTABroadcastMsg {
            type_: ::std::option::Option::None,
            msg: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTABroadcastMsg {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTABroadcastMsg").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTABroadcastMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTABroadcastMsg {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTABroadcastMsg_LANLobbyRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTABroadcastMsg_LANLobbyRequest {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTABroadcastMsg_LANLobbyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTABroadcastMsg_LANLobbyRequest {
    fn default() -> &'a CDOTABroadcastMsg_LANLobbyRequest {
        <CDOTABroadcastMsg_LANLobbyRequest as ::protobuf::Message>::default_instance()
    }
}

impl CDOTABroadcastMsg_LANLobbyRequest {
    pub fn new() -> CDOTABroadcastMsg_LANLobbyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTABroadcastMsg_LANLobbyRequest>(
            "CDOTABroadcastMsg_LANLobbyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTABroadcastMsg_LANLobbyRequest {
    const NAME: &'static str = "CDOTABroadcastMsg_LANLobbyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTABroadcastMsg_LANLobbyRequest {
        CDOTABroadcastMsg_LANLobbyRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTABroadcastMsg_LANLobbyRequest {
        static instance: CDOTABroadcastMsg_LANLobbyRequest = CDOTABroadcastMsg_LANLobbyRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTABroadcastMsg_LANLobbyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTABroadcastMsg_LANLobbyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTABroadcastMsg_LANLobbyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTABroadcastMsg_LANLobbyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTABroadcastMsg_LANLobbyReply)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTABroadcastMsg_LANLobbyReply {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.id)
    pub id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.tournament_id)
    pub tournament_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.tournament_game_id)
    pub tournament_game_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.members)
    pub members: ::std::vec::Vec<cdotabroadcast_msg_lanlobby_reply::CLobbyMember>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.requires_pass_key)
    pub requires_pass_key: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.leader_account_id)
    pub leader_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.game_mode)
    pub game_mode: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.players)
    pub players: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTABroadcastMsg_LANLobbyReply.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTABroadcastMsg_LANLobbyReply {
    fn default() -> &'a CDOTABroadcastMsg_LANLobbyReply {
        <CDOTABroadcastMsg_LANLobbyReply as ::protobuf::Message>::default_instance()
    }
}

impl CDOTABroadcastMsg_LANLobbyReply {
    pub fn new() -> CDOTABroadcastMsg_LANLobbyReply {
        ::std::default::Default::default()
    }

    // optional uint64 id = 1;

    pub fn id(&self) -> u64 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional uint32 tournament_id = 2;

    pub fn tournament_id(&self) -> u32 {
        self.tournament_id.unwrap_or(0)
    }

    pub fn clear_tournament_id(&mut self) {
        self.tournament_id = ::std::option::Option::None;
    }

    pub fn has_tournament_id(&self) -> bool {
        self.tournament_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tournament_id(&mut self, v: u32) {
        self.tournament_id = ::std::option::Option::Some(v);
    }

    // optional uint32 tournament_game_id = 3;

    pub fn tournament_game_id(&self) -> u32 {
        self.tournament_game_id.unwrap_or(0)
    }

    pub fn clear_tournament_game_id(&mut self) {
        self.tournament_game_id = ::std::option::Option::None;
    }

    pub fn has_tournament_game_id(&self) -> bool {
        self.tournament_game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tournament_game_id(&mut self, v: u32) {
        self.tournament_game_id = ::std::option::Option::Some(v);
    }

    // optional bool requires_pass_key = 5;

    pub fn requires_pass_key(&self) -> bool {
        self.requires_pass_key.unwrap_or(false)
    }

    pub fn clear_requires_pass_key(&mut self) {
        self.requires_pass_key = ::std::option::Option::None;
    }

    pub fn has_requires_pass_key(&self) -> bool {
        self.requires_pass_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requires_pass_key(&mut self, v: bool) {
        self.requires_pass_key = ::std::option::Option::Some(v);
    }

    // optional uint32 leader_account_id = 6;

    pub fn leader_account_id(&self) -> u32 {
        self.leader_account_id.unwrap_or(0)
    }

    pub fn clear_leader_account_id(&mut self) {
        self.leader_account_id = ::std::option::Option::None;
    }

    pub fn has_leader_account_id(&self) -> bool {
        self.leader_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leader_account_id(&mut self, v: u32) {
        self.leader_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 game_mode = 7;

    pub fn game_mode(&self) -> u32 {
        self.game_mode.unwrap_or(0)
    }

    pub fn clear_game_mode(&mut self) {
        self.game_mode = ::std::option::Option::None;
    }

    pub fn has_game_mode(&self) -> bool {
        self.game_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_mode(&mut self, v: u32) {
        self.game_mode = ::std::option::Option::Some(v);
    }

    // optional string name = 8;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 players = 9;

    pub fn players(&self) -> u32 {
        self.players.unwrap_or(0)
    }

    pub fn clear_players(&mut self) {
        self.players = ::std::option::Option::None;
    }

    pub fn has_players(&self) -> bool {
        self.players.is_some()
    }

    // Param is passed by value, moved
    pub fn set_players(&mut self, v: u32) {
        self.players = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &CDOTABroadcastMsg_LANLobbyReply| { &m.id },
            |m: &mut CDOTABroadcastMsg_LANLobbyReply| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tournament_id",
            |m: &CDOTABroadcastMsg_LANLobbyReply| { &m.tournament_id },
            |m: &mut CDOTABroadcastMsg_LANLobbyReply| { &mut m.tournament_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tournament_game_id",
            |m: &CDOTABroadcastMsg_LANLobbyReply| { &m.tournament_game_id },
            |m: &mut CDOTABroadcastMsg_LANLobbyReply| { &mut m.tournament_game_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "members",
            |m: &CDOTABroadcastMsg_LANLobbyReply| { &m.members },
            |m: &mut CDOTABroadcastMsg_LANLobbyReply| { &mut m.members },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "requires_pass_key",
            |m: &CDOTABroadcastMsg_LANLobbyReply| { &m.requires_pass_key },
            |m: &mut CDOTABroadcastMsg_LANLobbyReply| { &mut m.requires_pass_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "leader_account_id",
            |m: &CDOTABroadcastMsg_LANLobbyReply| { &m.leader_account_id },
            |m: &mut CDOTABroadcastMsg_LANLobbyReply| { &mut m.leader_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_mode",
            |m: &CDOTABroadcastMsg_LANLobbyReply| { &m.game_mode },
            |m: &mut CDOTABroadcastMsg_LANLobbyReply| { &mut m.game_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &CDOTABroadcastMsg_LANLobbyReply| { &m.name },
            |m: &mut CDOTABroadcastMsg_LANLobbyReply| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "players",
            |m: &CDOTABroadcastMsg_LANLobbyReply| { &m.players },
            |m: &mut CDOTABroadcastMsg_LANLobbyReply| { &mut m.players },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTABroadcastMsg_LANLobbyReply>(
            "CDOTABroadcastMsg_LANLobbyReply",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTABroadcastMsg_LANLobbyReply {
    const NAME: &'static str = "CDOTABroadcastMsg_LANLobbyReply";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.tournament_game_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.members.push(is.read_message()?);
                },
                40 => {
                    self.requires_pass_key = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.leader_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.game_mode = ::std::option::Option::Some(is.read_uint32()?);
                },
                66 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                72 => {
                    self.players = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.tournament_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.tournament_game_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.requires_pass_key {
            my_size += 1 + 1;
        }
        if let Some(v) = self.leader_account_id {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.game_mode {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.players {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.tournament_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.tournament_game_id {
            os.write_uint32(3, v)?;
        }
        for v in &self.members {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.requires_pass_key {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.leader_account_id {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.game_mode {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.players {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTABroadcastMsg_LANLobbyReply {
        CDOTABroadcastMsg_LANLobbyReply::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.tournament_id = ::std::option::Option::None;
        self.tournament_game_id = ::std::option::Option::None;
        self.members.clear();
        self.requires_pass_key = ::std::option::Option::None;
        self.leader_account_id = ::std::option::Option::None;
        self.game_mode = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.players = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTABroadcastMsg_LANLobbyReply {
        static instance: CDOTABroadcastMsg_LANLobbyReply = CDOTABroadcastMsg_LANLobbyReply {
            id: ::std::option::Option::None,
            tournament_id: ::std::option::Option::None,
            tournament_game_id: ::std::option::Option::None,
            members: ::std::vec::Vec::new(),
            requires_pass_key: ::std::option::Option::None,
            leader_account_id: ::std::option::Option::None,
            game_mode: ::std::option::Option::None,
            name: ::std::option::Option::None,
            players: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTABroadcastMsg_LANLobbyReply {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTABroadcastMsg_LANLobbyReply").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTABroadcastMsg_LANLobbyReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTABroadcastMsg_LANLobbyReply {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CDOTABroadcastMsg_LANLobbyReply`
pub mod cdotabroadcast_msg_lanlobby_reply {
    // @@protoc_insertion_point(message:dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CLobbyMember {
        // message fields
        // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
        pub player_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CLobbyMember {
        fn default() -> &'a CLobbyMember {
            <CLobbyMember as ::protobuf::Message>::default_instance()
        }
    }

    impl CLobbyMember {
        pub fn new() -> CLobbyMember {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional string player_name = 2;

        pub fn player_name(&self) -> &str {
            match self.player_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_player_name(&mut self) {
            self.player_name = ::std::option::Option::None;
        }

        pub fn has_player_name(&self) -> bool {
            self.player_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_name(&mut self, v: ::std::string::String) {
            self.player_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_player_name(&mut self) -> &mut ::std::string::String {
            if self.player_name.is_none() {
                self.player_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.player_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_player_name(&mut self) -> ::std::string::String {
            self.player_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account_id",
                |m: &CLobbyMember| { &m.account_id },
                |m: &mut CLobbyMember| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "player_name",
                |m: &CLobbyMember| { &m.player_name },
                |m: &mut CLobbyMember| { &mut m.player_name },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CLobbyMember>(
                "CDOTABroadcastMsg_LANLobbyReply.CLobbyMember",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CLobbyMember {
        const NAME: &'static str = "CLobbyMember";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.player_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.player_name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.player_name.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CLobbyMember {
            CLobbyMember::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.player_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CLobbyMember {
            static instance: CLobbyMember = CLobbyMember {
                account_id: ::std::option::Option::None,
                player_name: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CLobbyMember {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CDOTABroadcastMsg_LANLobbyReply.CLobbyMember").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CLobbyMember {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CLobbyMember {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EDotaBroadcastMessages)
pub enum EDotaBroadcastMessages {
    // @@protoc_insertion_point(enum_value:dota.EDotaBroadcastMessages.DOTA_BM_LANLobbyRequest)
    DOTA_BM_LANLobbyRequest = 1,
    // @@protoc_insertion_point(enum_value:dota.EDotaBroadcastMessages.DOTA_BM_LANLobbyReply)
    DOTA_BM_LANLobbyReply = 2,
}

impl ::protobuf::Enum for EDotaBroadcastMessages {
    const NAME: &'static str = "EDotaBroadcastMessages";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EDotaBroadcastMessages> {
        match value {
            1 => ::std::option::Option::Some(EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest),
            2 => ::std::option::Option::Some(EDotaBroadcastMessages::DOTA_BM_LANLobbyReply),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EDotaBroadcastMessages> {
        match str {
            "DOTA_BM_LANLobbyRequest" => ::std::option::Option::Some(EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest),
            "DOTA_BM_LANLobbyReply" => ::std::option::Option::Some(EDotaBroadcastMessages::DOTA_BM_LANLobbyReply),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EDotaBroadcastMessages] = &[
        EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest,
        EDotaBroadcastMessages::DOTA_BM_LANLobbyReply,
    ];
}

impl ::protobuf::EnumFull for EDotaBroadcastMessages {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EDotaBroadcastMessages").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest => 0,
            EDotaBroadcastMessages::DOTA_BM_LANLobbyReply => 1,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EDotaBroadcastMessages {
    fn default() -> Self {
        EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest
    }
}

impl EDotaBroadcastMessages {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EDotaBroadcastMessages>("EDotaBroadcastMessages")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cdota_broadcastmessages.proto\x12\x04dota\"W\n\x11CDOTABroadcastMsg\
    \x120\n\x04type\x18\x01\x20\x02(\x0e2\x1c.dota.EDotaBroadcastMessagesR\
    \x04type\x12\x10\n\x03msg\x18\x02\x20\x01(\x0cR\x03msg\"#\n!CDOTABroadca\
    stMsg_LANLobbyRequest\"\xc5\x03\n\x1fCDOTABroadcastMsg_LANLobbyReply\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\x12#\n\rtournament_id\x18\x02\
    \x20\x01(\rR\x0ctournamentId\x12,\n\x12tournament_game_id\x18\x03\x20\
    \x01(\rR\x10tournamentGameId\x12L\n\x07members\x18\x04\x20\x03(\x0b22.do\
    ta.CDOTABroadcastMsg_LANLobbyReply.CLobbyMemberR\x07members\x12*\n\x11re\
    quires_pass_key\x18\x05\x20\x01(\x08R\x0frequiresPassKey\x12*\n\x11leade\
    r_account_id\x18\x06\x20\x01(\rR\x0fleaderAccountId\x12\x1b\n\tgame_mode\
    \x18\x07\x20\x01(\rR\x08gameMode\x12\x12\n\x04name\x18\x08\x20\x01(\tR\
    \x04name\x12\x18\n\x07players\x18\t\x20\x01(\rR\x07players\x1aN\n\x0cCLo\
    bbyMember\x12\x1d\n\naccount_id\x18\x01\x20\x01(\rR\taccountId\x12\x1f\n\
    \x0bplayer_name\x18\x02\x20\x01(\tR\nplayerName*P\n\x16EDotaBroadcastMes\
    sages\x12\x1b\n\x17DOTA_BM_LANLobbyRequest\x10\x01\x12\x19\n\x15DOTA_BM_\
    LANLobbyReply\x10\x02B%Z#github.com/dotabuff/manta/dota;dotaJ\x94\t\n\
    \x06\x12\x04\0\0!\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x03\0:\n\t\n\x02\x08\x0b\
    \x12\x03\x03\0:\n\n\n\x02\x05\0\x12\x04\x05\0\x08\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x05\x05\x1b\n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\x08$\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03\x06\x08\x1f\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x06\"#\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x07\x08\"\n\x0c\n\x05\
    \x05\0\x02\x01\x01\x12\x03\x07\x08\x1d\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03\x07\x20!\n\n\n\x02\x04\0\x12\x04\n\0\r\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\n\x08\x19\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0b\x081\n\x0c\n\x05\x04\
    \0\x02\0\x04\x12\x03\x0b\x08\x10\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0b\
    \x11'\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b(,\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x0b/0\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0c\x08\x1f\n\x0c\n\
    \x05\x04\0\x02\x01\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x0c\x11\x16\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0c\x17\x1a\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0c\x1d\x1e\n\n\n\x02\x04\x01\x12\
    \x04\x0f\0\x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0f\x08)\n\n\n\x02\x04\
    \x02\x12\x04\x12\0!\x01\n\n\n\x03\x04\x02\x01\x12\x03\x12\x08'\n\x0c\n\
    \x04\x04\x02\x03\0\x12\x04\x13\x08\x16\t\n\x0c\n\x05\x04\x02\x03\0\x01\
    \x12\x03\x13\x10\x1c\n\r\n\x06\x04\x02\x03\0\x02\0\x12\x03\x14\x10/\n\
    \x0e\n\x07\x04\x02\x03\0\x02\0\x04\x12\x03\x14\x10\x18\n\x0e\n\x07\x04\
    \x02\x03\0\x02\0\x05\x12\x03\x14\x19\x1f\n\x0e\n\x07\x04\x02\x03\0\x02\0\
    \x01\x12\x03\x14\x20*\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x03\x14-.\
    \n\r\n\x06\x04\x02\x03\0\x02\x01\x12\x03\x15\x100\n\x0e\n\x07\x04\x02\
    \x03\0\x02\x01\x04\x12\x03\x15\x10\x18\n\x0e\n\x07\x04\x02\x03\0\x02\x01\
    \x05\x12\x03\x15\x19\x1f\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x01\x12\x03\
    \x15\x20+\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x03\x15./\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\x18\x08\x1f\n\x0c\n\x05\x04\x02\x02\0\x04\x12\
    \x03\x18\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x18\x11\x17\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03\x18\x18\x1a\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03\x18\x1d\x1e\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x19\x08*\n\
    \x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x19\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03\x19\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\
    \x19\x18%\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x19()\n\x0b\n\x04\x04\
    \x02\x02\x02\x12\x03\x1a\x08/\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\
    \x1a\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1a\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03\x1a\x18*\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03\x1a-.\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x1b\x08J\n\x0c\n\
    \x05\x04\x02\x02\x03\x04\x12\x03\x1b\x08\x10\n\x0c\n\x05\x04\x02\x02\x03\
    \x06\x12\x03\x1b\x11=\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x1b>E\n\
    \x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x1bHI\n\x0b\n\x04\x04\x02\x02\x04\
    \x12\x03\x1c\x08,\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03\x1c\x08\x10\n\
    \x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x1c\x11\x15\n\x0c\n\x05\x04\x02\
    \x02\x04\x01\x12\x03\x1c\x16'\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\
    \x1c*+\n\x0b\n\x04\x04\x02\x02\x05\x12\x03\x1d\x08.\n\x0c\n\x05\x04\x02\
    \x02\x05\x04\x12\x03\x1d\x08\x10\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03\
    \x1d\x11\x17\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x1d\x18)\n\x0c\n\
    \x05\x04\x02\x02\x05\x03\x12\x03\x1d,-\n\x0b\n\x04\x04\x02\x02\x06\x12\
    \x03\x1e\x08&\n\x0c\n\x05\x04\x02\x02\x06\x04\x12\x03\x1e\x08\x10\n\x0c\
    \n\x05\x04\x02\x02\x06\x05\x12\x03\x1e\x11\x17\n\x0c\n\x05\x04\x02\x02\
    \x06\x01\x12\x03\x1e\x18!\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03\x1e$%\
    \n\x0b\n\x04\x04\x02\x02\x07\x12\x03\x1f\x08!\n\x0c\n\x05\x04\x02\x02\
    \x07\x04\x12\x03\x1f\x08\x10\n\x0c\n\x05\x04\x02\x02\x07\x05\x12\x03\x1f\
    \x11\x17\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03\x1f\x18\x1c\n\x0c\n\x05\
    \x04\x02\x02\x07\x03\x12\x03\x1f\x1f\x20\n\x0b\n\x04\x04\x02\x02\x08\x12\
    \x03\x20\x08$\n\x0c\n\x05\x04\x02\x02\x08\x04\x12\x03\x20\x08\x10\n\x0c\
    \n\x05\x04\x02\x02\x08\x05\x12\x03\x20\x11\x17\n\x0c\n\x05\x04\x02\x02\
    \x08\x01\x12\x03\x20\x18\x1f\n\x0c\n\x05\x04\x02\x02\x08\x03\x12\x03\x20\
    \"#\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(CDOTABroadcastMsg::generated_message_descriptor_data());
            messages.push(CDOTABroadcastMsg_LANLobbyRequest::generated_message_descriptor_data());
            messages.push(CDOTABroadcastMsg_LANLobbyReply::generated_message_descriptor_data());
            messages.push(cdotabroadcast_msg_lanlobby_reply::CLobbyMember::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EDotaBroadcastMessages::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
