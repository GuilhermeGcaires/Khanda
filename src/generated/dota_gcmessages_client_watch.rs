// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_watch.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CSourceTVGameSmall)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSourceTVGameSmall {
    // message fields
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.activate_time)
    pub activate_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.deactivate_time)
    pub deactivate_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.server_steam_id)
    pub server_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.lobby_id)
    pub lobby_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.lobby_type)
    pub lobby_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.game_time)
    pub game_time: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.delay)
    pub delay: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.spectators)
    pub spectators: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.game_mode)
    pub game_mode: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.average_mmr)
    pub average_mmr: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.match_id)
    pub match_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.series_id)
    pub series_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.team_name_radiant)
    pub team_name_radiant: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.team_name_dire)
    pub team_name_dire: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.team_logo_radiant)
    pub team_logo_radiant: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.team_logo_dire)
    pub team_logo_dire: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.team_id_radiant)
    pub team_id_radiant: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.team_id_dire)
    pub team_id_dire: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.sort_score)
    pub sort_score: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.last_update_time)
    pub last_update_time: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.radiant_lead)
    pub radiant_lead: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.radiant_score)
    pub radiant_score: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.dire_score)
    pub dire_score: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.players)
    pub players: ::std::vec::Vec<csource_tvgame_small::Player>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.building_state)
    pub building_state: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.weekend_tourney_tournament_id)
    pub weekend_tourney_tournament_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.weekend_tourney_division)
    pub weekend_tourney_division: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.weekend_tourney_skill_level)
    pub weekend_tourney_skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.weekend_tourney_bracket_round)
    pub weekend_tourney_bracket_round: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.custom_game_difficulty)
    pub custom_game_difficulty: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CSourceTVGameSmall.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSourceTVGameSmall {
    fn default() -> &'a CSourceTVGameSmall {
        <CSourceTVGameSmall as ::protobuf::Message>::default_instance()
    }
}

impl CSourceTVGameSmall {
    pub fn new() -> CSourceTVGameSmall {
        ::std::default::Default::default()
    }

    // optional uint32 activate_time = 1;

    pub fn activate_time(&self) -> u32 {
        self.activate_time.unwrap_or(0)
    }

    pub fn clear_activate_time(&mut self) {
        self.activate_time = ::std::option::Option::None;
    }

    pub fn has_activate_time(&self) -> bool {
        self.activate_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_activate_time(&mut self, v: u32) {
        self.activate_time = ::std::option::Option::Some(v);
    }

    // optional uint32 deactivate_time = 2;

    pub fn deactivate_time(&self) -> u32 {
        self.deactivate_time.unwrap_or(0)
    }

    pub fn clear_deactivate_time(&mut self) {
        self.deactivate_time = ::std::option::Option::None;
    }

    pub fn has_deactivate_time(&self) -> bool {
        self.deactivate_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deactivate_time(&mut self, v: u32) {
        self.deactivate_time = ::std::option::Option::Some(v);
    }

    // optional uint64 server_steam_id = 3;

    pub fn server_steam_id(&self) -> u64 {
        self.server_steam_id.unwrap_or(0)
    }

    pub fn clear_server_steam_id(&mut self) {
        self.server_steam_id = ::std::option::Option::None;
    }

    pub fn has_server_steam_id(&self) -> bool {
        self.server_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steam_id(&mut self, v: u64) {
        self.server_steam_id = ::std::option::Option::Some(v);
    }

    // optional uint64 lobby_id = 4;

    pub fn lobby_id(&self) -> u64 {
        self.lobby_id.unwrap_or(0)
    }

    pub fn clear_lobby_id(&mut self) {
        self.lobby_id = ::std::option::Option::None;
    }

    pub fn has_lobby_id(&self) -> bool {
        self.lobby_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby_id(&mut self, v: u64) {
        self.lobby_id = ::std::option::Option::Some(v);
    }

    // optional uint32 league_id = 5;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional uint32 lobby_type = 6;

    pub fn lobby_type(&self) -> u32 {
        self.lobby_type.unwrap_or(0)
    }

    pub fn clear_lobby_type(&mut self) {
        self.lobby_type = ::std::option::Option::None;
    }

    pub fn has_lobby_type(&self) -> bool {
        self.lobby_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby_type(&mut self, v: u32) {
        self.lobby_type = ::std::option::Option::Some(v);
    }

    // optional int32 game_time = 7;

    pub fn game_time(&self) -> i32 {
        self.game_time.unwrap_or(0)
    }

    pub fn clear_game_time(&mut self) {
        self.game_time = ::std::option::Option::None;
    }

    pub fn has_game_time(&self) -> bool {
        self.game_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_time(&mut self, v: i32) {
        self.game_time = ::std::option::Option::Some(v);
    }

    // optional uint32 delay = 8;

    pub fn delay(&self) -> u32 {
        self.delay.unwrap_or(0)
    }

    pub fn clear_delay(&mut self) {
        self.delay = ::std::option::Option::None;
    }

    pub fn has_delay(&self) -> bool {
        self.delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: u32) {
        self.delay = ::std::option::Option::Some(v);
    }

    // optional uint32 spectators = 9;

    pub fn spectators(&self) -> u32 {
        self.spectators.unwrap_or(0)
    }

    pub fn clear_spectators(&mut self) {
        self.spectators = ::std::option::Option::None;
    }

    pub fn has_spectators(&self) -> bool {
        self.spectators.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spectators(&mut self, v: u32) {
        self.spectators = ::std::option::Option::Some(v);
    }

    // optional uint32 game_mode = 10;

    pub fn game_mode(&self) -> u32 {
        self.game_mode.unwrap_or(0)
    }

    pub fn clear_game_mode(&mut self) {
        self.game_mode = ::std::option::Option::None;
    }

    pub fn has_game_mode(&self) -> bool {
        self.game_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_mode(&mut self, v: u32) {
        self.game_mode = ::std::option::Option::Some(v);
    }

    // optional uint32 average_mmr = 11;

    pub fn average_mmr(&self) -> u32 {
        self.average_mmr.unwrap_or(0)
    }

    pub fn clear_average_mmr(&mut self) {
        self.average_mmr = ::std::option::Option::None;
    }

    pub fn has_average_mmr(&self) -> bool {
        self.average_mmr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_average_mmr(&mut self, v: u32) {
        self.average_mmr = ::std::option::Option::Some(v);
    }

    // optional uint64 match_id = 12;

    pub fn match_id(&self) -> u64 {
        self.match_id.unwrap_or(0)
    }

    pub fn clear_match_id(&mut self) {
        self.match_id = ::std::option::Option::None;
    }

    pub fn has_match_id(&self) -> bool {
        self.match_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_id(&mut self, v: u64) {
        self.match_id = ::std::option::Option::Some(v);
    }

    // optional uint32 series_id = 13;

    pub fn series_id(&self) -> u32 {
        self.series_id.unwrap_or(0)
    }

    pub fn clear_series_id(&mut self) {
        self.series_id = ::std::option::Option::None;
    }

    pub fn has_series_id(&self) -> bool {
        self.series_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_series_id(&mut self, v: u32) {
        self.series_id = ::std::option::Option::Some(v);
    }

    // optional string team_name_radiant = 15;

    pub fn team_name_radiant(&self) -> &str {
        match self.team_name_radiant.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name_radiant(&mut self) {
        self.team_name_radiant = ::std::option::Option::None;
    }

    pub fn has_team_name_radiant(&self) -> bool {
        self.team_name_radiant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name_radiant(&mut self, v: ::std::string::String) {
        self.team_name_radiant = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name_radiant(&mut self) -> &mut ::std::string::String {
        if self.team_name_radiant.is_none() {
            self.team_name_radiant = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name_radiant.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name_radiant(&mut self) -> ::std::string::String {
        self.team_name_radiant.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string team_name_dire = 16;

    pub fn team_name_dire(&self) -> &str {
        match self.team_name_dire.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name_dire(&mut self) {
        self.team_name_dire = ::std::option::Option::None;
    }

    pub fn has_team_name_dire(&self) -> bool {
        self.team_name_dire.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name_dire(&mut self, v: ::std::string::String) {
        self.team_name_dire = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name_dire(&mut self) -> &mut ::std::string::String {
        if self.team_name_dire.is_none() {
            self.team_name_dire = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name_dire.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name_dire(&mut self) -> ::std::string::String {
        self.team_name_dire.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 team_logo_radiant = 24;

    pub fn team_logo_radiant(&self) -> u64 {
        self.team_logo_radiant.unwrap_or(0)
    }

    pub fn clear_team_logo_radiant(&mut self) {
        self.team_logo_radiant = ::std::option::Option::None;
    }

    pub fn has_team_logo_radiant(&self) -> bool {
        self.team_logo_radiant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_logo_radiant(&mut self, v: u64) {
        self.team_logo_radiant = ::std::option::Option::Some(v);
    }

    // optional fixed64 team_logo_dire = 25;

    pub fn team_logo_dire(&self) -> u64 {
        self.team_logo_dire.unwrap_or(0)
    }

    pub fn clear_team_logo_dire(&mut self) {
        self.team_logo_dire = ::std::option::Option::None;
    }

    pub fn has_team_logo_dire(&self) -> bool {
        self.team_logo_dire.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_logo_dire(&mut self, v: u64) {
        self.team_logo_dire = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id_radiant = 30;

    pub fn team_id_radiant(&self) -> u32 {
        self.team_id_radiant.unwrap_or(0)
    }

    pub fn clear_team_id_radiant(&mut self) {
        self.team_id_radiant = ::std::option::Option::None;
    }

    pub fn has_team_id_radiant(&self) -> bool {
        self.team_id_radiant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id_radiant(&mut self, v: u32) {
        self.team_id_radiant = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id_dire = 31;

    pub fn team_id_dire(&self) -> u32 {
        self.team_id_dire.unwrap_or(0)
    }

    pub fn clear_team_id_dire(&mut self) {
        self.team_id_dire = ::std::option::Option::None;
    }

    pub fn has_team_id_dire(&self) -> bool {
        self.team_id_dire.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id_dire(&mut self, v: u32) {
        self.team_id_dire = ::std::option::Option::Some(v);
    }

    // optional uint32 sort_score = 17;

    pub fn sort_score(&self) -> u32 {
        self.sort_score.unwrap_or(0)
    }

    pub fn clear_sort_score(&mut self) {
        self.sort_score = ::std::option::Option::None;
    }

    pub fn has_sort_score(&self) -> bool {
        self.sort_score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sort_score(&mut self, v: u32) {
        self.sort_score = ::std::option::Option::Some(v);
    }

    // optional float last_update_time = 18;

    pub fn last_update_time(&self) -> f32 {
        self.last_update_time.unwrap_or(0.)
    }

    pub fn clear_last_update_time(&mut self) {
        self.last_update_time = ::std::option::Option::None;
    }

    pub fn has_last_update_time(&self) -> bool {
        self.last_update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_update_time(&mut self, v: f32) {
        self.last_update_time = ::std::option::Option::Some(v);
    }

    // optional int32 radiant_lead = 19;

    pub fn radiant_lead(&self) -> i32 {
        self.radiant_lead.unwrap_or(0)
    }

    pub fn clear_radiant_lead(&mut self) {
        self.radiant_lead = ::std::option::Option::None;
    }

    pub fn has_radiant_lead(&self) -> bool {
        self.radiant_lead.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radiant_lead(&mut self, v: i32) {
        self.radiant_lead = ::std::option::Option::Some(v);
    }

    // optional uint32 radiant_score = 20;

    pub fn radiant_score(&self) -> u32 {
        self.radiant_score.unwrap_or(0)
    }

    pub fn clear_radiant_score(&mut self) {
        self.radiant_score = ::std::option::Option::None;
    }

    pub fn has_radiant_score(&self) -> bool {
        self.radiant_score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radiant_score(&mut self, v: u32) {
        self.radiant_score = ::std::option::Option::Some(v);
    }

    // optional uint32 dire_score = 21;

    pub fn dire_score(&self) -> u32 {
        self.dire_score.unwrap_or(0)
    }

    pub fn clear_dire_score(&mut self) {
        self.dire_score = ::std::option::Option::None;
    }

    pub fn has_dire_score(&self) -> bool {
        self.dire_score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dire_score(&mut self, v: u32) {
        self.dire_score = ::std::option::Option::Some(v);
    }

    // optional fixed32 building_state = 23;

    pub fn building_state(&self) -> u32 {
        self.building_state.unwrap_or(0)
    }

    pub fn clear_building_state(&mut self) {
        self.building_state = ::std::option::Option::None;
    }

    pub fn has_building_state(&self) -> bool {
        self.building_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_building_state(&mut self, v: u32) {
        self.building_state = ::std::option::Option::Some(v);
    }

    // optional uint32 weekend_tourney_tournament_id = 26;

    pub fn weekend_tourney_tournament_id(&self) -> u32 {
        self.weekend_tourney_tournament_id.unwrap_or(0)
    }

    pub fn clear_weekend_tourney_tournament_id(&mut self) {
        self.weekend_tourney_tournament_id = ::std::option::Option::None;
    }

    pub fn has_weekend_tourney_tournament_id(&self) -> bool {
        self.weekend_tourney_tournament_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weekend_tourney_tournament_id(&mut self, v: u32) {
        self.weekend_tourney_tournament_id = ::std::option::Option::Some(v);
    }

    // optional uint32 weekend_tourney_division = 27;

    pub fn weekend_tourney_division(&self) -> u32 {
        self.weekend_tourney_division.unwrap_or(0)
    }

    pub fn clear_weekend_tourney_division(&mut self) {
        self.weekend_tourney_division = ::std::option::Option::None;
    }

    pub fn has_weekend_tourney_division(&self) -> bool {
        self.weekend_tourney_division.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weekend_tourney_division(&mut self, v: u32) {
        self.weekend_tourney_division = ::std::option::Option::Some(v);
    }

    // optional uint32 weekend_tourney_skill_level = 28;

    pub fn weekend_tourney_skill_level(&self) -> u32 {
        self.weekend_tourney_skill_level.unwrap_or(0)
    }

    pub fn clear_weekend_tourney_skill_level(&mut self) {
        self.weekend_tourney_skill_level = ::std::option::Option::None;
    }

    pub fn has_weekend_tourney_skill_level(&self) -> bool {
        self.weekend_tourney_skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weekend_tourney_skill_level(&mut self, v: u32) {
        self.weekend_tourney_skill_level = ::std::option::Option::Some(v);
    }

    // optional uint32 weekend_tourney_bracket_round = 29;

    pub fn weekend_tourney_bracket_round(&self) -> u32 {
        self.weekend_tourney_bracket_round.unwrap_or(0)
    }

    pub fn clear_weekend_tourney_bracket_round(&mut self) {
        self.weekend_tourney_bracket_round = ::std::option::Option::None;
    }

    pub fn has_weekend_tourney_bracket_round(&self) -> bool {
        self.weekend_tourney_bracket_round.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weekend_tourney_bracket_round(&mut self, v: u32) {
        self.weekend_tourney_bracket_round = ::std::option::Option::Some(v);
    }

    // optional uint32 custom_game_difficulty = 32;

    pub fn custom_game_difficulty(&self) -> u32 {
        self.custom_game_difficulty.unwrap_or(0)
    }

    pub fn clear_custom_game_difficulty(&mut self) {
        self.custom_game_difficulty = ::std::option::Option::None;
    }

    pub fn has_custom_game_difficulty(&self) -> bool {
        self.custom_game_difficulty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_game_difficulty(&mut self, v: u32) {
        self.custom_game_difficulty = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(31);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "activate_time",
            |m: &CSourceTVGameSmall| { &m.activate_time },
            |m: &mut CSourceTVGameSmall| { &mut m.activate_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "deactivate_time",
            |m: &CSourceTVGameSmall| { &m.deactivate_time },
            |m: &mut CSourceTVGameSmall| { &mut m.deactivate_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_steam_id",
            |m: &CSourceTVGameSmall| { &m.server_steam_id },
            |m: &mut CSourceTVGameSmall| { &mut m.server_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lobby_id",
            |m: &CSourceTVGameSmall| { &m.lobby_id },
            |m: &mut CSourceTVGameSmall| { &mut m.lobby_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "league_id",
            |m: &CSourceTVGameSmall| { &m.league_id },
            |m: &mut CSourceTVGameSmall| { &mut m.league_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lobby_type",
            |m: &CSourceTVGameSmall| { &m.lobby_type },
            |m: &mut CSourceTVGameSmall| { &mut m.lobby_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_time",
            |m: &CSourceTVGameSmall| { &m.game_time },
            |m: &mut CSourceTVGameSmall| { &mut m.game_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "delay",
            |m: &CSourceTVGameSmall| { &m.delay },
            |m: &mut CSourceTVGameSmall| { &mut m.delay },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "spectators",
            |m: &CSourceTVGameSmall| { &m.spectators },
            |m: &mut CSourceTVGameSmall| { &mut m.spectators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_mode",
            |m: &CSourceTVGameSmall| { &m.game_mode },
            |m: &mut CSourceTVGameSmall| { &mut m.game_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "average_mmr",
            |m: &CSourceTVGameSmall| { &m.average_mmr },
            |m: &mut CSourceTVGameSmall| { &mut m.average_mmr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "match_id",
            |m: &CSourceTVGameSmall| { &m.match_id },
            |m: &mut CSourceTVGameSmall| { &mut m.match_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "series_id",
            |m: &CSourceTVGameSmall| { &m.series_id },
            |m: &mut CSourceTVGameSmall| { &mut m.series_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_name_radiant",
            |m: &CSourceTVGameSmall| { &m.team_name_radiant },
            |m: &mut CSourceTVGameSmall| { &mut m.team_name_radiant },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_name_dire",
            |m: &CSourceTVGameSmall| { &m.team_name_dire },
            |m: &mut CSourceTVGameSmall| { &mut m.team_name_dire },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_logo_radiant",
            |m: &CSourceTVGameSmall| { &m.team_logo_radiant },
            |m: &mut CSourceTVGameSmall| { &mut m.team_logo_radiant },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_logo_dire",
            |m: &CSourceTVGameSmall| { &m.team_logo_dire },
            |m: &mut CSourceTVGameSmall| { &mut m.team_logo_dire },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id_radiant",
            |m: &CSourceTVGameSmall| { &m.team_id_radiant },
            |m: &mut CSourceTVGameSmall| { &mut m.team_id_radiant },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id_dire",
            |m: &CSourceTVGameSmall| { &m.team_id_dire },
            |m: &mut CSourceTVGameSmall| { &mut m.team_id_dire },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sort_score",
            |m: &CSourceTVGameSmall| { &m.sort_score },
            |m: &mut CSourceTVGameSmall| { &mut m.sort_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "last_update_time",
            |m: &CSourceTVGameSmall| { &m.last_update_time },
            |m: &mut CSourceTVGameSmall| { &mut m.last_update_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "radiant_lead",
            |m: &CSourceTVGameSmall| { &m.radiant_lead },
            |m: &mut CSourceTVGameSmall| { &mut m.radiant_lead },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "radiant_score",
            |m: &CSourceTVGameSmall| { &m.radiant_score },
            |m: &mut CSourceTVGameSmall| { &mut m.radiant_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dire_score",
            |m: &CSourceTVGameSmall| { &m.dire_score },
            |m: &mut CSourceTVGameSmall| { &mut m.dire_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "players",
            |m: &CSourceTVGameSmall| { &m.players },
            |m: &mut CSourceTVGameSmall| { &mut m.players },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "building_state",
            |m: &CSourceTVGameSmall| { &m.building_state },
            |m: &mut CSourceTVGameSmall| { &mut m.building_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "weekend_tourney_tournament_id",
            |m: &CSourceTVGameSmall| { &m.weekend_tourney_tournament_id },
            |m: &mut CSourceTVGameSmall| { &mut m.weekend_tourney_tournament_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "weekend_tourney_division",
            |m: &CSourceTVGameSmall| { &m.weekend_tourney_division },
            |m: &mut CSourceTVGameSmall| { &mut m.weekend_tourney_division },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "weekend_tourney_skill_level",
            |m: &CSourceTVGameSmall| { &m.weekend_tourney_skill_level },
            |m: &mut CSourceTVGameSmall| { &mut m.weekend_tourney_skill_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "weekend_tourney_bracket_round",
            |m: &CSourceTVGameSmall| { &m.weekend_tourney_bracket_round },
            |m: &mut CSourceTVGameSmall| { &mut m.weekend_tourney_bracket_round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "custom_game_difficulty",
            |m: &CSourceTVGameSmall| { &m.custom_game_difficulty },
            |m: &mut CSourceTVGameSmall| { &mut m.custom_game_difficulty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSourceTVGameSmall>(
            "CSourceTVGameSmall",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSourceTVGameSmall {
    const NAME: &'static str = "CSourceTVGameSmall";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.activate_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.deactivate_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.server_steam_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.lobby_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.lobby_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.game_time = ::std::option::Option::Some(is.read_int32()?);
                },
                64 => {
                    self.delay = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.spectators = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.game_mode = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.average_mmr = ::std::option::Option::Some(is.read_uint32()?);
                },
                96 => {
                    self.match_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                104 => {
                    self.series_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                122 => {
                    self.team_name_radiant = ::std::option::Option::Some(is.read_string()?);
                },
                130 => {
                    self.team_name_dire = ::std::option::Option::Some(is.read_string()?);
                },
                193 => {
                    self.team_logo_radiant = ::std::option::Option::Some(is.read_fixed64()?);
                },
                201 => {
                    self.team_logo_dire = ::std::option::Option::Some(is.read_fixed64()?);
                },
                240 => {
                    self.team_id_radiant = ::std::option::Option::Some(is.read_uint32()?);
                },
                248 => {
                    self.team_id_dire = ::std::option::Option::Some(is.read_uint32()?);
                },
                136 => {
                    self.sort_score = ::std::option::Option::Some(is.read_uint32()?);
                },
                149 => {
                    self.last_update_time = ::std::option::Option::Some(is.read_float()?);
                },
                152 => {
                    self.radiant_lead = ::std::option::Option::Some(is.read_int32()?);
                },
                160 => {
                    self.radiant_score = ::std::option::Option::Some(is.read_uint32()?);
                },
                168 => {
                    self.dire_score = ::std::option::Option::Some(is.read_uint32()?);
                },
                178 => {
                    self.players.push(is.read_message()?);
                },
                189 => {
                    self.building_state = ::std::option::Option::Some(is.read_fixed32()?);
                },
                208 => {
                    self.weekend_tourney_tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                216 => {
                    self.weekend_tourney_division = ::std::option::Option::Some(is.read_uint32()?);
                },
                224 => {
                    self.weekend_tourney_skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                232 => {
                    self.weekend_tourney_bracket_round = ::std::option::Option::Some(is.read_uint32()?);
                },
                256 => {
                    self.custom_game_difficulty = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.activate_time {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.deactivate_time {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.server_steam_id {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.lobby_id {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.league_id {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.lobby_type {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.game_time {
            my_size += ::protobuf::rt::int32_size(7, v);
        }
        if let Some(v) = self.delay {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.spectators {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.game_mode {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.average_mmr {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.match_id {
            my_size += ::protobuf::rt::uint64_size(12, v);
        }
        if let Some(v) = self.series_id {
            my_size += ::protobuf::rt::uint32_size(13, v);
        }
        if let Some(v) = self.team_name_radiant.as_ref() {
            my_size += ::protobuf::rt::string_size(15, &v);
        }
        if let Some(v) = self.team_name_dire.as_ref() {
            my_size += ::protobuf::rt::string_size(16, &v);
        }
        if let Some(v) = self.team_logo_radiant {
            my_size += 2 + 8;
        }
        if let Some(v) = self.team_logo_dire {
            my_size += 2 + 8;
        }
        if let Some(v) = self.team_id_radiant {
            my_size += ::protobuf::rt::uint32_size(30, v);
        }
        if let Some(v) = self.team_id_dire {
            my_size += ::protobuf::rt::uint32_size(31, v);
        }
        if let Some(v) = self.sort_score {
            my_size += ::protobuf::rt::uint32_size(17, v);
        }
        if let Some(v) = self.last_update_time {
            my_size += 2 + 4;
        }
        if let Some(v) = self.radiant_lead {
            my_size += ::protobuf::rt::int32_size(19, v);
        }
        if let Some(v) = self.radiant_score {
            my_size += ::protobuf::rt::uint32_size(20, v);
        }
        if let Some(v) = self.dire_score {
            my_size += ::protobuf::rt::uint32_size(21, v);
        }
        for value in &self.players {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.building_state {
            my_size += 2 + 4;
        }
        if let Some(v) = self.weekend_tourney_tournament_id {
            my_size += ::protobuf::rt::uint32_size(26, v);
        }
        if let Some(v) = self.weekend_tourney_division {
            my_size += ::protobuf::rt::uint32_size(27, v);
        }
        if let Some(v) = self.weekend_tourney_skill_level {
            my_size += ::protobuf::rt::uint32_size(28, v);
        }
        if let Some(v) = self.weekend_tourney_bracket_round {
            my_size += ::protobuf::rt::uint32_size(29, v);
        }
        if let Some(v) = self.custom_game_difficulty {
            my_size += ::protobuf::rt::uint32_size(32, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.activate_time {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.deactivate_time {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.server_steam_id {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.lobby_id {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.league_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.lobby_type {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.game_time {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.delay {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.spectators {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.game_mode {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.average_mmr {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.match_id {
            os.write_uint64(12, v)?;
        }
        if let Some(v) = self.series_id {
            os.write_uint32(13, v)?;
        }
        if let Some(v) = self.team_name_radiant.as_ref() {
            os.write_string(15, v)?;
        }
        if let Some(v) = self.team_name_dire.as_ref() {
            os.write_string(16, v)?;
        }
        if let Some(v) = self.team_logo_radiant {
            os.write_fixed64(24, v)?;
        }
        if let Some(v) = self.team_logo_dire {
            os.write_fixed64(25, v)?;
        }
        if let Some(v) = self.team_id_radiant {
            os.write_uint32(30, v)?;
        }
        if let Some(v) = self.team_id_dire {
            os.write_uint32(31, v)?;
        }
        if let Some(v) = self.sort_score {
            os.write_uint32(17, v)?;
        }
        if let Some(v) = self.last_update_time {
            os.write_float(18, v)?;
        }
        if let Some(v) = self.radiant_lead {
            os.write_int32(19, v)?;
        }
        if let Some(v) = self.radiant_score {
            os.write_uint32(20, v)?;
        }
        if let Some(v) = self.dire_score {
            os.write_uint32(21, v)?;
        }
        for v in &self.players {
            ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        };
        if let Some(v) = self.building_state {
            os.write_fixed32(23, v)?;
        }
        if let Some(v) = self.weekend_tourney_tournament_id {
            os.write_uint32(26, v)?;
        }
        if let Some(v) = self.weekend_tourney_division {
            os.write_uint32(27, v)?;
        }
        if let Some(v) = self.weekend_tourney_skill_level {
            os.write_uint32(28, v)?;
        }
        if let Some(v) = self.weekend_tourney_bracket_round {
            os.write_uint32(29, v)?;
        }
        if let Some(v) = self.custom_game_difficulty {
            os.write_uint32(32, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSourceTVGameSmall {
        CSourceTVGameSmall::new()
    }

    fn clear(&mut self) {
        self.activate_time = ::std::option::Option::None;
        self.deactivate_time = ::std::option::Option::None;
        self.server_steam_id = ::std::option::Option::None;
        self.lobby_id = ::std::option::Option::None;
        self.league_id = ::std::option::Option::None;
        self.lobby_type = ::std::option::Option::None;
        self.game_time = ::std::option::Option::None;
        self.delay = ::std::option::Option::None;
        self.spectators = ::std::option::Option::None;
        self.game_mode = ::std::option::Option::None;
        self.average_mmr = ::std::option::Option::None;
        self.match_id = ::std::option::Option::None;
        self.series_id = ::std::option::Option::None;
        self.team_name_radiant = ::std::option::Option::None;
        self.team_name_dire = ::std::option::Option::None;
        self.team_logo_radiant = ::std::option::Option::None;
        self.team_logo_dire = ::std::option::Option::None;
        self.team_id_radiant = ::std::option::Option::None;
        self.team_id_dire = ::std::option::Option::None;
        self.sort_score = ::std::option::Option::None;
        self.last_update_time = ::std::option::Option::None;
        self.radiant_lead = ::std::option::Option::None;
        self.radiant_score = ::std::option::Option::None;
        self.dire_score = ::std::option::Option::None;
        self.players.clear();
        self.building_state = ::std::option::Option::None;
        self.weekend_tourney_tournament_id = ::std::option::Option::None;
        self.weekend_tourney_division = ::std::option::Option::None;
        self.weekend_tourney_skill_level = ::std::option::Option::None;
        self.weekend_tourney_bracket_round = ::std::option::Option::None;
        self.custom_game_difficulty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSourceTVGameSmall {
        static instance: CSourceTVGameSmall = CSourceTVGameSmall {
            activate_time: ::std::option::Option::None,
            deactivate_time: ::std::option::Option::None,
            server_steam_id: ::std::option::Option::None,
            lobby_id: ::std::option::Option::None,
            league_id: ::std::option::Option::None,
            lobby_type: ::std::option::Option::None,
            game_time: ::std::option::Option::None,
            delay: ::std::option::Option::None,
            spectators: ::std::option::Option::None,
            game_mode: ::std::option::Option::None,
            average_mmr: ::std::option::Option::None,
            match_id: ::std::option::Option::None,
            series_id: ::std::option::Option::None,
            team_name_radiant: ::std::option::Option::None,
            team_name_dire: ::std::option::Option::None,
            team_logo_radiant: ::std::option::Option::None,
            team_logo_dire: ::std::option::Option::None,
            team_id_radiant: ::std::option::Option::None,
            team_id_dire: ::std::option::Option::None,
            sort_score: ::std::option::Option::None,
            last_update_time: ::std::option::Option::None,
            radiant_lead: ::std::option::Option::None,
            radiant_score: ::std::option::Option::None,
            dire_score: ::std::option::Option::None,
            players: ::std::vec::Vec::new(),
            building_state: ::std::option::Option::None,
            weekend_tourney_tournament_id: ::std::option::Option::None,
            weekend_tourney_division: ::std::option::Option::None,
            weekend_tourney_skill_level: ::std::option::Option::None,
            weekend_tourney_bracket_round: ::std::option::Option::None,
            custom_game_difficulty: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSourceTVGameSmall {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSourceTVGameSmall").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSourceTVGameSmall {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSourceTVGameSmall {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CSourceTVGameSmall`
pub mod csource_tvgame_small {
    // @@protoc_insertion_point(message:dota.CSourceTVGameSmall.Player)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Player {
        // message fields
        // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.Player.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CSourceTVGameSmall.Player.hero_id)
        pub hero_id: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CSourceTVGameSmall.Player.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Player {
        fn default() -> &'a Player {
            <Player as ::protobuf::Message>::default_instance()
        }
    }

    impl Player {
        pub fn new() -> Player {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional uint32 hero_id = 2;

        pub fn hero_id(&self) -> u32 {
            self.hero_id.unwrap_or(0)
        }

        pub fn clear_hero_id(&mut self) {
            self.hero_id = ::std::option::Option::None;
        }

        pub fn has_hero_id(&self) -> bool {
            self.hero_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hero_id(&mut self, v: u32) {
            self.hero_id = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account_id",
                |m: &Player| { &m.account_id },
                |m: &mut Player| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "hero_id",
                |m: &Player| { &m.hero_id },
                |m: &mut Player| { &mut m.hero_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Player>(
                "CSourceTVGameSmall.Player",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Player {
        const NAME: &'static str = "Player";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.hero_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.hero_id {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.hero_id {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Player {
            Player::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.hero_id = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Player {
            static instance: Player = Player {
                account_id: ::std::option::Option::None,
                hero_id: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Player {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CSourceTVGameSmall.Player").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Player {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Player {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCFindTopSourceTVGames)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFindTopSourceTVGames {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCFindTopSourceTVGames.search_key)
    pub search_key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCFindTopSourceTVGames.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCFindTopSourceTVGames.hero_id)
    pub hero_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCFindTopSourceTVGames.start_game)
    pub start_game: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCFindTopSourceTVGames.game_list_index)
    pub game_list_index: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
    pub lobby_ids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCFindTopSourceTVGames.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFindTopSourceTVGames {
    fn default() -> &'a CMsgClientToGCFindTopSourceTVGames {
        <CMsgClientToGCFindTopSourceTVGames as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFindTopSourceTVGames {
    pub fn new() -> CMsgClientToGCFindTopSourceTVGames {
        ::std::default::Default::default()
    }

    // optional string search_key = 1;

    pub fn search_key(&self) -> &str {
        match self.search_key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_search_key(&mut self) {
        self.search_key = ::std::option::Option::None;
    }

    pub fn has_search_key(&self) -> bool {
        self.search_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_search_key(&mut self, v: ::std::string::String) {
        self.search_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search_key(&mut self) -> &mut ::std::string::String {
        if self.search_key.is_none() {
            self.search_key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.search_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_search_key(&mut self) -> ::std::string::String {
        self.search_key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 league_id = 2;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional uint32 hero_id = 3;

    pub fn hero_id(&self) -> u32 {
        self.hero_id.unwrap_or(0)
    }

    pub fn clear_hero_id(&mut self) {
        self.hero_id = ::std::option::Option::None;
    }

    pub fn has_hero_id(&self) -> bool {
        self.hero_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hero_id(&mut self, v: u32) {
        self.hero_id = ::std::option::Option::Some(v);
    }

    // optional uint32 start_game = 4;

    pub fn start_game(&self) -> u32 {
        self.start_game.unwrap_or(0)
    }

    pub fn clear_start_game(&mut self) {
        self.start_game = ::std::option::Option::None;
    }

    pub fn has_start_game(&self) -> bool {
        self.start_game.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_game(&mut self, v: u32) {
        self.start_game = ::std::option::Option::Some(v);
    }

    // optional uint32 game_list_index = 5;

    pub fn game_list_index(&self) -> u32 {
        self.game_list_index.unwrap_or(0)
    }

    pub fn clear_game_list_index(&mut self) {
        self.game_list_index = ::std::option::Option::None;
    }

    pub fn has_game_list_index(&self) -> bool {
        self.game_list_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_list_index(&mut self, v: u32) {
        self.game_list_index = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "search_key",
            |m: &CMsgClientToGCFindTopSourceTVGames| { &m.search_key },
            |m: &mut CMsgClientToGCFindTopSourceTVGames| { &mut m.search_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "league_id",
            |m: &CMsgClientToGCFindTopSourceTVGames| { &m.league_id },
            |m: &mut CMsgClientToGCFindTopSourceTVGames| { &mut m.league_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hero_id",
            |m: &CMsgClientToGCFindTopSourceTVGames| { &m.hero_id },
            |m: &mut CMsgClientToGCFindTopSourceTVGames| { &mut m.hero_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "start_game",
            |m: &CMsgClientToGCFindTopSourceTVGames| { &m.start_game },
            |m: &mut CMsgClientToGCFindTopSourceTVGames| { &mut m.start_game },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_list_index",
            |m: &CMsgClientToGCFindTopSourceTVGames| { &m.game_list_index },
            |m: &mut CMsgClientToGCFindTopSourceTVGames| { &mut m.game_list_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "lobby_ids",
            |m: &CMsgClientToGCFindTopSourceTVGames| { &m.lobby_ids },
            |m: &mut CMsgClientToGCFindTopSourceTVGames| { &mut m.lobby_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCFindTopSourceTVGames>(
            "CMsgClientToGCFindTopSourceTVGames",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCFindTopSourceTVGames {
    const NAME: &'static str = "CMsgClientToGCFindTopSourceTVGames";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.search_key = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.hero_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.start_game = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.game_list_index = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    is.read_repeated_packed_uint64_into(&mut self.lobby_ids)?;
                },
                48 => {
                    self.lobby_ids.push(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.search_key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.league_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.hero_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.start_game {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.game_list_index {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        for value in &self.lobby_ids {
            my_size += ::protobuf::rt::uint64_size(6, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.search_key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.league_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.hero_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.start_game {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.game_list_index {
            os.write_uint32(5, v)?;
        }
        for v in &self.lobby_ids {
            os.write_uint64(6, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFindTopSourceTVGames {
        CMsgClientToGCFindTopSourceTVGames::new()
    }

    fn clear(&mut self) {
        self.search_key = ::std::option::Option::None;
        self.league_id = ::std::option::Option::None;
        self.hero_id = ::std::option::Option::None;
        self.start_game = ::std::option::Option::None;
        self.game_list_index = ::std::option::Option::None;
        self.lobby_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFindTopSourceTVGames {
        static instance: CMsgClientToGCFindTopSourceTVGames = CMsgClientToGCFindTopSourceTVGames {
            search_key: ::std::option::Option::None,
            league_id: ::std::option::Option::None,
            hero_id: ::std::option::Option::None,
            start_game: ::std::option::Option::None,
            game_list_index: ::std::option::Option::None,
            lobby_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCFindTopSourceTVGames {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCFindTopSourceTVGames").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCFindTopSourceTVGames {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCFindTopSourceTVGames {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCToClientFindTopSourceTVGamesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientFindTopSourceTVGamesResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
    pub search_key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
    pub hero_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
    pub start_game: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
    pub num_games: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
    pub game_list_index: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
    pub game_list: ::std::vec::Vec<CSourceTVGameSmall>,
    // @@protoc_insertion_point(field:dota.CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
    pub specific_games: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
    pub bot_game: ::protobuf::MessageField<CSourceTVGameSmall>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCToClientFindTopSourceTVGamesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientFindTopSourceTVGamesResponse {
    fn default() -> &'a CMsgGCToClientFindTopSourceTVGamesResponse {
        <CMsgGCToClientFindTopSourceTVGamesResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientFindTopSourceTVGamesResponse {
    pub fn new() -> CMsgGCToClientFindTopSourceTVGamesResponse {
        ::std::default::Default::default()
    }

    // optional string search_key = 1;

    pub fn search_key(&self) -> &str {
        match self.search_key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_search_key(&mut self) {
        self.search_key = ::std::option::Option::None;
    }

    pub fn has_search_key(&self) -> bool {
        self.search_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_search_key(&mut self, v: ::std::string::String) {
        self.search_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search_key(&mut self) -> &mut ::std::string::String {
        if self.search_key.is_none() {
            self.search_key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.search_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_search_key(&mut self) -> ::std::string::String {
        self.search_key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 league_id = 2;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional uint32 hero_id = 3;

    pub fn hero_id(&self) -> u32 {
        self.hero_id.unwrap_or(0)
    }

    pub fn clear_hero_id(&mut self) {
        self.hero_id = ::std::option::Option::None;
    }

    pub fn has_hero_id(&self) -> bool {
        self.hero_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hero_id(&mut self, v: u32) {
        self.hero_id = ::std::option::Option::Some(v);
    }

    // optional uint32 start_game = 4;

    pub fn start_game(&self) -> u32 {
        self.start_game.unwrap_or(0)
    }

    pub fn clear_start_game(&mut self) {
        self.start_game = ::std::option::Option::None;
    }

    pub fn has_start_game(&self) -> bool {
        self.start_game.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_game(&mut self, v: u32) {
        self.start_game = ::std::option::Option::Some(v);
    }

    // optional uint32 num_games = 5;

    pub fn num_games(&self) -> u32 {
        self.num_games.unwrap_or(0)
    }

    pub fn clear_num_games(&mut self) {
        self.num_games = ::std::option::Option::None;
    }

    pub fn has_num_games(&self) -> bool {
        self.num_games.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_games(&mut self, v: u32) {
        self.num_games = ::std::option::Option::Some(v);
    }

    // optional uint32 game_list_index = 6;

    pub fn game_list_index(&self) -> u32 {
        self.game_list_index.unwrap_or(0)
    }

    pub fn clear_game_list_index(&mut self) {
        self.game_list_index = ::std::option::Option::None;
    }

    pub fn has_game_list_index(&self) -> bool {
        self.game_list_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_list_index(&mut self, v: u32) {
        self.game_list_index = ::std::option::Option::Some(v);
    }

    // optional bool specific_games = 8;

    pub fn specific_games(&self) -> bool {
        self.specific_games.unwrap_or(false)
    }

    pub fn clear_specific_games(&mut self) {
        self.specific_games = ::std::option::Option::None;
    }

    pub fn has_specific_games(&self) -> bool {
        self.specific_games.is_some()
    }

    // Param is passed by value, moved
    pub fn set_specific_games(&mut self, v: bool) {
        self.specific_games = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "search_key",
            |m: &CMsgGCToClientFindTopSourceTVGamesResponse| { &m.search_key },
            |m: &mut CMsgGCToClientFindTopSourceTVGamesResponse| { &mut m.search_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "league_id",
            |m: &CMsgGCToClientFindTopSourceTVGamesResponse| { &m.league_id },
            |m: &mut CMsgGCToClientFindTopSourceTVGamesResponse| { &mut m.league_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hero_id",
            |m: &CMsgGCToClientFindTopSourceTVGamesResponse| { &m.hero_id },
            |m: &mut CMsgGCToClientFindTopSourceTVGamesResponse| { &mut m.hero_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "start_game",
            |m: &CMsgGCToClientFindTopSourceTVGamesResponse| { &m.start_game },
            |m: &mut CMsgGCToClientFindTopSourceTVGamesResponse| { &mut m.start_game },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_games",
            |m: &CMsgGCToClientFindTopSourceTVGamesResponse| { &m.num_games },
            |m: &mut CMsgGCToClientFindTopSourceTVGamesResponse| { &mut m.num_games },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_list_index",
            |m: &CMsgGCToClientFindTopSourceTVGamesResponse| { &m.game_list_index },
            |m: &mut CMsgGCToClientFindTopSourceTVGamesResponse| { &mut m.game_list_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "game_list",
            |m: &CMsgGCToClientFindTopSourceTVGamesResponse| { &m.game_list },
            |m: &mut CMsgGCToClientFindTopSourceTVGamesResponse| { &mut m.game_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "specific_games",
            |m: &CMsgGCToClientFindTopSourceTVGamesResponse| { &m.specific_games },
            |m: &mut CMsgGCToClientFindTopSourceTVGamesResponse| { &mut m.specific_games },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CSourceTVGameSmall>(
            "bot_game",
            |m: &CMsgGCToClientFindTopSourceTVGamesResponse| { &m.bot_game },
            |m: &mut CMsgGCToClientFindTopSourceTVGamesResponse| { &mut m.bot_game },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCToClientFindTopSourceTVGamesResponse>(
            "CMsgGCToClientFindTopSourceTVGamesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCToClientFindTopSourceTVGamesResponse {
    const NAME: &'static str = "CMsgGCToClientFindTopSourceTVGamesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.search_key = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.hero_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.start_game = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.num_games = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.game_list_index = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.game_list.push(is.read_message()?);
                },
                64 => {
                    self.specific_games = ::std::option::Option::Some(is.read_bool()?);
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.bot_game)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.search_key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.league_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.hero_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.start_game {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.num_games {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.game_list_index {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        for value in &self.game_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.specific_games {
            my_size += 1 + 1;
        }
        if let Some(v) = self.bot_game.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.search_key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.league_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.hero_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.start_game {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.num_games {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.game_list_index {
            os.write_uint32(6, v)?;
        }
        for v in &self.game_list {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if let Some(v) = self.specific_games {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.bot_game.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientFindTopSourceTVGamesResponse {
        CMsgGCToClientFindTopSourceTVGamesResponse::new()
    }

    fn clear(&mut self) {
        self.search_key = ::std::option::Option::None;
        self.league_id = ::std::option::Option::None;
        self.hero_id = ::std::option::Option::None;
        self.start_game = ::std::option::Option::None;
        self.num_games = ::std::option::Option::None;
        self.game_list_index = ::std::option::Option::None;
        self.game_list.clear();
        self.specific_games = ::std::option::Option::None;
        self.bot_game.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientFindTopSourceTVGamesResponse {
        static instance: CMsgGCToClientFindTopSourceTVGamesResponse = CMsgGCToClientFindTopSourceTVGamesResponse {
            search_key: ::std::option::Option::None,
            league_id: ::std::option::Option::None,
            hero_id: ::std::option::Option::None,
            start_game: ::std::option::Option::None,
            num_games: ::std::option::Option::None,
            game_list_index: ::std::option::Option::None,
            game_list: ::std::vec::Vec::new(),
            specific_games: ::std::option::Option::None,
            bot_game: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCToClientFindTopSourceTVGamesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCToClientFindTopSourceTVGamesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCToClientFindTopSourceTVGamesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCToClientFindTopSourceTVGamesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCToClientTopWeekendTourneyGames)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientTopWeekendTourneyGames {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
    pub live_games: ::std::vec::Vec<CSourceTVGameSmall>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCToClientTopWeekendTourneyGames.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientTopWeekendTourneyGames {
    fn default() -> &'a CMsgGCToClientTopWeekendTourneyGames {
        <CMsgGCToClientTopWeekendTourneyGames as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientTopWeekendTourneyGames {
    pub fn new() -> CMsgGCToClientTopWeekendTourneyGames {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "live_games",
            |m: &CMsgGCToClientTopWeekendTourneyGames| { &m.live_games },
            |m: &mut CMsgGCToClientTopWeekendTourneyGames| { &mut m.live_games },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCToClientTopWeekendTourneyGames>(
            "CMsgGCToClientTopWeekendTourneyGames",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCToClientTopWeekendTourneyGames {
    const NAME: &'static str = "CMsgGCToClientTopWeekendTourneyGames";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.live_games.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.live_games {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.live_games {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientTopWeekendTourneyGames {
        CMsgGCToClientTopWeekendTourneyGames::new()
    }

    fn clear(&mut self) {
        self.live_games.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientTopWeekendTourneyGames {
        static instance: CMsgGCToClientTopWeekendTourneyGames = CMsgGCToClientTopWeekendTourneyGames {
            live_games: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCToClientTopWeekendTourneyGames {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCToClientTopWeekendTourneyGames").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCToClientTopWeekendTourneyGames {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCToClientTopWeekendTourneyGames {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCTopLeagueMatchesRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCTopLeagueMatchesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCTopLeagueMatchesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCTopLeagueMatchesRequest {
    fn default() -> &'a CMsgClientToGCTopLeagueMatchesRequest {
        <CMsgClientToGCTopLeagueMatchesRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCTopLeagueMatchesRequest {
    pub fn new() -> CMsgClientToGCTopLeagueMatchesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCTopLeagueMatchesRequest>(
            "CMsgClientToGCTopLeagueMatchesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCTopLeagueMatchesRequest {
    const NAME: &'static str = "CMsgClientToGCTopLeagueMatchesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCTopLeagueMatchesRequest {
        CMsgClientToGCTopLeagueMatchesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCTopLeagueMatchesRequest {
        static instance: CMsgClientToGCTopLeagueMatchesRequest = CMsgClientToGCTopLeagueMatchesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCTopLeagueMatchesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCTopLeagueMatchesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCTopLeagueMatchesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCTopLeagueMatchesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCTopFriendMatchesRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCTopFriendMatchesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCTopFriendMatchesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCTopFriendMatchesRequest {
    fn default() -> &'a CMsgClientToGCTopFriendMatchesRequest {
        <CMsgClientToGCTopFriendMatchesRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCTopFriendMatchesRequest {
    pub fn new() -> CMsgClientToGCTopFriendMatchesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCTopFriendMatchesRequest>(
            "CMsgClientToGCTopFriendMatchesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCTopFriendMatchesRequest {
    const NAME: &'static str = "CMsgClientToGCTopFriendMatchesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCTopFriendMatchesRequest {
        CMsgClientToGCTopFriendMatchesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCTopFriendMatchesRequest {
        static instance: CMsgClientToGCTopFriendMatchesRequest = CMsgClientToGCTopFriendMatchesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCTopFriendMatchesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCTopFriendMatchesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCTopFriendMatchesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCTopFriendMatchesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCMatchesMinimalRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCMatchesMinimalRequest {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
    pub match_ids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCMatchesMinimalRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCMatchesMinimalRequest {
    fn default() -> &'a CMsgClientToGCMatchesMinimalRequest {
        <CMsgClientToGCMatchesMinimalRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCMatchesMinimalRequest {
    pub fn new() -> CMsgClientToGCMatchesMinimalRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "match_ids",
            |m: &CMsgClientToGCMatchesMinimalRequest| { &m.match_ids },
            |m: &mut CMsgClientToGCMatchesMinimalRequest| { &mut m.match_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCMatchesMinimalRequest>(
            "CMsgClientToGCMatchesMinimalRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCMatchesMinimalRequest {
    const NAME: &'static str = "CMsgClientToGCMatchesMinimalRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.match_ids)?;
                },
                8 => {
                    self.match_ids.push(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.match_ids {
            my_size += ::protobuf::rt::uint64_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.match_ids {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCMatchesMinimalRequest {
        CMsgClientToGCMatchesMinimalRequest::new()
    }

    fn clear(&mut self) {
        self.match_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCMatchesMinimalRequest {
        static instance: CMsgClientToGCMatchesMinimalRequest = CMsgClientToGCMatchesMinimalRequest {
            match_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCMatchesMinimalRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCMatchesMinimalRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCMatchesMinimalRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCMatchesMinimalRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCMatchesMinimalResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCMatchesMinimalResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCMatchesMinimalResponse.matches)
    pub matches: ::std::vec::Vec<super::dota_gcmessages_common::CMsgDOTAMatchMinimal>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCMatchesMinimalResponse.last_match)
    pub last_match: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCMatchesMinimalResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCMatchesMinimalResponse {
    fn default() -> &'a CMsgClientToGCMatchesMinimalResponse {
        <CMsgClientToGCMatchesMinimalResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCMatchesMinimalResponse {
    pub fn new() -> CMsgClientToGCMatchesMinimalResponse {
        ::std::default::Default::default()
    }

    // optional bool last_match = 2;

    pub fn last_match(&self) -> bool {
        self.last_match.unwrap_or(false)
    }

    pub fn clear_last_match(&mut self) {
        self.last_match = ::std::option::Option::None;
    }

    pub fn has_last_match(&self) -> bool {
        self.last_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_match(&mut self, v: bool) {
        self.last_match = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "matches",
            |m: &CMsgClientToGCMatchesMinimalResponse| { &m.matches },
            |m: &mut CMsgClientToGCMatchesMinimalResponse| { &mut m.matches },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "last_match",
            |m: &CMsgClientToGCMatchesMinimalResponse| { &m.last_match },
            |m: &mut CMsgClientToGCMatchesMinimalResponse| { &mut m.last_match },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCMatchesMinimalResponse>(
            "CMsgClientToGCMatchesMinimalResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCMatchesMinimalResponse {
    const NAME: &'static str = "CMsgClientToGCMatchesMinimalResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.matches.push(is.read_message()?);
                },
                16 => {
                    self.last_match = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.matches {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.last_match {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.matches {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.last_match {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCMatchesMinimalResponse {
        CMsgClientToGCMatchesMinimalResponse::new()
    }

    fn clear(&mut self) {
        self.matches.clear();
        self.last_match = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCMatchesMinimalResponse {
        static instance: CMsgClientToGCMatchesMinimalResponse = CMsgClientToGCMatchesMinimalResponse {
            matches: ::std::vec::Vec::new(),
            last_match: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCMatchesMinimalResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCMatchesMinimalResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCMatchesMinimalResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCMatchesMinimalResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCToClientTopLeagueMatchesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientTopLeagueMatchesResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
    pub matches: ::std::vec::Vec<super::dota_gcmessages_common::CMsgDOTAMatchMinimal>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCToClientTopLeagueMatchesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientTopLeagueMatchesResponse {
    fn default() -> &'a CMsgGCToClientTopLeagueMatchesResponse {
        <CMsgGCToClientTopLeagueMatchesResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientTopLeagueMatchesResponse {
    pub fn new() -> CMsgGCToClientTopLeagueMatchesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "matches",
            |m: &CMsgGCToClientTopLeagueMatchesResponse| { &m.matches },
            |m: &mut CMsgGCToClientTopLeagueMatchesResponse| { &mut m.matches },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCToClientTopLeagueMatchesResponse>(
            "CMsgGCToClientTopLeagueMatchesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCToClientTopLeagueMatchesResponse {
    const NAME: &'static str = "CMsgGCToClientTopLeagueMatchesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.matches.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.matches {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.matches {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientTopLeagueMatchesResponse {
        CMsgGCToClientTopLeagueMatchesResponse::new()
    }

    fn clear(&mut self) {
        self.matches.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientTopLeagueMatchesResponse {
        static instance: CMsgGCToClientTopLeagueMatchesResponse = CMsgGCToClientTopLeagueMatchesResponse {
            matches: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCToClientTopLeagueMatchesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCToClientTopLeagueMatchesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCToClientTopLeagueMatchesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCToClientTopLeagueMatchesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCToClientTopFriendMatchesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientTopFriendMatchesResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCToClientTopFriendMatchesResponse.matches)
    pub matches: ::std::vec::Vec<super::dota_gcmessages_common::CMsgDOTAMatchMinimal>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCToClientTopFriendMatchesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientTopFriendMatchesResponse {
    fn default() -> &'a CMsgGCToClientTopFriendMatchesResponse {
        <CMsgGCToClientTopFriendMatchesResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientTopFriendMatchesResponse {
    pub fn new() -> CMsgGCToClientTopFriendMatchesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "matches",
            |m: &CMsgGCToClientTopFriendMatchesResponse| { &m.matches },
            |m: &mut CMsgGCToClientTopFriendMatchesResponse| { &mut m.matches },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCToClientTopFriendMatchesResponse>(
            "CMsgGCToClientTopFriendMatchesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCToClientTopFriendMatchesResponse {
    const NAME: &'static str = "CMsgGCToClientTopFriendMatchesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.matches.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.matches {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.matches {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientTopFriendMatchesResponse {
        CMsgGCToClientTopFriendMatchesResponse::new()
    }

    fn clear(&mut self) {
        self.matches.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientTopFriendMatchesResponse {
        static instance: CMsgGCToClientTopFriendMatchesResponse = CMsgGCToClientTopFriendMatchesResponse {
            matches: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCToClientTopFriendMatchesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCToClientTopFriendMatchesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCToClientTopFriendMatchesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCToClientTopFriendMatchesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgSpectateFriendGame)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSpectateFriendGame {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgSpectateFriendGame.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgSpectateFriendGame.live)
    pub live: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgSpectateFriendGame.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSpectateFriendGame {
    fn default() -> &'a CMsgSpectateFriendGame {
        <CMsgSpectateFriendGame as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSpectateFriendGame {
    pub fn new() -> CMsgSpectateFriendGame {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional bool live = 2;

    pub fn live(&self) -> bool {
        self.live.unwrap_or(false)
    }

    pub fn clear_live(&mut self) {
        self.live = ::std::option::Option::None;
    }

    pub fn has_live(&self) -> bool {
        self.live.is_some()
    }

    // Param is passed by value, moved
    pub fn set_live(&mut self, v: bool) {
        self.live = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgSpectateFriendGame| { &m.steam_id },
            |m: &mut CMsgSpectateFriendGame| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "live",
            |m: &CMsgSpectateFriendGame| { &m.live },
            |m: &mut CMsgSpectateFriendGame| { &mut m.live },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSpectateFriendGame>(
            "CMsgSpectateFriendGame",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSpectateFriendGame {
    const NAME: &'static str = "CMsgSpectateFriendGame";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.live = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.live {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.live {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSpectateFriendGame {
        CMsgSpectateFriendGame::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.live = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSpectateFriendGame {
        static instance: CMsgSpectateFriendGame = CMsgSpectateFriendGame {
            steam_id: ::std::option::Option::None,
            live: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSpectateFriendGame {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSpectateFriendGame").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSpectateFriendGame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSpectateFriendGame {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgSpectateFriendGameResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSpectateFriendGameResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgSpectateFriendGameResponse.server_steamid)
    pub server_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgSpectateFriendGameResponse.watch_live_result)
    pub watch_live_result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_spectate_friend_game_response::EWatchLiveResult>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgSpectateFriendGameResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSpectateFriendGameResponse {
    fn default() -> &'a CMsgSpectateFriendGameResponse {
        <CMsgSpectateFriendGameResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSpectateFriendGameResponse {
    pub fn new() -> CMsgSpectateFriendGameResponse {
        ::std::default::Default::default()
    }

    // optional fixed64 server_steamid = 4;

    pub fn server_steamid(&self) -> u64 {
        self.server_steamid.unwrap_or(0)
    }

    pub fn clear_server_steamid(&mut self) {
        self.server_steamid = ::std::option::Option::None;
    }

    pub fn has_server_steamid(&self) -> bool {
        self.server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steamid(&mut self, v: u64) {
        self.server_steamid = ::std::option::Option::Some(v);
    }

    // optional .dota.CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5;

    pub fn watch_live_result(&self) -> cmsg_spectate_friend_game_response::EWatchLiveResult {
        match self.watch_live_result {
            Some(e) => e.enum_value_or(cmsg_spectate_friend_game_response::EWatchLiveResult::SUCCESS),
            None => cmsg_spectate_friend_game_response::EWatchLiveResult::SUCCESS,
        }
    }

    pub fn clear_watch_live_result(&mut self) {
        self.watch_live_result = ::std::option::Option::None;
    }

    pub fn has_watch_live_result(&self) -> bool {
        self.watch_live_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_live_result(&mut self, v: cmsg_spectate_friend_game_response::EWatchLiveResult) {
        self.watch_live_result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_steamid",
            |m: &CMsgSpectateFriendGameResponse| { &m.server_steamid },
            |m: &mut CMsgSpectateFriendGameResponse| { &mut m.server_steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "watch_live_result",
            |m: &CMsgSpectateFriendGameResponse| { &m.watch_live_result },
            |m: &mut CMsgSpectateFriendGameResponse| { &mut m.watch_live_result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSpectateFriendGameResponse>(
            "CMsgSpectateFriendGameResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSpectateFriendGameResponse {
    const NAME: &'static str = "CMsgSpectateFriendGameResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                33 => {
                    self.server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                40 => {
                    self.watch_live_result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.server_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.watch_live_result {
            my_size += ::protobuf::rt::int32_size(5, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.server_steamid {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.watch_live_result {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSpectateFriendGameResponse {
        CMsgSpectateFriendGameResponse::new()
    }

    fn clear(&mut self) {
        self.server_steamid = ::std::option::Option::None;
        self.watch_live_result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSpectateFriendGameResponse {
        static instance: CMsgSpectateFriendGameResponse = CMsgSpectateFriendGameResponse {
            server_steamid: ::std::option::Option::None,
            watch_live_result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSpectateFriendGameResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSpectateFriendGameResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSpectateFriendGameResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSpectateFriendGameResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSpectateFriendGameResponse`
pub mod cmsg_spectate_friend_game_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult)
    pub enum EWatchLiveResult {
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_GENERIC)
        ERROR_GENERIC = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_NO_PLUS)
        ERROR_NO_PLUS = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_NOT_FRIENDS)
        ERROR_NOT_FRIENDS = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_LOBBY_NOT_FOUND)
        ERROR_LOBBY_NOT_FOUND = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_SPECTATOR_IN_A_LOBBY)
        ERROR_SPECTATOR_IN_A_LOBBY = 5,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_LOBBY_IS_LAN)
        ERROR_LOBBY_IS_LAN = 6,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_WRONG_LOBBY_TYPE)
        ERROR_WRONG_LOBBY_TYPE = 7,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_WRONG_LOBBY_STATE)
        ERROR_WRONG_LOBBY_STATE = 8,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_PLAYER_NOT_PLAYER)
        ERROR_PLAYER_NOT_PLAYER = 9,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_TOO_MANY_SPECTATORS)
        ERROR_TOO_MANY_SPECTATORS = 10,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_SPECTATOR_SWITCHED_TEAMS)
        ERROR_SPECTATOR_SWITCHED_TEAMS = 11,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_FRIENDS_ON_BOTH_SIDES)
        ERROR_FRIENDS_ON_BOTH_SIDES = 12,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_SPECTATOR_IN_THIS_LOBBY)
        ERROR_SPECTATOR_IN_THIS_LOBBY = 13,
        // @@protoc_insertion_point(enum_value:dota.CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_LOBBY_IS_LEAGUE)
        ERROR_LOBBY_IS_LEAGUE = 14,
    }

    impl ::protobuf::Enum for EWatchLiveResult {
        const NAME: &'static str = "EWatchLiveResult";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EWatchLiveResult> {
            match value {
                0 => ::std::option::Option::Some(EWatchLiveResult::SUCCESS),
                1 => ::std::option::Option::Some(EWatchLiveResult::ERROR_GENERIC),
                2 => ::std::option::Option::Some(EWatchLiveResult::ERROR_NO_PLUS),
                3 => ::std::option::Option::Some(EWatchLiveResult::ERROR_NOT_FRIENDS),
                4 => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_NOT_FOUND),
                5 => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_IN_A_LOBBY),
                6 => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_IS_LAN),
                7 => ::std::option::Option::Some(EWatchLiveResult::ERROR_WRONG_LOBBY_TYPE),
                8 => ::std::option::Option::Some(EWatchLiveResult::ERROR_WRONG_LOBBY_STATE),
                9 => ::std::option::Option::Some(EWatchLiveResult::ERROR_PLAYER_NOT_PLAYER),
                10 => ::std::option::Option::Some(EWatchLiveResult::ERROR_TOO_MANY_SPECTATORS),
                11 => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_SWITCHED_TEAMS),
                12 => ::std::option::Option::Some(EWatchLiveResult::ERROR_FRIENDS_ON_BOTH_SIDES),
                13 => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_IN_THIS_LOBBY),
                14 => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_IS_LEAGUE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EWatchLiveResult> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(EWatchLiveResult::SUCCESS),
                "ERROR_GENERIC" => ::std::option::Option::Some(EWatchLiveResult::ERROR_GENERIC),
                "ERROR_NO_PLUS" => ::std::option::Option::Some(EWatchLiveResult::ERROR_NO_PLUS),
                "ERROR_NOT_FRIENDS" => ::std::option::Option::Some(EWatchLiveResult::ERROR_NOT_FRIENDS),
                "ERROR_LOBBY_NOT_FOUND" => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_NOT_FOUND),
                "ERROR_SPECTATOR_IN_A_LOBBY" => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_IN_A_LOBBY),
                "ERROR_LOBBY_IS_LAN" => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_IS_LAN),
                "ERROR_WRONG_LOBBY_TYPE" => ::std::option::Option::Some(EWatchLiveResult::ERROR_WRONG_LOBBY_TYPE),
                "ERROR_WRONG_LOBBY_STATE" => ::std::option::Option::Some(EWatchLiveResult::ERROR_WRONG_LOBBY_STATE),
                "ERROR_PLAYER_NOT_PLAYER" => ::std::option::Option::Some(EWatchLiveResult::ERROR_PLAYER_NOT_PLAYER),
                "ERROR_TOO_MANY_SPECTATORS" => ::std::option::Option::Some(EWatchLiveResult::ERROR_TOO_MANY_SPECTATORS),
                "ERROR_SPECTATOR_SWITCHED_TEAMS" => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_SWITCHED_TEAMS),
                "ERROR_FRIENDS_ON_BOTH_SIDES" => ::std::option::Option::Some(EWatchLiveResult::ERROR_FRIENDS_ON_BOTH_SIDES),
                "ERROR_SPECTATOR_IN_THIS_LOBBY" => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_IN_THIS_LOBBY),
                "ERROR_LOBBY_IS_LEAGUE" => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_IS_LEAGUE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EWatchLiveResult] = &[
            EWatchLiveResult::SUCCESS,
            EWatchLiveResult::ERROR_GENERIC,
            EWatchLiveResult::ERROR_NO_PLUS,
            EWatchLiveResult::ERROR_NOT_FRIENDS,
            EWatchLiveResult::ERROR_LOBBY_NOT_FOUND,
            EWatchLiveResult::ERROR_SPECTATOR_IN_A_LOBBY,
            EWatchLiveResult::ERROR_LOBBY_IS_LAN,
            EWatchLiveResult::ERROR_WRONG_LOBBY_TYPE,
            EWatchLiveResult::ERROR_WRONG_LOBBY_STATE,
            EWatchLiveResult::ERROR_PLAYER_NOT_PLAYER,
            EWatchLiveResult::ERROR_TOO_MANY_SPECTATORS,
            EWatchLiveResult::ERROR_SPECTATOR_SWITCHED_TEAMS,
            EWatchLiveResult::ERROR_FRIENDS_ON_BOTH_SIDES,
            EWatchLiveResult::ERROR_SPECTATOR_IN_THIS_LOBBY,
            EWatchLiveResult::ERROR_LOBBY_IS_LEAGUE,
        ];
    }

    impl ::protobuf::EnumFull for EWatchLiveResult {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSpectateFriendGameResponse.EWatchLiveResult").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EWatchLiveResult {
        fn default() -> Self {
            EWatchLiveResult::SUCCESS
        }
    }

    impl EWatchLiveResult {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EWatchLiveResult>("CMsgSpectateFriendGameResponse.EWatchLiveResult")
        }
    }
}

// @@protoc_insertion_point(message:dota.CDOTAReplayDownloadInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAReplayDownloadInfo {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTAReplayDownloadInfo.match)
    pub match_: ::protobuf::MessageField<super::dota_gcmessages_common::CMsgDOTAMatchMinimal>,
    // @@protoc_insertion_point(field:dota.CDOTAReplayDownloadInfo.title)
    pub title: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAReplayDownloadInfo.description)
    pub description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAReplayDownloadInfo.size)
    pub size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTAReplayDownloadInfo.tags)
    pub tags: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAReplayDownloadInfo.exists_on_disk)
    pub exists_on_disk: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTAReplayDownloadInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAReplayDownloadInfo {
    fn default() -> &'a CDOTAReplayDownloadInfo {
        <CDOTAReplayDownloadInfo as ::protobuf::Message>::default_instance()
    }
}

impl CDOTAReplayDownloadInfo {
    pub fn new() -> CDOTAReplayDownloadInfo {
        ::std::default::Default::default()
    }

    // optional string title = 2;

    pub fn title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title = ::std::option::Option::None;
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title = ::std::option::Option::Some(::std::string::String::new());
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string description = 3;

    pub fn description(&self) -> &str {
        match self.description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_description(&mut self) {
        self.description = ::std::option::Option::None;
    }

    pub fn has_description(&self) -> bool {
        self.description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        if self.description.is_none() {
            self.description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.description.as_mut().unwrap()
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        self.description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 size = 4;

    pub fn size(&self) -> u32 {
        self.size.unwrap_or(0)
    }

    pub fn clear_size(&mut self) {
        self.size = ::std::option::Option::None;
    }

    pub fn has_size(&self) -> bool {
        self.size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u32) {
        self.size = ::std::option::Option::Some(v);
    }

    // optional bool exists_on_disk = 6;

    pub fn exists_on_disk(&self) -> bool {
        self.exists_on_disk.unwrap_or(false)
    }

    pub fn clear_exists_on_disk(&mut self) {
        self.exists_on_disk = ::std::option::Option::None;
    }

    pub fn has_exists_on_disk(&self) -> bool {
        self.exists_on_disk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exists_on_disk(&mut self, v: bool) {
        self.exists_on_disk = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::dota_gcmessages_common::CMsgDOTAMatchMinimal>(
            "match",
            |m: &CDOTAReplayDownloadInfo| { &m.match_ },
            |m: &mut CDOTAReplayDownloadInfo| { &mut m.match_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "title",
            |m: &CDOTAReplayDownloadInfo| { &m.title },
            |m: &mut CDOTAReplayDownloadInfo| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "description",
            |m: &CDOTAReplayDownloadInfo| { &m.description },
            |m: &mut CDOTAReplayDownloadInfo| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "size",
            |m: &CDOTAReplayDownloadInfo| { &m.size },
            |m: &mut CDOTAReplayDownloadInfo| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &CDOTAReplayDownloadInfo| { &m.tags },
            |m: &mut CDOTAReplayDownloadInfo| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "exists_on_disk",
            |m: &CDOTAReplayDownloadInfo| { &m.exists_on_disk },
            |m: &mut CDOTAReplayDownloadInfo| { &mut m.exists_on_disk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTAReplayDownloadInfo>(
            "CDOTAReplayDownloadInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTAReplayDownloadInfo {
    const NAME: &'static str = "CDOTAReplayDownloadInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.match_)?;
                },
                18 => {
                    self.title = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.description = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.size = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.tags.push(is.read_string()?);
                },
                48 => {
                    self.exists_on_disk = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.match_.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.title.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.description.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.size {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(v) = self.exists_on_disk {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.match_.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.description.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.size {
            os.write_uint32(4, v)?;
        }
        for v in &self.tags {
            os.write_string(5, &v)?;
        };
        if let Some(v) = self.exists_on_disk {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAReplayDownloadInfo {
        CDOTAReplayDownloadInfo::new()
    }

    fn clear(&mut self) {
        self.match_.clear();
        self.title = ::std::option::Option::None;
        self.description = ::std::option::Option::None;
        self.size = ::std::option::Option::None;
        self.tags.clear();
        self.exists_on_disk = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAReplayDownloadInfo {
        static instance: CDOTAReplayDownloadInfo = CDOTAReplayDownloadInfo {
            match_: ::protobuf::MessageField::none(),
            title: ::std::option::Option::None,
            description: ::std::option::Option::None,
            size: ::std::option::Option::None,
            tags: ::std::vec::Vec::new(),
            exists_on_disk: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTAReplayDownloadInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTAReplayDownloadInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTAReplayDownloadInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTAReplayDownloadInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CDOTAReplayDownloadInfo`
pub mod cdotareplay_download_info {
    // @@protoc_insertion_point(message:dota.CDOTAReplayDownloadInfo.Highlight)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Highlight {
        // message fields
        // @@protoc_insertion_point(field:dota.CDOTAReplayDownloadInfo.Highlight.timestamp)
        pub timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CDOTAReplayDownloadInfo.Highlight.description)
        pub description: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CDOTAReplayDownloadInfo.Highlight.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Highlight {
        fn default() -> &'a Highlight {
            <Highlight as ::protobuf::Message>::default_instance()
        }
    }

    impl Highlight {
        pub fn new() -> Highlight {
            ::std::default::Default::default()
        }

        // optional uint32 timestamp = 1;

        pub fn timestamp(&self) -> u32 {
            self.timestamp.unwrap_or(0)
        }

        pub fn clear_timestamp(&mut self) {
            self.timestamp = ::std::option::Option::None;
        }

        pub fn has_timestamp(&self) -> bool {
            self.timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_timestamp(&mut self, v: u32) {
            self.timestamp = ::std::option::Option::Some(v);
        }

        // optional string description = 2;

        pub fn description(&self) -> &str {
            match self.description.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_description(&mut self) {
            self.description = ::std::option::Option::None;
        }

        pub fn has_description(&self) -> bool {
            self.description.is_some()
        }

        // Param is passed by value, moved
        pub fn set_description(&mut self, v: ::std::string::String) {
            self.description = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_description(&mut self) -> &mut ::std::string::String {
            if self.description.is_none() {
                self.description = ::std::option::Option::Some(::std::string::String::new());
            }
            self.description.as_mut().unwrap()
        }

        // Take field
        pub fn take_description(&mut self) -> ::std::string::String {
            self.description.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "timestamp",
                |m: &Highlight| { &m.timestamp },
                |m: &mut Highlight| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "description",
                |m: &Highlight| { &m.description },
                |m: &mut Highlight| { &mut m.description },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Highlight>(
                "CDOTAReplayDownloadInfo.Highlight",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Highlight {
        const NAME: &'static str = "Highlight";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.description = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.timestamp {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.description.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.timestamp {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.description.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Highlight {
            Highlight::new()
        }

        fn clear(&mut self) {
            self.timestamp = ::std::option::Option::None;
            self.description = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Highlight {
            static instance: Highlight = Highlight {
                timestamp: ::std::option::Option::None,
                description: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Highlight {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CDOTAReplayDownloadInfo.Highlight").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Highlight {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Highlight {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgWatchGame)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWatchGame {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgWatchGame.server_steamid)
    pub server_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgWatchGame.client_version)
    pub client_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWatchGame.watch_server_steamid)
    pub watch_server_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgWatchGame.lobby_id)
    pub lobby_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgWatchGame.regions)
    pub regions: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgWatchGame.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWatchGame {
    fn default() -> &'a CMsgWatchGame {
        <CMsgWatchGame as ::protobuf::Message>::default_instance()
    }
}

impl CMsgWatchGame {
    pub fn new() -> CMsgWatchGame {
        ::std::default::Default::default()
    }

    // optional fixed64 server_steamid = 1;

    pub fn server_steamid(&self) -> u64 {
        self.server_steamid.unwrap_or(0)
    }

    pub fn clear_server_steamid(&mut self) {
        self.server_steamid = ::std::option::Option::None;
    }

    pub fn has_server_steamid(&self) -> bool {
        self.server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steamid(&mut self, v: u64) {
        self.server_steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 client_version = 2;

    pub fn client_version(&self) -> u32 {
        self.client_version.unwrap_or(0)
    }

    pub fn clear_client_version(&mut self) {
        self.client_version = ::std::option::Option::None;
    }

    pub fn has_client_version(&self) -> bool {
        self.client_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_version(&mut self, v: u32) {
        self.client_version = ::std::option::Option::Some(v);
    }

    // optional fixed64 watch_server_steamid = 3;

    pub fn watch_server_steamid(&self) -> u64 {
        self.watch_server_steamid.unwrap_or(0)
    }

    pub fn clear_watch_server_steamid(&mut self) {
        self.watch_server_steamid = ::std::option::Option::None;
    }

    pub fn has_watch_server_steamid(&self) -> bool {
        self.watch_server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_server_steamid(&mut self, v: u64) {
        self.watch_server_steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 lobby_id = 4;

    pub fn lobby_id(&self) -> u64 {
        self.lobby_id.unwrap_or(0)
    }

    pub fn clear_lobby_id(&mut self) {
        self.lobby_id = ::std::option::Option::None;
    }

    pub fn has_lobby_id(&self) -> bool {
        self.lobby_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby_id(&mut self, v: u64) {
        self.lobby_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_steamid",
            |m: &CMsgWatchGame| { &m.server_steamid },
            |m: &mut CMsgWatchGame| { &mut m.server_steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_version",
            |m: &CMsgWatchGame| { &m.client_version },
            |m: &mut CMsgWatchGame| { &mut m.client_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "watch_server_steamid",
            |m: &CMsgWatchGame| { &m.watch_server_steamid },
            |m: &mut CMsgWatchGame| { &mut m.watch_server_steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lobby_id",
            |m: &CMsgWatchGame| { &m.lobby_id },
            |m: &mut CMsgWatchGame| { &mut m.lobby_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "regions",
            |m: &CMsgWatchGame| { &m.regions },
            |m: &mut CMsgWatchGame| { &mut m.regions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgWatchGame>(
            "CMsgWatchGame",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgWatchGame {
    const NAME: &'static str = "CMsgWatchGame";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.client_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                25 => {
                    self.watch_server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.lobby_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.regions)?;
                },
                40 => {
                    self.regions.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.server_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_version {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.watch_server_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.lobby_id {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        for value in &self.regions {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.server_steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.client_version {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.watch_server_steamid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.lobby_id {
            os.write_uint64(4, v)?;
        }
        for v in &self.regions {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWatchGame {
        CMsgWatchGame::new()
    }

    fn clear(&mut self) {
        self.server_steamid = ::std::option::Option::None;
        self.client_version = ::std::option::Option::None;
        self.watch_server_steamid = ::std::option::Option::None;
        self.lobby_id = ::std::option::Option::None;
        self.regions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWatchGame {
        static instance: CMsgWatchGame = CMsgWatchGame {
            server_steamid: ::std::option::Option::None,
            client_version: ::std::option::Option::None,
            watch_server_steamid: ::std::option::Option::None,
            lobby_id: ::std::option::Option::None,
            regions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgWatchGame {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgWatchGame").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgWatchGame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgWatchGame {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgCancelWatchGame)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCancelWatchGame {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgCancelWatchGame.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCancelWatchGame {
    fn default() -> &'a CMsgCancelWatchGame {
        <CMsgCancelWatchGame as ::protobuf::Message>::default_instance()
    }
}

impl CMsgCancelWatchGame {
    pub fn new() -> CMsgCancelWatchGame {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgCancelWatchGame>(
            "CMsgCancelWatchGame",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgCancelWatchGame {
    const NAME: &'static str = "CMsgCancelWatchGame";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCancelWatchGame {
        CMsgCancelWatchGame::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCancelWatchGame {
        static instance: CMsgCancelWatchGame = CMsgCancelWatchGame {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgCancelWatchGame {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgCancelWatchGame").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgCancelWatchGame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgCancelWatchGame {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgWatchGameResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWatchGameResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgWatchGameResponse.watch_game_result)
    pub watch_game_result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_watch_game_response::WatchGameResult>>,
    // @@protoc_insertion_point(field:dota.CMsgWatchGameResponse.source_tv_public_addr)
    pub source_tv_public_addr: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWatchGameResponse.source_tv_private_addr)
    pub source_tv_private_addr: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWatchGameResponse.source_tv_port)
    pub source_tv_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWatchGameResponse.game_server_steamid)
    pub game_server_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgWatchGameResponse.watch_server_steamid)
    pub watch_server_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgWatchGameResponse.watch_tv_unique_secret_code)
    pub watch_tv_unique_secret_code: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgWatchGameResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWatchGameResponse {
    fn default() -> &'a CMsgWatchGameResponse {
        <CMsgWatchGameResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgWatchGameResponse {
    pub fn new() -> CMsgWatchGameResponse {
        ::std::default::Default::default()
    }

    // optional .dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1;

    pub fn watch_game_result(&self) -> cmsg_watch_game_response::WatchGameResult {
        match self.watch_game_result {
            Some(e) => e.enum_value_or(cmsg_watch_game_response::WatchGameResult::PENDING),
            None => cmsg_watch_game_response::WatchGameResult::PENDING,
        }
    }

    pub fn clear_watch_game_result(&mut self) {
        self.watch_game_result = ::std::option::Option::None;
    }

    pub fn has_watch_game_result(&self) -> bool {
        self.watch_game_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_game_result(&mut self, v: cmsg_watch_game_response::WatchGameResult) {
        self.watch_game_result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 source_tv_public_addr = 2;

    pub fn source_tv_public_addr(&self) -> u32 {
        self.source_tv_public_addr.unwrap_or(0)
    }

    pub fn clear_source_tv_public_addr(&mut self) {
        self.source_tv_public_addr = ::std::option::Option::None;
    }

    pub fn has_source_tv_public_addr(&self) -> bool {
        self.source_tv_public_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_tv_public_addr(&mut self, v: u32) {
        self.source_tv_public_addr = ::std::option::Option::Some(v);
    }

    // optional uint32 source_tv_private_addr = 3;

    pub fn source_tv_private_addr(&self) -> u32 {
        self.source_tv_private_addr.unwrap_or(0)
    }

    pub fn clear_source_tv_private_addr(&mut self) {
        self.source_tv_private_addr = ::std::option::Option::None;
    }

    pub fn has_source_tv_private_addr(&self) -> bool {
        self.source_tv_private_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_tv_private_addr(&mut self, v: u32) {
        self.source_tv_private_addr = ::std::option::Option::Some(v);
    }

    // optional uint32 source_tv_port = 4;

    pub fn source_tv_port(&self) -> u32 {
        self.source_tv_port.unwrap_or(0)
    }

    pub fn clear_source_tv_port(&mut self) {
        self.source_tv_port = ::std::option::Option::None;
    }

    pub fn has_source_tv_port(&self) -> bool {
        self.source_tv_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_tv_port(&mut self, v: u32) {
        self.source_tv_port = ::std::option::Option::Some(v);
    }

    // optional fixed64 game_server_steamid = 5;

    pub fn game_server_steamid(&self) -> u64 {
        self.game_server_steamid.unwrap_or(0)
    }

    pub fn clear_game_server_steamid(&mut self) {
        self.game_server_steamid = ::std::option::Option::None;
    }

    pub fn has_game_server_steamid(&self) -> bool {
        self.game_server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_server_steamid(&mut self, v: u64) {
        self.game_server_steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 watch_server_steamid = 6;

    pub fn watch_server_steamid(&self) -> u64 {
        self.watch_server_steamid.unwrap_or(0)
    }

    pub fn clear_watch_server_steamid(&mut self) {
        self.watch_server_steamid = ::std::option::Option::None;
    }

    pub fn has_watch_server_steamid(&self) -> bool {
        self.watch_server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_server_steamid(&mut self, v: u64) {
        self.watch_server_steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 watch_tv_unique_secret_code = 7;

    pub fn watch_tv_unique_secret_code(&self) -> u64 {
        self.watch_tv_unique_secret_code.unwrap_or(0)
    }

    pub fn clear_watch_tv_unique_secret_code(&mut self) {
        self.watch_tv_unique_secret_code = ::std::option::Option::None;
    }

    pub fn has_watch_tv_unique_secret_code(&self) -> bool {
        self.watch_tv_unique_secret_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_tv_unique_secret_code(&mut self, v: u64) {
        self.watch_tv_unique_secret_code = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "watch_game_result",
            |m: &CMsgWatchGameResponse| { &m.watch_game_result },
            |m: &mut CMsgWatchGameResponse| { &mut m.watch_game_result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_tv_public_addr",
            |m: &CMsgWatchGameResponse| { &m.source_tv_public_addr },
            |m: &mut CMsgWatchGameResponse| { &mut m.source_tv_public_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_tv_private_addr",
            |m: &CMsgWatchGameResponse| { &m.source_tv_private_addr },
            |m: &mut CMsgWatchGameResponse| { &mut m.source_tv_private_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_tv_port",
            |m: &CMsgWatchGameResponse| { &m.source_tv_port },
            |m: &mut CMsgWatchGameResponse| { &mut m.source_tv_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_server_steamid",
            |m: &CMsgWatchGameResponse| { &m.game_server_steamid },
            |m: &mut CMsgWatchGameResponse| { &mut m.game_server_steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "watch_server_steamid",
            |m: &CMsgWatchGameResponse| { &m.watch_server_steamid },
            |m: &mut CMsgWatchGameResponse| { &mut m.watch_server_steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "watch_tv_unique_secret_code",
            |m: &CMsgWatchGameResponse| { &m.watch_tv_unique_secret_code },
            |m: &mut CMsgWatchGameResponse| { &mut m.watch_tv_unique_secret_code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgWatchGameResponse>(
            "CMsgWatchGameResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgWatchGameResponse {
    const NAME: &'static str = "CMsgWatchGameResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.watch_game_result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.source_tv_public_addr = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.source_tv_private_addr = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.source_tv_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                41 => {
                    self.game_server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                49 => {
                    self.watch_server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                57 => {
                    self.watch_tv_unique_secret_code = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.watch_game_result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.source_tv_public_addr {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.source_tv_private_addr {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.source_tv_port {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.game_server_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.watch_server_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.watch_tv_unique_secret_code {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.watch_game_result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.source_tv_public_addr {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.source_tv_private_addr {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.source_tv_port {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.game_server_steamid {
            os.write_fixed64(5, v)?;
        }
        if let Some(v) = self.watch_server_steamid {
            os.write_fixed64(6, v)?;
        }
        if let Some(v) = self.watch_tv_unique_secret_code {
            os.write_fixed64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWatchGameResponse {
        CMsgWatchGameResponse::new()
    }

    fn clear(&mut self) {
        self.watch_game_result = ::std::option::Option::None;
        self.source_tv_public_addr = ::std::option::Option::None;
        self.source_tv_private_addr = ::std::option::Option::None;
        self.source_tv_port = ::std::option::Option::None;
        self.game_server_steamid = ::std::option::Option::None;
        self.watch_server_steamid = ::std::option::Option::None;
        self.watch_tv_unique_secret_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWatchGameResponse {
        static instance: CMsgWatchGameResponse = CMsgWatchGameResponse {
            watch_game_result: ::std::option::Option::None,
            source_tv_public_addr: ::std::option::Option::None,
            source_tv_private_addr: ::std::option::Option::None,
            source_tv_port: ::std::option::Option::None,
            game_server_steamid: ::std::option::Option::None,
            watch_server_steamid: ::std::option::Option::None,
            watch_tv_unique_secret_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgWatchGameResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgWatchGameResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgWatchGameResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgWatchGameResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgWatchGameResponse`
pub mod cmsg_watch_game_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgWatchGameResponse.WatchGameResult)
    pub enum WatchGameResult {
        // @@protoc_insertion_point(enum_value:dota.CMsgWatchGameResponse.WatchGameResult.PENDING)
        PENDING = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgWatchGameResponse.WatchGameResult.READY)
        READY = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgWatchGameResponse.WatchGameResult.GAMESERVERNOTFOUND)
        GAMESERVERNOTFOUND = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgWatchGameResponse.WatchGameResult.UNAVAILABLE)
        UNAVAILABLE = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgWatchGameResponse.WatchGameResult.CANCELLED)
        CANCELLED = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgWatchGameResponse.WatchGameResult.INCOMPATIBLEVERSION)
        INCOMPATIBLEVERSION = 5,
        // @@protoc_insertion_point(enum_value:dota.CMsgWatchGameResponse.WatchGameResult.MISSINGLEAGUESUBSCRIPTION)
        MISSINGLEAGUESUBSCRIPTION = 6,
        // @@protoc_insertion_point(enum_value:dota.CMsgWatchGameResponse.WatchGameResult.LOBBYNOTFOUND)
        LOBBYNOTFOUND = 7,
    }

    impl ::protobuf::Enum for WatchGameResult {
        const NAME: &'static str = "WatchGameResult";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<WatchGameResult> {
            match value {
                0 => ::std::option::Option::Some(WatchGameResult::PENDING),
                1 => ::std::option::Option::Some(WatchGameResult::READY),
                2 => ::std::option::Option::Some(WatchGameResult::GAMESERVERNOTFOUND),
                3 => ::std::option::Option::Some(WatchGameResult::UNAVAILABLE),
                4 => ::std::option::Option::Some(WatchGameResult::CANCELLED),
                5 => ::std::option::Option::Some(WatchGameResult::INCOMPATIBLEVERSION),
                6 => ::std::option::Option::Some(WatchGameResult::MISSINGLEAGUESUBSCRIPTION),
                7 => ::std::option::Option::Some(WatchGameResult::LOBBYNOTFOUND),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<WatchGameResult> {
            match str {
                "PENDING" => ::std::option::Option::Some(WatchGameResult::PENDING),
                "READY" => ::std::option::Option::Some(WatchGameResult::READY),
                "GAMESERVERNOTFOUND" => ::std::option::Option::Some(WatchGameResult::GAMESERVERNOTFOUND),
                "UNAVAILABLE" => ::std::option::Option::Some(WatchGameResult::UNAVAILABLE),
                "CANCELLED" => ::std::option::Option::Some(WatchGameResult::CANCELLED),
                "INCOMPATIBLEVERSION" => ::std::option::Option::Some(WatchGameResult::INCOMPATIBLEVERSION),
                "MISSINGLEAGUESUBSCRIPTION" => ::std::option::Option::Some(WatchGameResult::MISSINGLEAGUESUBSCRIPTION),
                "LOBBYNOTFOUND" => ::std::option::Option::Some(WatchGameResult::LOBBYNOTFOUND),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [WatchGameResult] = &[
            WatchGameResult::PENDING,
            WatchGameResult::READY,
            WatchGameResult::GAMESERVERNOTFOUND,
            WatchGameResult::UNAVAILABLE,
            WatchGameResult::CANCELLED,
            WatchGameResult::INCOMPATIBLEVERSION,
            WatchGameResult::MISSINGLEAGUESUBSCRIPTION,
            WatchGameResult::LOBBYNOTFOUND,
        ];
    }

    impl ::protobuf::EnumFull for WatchGameResult {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgWatchGameResponse.WatchGameResult").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for WatchGameResult {
        fn default() -> Self {
            WatchGameResult::PENDING
        }
    }

    impl WatchGameResult {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<WatchGameResult>("CMsgWatchGameResponse.WatchGameResult")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgPartyLeaderWatchGamePrompt)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPartyLeaderWatchGamePrompt {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
    pub game_server_steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgPartyLeaderWatchGamePrompt.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPartyLeaderWatchGamePrompt {
    fn default() -> &'a CMsgPartyLeaderWatchGamePrompt {
        <CMsgPartyLeaderWatchGamePrompt as ::protobuf::Message>::default_instance()
    }
}

impl CMsgPartyLeaderWatchGamePrompt {
    pub fn new() -> CMsgPartyLeaderWatchGamePrompt {
        ::std::default::Default::default()
    }

    // optional fixed64 game_server_steamid = 5;

    pub fn game_server_steamid(&self) -> u64 {
        self.game_server_steamid.unwrap_or(0)
    }

    pub fn clear_game_server_steamid(&mut self) {
        self.game_server_steamid = ::std::option::Option::None;
    }

    pub fn has_game_server_steamid(&self) -> bool {
        self.game_server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_server_steamid(&mut self, v: u64) {
        self.game_server_steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_server_steamid",
            |m: &CMsgPartyLeaderWatchGamePrompt| { &m.game_server_steamid },
            |m: &mut CMsgPartyLeaderWatchGamePrompt| { &mut m.game_server_steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgPartyLeaderWatchGamePrompt>(
            "CMsgPartyLeaderWatchGamePrompt",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgPartyLeaderWatchGamePrompt {
    const NAME: &'static str = "CMsgPartyLeaderWatchGamePrompt";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                41 => {
                    self.game_server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.game_server_steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.game_server_steamid {
            os.write_fixed64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPartyLeaderWatchGamePrompt {
        CMsgPartyLeaderWatchGamePrompt::new()
    }

    fn clear(&mut self) {
        self.game_server_steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPartyLeaderWatchGamePrompt {
        static instance: CMsgPartyLeaderWatchGamePrompt = CMsgPartyLeaderWatchGamePrompt {
            game_server_steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgPartyLeaderWatchGamePrompt {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgPartyLeaderWatchGamePrompt").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgPartyLeaderWatchGamePrompt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgPartyLeaderWatchGamePrompt {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTABroadcasterInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTABroadcasterInfo {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTABroadcasterInfo.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcasterInfo.server_steam_id)
    pub server_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcasterInfo.live)
    pub live: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcasterInfo.team_name_radiant)
    pub team_name_radiant: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcasterInfo.team_name_dire)
    pub team_name_dire: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcasterInfo.series_game)
    pub series_game: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
    pub upcoming_broadcast_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcasterInfo.allow_live_video)
    pub allow_live_video: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcasterInfo.node_type)
    pub node_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTABroadcasterInfo.node_name)
    pub node_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTABroadcasterInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTABroadcasterInfo {
    fn default() -> &'a CDOTABroadcasterInfo {
        <CDOTABroadcasterInfo as ::protobuf::Message>::default_instance()
    }
}

impl CDOTABroadcasterInfo {
    pub fn new() -> CDOTABroadcasterInfo {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 server_steam_id = 2;

    pub fn server_steam_id(&self) -> u64 {
        self.server_steam_id.unwrap_or(0)
    }

    pub fn clear_server_steam_id(&mut self) {
        self.server_steam_id = ::std::option::Option::None;
    }

    pub fn has_server_steam_id(&self) -> bool {
        self.server_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steam_id(&mut self, v: u64) {
        self.server_steam_id = ::std::option::Option::Some(v);
    }

    // optional bool live = 3;

    pub fn live(&self) -> bool {
        self.live.unwrap_or(false)
    }

    pub fn clear_live(&mut self) {
        self.live = ::std::option::Option::None;
    }

    pub fn has_live(&self) -> bool {
        self.live.is_some()
    }

    // Param is passed by value, moved
    pub fn set_live(&mut self, v: bool) {
        self.live = ::std::option::Option::Some(v);
    }

    // optional string team_name_radiant = 4;

    pub fn team_name_radiant(&self) -> &str {
        match self.team_name_radiant.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name_radiant(&mut self) {
        self.team_name_radiant = ::std::option::Option::None;
    }

    pub fn has_team_name_radiant(&self) -> bool {
        self.team_name_radiant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name_radiant(&mut self, v: ::std::string::String) {
        self.team_name_radiant = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name_radiant(&mut self) -> &mut ::std::string::String {
        if self.team_name_radiant.is_none() {
            self.team_name_radiant = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name_radiant.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name_radiant(&mut self) -> ::std::string::String {
        self.team_name_radiant.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string team_name_dire = 5;

    pub fn team_name_dire(&self) -> &str {
        match self.team_name_dire.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name_dire(&mut self) {
        self.team_name_dire = ::std::option::Option::None;
    }

    pub fn has_team_name_dire(&self) -> bool {
        self.team_name_dire.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name_dire(&mut self, v: ::std::string::String) {
        self.team_name_dire = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name_dire(&mut self) -> &mut ::std::string::String {
        if self.team_name_dire.is_none() {
            self.team_name_dire = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name_dire.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name_dire(&mut self) -> ::std::string::String {
        self.team_name_dire.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 series_game = 7;

    pub fn series_game(&self) -> u32 {
        self.series_game.unwrap_or(0)
    }

    pub fn clear_series_game(&mut self) {
        self.series_game = ::std::option::Option::None;
    }

    pub fn has_series_game(&self) -> bool {
        self.series_game.is_some()
    }

    // Param is passed by value, moved
    pub fn set_series_game(&mut self, v: u32) {
        self.series_game = ::std::option::Option::Some(v);
    }

    // optional uint32 upcoming_broadcast_timestamp = 9;

    pub fn upcoming_broadcast_timestamp(&self) -> u32 {
        self.upcoming_broadcast_timestamp.unwrap_or(0)
    }

    pub fn clear_upcoming_broadcast_timestamp(&mut self) {
        self.upcoming_broadcast_timestamp = ::std::option::Option::None;
    }

    pub fn has_upcoming_broadcast_timestamp(&self) -> bool {
        self.upcoming_broadcast_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upcoming_broadcast_timestamp(&mut self, v: u32) {
        self.upcoming_broadcast_timestamp = ::std::option::Option::Some(v);
    }

    // optional bool allow_live_video = 10;

    pub fn allow_live_video(&self) -> bool {
        self.allow_live_video.unwrap_or(false)
    }

    pub fn clear_allow_live_video(&mut self) {
        self.allow_live_video = ::std::option::Option::None;
    }

    pub fn has_allow_live_video(&self) -> bool {
        self.allow_live_video.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_live_video(&mut self, v: bool) {
        self.allow_live_video = ::std::option::Option::Some(v);
    }

    // optional uint32 node_type = 11;

    pub fn node_type(&self) -> u32 {
        self.node_type.unwrap_or(0)
    }

    pub fn clear_node_type(&mut self) {
        self.node_type = ::std::option::Option::None;
    }

    pub fn has_node_type(&self) -> bool {
        self.node_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_type(&mut self, v: u32) {
        self.node_type = ::std::option::Option::Some(v);
    }

    // optional string node_name = 12;

    pub fn node_name(&self) -> &str {
        match self.node_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_node_name(&mut self) {
        self.node_name = ::std::option::Option::None;
    }

    pub fn has_node_name(&self) -> bool {
        self.node_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_name(&mut self, v: ::std::string::String) {
        self.node_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_name(&mut self) -> &mut ::std::string::String {
        if self.node_name.is_none() {
            self.node_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.node_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_node_name(&mut self) -> ::std::string::String {
        self.node_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CDOTABroadcasterInfo| { &m.account_id },
            |m: &mut CDOTABroadcasterInfo| { &mut m.account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_steam_id",
            |m: &CDOTABroadcasterInfo| { &m.server_steam_id },
            |m: &mut CDOTABroadcasterInfo| { &mut m.server_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "live",
            |m: &CDOTABroadcasterInfo| { &m.live },
            |m: &mut CDOTABroadcasterInfo| { &mut m.live },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_name_radiant",
            |m: &CDOTABroadcasterInfo| { &m.team_name_radiant },
            |m: &mut CDOTABroadcasterInfo| { &mut m.team_name_radiant },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_name_dire",
            |m: &CDOTABroadcasterInfo| { &m.team_name_dire },
            |m: &mut CDOTABroadcasterInfo| { &mut m.team_name_dire },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "series_game",
            |m: &CDOTABroadcasterInfo| { &m.series_game },
            |m: &mut CDOTABroadcasterInfo| { &mut m.series_game },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "upcoming_broadcast_timestamp",
            |m: &CDOTABroadcasterInfo| { &m.upcoming_broadcast_timestamp },
            |m: &mut CDOTABroadcasterInfo| { &mut m.upcoming_broadcast_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "allow_live_video",
            |m: &CDOTABroadcasterInfo| { &m.allow_live_video },
            |m: &mut CDOTABroadcasterInfo| { &mut m.allow_live_video },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "node_type",
            |m: &CDOTABroadcasterInfo| { &m.node_type },
            |m: &mut CDOTABroadcasterInfo| { &mut m.node_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "node_name",
            |m: &CDOTABroadcasterInfo| { &m.node_name },
            |m: &mut CDOTABroadcasterInfo| { &mut m.node_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTABroadcasterInfo>(
            "CDOTABroadcasterInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTABroadcasterInfo {
    const NAME: &'static str = "CDOTABroadcasterInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.server_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.live = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    self.team_name_radiant = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.team_name_dire = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.series_game = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.upcoming_broadcast_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.allow_live_video = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.node_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                98 => {
                    self.node_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.server_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.live {
            my_size += 1 + 1;
        }
        if let Some(v) = self.team_name_radiant.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.team_name_dire.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.series_game {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.upcoming_broadcast_timestamp {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.allow_live_video {
            my_size += 1 + 1;
        }
        if let Some(v) = self.node_type {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.node_name.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.server_steam_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.live {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.team_name_radiant.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.team_name_dire.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.series_game {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.upcoming_broadcast_timestamp {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.allow_live_video {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.node_type {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.node_name.as_ref() {
            os.write_string(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTABroadcasterInfo {
        CDOTABroadcasterInfo::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.server_steam_id = ::std::option::Option::None;
        self.live = ::std::option::Option::None;
        self.team_name_radiant = ::std::option::Option::None;
        self.team_name_dire = ::std::option::Option::None;
        self.series_game = ::std::option::Option::None;
        self.upcoming_broadcast_timestamp = ::std::option::Option::None;
        self.allow_live_video = ::std::option::Option::None;
        self.node_type = ::std::option::Option::None;
        self.node_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTABroadcasterInfo {
        static instance: CDOTABroadcasterInfo = CDOTABroadcasterInfo {
            account_id: ::std::option::Option::None,
            server_steam_id: ::std::option::Option::None,
            live: ::std::option::Option::None,
            team_name_radiant: ::std::option::Option::None,
            team_name_dire: ::std::option::Option::None,
            series_game: ::std::option::Option::None,
            upcoming_broadcast_timestamp: ::std::option::Option::None,
            allow_live_video: ::std::option::Option::None,
            node_type: ::std::option::Option::None,
            node_name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTABroadcasterInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTABroadcasterInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTABroadcasterInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTABroadcasterInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTASeries)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTASeries {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTASeries.series_id)
    pub series_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTASeries.series_type)
    pub series_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTASeries.team_1)
    pub team_1: ::protobuf::MessageField<cmsg_dotaseries::TeamInfo>,
    // @@protoc_insertion_point(field:dota.CMsgDOTASeries.team_2)
    pub team_2: ::protobuf::MessageField<cmsg_dotaseries::TeamInfo>,
    // @@protoc_insertion_point(field:dota.CMsgDOTASeries.match_minimal)
    pub match_minimal: ::std::vec::Vec<super::dota_gcmessages_common::CMsgDOTAMatchMinimal>,
    // @@protoc_insertion_point(field:dota.CMsgDOTASeries.live_game)
    pub live_game: ::protobuf::MessageField<cmsg_dotaseries::LiveGame>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTASeries.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTASeries {
    fn default() -> &'a CMsgDOTASeries {
        <CMsgDOTASeries as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTASeries {
    pub fn new() -> CMsgDOTASeries {
        ::std::default::Default::default()
    }

    // optional uint32 series_id = 1;

    pub fn series_id(&self) -> u32 {
        self.series_id.unwrap_or(0)
    }

    pub fn clear_series_id(&mut self) {
        self.series_id = ::std::option::Option::None;
    }

    pub fn has_series_id(&self) -> bool {
        self.series_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_series_id(&mut self, v: u32) {
        self.series_id = ::std::option::Option::Some(v);
    }

    // optional uint32 series_type = 2;

    pub fn series_type(&self) -> u32 {
        self.series_type.unwrap_or(0)
    }

    pub fn clear_series_type(&mut self) {
        self.series_type = ::std::option::Option::None;
    }

    pub fn has_series_type(&self) -> bool {
        self.series_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_series_type(&mut self, v: u32) {
        self.series_type = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "series_id",
            |m: &CMsgDOTASeries| { &m.series_id },
            |m: &mut CMsgDOTASeries| { &mut m.series_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "series_type",
            |m: &CMsgDOTASeries| { &m.series_type },
            |m: &mut CMsgDOTASeries| { &mut m.series_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_dotaseries::TeamInfo>(
            "team_1",
            |m: &CMsgDOTASeries| { &m.team_1 },
            |m: &mut CMsgDOTASeries| { &mut m.team_1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_dotaseries::TeamInfo>(
            "team_2",
            |m: &CMsgDOTASeries| { &m.team_2 },
            |m: &mut CMsgDOTASeries| { &mut m.team_2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "match_minimal",
            |m: &CMsgDOTASeries| { &m.match_minimal },
            |m: &mut CMsgDOTASeries| { &mut m.match_minimal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_dotaseries::LiveGame>(
            "live_game",
            |m: &CMsgDOTASeries| { &m.live_game },
            |m: &mut CMsgDOTASeries| { &mut m.live_game },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTASeries>(
            "CMsgDOTASeries",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTASeries {
    const NAME: &'static str = "CMsgDOTASeries";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.series_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.series_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.team_1)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.team_2)?;
                },
                42 => {
                    self.match_minimal.push(is.read_message()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.live_game)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.series_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.series_type {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.team_1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.team_2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.match_minimal {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.live_game.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.series_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.series_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.team_1.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.team_2.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.match_minimal {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.live_game.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTASeries {
        CMsgDOTASeries::new()
    }

    fn clear(&mut self) {
        self.series_id = ::std::option::Option::None;
        self.series_type = ::std::option::Option::None;
        self.team_1.clear();
        self.team_2.clear();
        self.match_minimal.clear();
        self.live_game.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTASeries {
        static instance: CMsgDOTASeries = CMsgDOTASeries {
            series_id: ::std::option::Option::None,
            series_type: ::std::option::Option::None,
            team_1: ::protobuf::MessageField::none(),
            team_2: ::protobuf::MessageField::none(),
            match_minimal: ::std::vec::Vec::new(),
            live_game: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTASeries {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTASeries").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTASeries {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTASeries {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTASeries`
pub mod cmsg_dotaseries {
    // @@protoc_insertion_point(message:dota.CMsgDOTASeries.TeamInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TeamInfo {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTASeries.TeamInfo.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTASeries.TeamInfo.team_name)
        pub team_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTASeries.TeamInfo.team_logo_url)
        pub team_logo_url: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTASeries.TeamInfo.wager_count)
        pub wager_count: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTASeries.TeamInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TeamInfo {
        fn default() -> &'a TeamInfo {
            <TeamInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl TeamInfo {
        pub fn new() -> TeamInfo {
            ::std::default::Default::default()
        }

        // optional uint32 team_id = 1;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional string team_name = 2;

        pub fn team_name(&self) -> &str {
            match self.team_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_name(&mut self) {
            self.team_name = ::std::option::Option::None;
        }

        pub fn has_team_name(&self) -> bool {
            self.team_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_name(&mut self, v: ::std::string::String) {
            self.team_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
            if self.team_name.is_none() {
                self.team_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_name(&mut self) -> ::std::string::String {
            self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string team_logo_url = 3;

        pub fn team_logo_url(&self) -> &str {
            match self.team_logo_url.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_logo_url(&mut self) {
            self.team_logo_url = ::std::option::Option::None;
        }

        pub fn has_team_logo_url(&self) -> bool {
            self.team_logo_url.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_logo_url(&mut self, v: ::std::string::String) {
            self.team_logo_url = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_logo_url(&mut self) -> &mut ::std::string::String {
            if self.team_logo_url.is_none() {
                self.team_logo_url = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_logo_url.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_logo_url(&mut self) -> ::std::string::String {
            self.team_logo_url.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 wager_count = 4;

        pub fn wager_count(&self) -> u32 {
            self.wager_count.unwrap_or(0)
        }

        pub fn clear_wager_count(&mut self) {
            self.wager_count = ::std::option::Option::None;
        }

        pub fn has_wager_count(&self) -> bool {
            self.wager_count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_wager_count(&mut self, v: u32) {
            self.wager_count = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_id",
                |m: &TeamInfo| { &m.team_id },
                |m: &mut TeamInfo| { &mut m.team_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_name",
                |m: &TeamInfo| { &m.team_name },
                |m: &mut TeamInfo| { &mut m.team_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_logo_url",
                |m: &TeamInfo| { &m.team_logo_url },
                |m: &mut TeamInfo| { &mut m.team_logo_url },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "wager_count",
                |m: &TeamInfo| { &m.wager_count },
                |m: &mut TeamInfo| { &mut m.wager_count },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TeamInfo>(
                "CMsgDOTASeries.TeamInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TeamInfo {
        const NAME: &'static str = "TeamInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.team_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.team_logo_url = ::std::option::Option::Some(is.read_string()?);
                    },
                    32 => {
                        self.wager_count = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.team_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.team_name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.team_logo_url.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.wager_count {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.team_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.team_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.team_logo_url.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.wager_count {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TeamInfo {
            TeamInfo::new()
        }

        fn clear(&mut self) {
            self.team_id = ::std::option::Option::None;
            self.team_name = ::std::option::Option::None;
            self.team_logo_url = ::std::option::Option::None;
            self.wager_count = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TeamInfo {
            static instance: TeamInfo = TeamInfo {
                team_id: ::std::option::Option::None,
                team_name: ::std::option::Option::None,
                team_logo_url: ::std::option::Option::None,
                wager_count: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TeamInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTASeries.TeamInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TeamInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TeamInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTASeries.LiveGame)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LiveGame {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTASeries.LiveGame.server_steam_id)
        pub server_steam_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDOTASeries.LiveGame.team_radiant)
        pub team_radiant: ::protobuf::MessageField<TeamInfo>,
        // @@protoc_insertion_point(field:dota.CMsgDOTASeries.LiveGame.team_dire)
        pub team_dire: ::protobuf::MessageField<TeamInfo>,
        // @@protoc_insertion_point(field:dota.CMsgDOTASeries.LiveGame.team_radiant_score)
        pub team_radiant_score: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTASeries.LiveGame.team_dire_score)
        pub team_dire_score: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTASeries.LiveGame.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LiveGame {
        fn default() -> &'a LiveGame {
            <LiveGame as ::protobuf::Message>::default_instance()
        }
    }

    impl LiveGame {
        pub fn new() -> LiveGame {
            ::std::default::Default::default()
        }

        // optional fixed64 server_steam_id = 1;

        pub fn server_steam_id(&self) -> u64 {
            self.server_steam_id.unwrap_or(0)
        }

        pub fn clear_server_steam_id(&mut self) {
            self.server_steam_id = ::std::option::Option::None;
        }

        pub fn has_server_steam_id(&self) -> bool {
            self.server_steam_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_server_steam_id(&mut self, v: u64) {
            self.server_steam_id = ::std::option::Option::Some(v);
        }

        // optional uint32 team_radiant_score = 4;

        pub fn team_radiant_score(&self) -> u32 {
            self.team_radiant_score.unwrap_or(0)
        }

        pub fn clear_team_radiant_score(&mut self) {
            self.team_radiant_score = ::std::option::Option::None;
        }

        pub fn has_team_radiant_score(&self) -> bool {
            self.team_radiant_score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_radiant_score(&mut self, v: u32) {
            self.team_radiant_score = ::std::option::Option::Some(v);
        }

        // optional uint32 team_dire_score = 5;

        pub fn team_dire_score(&self) -> u32 {
            self.team_dire_score.unwrap_or(0)
        }

        pub fn clear_team_dire_score(&mut self) {
            self.team_dire_score = ::std::option::Option::None;
        }

        pub fn has_team_dire_score(&self) -> bool {
            self.team_dire_score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_dire_score(&mut self, v: u32) {
            self.team_dire_score = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "server_steam_id",
                |m: &LiveGame| { &m.server_steam_id },
                |m: &mut LiveGame| { &mut m.server_steam_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TeamInfo>(
                "team_radiant",
                |m: &LiveGame| { &m.team_radiant },
                |m: &mut LiveGame| { &mut m.team_radiant },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TeamInfo>(
                "team_dire",
                |m: &LiveGame| { &m.team_dire },
                |m: &mut LiveGame| { &mut m.team_dire },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_radiant_score",
                |m: &LiveGame| { &m.team_radiant_score },
                |m: &mut LiveGame| { &mut m.team_radiant_score },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_dire_score",
                |m: &LiveGame| { &m.team_dire_score },
                |m: &mut LiveGame| { &mut m.team_dire_score },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiveGame>(
                "CMsgDOTASeries.LiveGame",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LiveGame {
        const NAME: &'static str = "LiveGame";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.server_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.team_radiant)?;
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.team_dire)?;
                    },
                    32 => {
                        self.team_radiant_score = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.team_dire_score = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.server_steam_id {
                my_size += 1 + 8;
            }
            if let Some(v) = self.team_radiant.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.team_dire.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.team_radiant_score {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.team_dire_score {
                my_size += ::protobuf::rt::uint32_size(5, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.server_steam_id {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.team_radiant.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.team_dire.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            if let Some(v) = self.team_radiant_score {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.team_dire_score {
                os.write_uint32(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LiveGame {
            LiveGame::new()
        }

        fn clear(&mut self) {
            self.server_steam_id = ::std::option::Option::None;
            self.team_radiant.clear();
            self.team_dire.clear();
            self.team_radiant_score = ::std::option::Option::None;
            self.team_dire_score = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LiveGame {
            static instance: LiveGame = LiveGame {
                server_steam_id: ::std::option::Option::None,
                team_radiant: ::protobuf::MessageField::none(),
                team_dire: ::protobuf::MessageField::none(),
                team_radiant_score: ::std::option::Option::None,
                team_dire_score: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for LiveGame {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTASeries.LiveGame").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LiveGame {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LiveGame {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"dota_gcmessages_client_watch.proto\x12\x04dota\x1a\x1cdota_gcmessage\
    s_common.proto\"\xa1\n\n\x12CSourceTVGameSmall\x12#\n\ractivate_time\x18\
    \x01\x20\x01(\rR\x0cactivateTime\x12'\n\x0fdeactivate_time\x18\x02\x20\
    \x01(\rR\x0edeactivateTime\x12&\n\x0fserver_steam_id\x18\x03\x20\x01(\
    \x04R\rserverSteamId\x12\x19\n\x08lobby_id\x18\x04\x20\x01(\x04R\x07lobb\
    yId\x12\x1b\n\tleague_id\x18\x05\x20\x01(\rR\x08leagueId\x12\x1d\n\nlobb\
    y_type\x18\x06\x20\x01(\rR\tlobbyType\x12\x1b\n\tgame_time\x18\x07\x20\
    \x01(\x05R\x08gameTime\x12\x14\n\x05delay\x18\x08\x20\x01(\rR\x05delay\
    \x12\x1e\n\nspectators\x18\t\x20\x01(\rR\nspectators\x12\x1b\n\tgame_mod\
    e\x18\n\x20\x01(\rR\x08gameMode\x12\x1f\n\x0baverage_mmr\x18\x0b\x20\x01\
    (\rR\naverageMmr\x12\x19\n\x08match_id\x18\x0c\x20\x01(\x04R\x07matchId\
    \x12\x1b\n\tseries_id\x18\r\x20\x01(\rR\x08seriesId\x12*\n\x11team_name_\
    radiant\x18\x0f\x20\x01(\tR\x0fteamNameRadiant\x12$\n\x0eteam_name_dire\
    \x18\x10\x20\x01(\tR\x0cteamNameDire\x12*\n\x11team_logo_radiant\x18\x18\
    \x20\x01(\x06R\x0fteamLogoRadiant\x12$\n\x0eteam_logo_dire\x18\x19\x20\
    \x01(\x06R\x0cteamLogoDire\x12&\n\x0fteam_id_radiant\x18\x1e\x20\x01(\rR\
    \rteamIdRadiant\x12\x20\n\x0cteam_id_dire\x18\x1f\x20\x01(\rR\nteamIdDir\
    e\x12\x1d\n\nsort_score\x18\x11\x20\x01(\rR\tsortScore\x12(\n\x10last_up\
    date_time\x18\x12\x20\x01(\x02R\x0elastUpdateTime\x12!\n\x0cradiant_lead\
    \x18\x13\x20\x01(\x05R\x0bradiantLead\x12#\n\rradiant_score\x18\x14\x20\
    \x01(\rR\x0cradiantScore\x12\x1d\n\ndire_score\x18\x15\x20\x01(\rR\tdire\
    Score\x129\n\x07players\x18\x16\x20\x03(\x0b2\x1f.dota.CSourceTVGameSmal\
    l.PlayerR\x07players\x12%\n\x0ebuilding_state\x18\x17\x20\x01(\x07R\rbui\
    ldingState\x12A\n\x1dweekend_tourney_tournament_id\x18\x1a\x20\x01(\rR\
    \x1aweekendTourneyTournamentId\x128\n\x18weekend_tourney_division\x18\
    \x1b\x20\x01(\rR\x16weekendTourneyDivision\x12=\n\x1bweekend_tourney_ski\
    ll_level\x18\x1c\x20\x01(\rR\x18weekendTourneySkillLevel\x12A\n\x1dweeke\
    nd_tourney_bracket_round\x18\x1d\x20\x01(\rR\x1aweekendTourneyBracketRou\
    nd\x124\n\x16custom_game_difficulty\x18\x20\x20\x01(\rR\x14customGameDif\
    ficulty\x1a@\n\x06Player\x12\x1d\n\naccount_id\x18\x01\x20\x01(\rR\tacco\
    untId\x12\x17\n\x07hero_id\x18\x02\x20\x01(\rR\x06heroId\"\xdd\x01\n\"CM\
    sgClientToGCFindTopSourceTVGames\x12\x1d\n\nsearch_key\x18\x01\x20\x01(\
    \tR\tsearchKey\x12\x1b\n\tleague_id\x18\x02\x20\x01(\rR\x08leagueId\x12\
    \x17\n\x07hero_id\x18\x03\x20\x01(\rR\x06heroId\x12\x1d\n\nstart_game\
    \x18\x04\x20\x01(\rR\tstartGame\x12&\n\x0fgame_list_index\x18\x05\x20\
    \x01(\rR\rgameListIndex\x12\x1b\n\tlobby_ids\x18\x06\x20\x03(\x04R\x08lo\
    bbyIds\"\xf8\x02\n*CMsgGCToClientFindTopSourceTVGamesResponse\x12\x1d\n\
    \nsearch_key\x18\x01\x20\x01(\tR\tsearchKey\x12\x1b\n\tleague_id\x18\x02\
    \x20\x01(\rR\x08leagueId\x12\x17\n\x07hero_id\x18\x03\x20\x01(\rR\x06her\
    oId\x12\x1d\n\nstart_game\x18\x04\x20\x01(\rR\tstartGame\x12\x1b\n\tnum_\
    games\x18\x05\x20\x01(\rR\x08numGames\x12&\n\x0fgame_list_index\x18\x06\
    \x20\x01(\rR\rgameListIndex\x125\n\tgame_list\x18\x07\x20\x03(\x0b2\x18.\
    dota.CSourceTVGameSmallR\x08gameList\x12%\n\x0especific_games\x18\x08\
    \x20\x01(\x08R\rspecificGames\x123\n\x08bot_game\x18\t\x20\x01(\x0b2\x18\
    .dota.CSourceTVGameSmallR\x07botGame\"_\n$CMsgGCToClientTopWeekendTourne\
    yGames\x127\n\nlive_games\x18\x01\x20\x03(\x0b2\x18.dota.CSourceTVGameSm\
    allR\tliveGames\"'\n%CMsgClientToGCTopLeagueMatchesRequest\"'\n%CMsgClie\
    ntToGCTopFriendMatchesRequest\"B\n#CMsgClientToGCMatchesMinimalRequest\
    \x12\x1b\n\tmatch_ids\x18\x01\x20\x03(\x04R\x08matchIds\"{\n$CMsgClientT\
    oGCMatchesMinimalResponse\x124\n\x07matches\x18\x01\x20\x03(\x0b2\x1a.do\
    ta.CMsgDOTAMatchMinimalR\x07matches\x12\x1d\n\nlast_match\x18\x02\x20\
    \x01(\x08R\tlastMatch\"^\n&CMsgGCToClientTopLeagueMatchesResponse\x124\n\
    \x07matches\x18\x02\x20\x03(\x0b2\x1a.dota.CMsgDOTAMatchMinimalR\x07matc\
    hes\"^\n&CMsgGCToClientTopFriendMatchesResponse\x124\n\x07matches\x18\
    \x01\x20\x03(\x0b2\x1a.dota.CMsgDOTAMatchMinimalR\x07matches\"G\n\x16CMs\
    gSpectateFriendGame\x12\x19\n\x08steam_id\x18\x01\x20\x01(\x06R\x07steam\
    Id\x12\x12\n\x04live\x18\x02\x20\x01(\x08R\x04live\"\xd4\x04\n\x1eCMsgSp\
    ectateFriendGameResponse\x12%\n\x0eserver_steamid\x18\x04\x20\x01(\x06R\
    \rserverSteamid\x12a\n\x11watch_live_result\x18\x05\x20\x01(\x0e25.dota.\
    CMsgSpectateFriendGameResponse.EWatchLiveResultR\x0fwatchLiveResult\"\
    \xa7\x03\n\x10EWatchLiveResult\x12\x0b\n\x07SUCCESS\x10\0\x12\x11\n\rERR\
    OR_GENERIC\x10\x01\x12\x11\n\rERROR_NO_PLUS\x10\x02\x12\x15\n\x11ERROR_N\
    OT_FRIENDS\x10\x03\x12\x19\n\x15ERROR_LOBBY_NOT_FOUND\x10\x04\x12\x1e\n\
    \x1aERROR_SPECTATOR_IN_A_LOBBY\x10\x05\x12\x16\n\x12ERROR_LOBBY_IS_LAN\
    \x10\x06\x12\x1a\n\x16ERROR_WRONG_LOBBY_TYPE\x10\x07\x12\x1b\n\x17ERROR_\
    WRONG_LOBBY_STATE\x10\x08\x12\x1b\n\x17ERROR_PLAYER_NOT_PLAYER\x10\t\x12\
    \x1d\n\x19ERROR_TOO_MANY_SPECTATORS\x10\n\x12\"\n\x1eERROR_SPECTATOR_SWI\
    TCHED_TEAMS\x10\x0b\x12\x1f\n\x1bERROR_FRIENDS_ON_BOTH_SIDES\x10\x0c\x12\
    !\n\x1dERROR_SPECTATOR_IN_THIS_LOBBY\x10\r\x12\x19\n\x15ERROR_LOBBY_IS_L\
    EAGUE\x10\x0e\"\x9e\x02\n\x17CDOTAReplayDownloadInfo\x120\n\x05match\x18\
    \x01\x20\x01(\x0b2\x1a.dota.CMsgDOTAMatchMinimalR\x05match\x12\x14\n\x05\
    title\x18\x02\x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x03\x20\
    \x01(\tR\x0bdescription\x12\x12\n\x04size\x18\x04\x20\x01(\rR\x04size\
    \x12\x12\n\x04tags\x18\x05\x20\x03(\tR\x04tags\x12$\n\x0eexists_on_disk\
    \x18\x06\x20\x01(\x08R\x0cexistsOnDisk\x1aK\n\tHighlight\x12\x1c\n\ttime\
    stamp\x18\x01\x20\x01(\rR\ttimestamp\x12\x20\n\x0bdescription\x18\x02\
    \x20\x01(\tR\x0bdescription\"\xc4\x01\n\rCMsgWatchGame\x12%\n\x0eserver_\
    steamid\x18\x01\x20\x01(\x06R\rserverSteamid\x12%\n\x0eclient_version\
    \x18\x02\x20\x01(\rR\rclientVersion\x120\n\x14watch_server_steamid\x18\
    \x03\x20\x01(\x06R\x12watchServerSteamid\x12\x19\n\x08lobby_id\x18\x04\
    \x20\x01(\x04R\x07lobbyId\x12\x18\n\x07regions\x18\x05\x20\x03(\rR\x07re\
    gions\"\x15\n\x13CMsgCancelWatchGame\"\xcd\x04\n\x15CMsgWatchGameRespons\
    e\x12W\n\x11watch_game_result\x18\x01\x20\x01(\x0e2+.dota.CMsgWatchGameR\
    esponse.WatchGameResultR\x0fwatchGameResult\x121\n\x15source_tv_public_a\
    ddr\x18\x02\x20\x01(\rR\x12sourceTvPublicAddr\x123\n\x16source_tv_privat\
    e_addr\x18\x03\x20\x01(\rR\x13sourceTvPrivateAddr\x12$\n\x0esource_tv_po\
    rt\x18\x04\x20\x01(\rR\x0csourceTvPort\x12.\n\x13game_server_steamid\x18\
    \x05\x20\x01(\x06R\x11gameServerSteamid\x120\n\x14watch_server_steamid\
    \x18\x06\x20\x01(\x06R\x12watchServerSteamid\x12<\n\x1bwatch_tv_unique_s\
    ecret_code\x18\x07\x20\x01(\x06R\x17watchTvUniqueSecretCode\"\xac\x01\n\
    \x0fWatchGameResult\x12\x0b\n\x07PENDING\x10\0\x12\t\n\x05READY\x10\x01\
    \x12\x16\n\x12GAMESERVERNOTFOUND\x10\x02\x12\x0f\n\x0bUNAVAILABLE\x10\
    \x03\x12\r\n\tCANCELLED\x10\x04\x12\x17\n\x13INCOMPATIBLEVERSION\x10\x05\
    \x12\x1d\n\x19MISSINGLEAGUESUBSCRIPTION\x10\x06\x12\x11\n\rLOBBYNOTFOUND\
    \x10\x07\"P\n\x1eCMsgPartyLeaderWatchGamePrompt\x12.\n\x13game_server_st\
    eamid\x18\x05\x20\x01(\x06R\x11gameServerSteamid\"\x8a\x03\n\x14CDOTABro\
    adcasterInfo\x12\x1d\n\naccount_id\x18\x01\x20\x01(\rR\taccountId\x12&\n\
    \x0fserver_steam_id\x18\x02\x20\x01(\x06R\rserverSteamId\x12\x12\n\x04li\
    ve\x18\x03\x20\x01(\x08R\x04live\x12*\n\x11team_name_radiant\x18\x04\x20\
    \x01(\tR\x0fteamNameRadiant\x12$\n\x0eteam_name_dire\x18\x05\x20\x01(\tR\
    \x0cteamNameDire\x12\x1f\n\x0bseries_game\x18\x07\x20\x01(\rR\nseriesGam\
    e\x12@\n\x1cupcoming_broadcast_timestamp\x18\t\x20\x01(\rR\x1aupcomingBr\
    oadcastTimestamp\x12(\n\x10allow_live_video\x18\n\x20\x01(\x08R\x0eallow\
    LiveVideo\x12\x1b\n\tnode_type\x18\x0b\x20\x01(\rR\x08nodeType\x12\x1b\n\
    \tnode_name\x18\x0c\x20\x01(\tR\x08nodeName\"\xc8\x05\n\x0eCMsgDOTASerie\
    s\x12\x1b\n\tseries_id\x18\x01\x20\x01(\rR\x08seriesId\x12\x1f\n\x0bseri\
    es_type\x18\x02\x20\x01(\rR\nseriesType\x124\n\x06team_1\x18\x03\x20\x01\
    (\x0b2\x1d.dota.CMsgDOTASeries.TeamInfoR\x05team1\x124\n\x06team_2\x18\
    \x04\x20\x01(\x0b2\x1d.dota.CMsgDOTASeries.TeamInfoR\x05team2\x12?\n\rma\
    tch_minimal\x18\x05\x20\x03(\x0b2\x1a.dota.CMsgDOTAMatchMinimalR\x0cmatc\
    hMinimal\x12:\n\tlive_game\x18\x06\x20\x01(\x0b2\x1d.dota.CMsgDOTASeries\
    .LiveGameR\x08liveGame\x1a\x85\x01\n\x08TeamInfo\x12\x17\n\x07team_id\
    \x18\x01\x20\x01(\rR\x06teamId\x12\x1b\n\tteam_name\x18\x02\x20\x01(\tR\
    \x08teamName\x12\"\n\rteam_logo_url\x18\x03\x20\x01(\tR\x0bteamLogoUrl\
    \x12\x1f\n\x0bwager_count\x18\x04\x20\x01(\rR\nwagerCount\x1a\x86\x02\n\
    \x08LiveGame\x12&\n\x0fserver_steam_id\x18\x01\x20\x01(\x06R\rserverStea\
    mId\x12@\n\x0cteam_radiant\x18\x02\x20\x01(\x0b2\x1d.dota.CMsgDOTASeries\
    .TeamInfoR\x0bteamRadiant\x12:\n\tteam_dire\x18\x03\x20\x01(\x0b2\x1d.do\
    ta.CMsgDOTASeries.TeamInfoR\x08teamDire\x12,\n\x12team_radiant_score\x18\
    \x04\x20\x01(\rR\x10teamRadiantScore\x12&\n\x0fteam_dire_score\x18\x05\
    \x20\x01(\rR\rteamDireScoreB%Z#github.com/dotabuff/manta/dota;dotaJ\x80I\
    \n\x07\x12\x05\0\0\xcf\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x03\0:\n\t\n\x02\
    \x08\x0b\x12\x03\x03\0:\n\t\n\x02\x03\0\x12\x03\x05\x07%\n\n\n\x02\x04\0\
    \x12\x04\x07\0,\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x1a\n\x0c\n\x04\
    \x04\0\x03\0\x12\x04\x08\x08\x0b\t\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\
    \x08\x10\x16\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\t\x10/\n\x0e\n\x07\x04\
    \0\x03\0\x02\0\x04\x12\x03\t\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\
    \x12\x03\t\x19\x1f\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\t\x20*\n\
    \x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\t-.\n\r\n\x06\x04\0\x03\0\x02\
    \x01\x12\x03\n\x10,\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\x12\x03\n\x10\
    \x18\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\n\x19\x1f\n\x0e\n\x07\
    \x04\0\x03\0\x02\x01\x01\x12\x03\n\x20'\n\x0e\n\x07\x04\0\x03\0\x02\x01\
    \x03\x12\x03\n*+\n\x0b\n\x04\x04\0\x02\0\x12\x03\r\x08*\n\x0c\n\x05\x04\
    \0\x02\0\x04\x12\x03\r\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\r\x11\
    \x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\x18%\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\r()\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0e\x08,\n\x0c\n\x05\
    \x04\0\x02\x01\x04\x12\x03\x0e\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x0e\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\x18'\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x0e*+\n\x0b\n\x04\x04\0\x02\x02\x12\x03\
    \x0f\x08,\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x0f\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03\x0f\x11\x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x0f\x18'\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0f*+\n\x0b\n\x04\
    \x04\0\x02\x03\x12\x03\x10\x08%\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\
    \x10\x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x10\x11\x17\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\x10\x18\x20\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x10#$\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x11\x08&\n\x0c\n\x05\
    \x04\0\x02\x04\x04\x12\x03\x11\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03\x11\x11\x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x11\x18!\n\x0c\n\
    \x05\x04\0\x02\x04\x03\x12\x03\x11$%\n\x0b\n\x04\x04\0\x02\x05\x12\x03\
    \x12\x08'\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\x12\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x05\x05\x12\x03\x12\x11\x17\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03\x12\x18\"\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x12%&\n\x0b\n\x04\
    \x04\0\x02\x06\x12\x03\x13\x08%\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03\
    \x13\x08\x10\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x13\x11\x16\n\x0c\n\
    \x05\x04\0\x02\x06\x01\x12\x03\x13\x17\x20\n\x0c\n\x05\x04\0\x02\x06\x03\
    \x12\x03\x13#$\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x14\x08\"\n\x0c\n\x05\
    \x04\0\x02\x07\x04\x12\x03\x14\x08\x10\n\x0c\n\x05\x04\0\x02\x07\x05\x12\
    \x03\x14\x11\x17\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x14\x18\x1d\n\x0c\
    \n\x05\x04\0\x02\x07\x03\x12\x03\x14\x20!\n\x0b\n\x04\x04\0\x02\x08\x12\
    \x03\x15\x08'\n\x0c\n\x05\x04\0\x02\x08\x04\x12\x03\x15\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x08\x05\x12\x03\x15\x11\x17\n\x0c\n\x05\x04\0\x02\x08\x01\
    \x12\x03\x15\x18\"\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x15%&\n\x0b\n\
    \x04\x04\0\x02\t\x12\x03\x16\x08'\n\x0c\n\x05\x04\0\x02\t\x04\x12\x03\
    \x16\x08\x10\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\x16\x11\x17\n\x0c\n\x05\
    \x04\0\x02\t\x01\x12\x03\x16\x18!\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\
    \x16$&\n\x0b\n\x04\x04\0\x02\n\x12\x03\x17\x08)\n\x0c\n\x05\x04\0\x02\n\
    \x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\x17\x11\x17\
    \n\x0c\n\x05\x04\0\x02\n\x01\x12\x03\x17\x18#\n\x0c\n\x05\x04\0\x02\n\
    \x03\x12\x03\x17&(\n\x0b\n\x04\x04\0\x02\x0b\x12\x03\x18\x08&\n\x0c\n\
    \x05\x04\0\x02\x0b\x04\x12\x03\x18\x08\x10\n\x0c\n\x05\x04\0\x02\x0b\x05\
    \x12\x03\x18\x11\x17\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03\x18\x18\x20\n\
    \x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\x18#%\n\x0b\n\x04\x04\0\x02\x0c\x12\
    \x03\x19\x08'\n\x0c\n\x05\x04\0\x02\x0c\x04\x12\x03\x19\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x0c\x05\x12\x03\x19\x11\x17\n\x0c\n\x05\x04\0\x02\x0c\x01\
    \x12\x03\x19\x18!\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03\x19$&\n\x0b\n\
    \x04\x04\0\x02\r\x12\x03\x1a\x08/\n\x0c\n\x05\x04\0\x02\r\x04\x12\x03\
    \x1a\x08\x10\n\x0c\n\x05\x04\0\x02\r\x05\x12\x03\x1a\x11\x17\n\x0c\n\x05\
    \x04\0\x02\r\x01\x12\x03\x1a\x18)\n\x0c\n\x05\x04\0\x02\r\x03\x12\x03\
    \x1a,.\n\x0b\n\x04\x04\0\x02\x0e\x12\x03\x1b\x08,\n\x0c\n\x05\x04\0\x02\
    \x0e\x04\x12\x03\x1b\x08\x10\n\x0c\n\x05\x04\0\x02\x0e\x05\x12\x03\x1b\
    \x11\x17\n\x0c\n\x05\x04\0\x02\x0e\x01\x12\x03\x1b\x18&\n\x0c\n\x05\x04\
    \0\x02\x0e\x03\x12\x03\x1b)+\n\x0b\n\x04\x04\0\x02\x0f\x12\x03\x1c\x080\
    \n\x0c\n\x05\x04\0\x02\x0f\x04\x12\x03\x1c\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x0f\x05\x12\x03\x1c\x11\x18\n\x0c\n\x05\x04\0\x02\x0f\x01\x12\x03\x1c\
    \x19*\n\x0c\n\x05\x04\0\x02\x0f\x03\x12\x03\x1c-/\n\x0b\n\x04\x04\0\x02\
    \x10\x12\x03\x1d\x08-\n\x0c\n\x05\x04\0\x02\x10\x04\x12\x03\x1d\x08\x10\
    \n\x0c\n\x05\x04\0\x02\x10\x05\x12\x03\x1d\x11\x18\n\x0c\n\x05\x04\0\x02\
    \x10\x01\x12\x03\x1d\x19'\n\x0c\n\x05\x04\0\x02\x10\x03\x12\x03\x1d*,\n\
    \x0b\n\x04\x04\0\x02\x11\x12\x03\x1e\x08-\n\x0c\n\x05\x04\0\x02\x11\x04\
    \x12\x03\x1e\x08\x10\n\x0c\n\x05\x04\0\x02\x11\x05\x12\x03\x1e\x11\x17\n\
    \x0c\n\x05\x04\0\x02\x11\x01\x12\x03\x1e\x18'\n\x0c\n\x05\x04\0\x02\x11\
    \x03\x12\x03\x1e*,\n\x0b\n\x04\x04\0\x02\x12\x12\x03\x1f\x08*\n\x0c\n\
    \x05\x04\0\x02\x12\x04\x12\x03\x1f\x08\x10\n\x0c\n\x05\x04\0\x02\x12\x05\
    \x12\x03\x1f\x11\x17\n\x0c\n\x05\x04\0\x02\x12\x01\x12\x03\x1f\x18$\n\
    \x0c\n\x05\x04\0\x02\x12\x03\x12\x03\x1f')\n\x0b\n\x04\x04\0\x02\x13\x12\
    \x03\x20\x08(\n\x0c\n\x05\x04\0\x02\x13\x04\x12\x03\x20\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x13\x05\x12\x03\x20\x11\x17\n\x0c\n\x05\x04\0\x02\x13\x01\
    \x12\x03\x20\x18\"\n\x0c\n\x05\x04\0\x02\x13\x03\x12\x03\x20%'\n\x0b\n\
    \x04\x04\0\x02\x14\x12\x03!\x08-\n\x0c\n\x05\x04\0\x02\x14\x04\x12\x03!\
    \x08\x10\n\x0c\n\x05\x04\0\x02\x14\x05\x12\x03!\x11\x16\n\x0c\n\x05\x04\
    \0\x02\x14\x01\x12\x03!\x17'\n\x0c\n\x05\x04\0\x02\x14\x03\x12\x03!*,\n\
    \x0b\n\x04\x04\0\x02\x15\x12\x03\"\x08)\n\x0c\n\x05\x04\0\x02\x15\x04\
    \x12\x03\"\x08\x10\n\x0c\n\x05\x04\0\x02\x15\x05\x12\x03\"\x11\x16\n\x0c\
    \n\x05\x04\0\x02\x15\x01\x12\x03\"\x17#\n\x0c\n\x05\x04\0\x02\x15\x03\
    \x12\x03\"&(\n\x0b\n\x04\x04\0\x02\x16\x12\x03#\x08+\n\x0c\n\x05\x04\0\
    \x02\x16\x04\x12\x03#\x08\x10\n\x0c\n\x05\x04\0\x02\x16\x05\x12\x03#\x11\
    \x17\n\x0c\n\x05\x04\0\x02\x16\x01\x12\x03#\x18%\n\x0c\n\x05\x04\0\x02\
    \x16\x03\x12\x03#(*\n\x0b\n\x04\x04\0\x02\x17\x12\x03$\x08(\n\x0c\n\x05\
    \x04\0\x02\x17\x04\x12\x03$\x08\x10\n\x0c\n\x05\x04\0\x02\x17\x05\x12\
    \x03$\x11\x17\n\x0c\n\x05\x04\0\x02\x17\x01\x12\x03$\x18\"\n\x0c\n\x05\
    \x04\0\x02\x17\x03\x12\x03$%'\n\x0b\n\x04\x04\0\x02\x18\x12\x03%\x088\n\
    \x0c\n\x05\x04\0\x02\x18\x04\x12\x03%\x08\x10\n\x0c\n\x05\x04\0\x02\x18\
    \x06\x12\x03%\x11*\n\x0c\n\x05\x04\0\x02\x18\x01\x12\x03%+2\n\x0c\n\x05\
    \x04\0\x02\x18\x03\x12\x03%57\n\x0b\n\x04\x04\0\x02\x19\x12\x03&\x08-\n\
    \x0c\n\x05\x04\0\x02\x19\x04\x12\x03&\x08\x10\n\x0c\n\x05\x04\0\x02\x19\
    \x05\x12\x03&\x11\x18\n\x0c\n\x05\x04\0\x02\x19\x01\x12\x03&\x19'\n\x0c\
    \n\x05\x04\0\x02\x19\x03\x12\x03&*,\n\x0b\n\x04\x04\0\x02\x1a\x12\x03'\
    \x08;\n\x0c\n\x05\x04\0\x02\x1a\x04\x12\x03'\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x1a\x05\x12\x03'\x11\x17\n\x0c\n\x05\x04\0\x02\x1a\x01\x12\x03'\x18\
    5\n\x0c\n\x05\x04\0\x02\x1a\x03\x12\x03'8:\n\x0b\n\x04\x04\0\x02\x1b\x12\
    \x03(\x086\n\x0c\n\x05\x04\0\x02\x1b\x04\x12\x03(\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x1b\x05\x12\x03(\x11\x17\n\x0c\n\x05\x04\0\x02\x1b\x01\x12\
    \x03(\x180\n\x0c\n\x05\x04\0\x02\x1b\x03\x12\x03(35\n\x0b\n\x04\x04\0\
    \x02\x1c\x12\x03)\x089\n\x0c\n\x05\x04\0\x02\x1c\x04\x12\x03)\x08\x10\n\
    \x0c\n\x05\x04\0\x02\x1c\x05\x12\x03)\x11\x17\n\x0c\n\x05\x04\0\x02\x1c\
    \x01\x12\x03)\x183\n\x0c\n\x05\x04\0\x02\x1c\x03\x12\x03)68\n\x0b\n\x04\
    \x04\0\x02\x1d\x12\x03*\x08;\n\x0c\n\x05\x04\0\x02\x1d\x04\x12\x03*\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x1d\x05\x12\x03*\x11\x17\n\x0c\n\x05\x04\0\
    \x02\x1d\x01\x12\x03*\x185\n\x0c\n\x05\x04\0\x02\x1d\x03\x12\x03*8:\n\
    \x0b\n\x04\x04\0\x02\x1e\x12\x03+\x084\n\x0c\n\x05\x04\0\x02\x1e\x04\x12\
    \x03+\x08\x10\n\x0c\n\x05\x04\0\x02\x1e\x05\x12\x03+\x11\x17\n\x0c\n\x05\
    \x04\0\x02\x1e\x01\x12\x03+\x18.\n\x0c\n\x05\x04\0\x02\x1e\x03\x12\x03+1\
    3\n\n\n\x02\x04\x01\x12\x04.\05\x01\n\n\n\x03\x04\x01\x01\x12\x03.\x08*\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03/\x08'\n\x0c\n\x05\x04\x01\x02\0\x04\
    \x12\x03/\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03/\x11\x17\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03/\x18\"\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03/%&\n\x0b\n\x04\x04\x01\x02\x01\x12\x030\x08&\n\x0c\n\x05\x04\x01\
    \x02\x01\x04\x12\x030\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x030\
    \x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x030\x18!\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x030$%\n\x0b\n\x04\x04\x01\x02\x02\x12\x031\x08$\n\
    \x0c\n\x05\x04\x01\x02\x02\x04\x12\x031\x08\x10\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x031\x11\x17\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x031\x18\
    \x1f\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x031\"#\n\x0b\n\x04\x04\x01\x02\
    \x03\x12\x032\x08'\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x032\x08\x10\n\
    \x0c\n\x05\x04\x01\x02\x03\x05\x12\x032\x11\x17\n\x0c\n\x05\x04\x01\x02\
    \x03\x01\x12\x032\x18\"\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x032%&\n\x0b\
    \n\x04\x04\x01\x02\x04\x12\x033\x08,\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\
    \x033\x08\x10\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x033\x11\x17\n\x0c\n\
    \x05\x04\x01\x02\x04\x01\x12\x033\x18'\n\x0c\n\x05\x04\x01\x02\x04\x03\
    \x12\x033*+\n\x0b\n\x04\x04\x01\x02\x05\x12\x034\x08&\n\x0c\n\x05\x04\
    \x01\x02\x05\x04\x12\x034\x08\x10\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\
    \x034\x11\x17\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x034\x18!\n\x0c\n\x05\
    \x04\x01\x02\x05\x03\x12\x034$%\n\n\n\x02\x04\x02\x12\x047\0A\x01\n\n\n\
    \x03\x04\x02\x01\x12\x037\x082\n\x0b\n\x04\x04\x02\x02\0\x12\x038\x08'\n\
    \x0c\n\x05\x04\x02\x02\0\x04\x12\x038\x08\x10\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x038\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x038\x18\"\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x038%&\n\x0b\n\x04\x04\x02\x02\x01\x12\x039\
    \x08&\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x039\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x039\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x039\x18!\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x039$%\n\x0b\n\x04\x04\
    \x02\x02\x02\x12\x03:\x08$\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03:\x08\
    \x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03:\x11\x17\n\x0c\n\x05\x04\
    \x02\x02\x02\x01\x12\x03:\x18\x1f\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\
    \x03:\"#\n\x0b\n\x04\x04\x02\x02\x03\x12\x03;\x08'\n\x0c\n\x05\x04\x02\
    \x02\x03\x04\x12\x03;\x08\x10\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03;\
    \x11\x17\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03;\x18\"\n\x0c\n\x05\x04\
    \x02\x02\x03\x03\x12\x03;%&\n\x0b\n\x04\x04\x02\x02\x04\x12\x03<\x08&\n\
    \x0c\n\x05\x04\x02\x02\x04\x04\x12\x03<\x08\x10\n\x0c\n\x05\x04\x02\x02\
    \x04\x05\x12\x03<\x11\x17\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03<\x18!\
    \n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03<$%\n\x0b\n\x04\x04\x02\x02\x05\
    \x12\x03=\x08,\n\x0c\n\x05\x04\x02\x02\x05\x04\x12\x03=\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x05\x05\x12\x03=\x11\x17\n\x0c\n\x05\x04\x02\x02\x05\
    \x01\x12\x03=\x18'\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03=*+\n\x0b\n\
    \x04\x04\x02\x02\x06\x12\x03>\x082\n\x0c\n\x05\x04\x02\x02\x06\x04\x12\
    \x03>\x08\x10\n\x0c\n\x05\x04\x02\x02\x06\x06\x12\x03>\x11#\n\x0c\n\x05\
    \x04\x02\x02\x06\x01\x12\x03>$-\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03>\
    01\n\x0b\n\x04\x04\x02\x02\x07\x12\x03?\x08)\n\x0c\n\x05\x04\x02\x02\x07\
    \x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\x02\x02\x07\x05\x12\x03?\x11\x15\n\
    \x0c\n\x05\x04\x02\x02\x07\x01\x12\x03?\x16$\n\x0c\n\x05\x04\x02\x02\x07\
    \x03\x12\x03?'(\n\x0b\n\x04\x04\x02\x02\x08\x12\x03@\x081\n\x0c\n\x05\
    \x04\x02\x02\x08\x04\x12\x03@\x08\x10\n\x0c\n\x05\x04\x02\x02\x08\x06\
    \x12\x03@\x11#\n\x0c\n\x05\x04\x02\x02\x08\x01\x12\x03@$,\n\x0c\n\x05\
    \x04\x02\x02\x08\x03\x12\x03@/0\n\n\n\x02\x04\x03\x12\x04C\0E\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03C\x08,\n\x0b\n\x04\x04\x03\x02\0\x12\x03D\x083\n\
    \x0c\n\x05\x04\x03\x02\0\x04\x12\x03D\x08\x10\n\x0c\n\x05\x04\x03\x02\0\
    \x06\x12\x03D\x11#\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03D$.\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03D12\n\n\n\x02\x04\x04\x12\x04G\0H\x01\n\n\n\
    \x03\x04\x04\x01\x12\x03G\x08-\n\n\n\x02\x04\x05\x12\x04J\0K\x01\n\n\n\
    \x03\x04\x05\x01\x12\x03J\x08-\n\n\n\x02\x04\x06\x12\x04M\0O\x01\n\n\n\
    \x03\x04\x06\x01\x12\x03M\x08+\n\x0b\n\x04\x04\x06\x02\0\x12\x03N\x08&\n\
    \x0c\n\x05\x04\x06\x02\0\x04\x12\x03N\x08\x10\n\x0c\n\x05\x04\x06\x02\0\
    \x05\x12\x03N\x11\x17\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03N\x18!\n\x0c\
    \n\x05\x04\x06\x02\0\x03\x12\x03N$%\n\n\n\x02\x04\x07\x12\x04Q\0T\x01\n\
    \n\n\x03\x04\x07\x01\x12\x03Q\x08,\n\x0b\n\x04\x04\x07\x02\0\x12\x03R\
    \x082\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03R\x08\x10\n\x0c\n\x05\x04\x07\
    \x02\0\x06\x12\x03R\x11%\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03R&-\n\x0c\
    \n\x05\x04\x07\x02\0\x03\x12\x03R01\n\x0b\n\x04\x04\x07\x02\x01\x12\x03S\
    \x08%\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03S\x08\x10\n\x0c\n\x05\x04\
    \x07\x02\x01\x05\x12\x03S\x11\x15\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\
    \x03S\x16\x20\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03S#$\n\n\n\x02\x04\
    \x08\x12\x04V\0X\x01\n\n\n\x03\x04\x08\x01\x12\x03V\x08.\n\x0b\n\x04\x04\
    \x08\x02\0\x12\x03W\x082\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03W\x08\x10\
    \n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03W\x11%\n\x0c\n\x05\x04\x08\x02\0\
    \x01\x12\x03W&-\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03W01\n\n\n\x02\x04\t\
    \x12\x04Z\0\\\x01\n\n\n\x03\x04\t\x01\x12\x03Z\x08.\n\x0b\n\x04\x04\t\
    \x02\0\x12\x03[\x082\n\x0c\n\x05\x04\t\x02\0\x04\x12\x03[\x08\x10\n\x0c\
    \n\x05\x04\t\x02\0\x06\x12\x03[\x11%\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03\
    [&-\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03[01\n\n\n\x02\x04\n\x12\x04^\0a\
    \x01\n\n\n\x03\x04\n\x01\x12\x03^\x08\x1e\n\x0b\n\x04\x04\n\x02\0\x12\
    \x03_\x08&\n\x0c\n\x05\x04\n\x02\0\x04\x12\x03_\x08\x10\n\x0c\n\x05\x04\
    \n\x02\0\x05\x12\x03_\x11\x18\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03_\x19!\
    \n\x0c\n\x05\x04\n\x02\0\x03\x12\x03_$%\n\x0b\n\x04\x04\n\x02\x01\x12\
    \x03`\x08\x1f\n\x0c\n\x05\x04\n\x02\x01\x04\x12\x03`\x08\x10\n\x0c\n\x05\
    \x04\n\x02\x01\x05\x12\x03`\x11\x15\n\x0c\n\x05\x04\n\x02\x01\x01\x12\
    \x03`\x16\x1a\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03`\x1d\x1e\n\n\n\x02\
    \x04\x0b\x12\x04c\0x\x01\n\n\n\x03\x04\x0b\x01\x12\x03c\x08&\n\x0c\n\x04\
    \x04\x0b\x04\0\x12\x04d\x08t\t\n\x0c\n\x05\x04\x0b\x04\0\x01\x12\x03d\r\
    \x1d\n\r\n\x06\x04\x0b\x04\0\x02\0\x12\x03e\x10\x1c\n\x0e\n\x07\x04\x0b\
    \x04\0\x02\0\x01\x12\x03e\x10\x17\n\x0e\n\x07\x04\x0b\x04\0\x02\0\x02\
    \x12\x03e\x1a\x1b\n\r\n\x06\x04\x0b\x04\0\x02\x01\x12\x03f\x10\"\n\x0e\n\
    \x07\x04\x0b\x04\0\x02\x01\x01\x12\x03f\x10\x1d\n\x0e\n\x07\x04\x0b\x04\
    \0\x02\x01\x02\x12\x03f\x20!\n\r\n\x06\x04\x0b\x04\0\x02\x02\x12\x03g\
    \x10\"\n\x0e\n\x07\x04\x0b\x04\0\x02\x02\x01\x12\x03g\x10\x1d\n\x0e\n\
    \x07\x04\x0b\x04\0\x02\x02\x02\x12\x03g\x20!\n\r\n\x06\x04\x0b\x04\0\x02\
    \x03\x12\x03h\x10&\n\x0e\n\x07\x04\x0b\x04\0\x02\x03\x01\x12\x03h\x10!\n\
    \x0e\n\x07\x04\x0b\x04\0\x02\x03\x02\x12\x03h$%\n\r\n\x06\x04\x0b\x04\0\
    \x02\x04\x12\x03i\x10*\n\x0e\n\x07\x04\x0b\x04\0\x02\x04\x01\x12\x03i\
    \x10%\n\x0e\n\x07\x04\x0b\x04\0\x02\x04\x02\x12\x03i()\n\r\n\x06\x04\x0b\
    \x04\0\x02\x05\x12\x03j\x10/\n\x0e\n\x07\x04\x0b\x04\0\x02\x05\x01\x12\
    \x03j\x10*\n\x0e\n\x07\x04\x0b\x04\0\x02\x05\x02\x12\x03j-.\n\r\n\x06\
    \x04\x0b\x04\0\x02\x06\x12\x03k\x10'\n\x0e\n\x07\x04\x0b\x04\0\x02\x06\
    \x01\x12\x03k\x10\"\n\x0e\n\x07\x04\x0b\x04\0\x02\x06\x02\x12\x03k%&\n\r\
    \n\x06\x04\x0b\x04\0\x02\x07\x12\x03l\x10+\n\x0e\n\x07\x04\x0b\x04\0\x02\
    \x07\x01\x12\x03l\x10&\n\x0e\n\x07\x04\x0b\x04\0\x02\x07\x02\x12\x03l)*\
    \n\r\n\x06\x04\x0b\x04\0\x02\x08\x12\x03m\x10,\n\x0e\n\x07\x04\x0b\x04\0\
    \x02\x08\x01\x12\x03m\x10'\n\x0e\n\x07\x04\x0b\x04\0\x02\x08\x02\x12\x03\
    m*+\n\r\n\x06\x04\x0b\x04\0\x02\t\x12\x03n\x10,\n\x0e\n\x07\x04\x0b\x04\
    \0\x02\t\x01\x12\x03n\x10'\n\x0e\n\x07\x04\x0b\x04\0\x02\t\x02\x12\x03n*\
    +\n\r\n\x06\x04\x0b\x04\0\x02\n\x12\x03o\x10/\n\x0e\n\x07\x04\x0b\x04\0\
    \x02\n\x01\x12\x03o\x10)\n\x0e\n\x07\x04\x0b\x04\0\x02\n\x02\x12\x03o,.\
    \n\r\n\x06\x04\x0b\x04\0\x02\x0b\x12\x03p\x104\n\x0e\n\x07\x04\x0b\x04\0\
    \x02\x0b\x01\x12\x03p\x10.\n\x0e\n\x07\x04\x0b\x04\0\x02\x0b\x02\x12\x03\
    p13\n\r\n\x06\x04\x0b\x04\0\x02\x0c\x12\x03q\x101\n\x0e\n\x07\x04\x0b\
    \x04\0\x02\x0c\x01\x12\x03q\x10+\n\x0e\n\x07\x04\x0b\x04\0\x02\x0c\x02\
    \x12\x03q.0\n\r\n\x06\x04\x0b\x04\0\x02\r\x12\x03r\x103\n\x0e\n\x07\x04\
    \x0b\x04\0\x02\r\x01\x12\x03r\x10-\n\x0e\n\x07\x04\x0b\x04\0\x02\r\x02\
    \x12\x03r02\n\r\n\x06\x04\x0b\x04\0\x02\x0e\x12\x03s\x10+\n\x0e\n\x07\
    \x04\x0b\x04\0\x02\x0e\x01\x12\x03s\x10%\n\x0e\n\x07\x04\x0b\x04\0\x02\
    \x0e\x02\x12\x03s(*\n\x0b\n\x04\x04\x0b\x02\0\x12\x03v\x08,\n\x0c\n\x05\
    \x04\x0b\x02\0\x04\x12\x03v\x08\x10\n\x0c\n\x05\x04\x0b\x02\0\x05\x12\
    \x03v\x11\x18\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03v\x19'\n\x0c\n\x05\
    \x04\x0b\x02\0\x03\x12\x03v*+\n\x0b\n\x04\x04\x0b\x02\x01\x12\x03w\x08W\
    \n\x0c\n\x05\x04\x0b\x02\x01\x04\x12\x03w\x08\x10\n\x0c\n\x05\x04\x0b\
    \x02\x01\x06\x12\x03w\x11@\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03wAR\n\
    \x0c\n\x05\x04\x0b\x02\x01\x03\x12\x03wUV\n\x0b\n\x02\x04\x0c\x12\x05z\0\
    \x86\x01\x01\n\n\n\x03\x04\x0c\x01\x12\x03z\x08\x1f\n\x0c\n\x04\x04\x0c\
    \x03\0\x12\x04{\x08~\t\n\x0c\n\x05\x04\x0c\x03\0\x01\x12\x03{\x10\x19\n\
    \r\n\x06\x04\x0c\x03\0\x02\0\x12\x03|\x10.\n\x0e\n\x07\x04\x0c\x03\0\x02\
    \0\x04\x12\x03|\x10\x18\n\x0e\n\x07\x04\x0c\x03\0\x02\0\x05\x12\x03|\x19\
    \x1f\n\x0e\n\x07\x04\x0c\x03\0\x02\0\x01\x12\x03|\x20)\n\x0e\n\x07\x04\
    \x0c\x03\0\x02\0\x03\x12\x03|,-\n\r\n\x06\x04\x0c\x03\0\x02\x01\x12\x03}\
    \x100\n\x0e\n\x07\x04\x0c\x03\0\x02\x01\x04\x12\x03}\x10\x18\n\x0e\n\x07\
    \x04\x0c\x03\0\x02\x01\x05\x12\x03}\x19\x1f\n\x0e\n\x07\x04\x0c\x03\0\
    \x02\x01\x01\x12\x03}\x20+\n\x0e\n\x07\x04\x0c\x03\0\x02\x01\x03\x12\x03\
    }./\n\x0c\n\x04\x04\x0c\x02\0\x12\x04\x80\x01\x080\n\r\n\x05\x04\x0c\x02\
    \0\x04\x12\x04\x80\x01\x08\x10\n\r\n\x05\x04\x0c\x02\0\x06\x12\x04\x80\
    \x01\x11%\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\x80\x01&+\n\r\n\x05\x04\
    \x0c\x02\0\x03\x12\x04\x80\x01./\n\x0c\n\x04\x04\x0c\x02\x01\x12\x04\x81\
    \x01\x08\"\n\r\n\x05\x04\x0c\x02\x01\x04\x12\x04\x81\x01\x08\x10\n\r\n\
    \x05\x04\x0c\x02\x01\x05\x12\x04\x81\x01\x11\x17\n\r\n\x05\x04\x0c\x02\
    \x01\x01\x12\x04\x81\x01\x18\x1d\n\r\n\x05\x04\x0c\x02\x01\x03\x12\x04\
    \x81\x01\x20!\n\x0c\n\x04\x04\x0c\x02\x02\x12\x04\x82\x01\x08(\n\r\n\x05\
    \x04\x0c\x02\x02\x04\x12\x04\x82\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x02\
    \x05\x12\x04\x82\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\x82\
    \x01\x18#\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\x82\x01&'\n\x0c\n\x04\
    \x04\x0c\x02\x03\x12\x04\x83\x01\x08!\n\r\n\x05\x04\x0c\x02\x03\x04\x12\
    \x04\x83\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x03\x05\x12\x04\x83\x01\x11\
    \x17\n\r\n\x05\x04\x0c\x02\x03\x01\x12\x04\x83\x01\x18\x1c\n\r\n\x05\x04\
    \x0c\x02\x03\x03\x12\x04\x83\x01\x1f\x20\n\x0c\n\x04\x04\x0c\x02\x04\x12\
    \x04\x84\x01\x08!\n\r\n\x05\x04\x0c\x02\x04\x04\x12\x04\x84\x01\x08\x10\
    \n\r\n\x05\x04\x0c\x02\x04\x05\x12\x04\x84\x01\x11\x17\n\r\n\x05\x04\x0c\
    \x02\x04\x01\x12\x04\x84\x01\x18\x1c\n\r\n\x05\x04\x0c\x02\x04\x03\x12\
    \x04\x84\x01\x1f\x20\n\x0c\n\x04\x04\x0c\x02\x05\x12\x04\x85\x01\x08)\n\
    \r\n\x05\x04\x0c\x02\x05\x04\x12\x04\x85\x01\x08\x10\n\r\n\x05\x04\x0c\
    \x02\x05\x05\x12\x04\x85\x01\x11\x15\n\r\n\x05\x04\x0c\x02\x05\x01\x12\
    \x04\x85\x01\x16$\n\r\n\x05\x04\x0c\x02\x05\x03\x12\x04\x85\x01'(\n\x0c\
    \n\x02\x04\r\x12\x06\x88\x01\0\x8e\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\
    \x88\x01\x08\x15\n\x0c\n\x04\x04\r\x02\0\x12\x04\x89\x01\x08,\n\r\n\x05\
    \x04\r\x02\0\x04\x12\x04\x89\x01\x08\x10\n\r\n\x05\x04\r\x02\0\x05\x12\
    \x04\x89\x01\x11\x18\n\r\n\x05\x04\r\x02\0\x01\x12\x04\x89\x01\x19'\n\r\
    \n\x05\x04\r\x02\0\x03\x12\x04\x89\x01*+\n\x0c\n\x04\x04\r\x02\x01\x12\
    \x04\x8a\x01\x08+\n\r\n\x05\x04\r\x02\x01\x04\x12\x04\x8a\x01\x08\x10\n\
    \r\n\x05\x04\r\x02\x01\x05\x12\x04\x8a\x01\x11\x17\n\r\n\x05\x04\r\x02\
    \x01\x01\x12\x04\x8a\x01\x18&\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\x8a\
    \x01)*\n\x0c\n\x04\x04\r\x02\x02\x12\x04\x8b\x01\x082\n\r\n\x05\x04\r\
    \x02\x02\x04\x12\x04\x8b\x01\x08\x10\n\r\n\x05\x04\r\x02\x02\x05\x12\x04\
    \x8b\x01\x11\x18\n\r\n\x05\x04\r\x02\x02\x01\x12\x04\x8b\x01\x19-\n\r\n\
    \x05\x04\r\x02\x02\x03\x12\x04\x8b\x0101\n\x0c\n\x04\x04\r\x02\x03\x12\
    \x04\x8c\x01\x08%\n\r\n\x05\x04\r\x02\x03\x04\x12\x04\x8c\x01\x08\x10\n\
    \r\n\x05\x04\r\x02\x03\x05\x12\x04\x8c\x01\x11\x17\n\r\n\x05\x04\r\x02\
    \x03\x01\x12\x04\x8c\x01\x18\x20\n\r\n\x05\x04\r\x02\x03\x03\x12\x04\x8c\
    \x01#$\n\x0c\n\x04\x04\r\x02\x04\x12\x04\x8d\x01\x08$\n\r\n\x05\x04\r\
    \x02\x04\x04\x12\x04\x8d\x01\x08\x10\n\r\n\x05\x04\r\x02\x04\x05\x12\x04\
    \x8d\x01\x11\x17\n\r\n\x05\x04\r\x02\x04\x01\x12\x04\x8d\x01\x18\x1f\n\r\
    \n\x05\x04\r\x02\x04\x03\x12\x04\x8d\x01\"#\n\x0c\n\x02\x04\x0e\x12\x06\
    \x90\x01\0\x91\x01\x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\x90\x01\x08\x1b\n\
    \x0c\n\x02\x04\x0f\x12\x06\x93\x01\0\xa6\x01\x01\n\x0b\n\x03\x04\x0f\x01\
    \x12\x04\x93\x01\x08\x1d\n\x0e\n\x04\x04\x0f\x04\0\x12\x06\x94\x01\x08\
    \x9d\x01\t\n\r\n\x05\x04\x0f\x04\0\x01\x12\x04\x94\x01\r\x1c\n\x0e\n\x06\
    \x04\x0f\x04\0\x02\0\x12\x04\x95\x01\x10\x1c\n\x0f\n\x07\x04\x0f\x04\0\
    \x02\0\x01\x12\x04\x95\x01\x10\x17\n\x0f\n\x07\x04\x0f\x04\0\x02\0\x02\
    \x12\x04\x95\x01\x1a\x1b\n\x0e\n\x06\x04\x0f\x04\0\x02\x01\x12\x04\x96\
    \x01\x10\x1a\n\x0f\n\x07\x04\x0f\x04\0\x02\x01\x01\x12\x04\x96\x01\x10\
    \x15\n\x0f\n\x07\x04\x0f\x04\0\x02\x01\x02\x12\x04\x96\x01\x18\x19\n\x0e\
    \n\x06\x04\x0f\x04\0\x02\x02\x12\x04\x97\x01\x10'\n\x0f\n\x07\x04\x0f\
    \x04\0\x02\x02\x01\x12\x04\x97\x01\x10\"\n\x0f\n\x07\x04\x0f\x04\0\x02\
    \x02\x02\x12\x04\x97\x01%&\n\x0e\n\x06\x04\x0f\x04\0\x02\x03\x12\x04\x98\
    \x01\x10\x20\n\x0f\n\x07\x04\x0f\x04\0\x02\x03\x01\x12\x04\x98\x01\x10\
    \x1b\n\x0f\n\x07\x04\x0f\x04\0\x02\x03\x02\x12\x04\x98\x01\x1e\x1f\n\x0e\
    \n\x06\x04\x0f\x04\0\x02\x04\x12\x04\x99\x01\x10\x1e\n\x0f\n\x07\x04\x0f\
    \x04\0\x02\x04\x01\x12\x04\x99\x01\x10\x19\n\x0f\n\x07\x04\x0f\x04\0\x02\
    \x04\x02\x12\x04\x99\x01\x1c\x1d\n\x0e\n\x06\x04\x0f\x04\0\x02\x05\x12\
    \x04\x9a\x01\x10(\n\x0f\n\x07\x04\x0f\x04\0\x02\x05\x01\x12\x04\x9a\x01\
    \x10#\n\x0f\n\x07\x04\x0f\x04\0\x02\x05\x02\x12\x04\x9a\x01&'\n\x0e\n\
    \x06\x04\x0f\x04\0\x02\x06\x12\x04\x9b\x01\x10.\n\x0f\n\x07\x04\x0f\x04\
    \0\x02\x06\x01\x12\x04\x9b\x01\x10)\n\x0f\n\x07\x04\x0f\x04\0\x02\x06\
    \x02\x12\x04\x9b\x01,-\n\x0e\n\x06\x04\x0f\x04\0\x02\x07\x12\x04\x9c\x01\
    \x10\"\n\x0f\n\x07\x04\x0f\x04\0\x02\x07\x01\x12\x04\x9c\x01\x10\x1d\n\
    \x0f\n\x07\x04\x0f\x04\0\x02\x07\x02\x12\x04\x9c\x01\x20!\n\x0c\n\x04\
    \x04\x0f\x02\0\x12\x04\x9f\x01\x08M\n\r\n\x05\x04\x0f\x02\0\x04\x12\x04\
    \x9f\x01\x08\x10\n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\x9f\x01\x116\n\r\n\
    \x05\x04\x0f\x02\0\x01\x12\x04\x9f\x017H\n\r\n\x05\x04\x0f\x02\0\x03\x12\
    \x04\x9f\x01KL\n\x0c\n\x04\x04\x0f\x02\x01\x12\x04\xa0\x01\x082\n\r\n\
    \x05\x04\x0f\x02\x01\x04\x12\x04\xa0\x01\x08\x10\n\r\n\x05\x04\x0f\x02\
    \x01\x05\x12\x04\xa0\x01\x11\x17\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\
    \xa0\x01\x18-\n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\xa0\x0101\n\x0c\n\
    \x04\x04\x0f\x02\x02\x12\x04\xa1\x01\x083\n\r\n\x05\x04\x0f\x02\x02\x04\
    \x12\x04\xa1\x01\x08\x10\n\r\n\x05\x04\x0f\x02\x02\x05\x12\x04\xa1\x01\
    \x11\x17\n\r\n\x05\x04\x0f\x02\x02\x01\x12\x04\xa1\x01\x18.\n\r\n\x05\
    \x04\x0f\x02\x02\x03\x12\x04\xa1\x0112\n\x0c\n\x04\x04\x0f\x02\x03\x12\
    \x04\xa2\x01\x08+\n\r\n\x05\x04\x0f\x02\x03\x04\x12\x04\xa2\x01\x08\x10\
    \n\r\n\x05\x04\x0f\x02\x03\x05\x12\x04\xa2\x01\x11\x17\n\r\n\x05\x04\x0f\
    \x02\x03\x01\x12\x04\xa2\x01\x18&\n\r\n\x05\x04\x0f\x02\x03\x03\x12\x04\
    \xa2\x01)*\n\x0c\n\x04\x04\x0f\x02\x04\x12\x04\xa3\x01\x081\n\r\n\x05\
    \x04\x0f\x02\x04\x04\x12\x04\xa3\x01\x08\x10\n\r\n\x05\x04\x0f\x02\x04\
    \x05\x12\x04\xa3\x01\x11\x18\n\r\n\x05\x04\x0f\x02\x04\x01\x12\x04\xa3\
    \x01\x19,\n\r\n\x05\x04\x0f\x02\x04\x03\x12\x04\xa3\x01/0\n\x0c\n\x04\
    \x04\x0f\x02\x05\x12\x04\xa4\x01\x082\n\r\n\x05\x04\x0f\x02\x05\x04\x12\
    \x04\xa4\x01\x08\x10\n\r\n\x05\x04\x0f\x02\x05\x05\x12\x04\xa4\x01\x11\
    \x18\n\r\n\x05\x04\x0f\x02\x05\x01\x12\x04\xa4\x01\x19-\n\r\n\x05\x04\
    \x0f\x02\x05\x03\x12\x04\xa4\x0101\n\x0c\n\x04\x04\x0f\x02\x06\x12\x04\
    \xa5\x01\x089\n\r\n\x05\x04\x0f\x02\x06\x04\x12\x04\xa5\x01\x08\x10\n\r\
    \n\x05\x04\x0f\x02\x06\x05\x12\x04\xa5\x01\x11\x18\n\r\n\x05\x04\x0f\x02\
    \x06\x01\x12\x04\xa5\x01\x194\n\r\n\x05\x04\x0f\x02\x06\x03\x12\x04\xa5\
    \x0178\n\x0c\n\x02\x04\x10\x12\x06\xa8\x01\0\xaa\x01\x01\n\x0b\n\x03\x04\
    \x10\x01\x12\x04\xa8\x01\x08&\n\x0c\n\x04\x04\x10\x02\0\x12\x04\xa9\x01\
    \x081\n\r\n\x05\x04\x10\x02\0\x04\x12\x04\xa9\x01\x08\x10\n\r\n\x05\x04\
    \x10\x02\0\x05\x12\x04\xa9\x01\x11\x18\n\r\n\x05\x04\x10\x02\0\x01\x12\
    \x04\xa9\x01\x19,\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\xa9\x01/0\n\x0c\n\
    \x02\x04\x11\x12\x06\xac\x01\0\xb7\x01\x01\n\x0b\n\x03\x04\x11\x01\x12\
    \x04\xac\x01\x08\x1c\n\x0c\n\x04\x04\x11\x02\0\x12\x04\xad\x01\x08'\n\r\
    \n\x05\x04\x11\x02\0\x04\x12\x04\xad\x01\x08\x10\n\r\n\x05\x04\x11\x02\0\
    \x05\x12\x04\xad\x01\x11\x17\n\r\n\x05\x04\x11\x02\0\x01\x12\x04\xad\x01\
    \x18\"\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\xad\x01%&\n\x0c\n\x04\x04\x11\
    \x02\x01\x12\x04\xae\x01\x08-\n\r\n\x05\x04\x11\x02\x01\x04\x12\x04\xae\
    \x01\x08\x10\n\r\n\x05\x04\x11\x02\x01\x05\x12\x04\xae\x01\x11\x18\n\r\n\
    \x05\x04\x11\x02\x01\x01\x12\x04\xae\x01\x19(\n\r\n\x05\x04\x11\x02\x01\
    \x03\x12\x04\xae\x01+,\n\x0c\n\x04\x04\x11\x02\x02\x12\x04\xaf\x01\x08\
    \x1f\n\r\n\x05\x04\x11\x02\x02\x04\x12\x04\xaf\x01\x08\x10\n\r\n\x05\x04\
    \x11\x02\x02\x05\x12\x04\xaf\x01\x11\x15\n\r\n\x05\x04\x11\x02\x02\x01\
    \x12\x04\xaf\x01\x16\x1a\n\r\n\x05\x04\x11\x02\x02\x03\x12\x04\xaf\x01\
    \x1d\x1e\n\x0c\n\x04\x04\x11\x02\x03\x12\x04\xb0\x01\x08.\n\r\n\x05\x04\
    \x11\x02\x03\x04\x12\x04\xb0\x01\x08\x10\n\r\n\x05\x04\x11\x02\x03\x05\
    \x12\x04\xb0\x01\x11\x17\n\r\n\x05\x04\x11\x02\x03\x01\x12\x04\xb0\x01\
    \x18)\n\r\n\x05\x04\x11\x02\x03\x03\x12\x04\xb0\x01,-\n\x0c\n\x04\x04\
    \x11\x02\x04\x12\x04\xb1\x01\x08+\n\r\n\x05\x04\x11\x02\x04\x04\x12\x04\
    \xb1\x01\x08\x10\n\r\n\x05\x04\x11\x02\x04\x05\x12\x04\xb1\x01\x11\x17\n\
    \r\n\x05\x04\x11\x02\x04\x01\x12\x04\xb1\x01\x18&\n\r\n\x05\x04\x11\x02\
    \x04\x03\x12\x04\xb1\x01)*\n\x0c\n\x04\x04\x11\x02\x05\x12\x04\xb2\x01\
    \x08(\n\r\n\x05\x04\x11\x02\x05\x04\x12\x04\xb2\x01\x08\x10\n\r\n\x05\
    \x04\x11\x02\x05\x05\x12\x04\xb2\x01\x11\x17\n\r\n\x05\x04\x11\x02\x05\
    \x01\x12\x04\xb2\x01\x18#\n\r\n\x05\x04\x11\x02\x05\x03\x12\x04\xb2\x01&\
    '\n\x0c\n\x04\x04\x11\x02\x06\x12\x04\xb3\x01\x089\n\r\n\x05\x04\x11\x02\
    \x06\x04\x12\x04\xb3\x01\x08\x10\n\r\n\x05\x04\x11\x02\x06\x05\x12\x04\
    \xb3\x01\x11\x17\n\r\n\x05\x04\x11\x02\x06\x01\x12\x04\xb3\x01\x184\n\r\
    \n\x05\x04\x11\x02\x06\x03\x12\x04\xb3\x0178\n\x0c\n\x04\x04\x11\x02\x07\
    \x12\x04\xb4\x01\x08,\n\r\n\x05\x04\x11\x02\x07\x04\x12\x04\xb4\x01\x08\
    \x10\n\r\n\x05\x04\x11\x02\x07\x05\x12\x04\xb4\x01\x11\x15\n\r\n\x05\x04\
    \x11\x02\x07\x01\x12\x04\xb4\x01\x16&\n\r\n\x05\x04\x11\x02\x07\x03\x12\
    \x04\xb4\x01)+\n\x0c\n\x04\x04\x11\x02\x08\x12\x04\xb5\x01\x08'\n\r\n\
    \x05\x04\x11\x02\x08\x04\x12\x04\xb5\x01\x08\x10\n\r\n\x05\x04\x11\x02\
    \x08\x05\x12\x04\xb5\x01\x11\x17\n\r\n\x05\x04\x11\x02\x08\x01\x12\x04\
    \xb5\x01\x18!\n\r\n\x05\x04\x11\x02\x08\x03\x12\x04\xb5\x01$&\n\x0c\n\
    \x04\x04\x11\x02\t\x12\x04\xb6\x01\x08'\n\r\n\x05\x04\x11\x02\t\x04\x12\
    \x04\xb6\x01\x08\x10\n\r\n\x05\x04\x11\x02\t\x05\x12\x04\xb6\x01\x11\x17\
    \n\r\n\x05\x04\x11\x02\t\x01\x12\x04\xb6\x01\x18!\n\r\n\x05\x04\x11\x02\
    \t\x03\x12\x04\xb6\x01$&\n\x0c\n\x02\x04\x12\x12\x06\xb9\x01\0\xcf\x01\
    \x01\n\x0b\n\x03\x04\x12\x01\x12\x04\xb9\x01\x08\x16\n\x0e\n\x04\x04\x12\
    \x03\0\x12\x06\xba\x01\x08\xbf\x01\t\n\r\n\x05\x04\x12\x03\0\x01\x12\x04\
    \xba\x01\x10\x18\n\x0e\n\x06\x04\x12\x03\0\x02\0\x12\x04\xbb\x01\x10,\n\
    \x0f\n\x07\x04\x12\x03\0\x02\0\x04\x12\x04\xbb\x01\x10\x18\n\x0f\n\x07\
    \x04\x12\x03\0\x02\0\x05\x12\x04\xbb\x01\x19\x1f\n\x0f\n\x07\x04\x12\x03\
    \0\x02\0\x01\x12\x04\xbb\x01\x20'\n\x0f\n\x07\x04\x12\x03\0\x02\0\x03\
    \x12\x04\xbb\x01*+\n\x0e\n\x06\x04\x12\x03\0\x02\x01\x12\x04\xbc\x01\x10\
    .\n\x0f\n\x07\x04\x12\x03\0\x02\x01\x04\x12\x04\xbc\x01\x10\x18\n\x0f\n\
    \x07\x04\x12\x03\0\x02\x01\x05\x12\x04\xbc\x01\x19\x1f\n\x0f\n\x07\x04\
    \x12\x03\0\x02\x01\x01\x12\x04\xbc\x01\x20)\n\x0f\n\x07\x04\x12\x03\0\
    \x02\x01\x03\x12\x04\xbc\x01,-\n\x0e\n\x06\x04\x12\x03\0\x02\x02\x12\x04\
    \xbd\x01\x102\n\x0f\n\x07\x04\x12\x03\0\x02\x02\x04\x12\x04\xbd\x01\x10\
    \x18\n\x0f\n\x07\x04\x12\x03\0\x02\x02\x05\x12\x04\xbd\x01\x19\x1f\n\x0f\
    \n\x07\x04\x12\x03\0\x02\x02\x01\x12\x04\xbd\x01\x20-\n\x0f\n\x07\x04\
    \x12\x03\0\x02\x02\x03\x12\x04\xbd\x0101\n\x0e\n\x06\x04\x12\x03\0\x02\
    \x03\x12\x04\xbe\x01\x100\n\x0f\n\x07\x04\x12\x03\0\x02\x03\x04\x12\x04\
    \xbe\x01\x10\x18\n\x0f\n\x07\x04\x12\x03\0\x02\x03\x05\x12\x04\xbe\x01\
    \x19\x1f\n\x0f\n\x07\x04\x12\x03\0\x02\x03\x01\x12\x04\xbe\x01\x20+\n\
    \x0f\n\x07\x04\x12\x03\0\x02\x03\x03\x12\x04\xbe\x01./\n\x0e\n\x04\x04\
    \x12\x03\x01\x12\x06\xc1\x01\x08\xc7\x01\t\n\r\n\x05\x04\x12\x03\x01\x01\
    \x12\x04\xc1\x01\x10\x18\n\x0e\n\x06\x04\x12\x03\x01\x02\0\x12\x04\xc2\
    \x01\x105\n\x0f\n\x07\x04\x12\x03\x01\x02\0\x04\x12\x04\xc2\x01\x10\x18\
    \n\x0f\n\x07\x04\x12\x03\x01\x02\0\x05\x12\x04\xc2\x01\x19\x20\n\x0f\n\
    \x07\x04\x12\x03\x01\x02\0\x01\x12\x04\xc2\x01!0\n\x0f\n\x07\x04\x12\x03\
    \x01\x02\0\x03\x12\x04\xc2\x0134\n\x0e\n\x06\x04\x12\x03\x01\x02\x01\x12\
    \x04\xc3\x01\x10B\n\x0f\n\x07\x04\x12\x03\x01\x02\x01\x04\x12\x04\xc3\
    \x01\x10\x18\n\x0f\n\x07\x04\x12\x03\x01\x02\x01\x06\x12\x04\xc3\x01\x19\
    0\n\x0f\n\x07\x04\x12\x03\x01\x02\x01\x01\x12\x04\xc3\x011=\n\x0f\n\x07\
    \x04\x12\x03\x01\x02\x01\x03\x12\x04\xc3\x01@A\n\x0e\n\x06\x04\x12\x03\
    \x01\x02\x02\x12\x04\xc4\x01\x10?\n\x0f\n\x07\x04\x12\x03\x01\x02\x02\
    \x04\x12\x04\xc4\x01\x10\x18\n\x0f\n\x07\x04\x12\x03\x01\x02\x02\x06\x12\
    \x04\xc4\x01\x190\n\x0f\n\x07\x04\x12\x03\x01\x02\x02\x01\x12\x04\xc4\
    \x011:\n\x0f\n\x07\x04\x12\x03\x01\x02\x02\x03\x12\x04\xc4\x01=>\n\x0e\n\
    \x06\x04\x12\x03\x01\x02\x03\x12\x04\xc5\x01\x107\n\x0f\n\x07\x04\x12\
    \x03\x01\x02\x03\x04\x12\x04\xc5\x01\x10\x18\n\x0f\n\x07\x04\x12\x03\x01\
    \x02\x03\x05\x12\x04\xc5\x01\x19\x1f\n\x0f\n\x07\x04\x12\x03\x01\x02\x03\
    \x01\x12\x04\xc5\x01\x202\n\x0f\n\x07\x04\x12\x03\x01\x02\x03\x03\x12\
    \x04\xc5\x0156\n\x0e\n\x06\x04\x12\x03\x01\x02\x04\x12\x04\xc6\x01\x104\
    \n\x0f\n\x07\x04\x12\x03\x01\x02\x04\x04\x12\x04\xc6\x01\x10\x18\n\x0f\n\
    \x07\x04\x12\x03\x01\x02\x04\x05\x12\x04\xc6\x01\x19\x1f\n\x0f\n\x07\x04\
    \x12\x03\x01\x02\x04\x01\x12\x04\xc6\x01\x20/\n\x0f\n\x07\x04\x12\x03\
    \x01\x02\x04\x03\x12\x04\xc6\x0123\n\x0c\n\x04\x04\x12\x02\0\x12\x04\xc9\
    \x01\x08&\n\r\n\x05\x04\x12\x02\0\x04\x12\x04\xc9\x01\x08\x10\n\r\n\x05\
    \x04\x12\x02\0\x05\x12\x04\xc9\x01\x11\x17\n\r\n\x05\x04\x12\x02\0\x01\
    \x12\x04\xc9\x01\x18!\n\r\n\x05\x04\x12\x02\0\x03\x12\x04\xc9\x01$%\n\
    \x0c\n\x04\x04\x12\x02\x01\x12\x04\xca\x01\x08(\n\r\n\x05\x04\x12\x02\
    \x01\x04\x12\x04\xca\x01\x08\x10\n\r\n\x05\x04\x12\x02\x01\x05\x12\x04\
    \xca\x01\x11\x17\n\r\n\x05\x04\x12\x02\x01\x01\x12\x04\xca\x01\x18#\n\r\
    \n\x05\x04\x12\x02\x01\x03\x12\x04\xca\x01&'\n\x0c\n\x04\x04\x12\x02\x02\
    \x12\x04\xcb\x01\x084\n\r\n\x05\x04\x12\x02\x02\x04\x12\x04\xcb\x01\x08\
    \x10\n\r\n\x05\x04\x12\x02\x02\x06\x12\x04\xcb\x01\x11(\n\r\n\x05\x04\
    \x12\x02\x02\x01\x12\x04\xcb\x01)/\n\r\n\x05\x04\x12\x02\x02\x03\x12\x04\
    \xcb\x0123\n\x0c\n\x04\x04\x12\x02\x03\x12\x04\xcc\x01\x084\n\r\n\x05\
    \x04\x12\x02\x03\x04\x12\x04\xcc\x01\x08\x10\n\r\n\x05\x04\x12\x02\x03\
    \x06\x12\x04\xcc\x01\x11(\n\r\n\x05\x04\x12\x02\x03\x01\x12\x04\xcc\x01)\
    /\n\r\n\x05\x04\x12\x02\x03\x03\x12\x04\xcc\x0123\n\x0c\n\x04\x04\x12\
    \x02\x04\x12\x04\xcd\x01\x088\n\r\n\x05\x04\x12\x02\x04\x04\x12\x04\xcd\
    \x01\x08\x10\n\r\n\x05\x04\x12\x02\x04\x06\x12\x04\xcd\x01\x11%\n\r\n\
    \x05\x04\x12\x02\x04\x01\x12\x04\xcd\x01&3\n\r\n\x05\x04\x12\x02\x04\x03\
    \x12\x04\xcd\x0167\n\x0c\n\x04\x04\x12\x02\x05\x12\x04\xce\x01\x087\n\r\
    \n\x05\x04\x12\x02\x05\x04\x12\x04\xce\x01\x08\x10\n\r\n\x05\x04\x12\x02\
    \x05\x06\x12\x04\xce\x01\x11(\n\r\n\x05\x04\x12\x02\x05\x01\x12\x04\xce\
    \x01)2\n\r\n\x05\x04\x12\x02\x05\x03\x12\x04\xce\x0156\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::dota_gcmessages_common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(23);
            messages.push(CSourceTVGameSmall::generated_message_descriptor_data());
            messages.push(CMsgClientToGCFindTopSourceTVGames::generated_message_descriptor_data());
            messages.push(CMsgGCToClientFindTopSourceTVGamesResponse::generated_message_descriptor_data());
            messages.push(CMsgGCToClientTopWeekendTourneyGames::generated_message_descriptor_data());
            messages.push(CMsgClientToGCTopLeagueMatchesRequest::generated_message_descriptor_data());
            messages.push(CMsgClientToGCTopFriendMatchesRequest::generated_message_descriptor_data());
            messages.push(CMsgClientToGCMatchesMinimalRequest::generated_message_descriptor_data());
            messages.push(CMsgClientToGCMatchesMinimalResponse::generated_message_descriptor_data());
            messages.push(CMsgGCToClientTopLeagueMatchesResponse::generated_message_descriptor_data());
            messages.push(CMsgGCToClientTopFriendMatchesResponse::generated_message_descriptor_data());
            messages.push(CMsgSpectateFriendGame::generated_message_descriptor_data());
            messages.push(CMsgSpectateFriendGameResponse::generated_message_descriptor_data());
            messages.push(CDOTAReplayDownloadInfo::generated_message_descriptor_data());
            messages.push(CMsgWatchGame::generated_message_descriptor_data());
            messages.push(CMsgCancelWatchGame::generated_message_descriptor_data());
            messages.push(CMsgWatchGameResponse::generated_message_descriptor_data());
            messages.push(CMsgPartyLeaderWatchGamePrompt::generated_message_descriptor_data());
            messages.push(CDOTABroadcasterInfo::generated_message_descriptor_data());
            messages.push(CMsgDOTASeries::generated_message_descriptor_data());
            messages.push(csource_tvgame_small::Player::generated_message_descriptor_data());
            messages.push(cdotareplay_download_info::Highlight::generated_message_descriptor_data());
            messages.push(cmsg_dotaseries::TeamInfo::generated_message_descriptor_data());
            messages.push(cmsg_dotaseries::LiveGame::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(cmsg_spectate_friend_game_response::EWatchLiveResult::generated_enum_descriptor_data());
            enums.push(cmsg_watch_game_response::WatchGameResult::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
