// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_int.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CMsgWebAPIKey)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWebAPIKey {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgWebAPIKey.status)
    pub status: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWebAPIKey.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWebAPIKey.publisher_group_id)
    pub publisher_group_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWebAPIKey.key_id)
    pub key_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWebAPIKey.domain)
    pub domain: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgWebAPIKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWebAPIKey {
    fn default() -> &'a CMsgWebAPIKey {
        <CMsgWebAPIKey as ::protobuf::Message>::default_instance()
    }
}

impl CMsgWebAPIKey {
    pub fn new() -> CMsgWebAPIKey {
        ::std::default::Default::default()
    }

    // optional uint32 status = 1;

    pub fn status(&self) -> u32 {
        self.status.unwrap_or(0)
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = ::std::option::Option::Some(v);
    }

    // optional uint32 account_id = 2;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 publisher_group_id = 3;

    pub fn publisher_group_id(&self) -> u32 {
        self.publisher_group_id.unwrap_or(0)
    }

    pub fn clear_publisher_group_id(&mut self) {
        self.publisher_group_id = ::std::option::Option::None;
    }

    pub fn has_publisher_group_id(&self) -> bool {
        self.publisher_group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publisher_group_id(&mut self, v: u32) {
        self.publisher_group_id = ::std::option::Option::Some(v);
    }

    // optional uint32 key_id = 4;

    pub fn key_id(&self) -> u32 {
        self.key_id.unwrap_or(0)
    }

    pub fn clear_key_id(&mut self) {
        self.key_id = ::std::option::Option::None;
    }

    pub fn has_key_id(&self) -> bool {
        self.key_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: u32) {
        self.key_id = ::std::option::Option::Some(v);
    }

    // optional string domain = 5;

    pub fn domain(&self) -> &str {
        match self.domain.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_domain(&mut self) {
        self.domain = ::std::option::Option::None;
    }

    pub fn has_domain(&self) -> bool {
        self.domain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_domain(&mut self, v: ::std::string::String) {
        self.domain = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_domain(&mut self) -> &mut ::std::string::String {
        if self.domain.is_none() {
            self.domain = ::std::option::Option::Some(::std::string::String::new());
        }
        self.domain.as_mut().unwrap()
    }

    // Take field
    pub fn take_domain(&mut self) -> ::std::string::String {
        self.domain.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &CMsgWebAPIKey| { &m.status },
            |m: &mut CMsgWebAPIKey| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CMsgWebAPIKey| { &m.account_id },
            |m: &mut CMsgWebAPIKey| { &mut m.account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publisher_group_id",
            |m: &CMsgWebAPIKey| { &m.publisher_group_id },
            |m: &mut CMsgWebAPIKey| { &mut m.publisher_group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key_id",
            |m: &CMsgWebAPIKey| { &m.key_id },
            |m: &mut CMsgWebAPIKey| { &mut m.key_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "domain",
            |m: &CMsgWebAPIKey| { &m.domain },
            |m: &mut CMsgWebAPIKey| { &mut m.domain },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgWebAPIKey>(
            "CMsgWebAPIKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgWebAPIKey {
    const NAME: &'static str = "CMsgWebAPIKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.publisher_group_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.key_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.domain = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.status {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.publisher_group_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.key_id {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.domain.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.status {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.account_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.publisher_group_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.key_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.domain.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWebAPIKey {
        CMsgWebAPIKey::new()
    }

    fn clear(&mut self) {
        self.status = ::std::option::Option::None;
        self.account_id = ::std::option::Option::None;
        self.publisher_group_id = ::std::option::Option::None;
        self.key_id = ::std::option::Option::None;
        self.domain = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWebAPIKey {
        static instance: CMsgWebAPIKey = CMsgWebAPIKey {
            status: ::std::option::Option::None,
            account_id: ::std::option::Option::None,
            publisher_group_id: ::std::option::Option::None,
            key_id: ::std::option::Option::None,
            domain: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgWebAPIKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgWebAPIKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgWebAPIKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgWebAPIKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgHttpRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgHttpRequest {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgHttpRequest.request_method)
    pub request_method: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgHttpRequest.hostname)
    pub hostname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgHttpRequest.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgHttpRequest.headers)
    pub headers: ::std::vec::Vec<cmsg_http_request::RequestHeader>,
    // @@protoc_insertion_point(field:dota.CMsgHttpRequest.get_params)
    pub get_params: ::std::vec::Vec<cmsg_http_request::QueryParam>,
    // @@protoc_insertion_point(field:dota.CMsgHttpRequest.post_params)
    pub post_params: ::std::vec::Vec<cmsg_http_request::QueryParam>,
    // @@protoc_insertion_point(field:dota.CMsgHttpRequest.body)
    pub body: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:dota.CMsgHttpRequest.absolute_timeout)
    pub absolute_timeout: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgHttpRequest.use_https)
    pub use_https: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgHttpRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgHttpRequest {
    fn default() -> &'a CMsgHttpRequest {
        <CMsgHttpRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgHttpRequest {
    pub fn new() -> CMsgHttpRequest {
        ::std::default::Default::default()
    }

    // optional uint32 request_method = 1;

    pub fn request_method(&self) -> u32 {
        self.request_method.unwrap_or(0)
    }

    pub fn clear_request_method(&mut self) {
        self.request_method = ::std::option::Option::None;
    }

    pub fn has_request_method(&self) -> bool {
        self.request_method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_method(&mut self, v: u32) {
        self.request_method = ::std::option::Option::Some(v);
    }

    // optional string hostname = 2;

    pub fn hostname(&self) -> &str {
        match self.hostname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hostname(&mut self) {
        self.hostname = ::std::option::Option::None;
    }

    pub fn has_hostname(&self) -> bool {
        self.hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        if self.hostname.is_none() {
            self.hostname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        self.hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string url = 3;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes body = 7;

    pub fn body(&self) -> &[u8] {
        match self.body.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.body.is_none() {
            self.body = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        self.body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 absolute_timeout = 8;

    pub fn absolute_timeout(&self) -> u32 {
        self.absolute_timeout.unwrap_or(0)
    }

    pub fn clear_absolute_timeout(&mut self) {
        self.absolute_timeout = ::std::option::Option::None;
    }

    pub fn has_absolute_timeout(&self) -> bool {
        self.absolute_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_absolute_timeout(&mut self, v: u32) {
        self.absolute_timeout = ::std::option::Option::Some(v);
    }

    // optional bool use_https = 9;

    pub fn use_https(&self) -> bool {
        self.use_https.unwrap_or(false)
    }

    pub fn clear_use_https(&mut self) {
        self.use_https = ::std::option::Option::None;
    }

    pub fn has_use_https(&self) -> bool {
        self.use_https.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_https(&mut self, v: bool) {
        self.use_https = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "request_method",
            |m: &CMsgHttpRequest| { &m.request_method },
            |m: &mut CMsgHttpRequest| { &mut m.request_method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hostname",
            |m: &CMsgHttpRequest| { &m.hostname },
            |m: &mut CMsgHttpRequest| { &mut m.hostname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "url",
            |m: &CMsgHttpRequest| { &m.url },
            |m: &mut CMsgHttpRequest| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "headers",
            |m: &CMsgHttpRequest| { &m.headers },
            |m: &mut CMsgHttpRequest| { &mut m.headers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "get_params",
            |m: &CMsgHttpRequest| { &m.get_params },
            |m: &mut CMsgHttpRequest| { &mut m.get_params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "post_params",
            |m: &CMsgHttpRequest| { &m.post_params },
            |m: &mut CMsgHttpRequest| { &mut m.post_params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "body",
            |m: &CMsgHttpRequest| { &m.body },
            |m: &mut CMsgHttpRequest| { &mut m.body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "absolute_timeout",
            |m: &CMsgHttpRequest| { &m.absolute_timeout },
            |m: &mut CMsgHttpRequest| { &mut m.absolute_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_https",
            |m: &CMsgHttpRequest| { &m.use_https },
            |m: &mut CMsgHttpRequest| { &mut m.use_https },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgHttpRequest>(
            "CMsgHttpRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgHttpRequest {
    const NAME: &'static str = "CMsgHttpRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.request_method = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.hostname = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.headers.push(is.read_message()?);
                },
                42 => {
                    self.get_params.push(is.read_message()?);
                },
                50 => {
                    self.post_params.push(is.read_message()?);
                },
                58 => {
                    self.body = ::std::option::Option::Some(is.read_bytes()?);
                },
                64 => {
                    self.absolute_timeout = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.use_https = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.request_method {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.hostname.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.get_params {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.post_params {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        if let Some(v) = self.absolute_timeout {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.use_https {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.request_method {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.hostname.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.headers {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.get_params {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.post_params {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.body.as_ref() {
            os.write_bytes(7, v)?;
        }
        if let Some(v) = self.absolute_timeout {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.use_https {
            os.write_bool(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgHttpRequest {
        CMsgHttpRequest::new()
    }

    fn clear(&mut self) {
        self.request_method = ::std::option::Option::None;
        self.hostname = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.headers.clear();
        self.get_params.clear();
        self.post_params.clear();
        self.body = ::std::option::Option::None;
        self.absolute_timeout = ::std::option::Option::None;
        self.use_https = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgHttpRequest {
        static instance: CMsgHttpRequest = CMsgHttpRequest {
            request_method: ::std::option::Option::None,
            hostname: ::std::option::Option::None,
            url: ::std::option::Option::None,
            headers: ::std::vec::Vec::new(),
            get_params: ::std::vec::Vec::new(),
            post_params: ::std::vec::Vec::new(),
            body: ::std::option::Option::None,
            absolute_timeout: ::std::option::Option::None,
            use_https: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgHttpRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgHttpRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgHttpRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgHttpRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgHttpRequest`
pub mod cmsg_http_request {
    // @@protoc_insertion_point(message:dota.CMsgHttpRequest.RequestHeader)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RequestHeader {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgHttpRequest.RequestHeader.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgHttpRequest.RequestHeader.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgHttpRequest.RequestHeader.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RequestHeader {
        fn default() -> &'a RequestHeader {
            <RequestHeader as ::protobuf::Message>::default_instance()
        }
    }

    impl RequestHeader {
        pub fn new() -> RequestHeader {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &RequestHeader| { &m.name },
                |m: &mut RequestHeader| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &RequestHeader| { &m.value },
                |m: &mut RequestHeader| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequestHeader>(
                "CMsgHttpRequest.RequestHeader",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RequestHeader {
        const NAME: &'static str = "RequestHeader";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RequestHeader {
            RequestHeader::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RequestHeader {
            static instance: RequestHeader = RequestHeader {
                name: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RequestHeader {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgHttpRequest.RequestHeader").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RequestHeader {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RequestHeader {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgHttpRequest.QueryParam)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct QueryParam {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgHttpRequest.QueryParam.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgHttpRequest.QueryParam.value)
        pub value: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgHttpRequest.QueryParam.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a QueryParam {
        fn default() -> &'a QueryParam {
            <QueryParam as ::protobuf::Message>::default_instance()
        }
    }

    impl QueryParam {
        pub fn new() -> QueryParam {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bytes value = 2;

        pub fn value(&self) -> &[u8] {
            match self.value.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
            self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &QueryParam| { &m.name },
                |m: &mut QueryParam| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &QueryParam| { &m.value },
                |m: &mut QueryParam| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParam>(
                "CMsgHttpRequest.QueryParam",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for QueryParam {
        const NAME: &'static str = "QueryParam";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> QueryParam {
            QueryParam::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static QueryParam {
            static instance: QueryParam = QueryParam {
                name: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for QueryParam {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgHttpRequest.QueryParam").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for QueryParam {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for QueryParam {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgWebAPIRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWebAPIRequest {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgWebAPIRequest.interface_name)
    pub interface_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgWebAPIRequest.method_name)
    pub method_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgWebAPIRequest.version)
    pub version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWebAPIRequest.api_key)
    pub api_key: ::protobuf::MessageField<CMsgWebAPIKey>,
    // @@protoc_insertion_point(field:dota.CMsgWebAPIRequest.request)
    pub request: ::protobuf::MessageField<CMsgHttpRequest>,
    // @@protoc_insertion_point(field:dota.CMsgWebAPIRequest.routing_app_id)
    pub routing_app_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgWebAPIRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWebAPIRequest {
    fn default() -> &'a CMsgWebAPIRequest {
        <CMsgWebAPIRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgWebAPIRequest {
    pub fn new() -> CMsgWebAPIRequest {
        ::std::default::Default::default()
    }

    // optional string interface_name = 2;

    pub fn interface_name(&self) -> &str {
        match self.interface_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_interface_name(&mut self) {
        self.interface_name = ::std::option::Option::None;
    }

    pub fn has_interface_name(&self) -> bool {
        self.interface_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interface_name(&mut self, v: ::std::string::String) {
        self.interface_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interface_name(&mut self) -> &mut ::std::string::String {
        if self.interface_name.is_none() {
            self.interface_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.interface_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_interface_name(&mut self) -> ::std::string::String {
        self.interface_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string method_name = 3;

    pub fn method_name(&self) -> &str {
        match self.method_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_method_name(&mut self) {
        self.method_name = ::std::option::Option::None;
    }

    pub fn has_method_name(&self) -> bool {
        self.method_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method_name(&mut self, v: ::std::string::String) {
        self.method_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method_name(&mut self) -> &mut ::std::string::String {
        if self.method_name.is_none() {
            self.method_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.method_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_method_name(&mut self) -> ::std::string::String {
        self.method_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 version = 4;

    pub fn version(&self) -> u32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional uint32 routing_app_id = 7;

    pub fn routing_app_id(&self) -> u32 {
        self.routing_app_id.unwrap_or(0)
    }

    pub fn clear_routing_app_id(&mut self) {
        self.routing_app_id = ::std::option::Option::None;
    }

    pub fn has_routing_app_id(&self) -> bool {
        self.routing_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_app_id(&mut self, v: u32) {
        self.routing_app_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "interface_name",
            |m: &CMsgWebAPIRequest| { &m.interface_name },
            |m: &mut CMsgWebAPIRequest| { &mut m.interface_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "method_name",
            |m: &CMsgWebAPIRequest| { &m.method_name },
            |m: &mut CMsgWebAPIRequest| { &mut m.method_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &CMsgWebAPIRequest| { &m.version },
            |m: &mut CMsgWebAPIRequest| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgWebAPIKey>(
            "api_key",
            |m: &CMsgWebAPIRequest| { &m.api_key },
            |m: &mut CMsgWebAPIRequest| { &mut m.api_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgHttpRequest>(
            "request",
            |m: &CMsgWebAPIRequest| { &m.request },
            |m: &mut CMsgWebAPIRequest| { &mut m.request },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "routing_app_id",
            |m: &CMsgWebAPIRequest| { &m.routing_app_id },
            |m: &mut CMsgWebAPIRequest| { &mut m.routing_app_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgWebAPIRequest>(
            "CMsgWebAPIRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgWebAPIRequest {
    const NAME: &'static str = "CMsgWebAPIRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.interface_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.method_name = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.version = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.api_key)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request)?;
                },
                56 => {
                    self.routing_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.interface_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.method_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.api_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.routing_app_id {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.interface_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.method_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.version {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.api_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.request.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.routing_app_id {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWebAPIRequest {
        CMsgWebAPIRequest::new()
    }

    fn clear(&mut self) {
        self.interface_name = ::std::option::Option::None;
        self.method_name = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.api_key.clear();
        self.request.clear();
        self.routing_app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWebAPIRequest {
        static instance: CMsgWebAPIRequest = CMsgWebAPIRequest {
            interface_name: ::std::option::Option::None,
            method_name: ::std::option::Option::None,
            version: ::std::option::Option::None,
            api_key: ::protobuf::MessageField::none(),
            request: ::protobuf::MessageField::none(),
            routing_app_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgWebAPIRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgWebAPIRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgWebAPIRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgWebAPIRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgHttpResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgHttpResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgHttpResponse.status_code)
    pub status_code: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgHttpResponse.headers)
    pub headers: ::std::vec::Vec<cmsg_http_response::ResponseHeader>,
    // @@protoc_insertion_point(field:dota.CMsgHttpResponse.body)
    pub body: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgHttpResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgHttpResponse {
    fn default() -> &'a CMsgHttpResponse {
        <CMsgHttpResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgHttpResponse {
    pub fn new() -> CMsgHttpResponse {
        ::std::default::Default::default()
    }

    // optional uint32 status_code = 1;

    pub fn status_code(&self) -> u32 {
        self.status_code.unwrap_or(0)
    }

    pub fn clear_status_code(&mut self) {
        self.status_code = ::std::option::Option::None;
    }

    pub fn has_status_code(&self) -> bool {
        self.status_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status_code(&mut self, v: u32) {
        self.status_code = ::std::option::Option::Some(v);
    }

    // optional bytes body = 3;

    pub fn body(&self) -> &[u8] {
        match self.body.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.body.is_none() {
            self.body = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        self.body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status_code",
            |m: &CMsgHttpResponse| { &m.status_code },
            |m: &mut CMsgHttpResponse| { &mut m.status_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "headers",
            |m: &CMsgHttpResponse| { &m.headers },
            |m: &mut CMsgHttpResponse| { &mut m.headers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "body",
            |m: &CMsgHttpResponse| { &m.body },
            |m: &mut CMsgHttpResponse| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgHttpResponse>(
            "CMsgHttpResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgHttpResponse {
    const NAME: &'static str = "CMsgHttpResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status_code = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.headers.push(is.read_message()?);
                },
                26 => {
                    self.body = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.status_code {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.status_code {
            os.write_uint32(1, v)?;
        }
        for v in &self.headers {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.body.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgHttpResponse {
        CMsgHttpResponse::new()
    }

    fn clear(&mut self) {
        self.status_code = ::std::option::Option::None;
        self.headers.clear();
        self.body = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgHttpResponse {
        static instance: CMsgHttpResponse = CMsgHttpResponse {
            status_code: ::std::option::Option::None,
            headers: ::std::vec::Vec::new(),
            body: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgHttpResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgHttpResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgHttpResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgHttpResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgHttpResponse`
pub mod cmsg_http_response {
    // @@protoc_insertion_point(message:dota.CMsgHttpResponse.ResponseHeader)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ResponseHeader {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgHttpResponse.ResponseHeader.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgHttpResponse.ResponseHeader.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgHttpResponse.ResponseHeader.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ResponseHeader {
        fn default() -> &'a ResponseHeader {
            <ResponseHeader as ::protobuf::Message>::default_instance()
        }
    }

    impl ResponseHeader {
        pub fn new() -> ResponseHeader {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &ResponseHeader| { &m.name },
                |m: &mut ResponseHeader| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &ResponseHeader| { &m.value },
                |m: &mut ResponseHeader| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResponseHeader>(
                "CMsgHttpResponse.ResponseHeader",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ResponseHeader {
        const NAME: &'static str = "ResponseHeader";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ResponseHeader {
            ResponseHeader::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ResponseHeader {
            static instance: ResponseHeader = ResponseHeader {
                name: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ResponseHeader {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgHttpResponse.ResponseHeader").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ResponseHeader {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ResponseHeader {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgAMFindAccounts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMFindAccounts {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMFindAccounts.search_type)
    pub search_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgAMFindAccounts.search_string)
    pub search_string: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMFindAccounts.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMFindAccounts {
    fn default() -> &'a CMsgAMFindAccounts {
        <CMsgAMFindAccounts as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMFindAccounts {
    pub fn new() -> CMsgAMFindAccounts {
        ::std::default::Default::default()
    }

    // optional uint32 search_type = 1;

    pub fn search_type(&self) -> u32 {
        self.search_type.unwrap_or(0)
    }

    pub fn clear_search_type(&mut self) {
        self.search_type = ::std::option::Option::None;
    }

    pub fn has_search_type(&self) -> bool {
        self.search_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_search_type(&mut self, v: u32) {
        self.search_type = ::std::option::Option::Some(v);
    }

    // optional string search_string = 2;

    pub fn search_string(&self) -> &str {
        match self.search_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_search_string(&mut self) {
        self.search_string = ::std::option::Option::None;
    }

    pub fn has_search_string(&self) -> bool {
        self.search_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_search_string(&mut self, v: ::std::string::String) {
        self.search_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search_string(&mut self) -> &mut ::std::string::String {
        if self.search_string.is_none() {
            self.search_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.search_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_search_string(&mut self) -> ::std::string::String {
        self.search_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "search_type",
            |m: &CMsgAMFindAccounts| { &m.search_type },
            |m: &mut CMsgAMFindAccounts| { &mut m.search_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "search_string",
            |m: &CMsgAMFindAccounts| { &m.search_string },
            |m: &mut CMsgAMFindAccounts| { &mut m.search_string },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMFindAccounts>(
            "CMsgAMFindAccounts",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMFindAccounts {
    const NAME: &'static str = "CMsgAMFindAccounts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.search_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.search_string = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.search_type {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.search_string.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.search_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.search_string.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMFindAccounts {
        CMsgAMFindAccounts::new()
    }

    fn clear(&mut self) {
        self.search_type = ::std::option::Option::None;
        self.search_string = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMFindAccounts {
        static instance: CMsgAMFindAccounts = CMsgAMFindAccounts {
            search_type: ::std::option::Option::None,
            search_string: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMFindAccounts {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMFindAccounts").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMFindAccounts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMFindAccounts {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgAMFindAccountsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMFindAccountsResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMFindAccountsResponse.steam_id)
    pub steam_id: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMFindAccountsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMFindAccountsResponse {
    fn default() -> &'a CMsgAMFindAccountsResponse {
        <CMsgAMFindAccountsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMFindAccountsResponse {
    pub fn new() -> CMsgAMFindAccountsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "steam_id",
            |m: &CMsgAMFindAccountsResponse| { &m.steam_id },
            |m: &mut CMsgAMFindAccountsResponse| { &mut m.steam_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMFindAccountsResponse>(
            "CMsgAMFindAccountsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMFindAccountsResponse {
    const NAME: &'static str = "CMsgAMFindAccountsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed64_into(&mut self.steam_id)?;
                },
                9 => {
                    self.steam_id.push(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 9 * self.steam_id.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.steam_id {
            os.write_fixed64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMFindAccountsResponse {
        CMsgAMFindAccountsResponse::new()
    }

    fn clear(&mut self) {
        self.steam_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMFindAccountsResponse {
        static instance: CMsgAMFindAccountsResponse = CMsgAMFindAccountsResponse {
            steam_id: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMFindAccountsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMFindAccountsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMFindAccountsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMFindAccountsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgNotifyWatchdog)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgNotifyWatchdog {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgNotifyWatchdog.source)
    pub source: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgNotifyWatchdog.alert_type)
    pub alert_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgNotifyWatchdog.critical)
    pub critical: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgNotifyWatchdog.time)
    pub time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgNotifyWatchdog.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgNotifyWatchdog.text)
    pub text: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgNotifyWatchdog.recipient)
    pub recipient: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgNotifyWatchdog.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgNotifyWatchdog {
    fn default() -> &'a CMsgNotifyWatchdog {
        <CMsgNotifyWatchdog as ::protobuf::Message>::default_instance()
    }
}

impl CMsgNotifyWatchdog {
    pub fn new() -> CMsgNotifyWatchdog {
        ::std::default::Default::default()
    }

    // optional uint32 source = 1;

    pub fn source(&self) -> u32 {
        self.source.unwrap_or(0)
    }

    pub fn clear_source(&mut self) {
        self.source = ::std::option::Option::None;
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: u32) {
        self.source = ::std::option::Option::Some(v);
    }

    // optional uint32 alert_type = 2;

    pub fn alert_type(&self) -> u32 {
        self.alert_type.unwrap_or(0)
    }

    pub fn clear_alert_type(&mut self) {
        self.alert_type = ::std::option::Option::None;
    }

    pub fn has_alert_type(&self) -> bool {
        self.alert_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alert_type(&mut self, v: u32) {
        self.alert_type = ::std::option::Option::Some(v);
    }

    // optional bool critical = 4;

    pub fn critical(&self) -> bool {
        self.critical.unwrap_or(false)
    }

    pub fn clear_critical(&mut self) {
        self.critical = ::std::option::Option::None;
    }

    pub fn has_critical(&self) -> bool {
        self.critical.is_some()
    }

    // Param is passed by value, moved
    pub fn set_critical(&mut self, v: bool) {
        self.critical = ::std::option::Option::Some(v);
    }

    // optional uint32 time = 5;

    pub fn time(&self) -> u32 {
        self.time.unwrap_or(0)
    }

    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 6;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string text = 7;

    pub fn text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string recipient = 12;

    pub fn recipient(&self) -> &str {
        match self.recipient.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_recipient(&mut self) {
        self.recipient = ::std::option::Option::None;
    }

    pub fn has_recipient(&self) -> bool {
        self.recipient.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recipient(&mut self, v: ::std::string::String) {
        self.recipient = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipient(&mut self) -> &mut ::std::string::String {
        if self.recipient.is_none() {
            self.recipient = ::std::option::Option::Some(::std::string::String::new());
        }
        self.recipient.as_mut().unwrap()
    }

    // Take field
    pub fn take_recipient(&mut self) -> ::std::string::String {
        self.recipient.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source",
            |m: &CMsgNotifyWatchdog| { &m.source },
            |m: &mut CMsgNotifyWatchdog| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "alert_type",
            |m: &CMsgNotifyWatchdog| { &m.alert_type },
            |m: &mut CMsgNotifyWatchdog| { &mut m.alert_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "critical",
            |m: &CMsgNotifyWatchdog| { &m.critical },
            |m: &mut CMsgNotifyWatchdog| { &mut m.critical },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time",
            |m: &CMsgNotifyWatchdog| { &m.time },
            |m: &mut CMsgNotifyWatchdog| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgNotifyWatchdog| { &m.appid },
            |m: &mut CMsgNotifyWatchdog| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "text",
            |m: &CMsgNotifyWatchdog| { &m.text },
            |m: &mut CMsgNotifyWatchdog| { &mut m.text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "recipient",
            |m: &CMsgNotifyWatchdog| { &m.recipient },
            |m: &mut CMsgNotifyWatchdog| { &mut m.recipient },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgNotifyWatchdog>(
            "CMsgNotifyWatchdog",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgNotifyWatchdog {
    const NAME: &'static str = "CMsgNotifyWatchdog";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.source = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.alert_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.critical = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.time = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.text = ::std::option::Option::Some(is.read_string()?);
                },
                98 => {
                    self.recipient = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.alert_type {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.critical {
            my_size += 1 + 1;
        }
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.recipient.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.alert_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.critical {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.time {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.text.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.recipient.as_ref() {
            os.write_string(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgNotifyWatchdog {
        CMsgNotifyWatchdog::new()
    }

    fn clear(&mut self) {
        self.source = ::std::option::Option::None;
        self.alert_type = ::std::option::Option::None;
        self.critical = ::std::option::Option::None;
        self.time = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.text = ::std::option::Option::None;
        self.recipient = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgNotifyWatchdog {
        static instance: CMsgNotifyWatchdog = CMsgNotifyWatchdog {
            source: ::std::option::Option::None,
            alert_type: ::std::option::Option::None,
            critical: ::std::option::Option::None,
            time: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            text: ::std::option::Option::None,
            recipient: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgNotifyWatchdog {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgNotifyWatchdog").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgNotifyWatchdog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgNotifyWatchdog {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgAMGetLicenses)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGetLicenses {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMGetLicenses.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMGetLicenses.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGetLicenses {
    fn default() -> &'a CMsgAMGetLicenses {
        <CMsgAMGetLicenses as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGetLicenses {
    pub fn new() -> CMsgAMGetLicenses {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgAMGetLicenses| { &m.steamid },
            |m: &mut CMsgAMGetLicenses| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMGetLicenses>(
            "CMsgAMGetLicenses",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMGetLicenses {
    const NAME: &'static str = "CMsgAMGetLicenses";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGetLicenses {
        CMsgAMGetLicenses::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGetLicenses {
        static instance: CMsgAMGetLicenses = CMsgAMGetLicenses {
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMGetLicenses {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMGetLicenses").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMGetLicenses {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMGetLicenses {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgPackageLicense)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPackageLicense {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgPackageLicense.package_id)
    pub package_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgPackageLicense.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgPackageLicense.owner_id)
    pub owner_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgPackageLicense.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPackageLicense {
    fn default() -> &'a CMsgPackageLicense {
        <CMsgPackageLicense as ::protobuf::Message>::default_instance()
    }
}

impl CMsgPackageLicense {
    pub fn new() -> CMsgPackageLicense {
        ::std::default::Default::default()
    }

    // optional uint32 package_id = 1;

    pub fn package_id(&self) -> u32 {
        self.package_id.unwrap_or(0)
    }

    pub fn clear_package_id(&mut self) {
        self.package_id = ::std::option::Option::None;
    }

    pub fn has_package_id(&self) -> bool {
        self.package_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_package_id(&mut self, v: u32) {
        self.package_id = ::std::option::Option::Some(v);
    }

    // optional uint32 time_created = 2;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional uint32 owner_id = 3;

    pub fn owner_id(&self) -> u32 {
        self.owner_id.unwrap_or(0)
    }

    pub fn clear_owner_id(&mut self) {
        self.owner_id = ::std::option::Option::None;
    }

    pub fn has_owner_id(&self) -> bool {
        self.owner_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner_id(&mut self, v: u32) {
        self.owner_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "package_id",
            |m: &CMsgPackageLicense| { &m.package_id },
            |m: &mut CMsgPackageLicense| { &mut m.package_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_created",
            |m: &CMsgPackageLicense| { &m.time_created },
            |m: &mut CMsgPackageLicense| { &mut m.time_created },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "owner_id",
            |m: &CMsgPackageLicense| { &m.owner_id },
            |m: &mut CMsgPackageLicense| { &mut m.owner_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgPackageLicense>(
            "CMsgPackageLicense",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgPackageLicense {
    const NAME: &'static str = "CMsgPackageLicense";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.package_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.owner_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.package_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.time_created {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.owner_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.package_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.owner_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPackageLicense {
        CMsgPackageLicense::new()
    }

    fn clear(&mut self) {
        self.package_id = ::std::option::Option::None;
        self.time_created = ::std::option::Option::None;
        self.owner_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPackageLicense {
        static instance: CMsgPackageLicense = CMsgPackageLicense {
            package_id: ::std::option::Option::None,
            time_created: ::std::option::Option::None,
            owner_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgPackageLicense {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgPackageLicense").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgPackageLicense {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgPackageLicense {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgAMGetLicensesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGetLicensesResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMGetLicensesResponse.license)
    pub license: ::std::vec::Vec<CMsgPackageLicense>,
    // @@protoc_insertion_point(field:dota.CMsgAMGetLicensesResponse.result)
    pub result: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMGetLicensesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGetLicensesResponse {
    fn default() -> &'a CMsgAMGetLicensesResponse {
        <CMsgAMGetLicensesResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGetLicensesResponse {
    pub fn new() -> CMsgAMGetLicensesResponse {
        ::std::default::Default::default()
    }

    // optional uint32 result = 2;

    pub fn result(&self) -> u32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "license",
            |m: &CMsgAMGetLicensesResponse| { &m.license },
            |m: &mut CMsgAMGetLicensesResponse| { &mut m.license },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgAMGetLicensesResponse| { &m.result },
            |m: &mut CMsgAMGetLicensesResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMGetLicensesResponse>(
            "CMsgAMGetLicensesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMGetLicensesResponse {
    const NAME: &'static str = "CMsgAMGetLicensesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.license.push(is.read_message()?);
                },
                16 => {
                    self.result = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.license {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.license {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.result {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGetLicensesResponse {
        CMsgAMGetLicensesResponse::new()
    }

    fn clear(&mut self) {
        self.license.clear();
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGetLicensesResponse {
        static instance: CMsgAMGetLicensesResponse = CMsgAMGetLicensesResponse {
            license: ::std::vec::Vec::new(),
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMGetLicensesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMGetLicensesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMGetLicensesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMGetLicensesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgAMGetUserGameStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGetUserGameStats {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStats.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStats.game_id)
    pub game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStats.stats)
    pub stats: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMGetUserGameStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGetUserGameStats {
    fn default() -> &'a CMsgAMGetUserGameStats {
        <CMsgAMGetUserGameStats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGetUserGameStats {
    pub fn new() -> CMsgAMGetUserGameStats {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 game_id = 2;

    pub fn game_id(&self) -> u64 {
        self.game_id.unwrap_or(0)
    }

    pub fn clear_game_id(&mut self) {
        self.game_id = ::std::option::Option::None;
    }

    pub fn has_game_id(&self) -> bool {
        self.game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_id(&mut self, v: u64) {
        self.game_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgAMGetUserGameStats| { &m.steam_id },
            |m: &mut CMsgAMGetUserGameStats| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_id",
            |m: &CMsgAMGetUserGameStats| { &m.game_id },
            |m: &mut CMsgAMGetUserGameStats| { &mut m.game_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stats",
            |m: &CMsgAMGetUserGameStats| { &m.stats },
            |m: &mut CMsgAMGetUserGameStats| { &mut m.stats },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMGetUserGameStats>(
            "CMsgAMGetUserGameStats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMGetUserGameStats {
    const NAME: &'static str = "CMsgAMGetUserGameStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.stats)?;
                },
                24 => {
                    self.stats.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.game_id {
            my_size += 1 + 8;
        }
        for value in &self.stats {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.game_id {
            os.write_fixed64(2, v)?;
        }
        for v in &self.stats {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGetUserGameStats {
        CMsgAMGetUserGameStats::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.game_id = ::std::option::Option::None;
        self.stats.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGetUserGameStats {
        static instance: CMsgAMGetUserGameStats = CMsgAMGetUserGameStats {
            steam_id: ::std::option::Option::None,
            game_id: ::std::option::Option::None,
            stats: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMGetUserGameStats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMGetUserGameStats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMGetUserGameStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMGetUserGameStats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgAMGetUserGameStatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGetUserGameStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStatsResponse.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStatsResponse.game_id)
    pub game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStatsResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStatsResponse.stats)
    pub stats: ::std::vec::Vec<cmsg_amget_user_game_stats_response::Stats>,
    // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStatsResponse.achievement_blocks)
    pub achievement_blocks: ::std::vec::Vec<cmsg_amget_user_game_stats_response::Achievement_Blocks>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMGetUserGameStatsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGetUserGameStatsResponse {
    fn default() -> &'a CMsgAMGetUserGameStatsResponse {
        <CMsgAMGetUserGameStatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGetUserGameStatsResponse {
    pub fn new() -> CMsgAMGetUserGameStatsResponse {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 game_id = 2;

    pub fn game_id(&self) -> u64 {
        self.game_id.unwrap_or(0)
    }

    pub fn clear_game_id(&mut self) {
        self.game_id = ::std::option::Option::None;
    }

    pub fn has_game_id(&self) -> bool {
        self.game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_id(&mut self, v: u64) {
        self.game_id = ::std::option::Option::Some(v);
    }

    // optional int32 eresult = 3;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgAMGetUserGameStatsResponse| { &m.steam_id },
            |m: &mut CMsgAMGetUserGameStatsResponse| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_id",
            |m: &CMsgAMGetUserGameStatsResponse| { &m.game_id },
            |m: &mut CMsgAMGetUserGameStatsResponse| { &mut m.game_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgAMGetUserGameStatsResponse| { &m.eresult },
            |m: &mut CMsgAMGetUserGameStatsResponse| { &mut m.eresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stats",
            |m: &CMsgAMGetUserGameStatsResponse| { &m.stats },
            |m: &mut CMsgAMGetUserGameStatsResponse| { &mut m.stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "achievement_blocks",
            |m: &CMsgAMGetUserGameStatsResponse| { &m.achievement_blocks },
            |m: &mut CMsgAMGetUserGameStatsResponse| { &mut m.achievement_blocks },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMGetUserGameStatsResponse>(
            "CMsgAMGetUserGameStatsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMGetUserGameStatsResponse {
    const NAME: &'static str = "CMsgAMGetUserGameStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                34 => {
                    self.stats.push(is.read_message()?);
                },
                42 => {
                    self.achievement_blocks.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.game_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        for value in &self.stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.achievement_blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.game_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.eresult {
            os.write_int32(3, v)?;
        }
        for v in &self.stats {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.achievement_blocks {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGetUserGameStatsResponse {
        CMsgAMGetUserGameStatsResponse::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.game_id = ::std::option::Option::None;
        self.eresult = ::std::option::Option::None;
        self.stats.clear();
        self.achievement_blocks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGetUserGameStatsResponse {
        static instance: CMsgAMGetUserGameStatsResponse = CMsgAMGetUserGameStatsResponse {
            steam_id: ::std::option::Option::None,
            game_id: ::std::option::Option::None,
            eresult: ::std::option::Option::None,
            stats: ::std::vec::Vec::new(),
            achievement_blocks: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMGetUserGameStatsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMGetUserGameStatsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMGetUserGameStatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMGetUserGameStatsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgAMGetUserGameStatsResponse`
pub mod cmsg_amget_user_game_stats_response {
    // @@protoc_insertion_point(message:dota.CMsgAMGetUserGameStatsResponse.Stats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Stats {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStatsResponse.Stats.stat_id)
        pub stat_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStatsResponse.Stats.stat_value)
        pub stat_value: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgAMGetUserGameStatsResponse.Stats.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Stats {
        fn default() -> &'a Stats {
            <Stats as ::protobuf::Message>::default_instance()
        }
    }

    impl Stats {
        pub fn new() -> Stats {
            ::std::default::Default::default()
        }

        // optional uint32 stat_id = 1;

        pub fn stat_id(&self) -> u32 {
            self.stat_id.unwrap_or(0)
        }

        pub fn clear_stat_id(&mut self) {
            self.stat_id = ::std::option::Option::None;
        }

        pub fn has_stat_id(&self) -> bool {
            self.stat_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_id(&mut self, v: u32) {
            self.stat_id = ::std::option::Option::Some(v);
        }

        // optional uint32 stat_value = 2;

        pub fn stat_value(&self) -> u32 {
            self.stat_value.unwrap_or(0)
        }

        pub fn clear_stat_value(&mut self) {
            self.stat_value = ::std::option::Option::None;
        }

        pub fn has_stat_value(&self) -> bool {
            self.stat_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_value(&mut self, v: u32) {
            self.stat_value = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "stat_id",
                |m: &Stats| { &m.stat_id },
                |m: &mut Stats| { &mut m.stat_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "stat_value",
                |m: &Stats| { &m.stat_value },
                |m: &mut Stats| { &mut m.stat_value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Stats>(
                "CMsgAMGetUserGameStatsResponse.Stats",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Stats {
        const NAME: &'static str = "Stats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.stat_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.stat_value = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.stat_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.stat_value {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.stat_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.stat_value {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Stats {
            Stats::new()
        }

        fn clear(&mut self) {
            self.stat_id = ::std::option::Option::None;
            self.stat_value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Stats {
            static instance: Stats = Stats {
                stat_id: ::std::option::Option::None,
                stat_value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Stats {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgAMGetUserGameStatsResponse.Stats").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Stats {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Stats {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Achievement_Blocks {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_id)
        pub achievement_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_bit_id)
        pub achievement_bit_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.unlock_time)
        pub unlock_time: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Achievement_Blocks {
        fn default() -> &'a Achievement_Blocks {
            <Achievement_Blocks as ::protobuf::Message>::default_instance()
        }
    }

    impl Achievement_Blocks {
        pub fn new() -> Achievement_Blocks {
            ::std::default::Default::default()
        }

        // optional uint32 achievement_id = 1;

        pub fn achievement_id(&self) -> u32 {
            self.achievement_id.unwrap_or(0)
        }

        pub fn clear_achievement_id(&mut self) {
            self.achievement_id = ::std::option::Option::None;
        }

        pub fn has_achievement_id(&self) -> bool {
            self.achievement_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_achievement_id(&mut self, v: u32) {
            self.achievement_id = ::std::option::Option::Some(v);
        }

        // optional uint32 achievement_bit_id = 2;

        pub fn achievement_bit_id(&self) -> u32 {
            self.achievement_bit_id.unwrap_or(0)
        }

        pub fn clear_achievement_bit_id(&mut self) {
            self.achievement_bit_id = ::std::option::Option::None;
        }

        pub fn has_achievement_bit_id(&self) -> bool {
            self.achievement_bit_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_achievement_bit_id(&mut self, v: u32) {
            self.achievement_bit_id = ::std::option::Option::Some(v);
        }

        // optional fixed32 unlock_time = 3;

        pub fn unlock_time(&self) -> u32 {
            self.unlock_time.unwrap_or(0)
        }

        pub fn clear_unlock_time(&mut self) {
            self.unlock_time = ::std::option::Option::None;
        }

        pub fn has_unlock_time(&self) -> bool {
            self.unlock_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_unlock_time(&mut self, v: u32) {
            self.unlock_time = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "achievement_id",
                |m: &Achievement_Blocks| { &m.achievement_id },
                |m: &mut Achievement_Blocks| { &mut m.achievement_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "achievement_bit_id",
                |m: &Achievement_Blocks| { &m.achievement_bit_id },
                |m: &mut Achievement_Blocks| { &mut m.achievement_bit_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "unlock_time",
                |m: &Achievement_Blocks| { &m.unlock_time },
                |m: &mut Achievement_Blocks| { &mut m.unlock_time },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Achievement_Blocks>(
                "CMsgAMGetUserGameStatsResponse.Achievement_Blocks",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Achievement_Blocks {
        const NAME: &'static str = "Achievement_Blocks";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.achievement_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.achievement_bit_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    29 => {
                        self.unlock_time = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.achievement_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.achievement_bit_id {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.unlock_time {
                my_size += 1 + 4;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.achievement_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.achievement_bit_id {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.unlock_time {
                os.write_fixed32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Achievement_Blocks {
            Achievement_Blocks::new()
        }

        fn clear(&mut self) {
            self.achievement_id = ::std::option::Option::None;
            self.achievement_bit_id = ::std::option::Option::None;
            self.unlock_time = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Achievement_Blocks {
            static instance: Achievement_Blocks = Achievement_Blocks {
                achievement_id: ::std::option::Option::None,
                achievement_bit_id: ::std::option::Option::None,
                unlock_time: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Achievement_Blocks {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgAMGetUserGameStatsResponse.Achievement_Blocks").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Achievement_Blocks {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Achievement_Blocks {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgGCGetCommandList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetCommandList {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCGetCommandList.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetCommandList.command_prefix)
    pub command_prefix: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCGetCommandList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetCommandList {
    fn default() -> &'a CMsgGCGetCommandList {
        <CMsgGCGetCommandList as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetCommandList {
    pub fn new() -> CMsgGCGetCommandList {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional string command_prefix = 2;

    pub fn command_prefix(&self) -> &str {
        match self.command_prefix.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_command_prefix(&mut self) {
        self.command_prefix = ::std::option::Option::None;
    }

    pub fn has_command_prefix(&self) -> bool {
        self.command_prefix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command_prefix(&mut self, v: ::std::string::String) {
        self.command_prefix = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_command_prefix(&mut self) -> &mut ::std::string::String {
        if self.command_prefix.is_none() {
            self.command_prefix = ::std::option::Option::Some(::std::string::String::new());
        }
        self.command_prefix.as_mut().unwrap()
    }

    // Take field
    pub fn take_command_prefix(&mut self) -> ::std::string::String {
        self.command_prefix.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgGCGetCommandList| { &m.app_id },
            |m: &mut CMsgGCGetCommandList| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "command_prefix",
            |m: &CMsgGCGetCommandList| { &m.command_prefix },
            |m: &mut CMsgGCGetCommandList| { &mut m.command_prefix },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGetCommandList>(
            "CMsgGCGetCommandList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGetCommandList {
    const NAME: &'static str = "CMsgGCGetCommandList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.command_prefix = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.command_prefix.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.command_prefix.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetCommandList {
        CMsgGCGetCommandList::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.command_prefix = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetCommandList {
        static instance: CMsgGCGetCommandList = CMsgGCGetCommandList {
            app_id: ::std::option::Option::None,
            command_prefix: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGetCommandList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGetCommandList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGetCommandList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGetCommandList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCGetCommandListResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetCommandListResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCGetCommandListResponse.command_name)
    pub command_name: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCGetCommandListResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetCommandListResponse {
    fn default() -> &'a CMsgGCGetCommandListResponse {
        <CMsgGCGetCommandListResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetCommandListResponse {
    pub fn new() -> CMsgGCGetCommandListResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "command_name",
            |m: &CMsgGCGetCommandListResponse| { &m.command_name },
            |m: &mut CMsgGCGetCommandListResponse| { &mut m.command_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGetCommandListResponse>(
            "CMsgGCGetCommandListResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGetCommandListResponse {
    const NAME: &'static str = "CMsgGCGetCommandListResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.command_name.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.command_name {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.command_name {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetCommandListResponse {
        CMsgGCGetCommandListResponse::new()
    }

    fn clear(&mut self) {
        self.command_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetCommandListResponse {
        static instance: CMsgGCGetCommandListResponse = CMsgGCGetCommandListResponse {
            command_name: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGetCommandListResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGetCommandListResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGetCommandListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGetCommandListResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgMemCachedGet)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedGet {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedGet.keys)
    pub keys: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgMemCachedGet.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedGet {
    fn default() -> &'a CGCMsgMemCachedGet {
        <CGCMsgMemCachedGet as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedGet {
    pub fn new() -> CGCMsgMemCachedGet {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "keys",
            |m: &CGCMsgMemCachedGet| { &m.keys },
            |m: &mut CGCMsgMemCachedGet| { &mut m.keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgMemCachedGet>(
            "CGCMsgMemCachedGet",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgMemCachedGet {
    const NAME: &'static str = "CGCMsgMemCachedGet";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.keys.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedGet {
        CGCMsgMemCachedGet::new()
    }

    fn clear(&mut self) {
        self.keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedGet {
        static instance: CGCMsgMemCachedGet = CGCMsgMemCachedGet {
            keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgMemCachedGet {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgMemCachedGet").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgMemCachedGet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgMemCachedGet {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgMemCachedGetResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedGetResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedGetResponse.values)
    pub values: ::std::vec::Vec<cgcmsg_mem_cached_get_response::ValueTag>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgMemCachedGetResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedGetResponse {
    fn default() -> &'a CGCMsgMemCachedGetResponse {
        <CGCMsgMemCachedGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedGetResponse {
    pub fn new() -> CGCMsgMemCachedGetResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &CGCMsgMemCachedGetResponse| { &m.values },
            |m: &mut CGCMsgMemCachedGetResponse| { &mut m.values },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgMemCachedGetResponse>(
            "CGCMsgMemCachedGetResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgMemCachedGetResponse {
    const NAME: &'static str = "CGCMsgMemCachedGetResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.values.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedGetResponse {
        CGCMsgMemCachedGetResponse::new()
    }

    fn clear(&mut self) {
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedGetResponse {
        static instance: CGCMsgMemCachedGetResponse = CGCMsgMemCachedGetResponse {
            values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgMemCachedGetResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgMemCachedGetResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgMemCachedGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgMemCachedGetResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CGCMsgMemCachedGetResponse`
pub mod cgcmsg_mem_cached_get_response {
    // @@protoc_insertion_point(message:dota.CGCMsgMemCachedGetResponse.ValueTag)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ValueTag {
        // message fields
        // @@protoc_insertion_point(field:dota.CGCMsgMemCachedGetResponse.ValueTag.found)
        pub found: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:dota.CGCMsgMemCachedGetResponse.ValueTag.value)
        pub value: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CGCMsgMemCachedGetResponse.ValueTag.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ValueTag {
        fn default() -> &'a ValueTag {
            <ValueTag as ::protobuf::Message>::default_instance()
        }
    }

    impl ValueTag {
        pub fn new() -> ValueTag {
            ::std::default::Default::default()
        }

        // optional bool found = 1;

        pub fn found(&self) -> bool {
            self.found.unwrap_or(false)
        }

        pub fn clear_found(&mut self) {
            self.found = ::std::option::Option::None;
        }

        pub fn has_found(&self) -> bool {
            self.found.is_some()
        }

        // Param is passed by value, moved
        pub fn set_found(&mut self, v: bool) {
            self.found = ::std::option::Option::Some(v);
        }

        // optional bytes value = 2;

        pub fn value(&self) -> &[u8] {
            match self.value.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
            self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "found",
                |m: &ValueTag| { &m.found },
                |m: &mut ValueTag| { &mut m.found },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &ValueTag| { &m.value },
                |m: &mut ValueTag| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValueTag>(
                "CGCMsgMemCachedGetResponse.ValueTag",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ValueTag {
        const NAME: &'static str = "ValueTag";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.found = ::std::option::Option::Some(is.read_bool()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.found {
                my_size += 1 + 1;
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.found {
                os.write_bool(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ValueTag {
            ValueTag::new()
        }

        fn clear(&mut self) {
            self.found = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ValueTag {
            static instance: ValueTag = ValueTag {
                found: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ValueTag {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CGCMsgMemCachedGetResponse.ValueTag").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ValueTag {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ValueTag {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CGCMsgMemCachedSet)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedSet {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedSet.keys)
    pub keys: ::std::vec::Vec<cgcmsg_mem_cached_set::KeyPair>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgMemCachedSet.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedSet {
    fn default() -> &'a CGCMsgMemCachedSet {
        <CGCMsgMemCachedSet as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedSet {
    pub fn new() -> CGCMsgMemCachedSet {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "keys",
            |m: &CGCMsgMemCachedSet| { &m.keys },
            |m: &mut CGCMsgMemCachedSet| { &mut m.keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgMemCachedSet>(
            "CGCMsgMemCachedSet",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgMemCachedSet {
    const NAME: &'static str = "CGCMsgMemCachedSet";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.keys.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.keys {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedSet {
        CGCMsgMemCachedSet::new()
    }

    fn clear(&mut self) {
        self.keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedSet {
        static instance: CGCMsgMemCachedSet = CGCMsgMemCachedSet {
            keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgMemCachedSet {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgMemCachedSet").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgMemCachedSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgMemCachedSet {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CGCMsgMemCachedSet`
pub mod cgcmsg_mem_cached_set {
    // @@protoc_insertion_point(message:dota.CGCMsgMemCachedSet.KeyPair)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct KeyPair {
        // message fields
        // @@protoc_insertion_point(field:dota.CGCMsgMemCachedSet.KeyPair.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CGCMsgMemCachedSet.KeyPair.value)
        pub value: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CGCMsgMemCachedSet.KeyPair.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a KeyPair {
        fn default() -> &'a KeyPair {
            <KeyPair as ::protobuf::Message>::default_instance()
        }
    }

    impl KeyPair {
        pub fn new() -> KeyPair {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bytes value = 2;

        pub fn value(&self) -> &[u8] {
            match self.value.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
            self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &KeyPair| { &m.name },
                |m: &mut KeyPair| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &KeyPair| { &m.value },
                |m: &mut KeyPair| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyPair>(
                "CGCMsgMemCachedSet.KeyPair",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for KeyPair {
        const NAME: &'static str = "KeyPair";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> KeyPair {
            KeyPair::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static KeyPair {
            static instance: KeyPair = KeyPair {
                name: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for KeyPair {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CGCMsgMemCachedSet.KeyPair").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for KeyPair {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for KeyPair {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CGCMsgMemCachedDelete)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedDelete {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedDelete.keys)
    pub keys: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgMemCachedDelete.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedDelete {
    fn default() -> &'a CGCMsgMemCachedDelete {
        <CGCMsgMemCachedDelete as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedDelete {
    pub fn new() -> CGCMsgMemCachedDelete {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "keys",
            |m: &CGCMsgMemCachedDelete| { &m.keys },
            |m: &mut CGCMsgMemCachedDelete| { &mut m.keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgMemCachedDelete>(
            "CGCMsgMemCachedDelete",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgMemCachedDelete {
    const NAME: &'static str = "CGCMsgMemCachedDelete";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.keys.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedDelete {
        CGCMsgMemCachedDelete::new()
    }

    fn clear(&mut self) {
        self.keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedDelete {
        static instance: CGCMsgMemCachedDelete = CGCMsgMemCachedDelete {
            keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgMemCachedDelete {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgMemCachedDelete").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgMemCachedDelete {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgMemCachedDelete {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgMemCachedStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedStats {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgMemCachedStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedStats {
    fn default() -> &'a CGCMsgMemCachedStats {
        <CGCMsgMemCachedStats as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedStats {
    pub fn new() -> CGCMsgMemCachedStats {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgMemCachedStats>(
            "CGCMsgMemCachedStats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgMemCachedStats {
    const NAME: &'static str = "CGCMsgMemCachedStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedStats {
        CGCMsgMemCachedStats::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedStats {
        static instance: CGCMsgMemCachedStats = CGCMsgMemCachedStats {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgMemCachedStats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgMemCachedStats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgMemCachedStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgMemCachedStats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgMemCachedStatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgMemCachedStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.curr_connections)
    pub curr_connections: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.cmd_get)
    pub cmd_get: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.cmd_set)
    pub cmd_set: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.cmd_flush)
    pub cmd_flush: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.get_hits)
    pub get_hits: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.get_misses)
    pub get_misses: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.delete_hits)
    pub delete_hits: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.delete_misses)
    pub delete_misses: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.bytes_read)
    pub bytes_read: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.bytes_written)
    pub bytes_written: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.limit_maxbytes)
    pub limit_maxbytes: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.curr_items)
    pub curr_items: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.evictions)
    pub evictions: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCMsgMemCachedStatsResponse.bytes)
    pub bytes: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgMemCachedStatsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgMemCachedStatsResponse {
    fn default() -> &'a CGCMsgMemCachedStatsResponse {
        <CGCMsgMemCachedStatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgMemCachedStatsResponse {
    pub fn new() -> CGCMsgMemCachedStatsResponse {
        ::std::default::Default::default()
    }

    // optional uint64 curr_connections = 1;

    pub fn curr_connections(&self) -> u64 {
        self.curr_connections.unwrap_or(0)
    }

    pub fn clear_curr_connections(&mut self) {
        self.curr_connections = ::std::option::Option::None;
    }

    pub fn has_curr_connections(&self) -> bool {
        self.curr_connections.is_some()
    }

    // Param is passed by value, moved
    pub fn set_curr_connections(&mut self, v: u64) {
        self.curr_connections = ::std::option::Option::Some(v);
    }

    // optional uint64 cmd_get = 2;

    pub fn cmd_get(&self) -> u64 {
        self.cmd_get.unwrap_or(0)
    }

    pub fn clear_cmd_get(&mut self) {
        self.cmd_get = ::std::option::Option::None;
    }

    pub fn has_cmd_get(&self) -> bool {
        self.cmd_get.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_get(&mut self, v: u64) {
        self.cmd_get = ::std::option::Option::Some(v);
    }

    // optional uint64 cmd_set = 3;

    pub fn cmd_set(&self) -> u64 {
        self.cmd_set.unwrap_or(0)
    }

    pub fn clear_cmd_set(&mut self) {
        self.cmd_set = ::std::option::Option::None;
    }

    pub fn has_cmd_set(&self) -> bool {
        self.cmd_set.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_set(&mut self, v: u64) {
        self.cmd_set = ::std::option::Option::Some(v);
    }

    // optional uint64 cmd_flush = 4;

    pub fn cmd_flush(&self) -> u64 {
        self.cmd_flush.unwrap_or(0)
    }

    pub fn clear_cmd_flush(&mut self) {
        self.cmd_flush = ::std::option::Option::None;
    }

    pub fn has_cmd_flush(&self) -> bool {
        self.cmd_flush.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_flush(&mut self, v: u64) {
        self.cmd_flush = ::std::option::Option::Some(v);
    }

    // optional uint64 get_hits = 5;

    pub fn get_hits(&self) -> u64 {
        self.get_hits.unwrap_or(0)
    }

    pub fn clear_get_hits(&mut self) {
        self.get_hits = ::std::option::Option::None;
    }

    pub fn has_get_hits(&self) -> bool {
        self.get_hits.is_some()
    }

    // Param is passed by value, moved
    pub fn set_get_hits(&mut self, v: u64) {
        self.get_hits = ::std::option::Option::Some(v);
    }

    // optional uint64 get_misses = 6;

    pub fn get_misses(&self) -> u64 {
        self.get_misses.unwrap_or(0)
    }

    pub fn clear_get_misses(&mut self) {
        self.get_misses = ::std::option::Option::None;
    }

    pub fn has_get_misses(&self) -> bool {
        self.get_misses.is_some()
    }

    // Param is passed by value, moved
    pub fn set_get_misses(&mut self, v: u64) {
        self.get_misses = ::std::option::Option::Some(v);
    }

    // optional uint64 delete_hits = 7;

    pub fn delete_hits(&self) -> u64 {
        self.delete_hits.unwrap_or(0)
    }

    pub fn clear_delete_hits(&mut self) {
        self.delete_hits = ::std::option::Option::None;
    }

    pub fn has_delete_hits(&self) -> bool {
        self.delete_hits.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delete_hits(&mut self, v: u64) {
        self.delete_hits = ::std::option::Option::Some(v);
    }

    // optional uint64 delete_misses = 8;

    pub fn delete_misses(&self) -> u64 {
        self.delete_misses.unwrap_or(0)
    }

    pub fn clear_delete_misses(&mut self) {
        self.delete_misses = ::std::option::Option::None;
    }

    pub fn has_delete_misses(&self) -> bool {
        self.delete_misses.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delete_misses(&mut self, v: u64) {
        self.delete_misses = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes_read = 9;

    pub fn bytes_read(&self) -> u64 {
        self.bytes_read.unwrap_or(0)
    }

    pub fn clear_bytes_read(&mut self) {
        self.bytes_read = ::std::option::Option::None;
    }

    pub fn has_bytes_read(&self) -> bool {
        self.bytes_read.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes_read(&mut self, v: u64) {
        self.bytes_read = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes_written = 10;

    pub fn bytes_written(&self) -> u64 {
        self.bytes_written.unwrap_or(0)
    }

    pub fn clear_bytes_written(&mut self) {
        self.bytes_written = ::std::option::Option::None;
    }

    pub fn has_bytes_written(&self) -> bool {
        self.bytes_written.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes_written(&mut self, v: u64) {
        self.bytes_written = ::std::option::Option::Some(v);
    }

    // optional uint64 limit_maxbytes = 11;

    pub fn limit_maxbytes(&self) -> u64 {
        self.limit_maxbytes.unwrap_or(0)
    }

    pub fn clear_limit_maxbytes(&mut self) {
        self.limit_maxbytes = ::std::option::Option::None;
    }

    pub fn has_limit_maxbytes(&self) -> bool {
        self.limit_maxbytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit_maxbytes(&mut self, v: u64) {
        self.limit_maxbytes = ::std::option::Option::Some(v);
    }

    // optional uint64 curr_items = 12;

    pub fn curr_items(&self) -> u64 {
        self.curr_items.unwrap_or(0)
    }

    pub fn clear_curr_items(&mut self) {
        self.curr_items = ::std::option::Option::None;
    }

    pub fn has_curr_items(&self) -> bool {
        self.curr_items.is_some()
    }

    // Param is passed by value, moved
    pub fn set_curr_items(&mut self, v: u64) {
        self.curr_items = ::std::option::Option::Some(v);
    }

    // optional uint64 evictions = 13;

    pub fn evictions(&self) -> u64 {
        self.evictions.unwrap_or(0)
    }

    pub fn clear_evictions(&mut self) {
        self.evictions = ::std::option::Option::None;
    }

    pub fn has_evictions(&self) -> bool {
        self.evictions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_evictions(&mut self, v: u64) {
        self.evictions = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes = 14;

    pub fn bytes(&self) -> u64 {
        self.bytes.unwrap_or(0)
    }

    pub fn clear_bytes(&mut self) {
        self.bytes = ::std::option::Option::None;
    }

    pub fn has_bytes(&self) -> bool {
        self.bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: u64) {
        self.bytes = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "curr_connections",
            |m: &CGCMsgMemCachedStatsResponse| { &m.curr_connections },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.curr_connections },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cmd_get",
            |m: &CGCMsgMemCachedStatsResponse| { &m.cmd_get },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.cmd_get },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cmd_set",
            |m: &CGCMsgMemCachedStatsResponse| { &m.cmd_set },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.cmd_set },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cmd_flush",
            |m: &CGCMsgMemCachedStatsResponse| { &m.cmd_flush },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.cmd_flush },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "get_hits",
            |m: &CGCMsgMemCachedStatsResponse| { &m.get_hits },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.get_hits },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "get_misses",
            |m: &CGCMsgMemCachedStatsResponse| { &m.get_misses },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.get_misses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "delete_hits",
            |m: &CGCMsgMemCachedStatsResponse| { &m.delete_hits },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.delete_hits },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "delete_misses",
            |m: &CGCMsgMemCachedStatsResponse| { &m.delete_misses },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.delete_misses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bytes_read",
            |m: &CGCMsgMemCachedStatsResponse| { &m.bytes_read },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.bytes_read },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bytes_written",
            |m: &CGCMsgMemCachedStatsResponse| { &m.bytes_written },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.bytes_written },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "limit_maxbytes",
            |m: &CGCMsgMemCachedStatsResponse| { &m.limit_maxbytes },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.limit_maxbytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "curr_items",
            |m: &CGCMsgMemCachedStatsResponse| { &m.curr_items },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.curr_items },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "evictions",
            |m: &CGCMsgMemCachedStatsResponse| { &m.evictions },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.evictions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bytes",
            |m: &CGCMsgMemCachedStatsResponse| { &m.bytes },
            |m: &mut CGCMsgMemCachedStatsResponse| { &mut m.bytes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgMemCachedStatsResponse>(
            "CGCMsgMemCachedStatsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgMemCachedStatsResponse {
    const NAME: &'static str = "CGCMsgMemCachedStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.curr_connections = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.cmd_get = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.cmd_set = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.cmd_flush = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.get_hits = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.get_misses = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.delete_hits = ::std::option::Option::Some(is.read_uint64()?);
                },
                64 => {
                    self.delete_misses = ::std::option::Option::Some(is.read_uint64()?);
                },
                72 => {
                    self.bytes_read = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.bytes_written = ::std::option::Option::Some(is.read_uint64()?);
                },
                88 => {
                    self.limit_maxbytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                96 => {
                    self.curr_items = ::std::option::Option::Some(is.read_uint64()?);
                },
                104 => {
                    self.evictions = ::std::option::Option::Some(is.read_uint64()?);
                },
                112 => {
                    self.bytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.curr_connections {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.cmd_get {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.cmd_set {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.cmd_flush {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.get_hits {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.get_misses {
            my_size += ::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.delete_hits {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        if let Some(v) = self.delete_misses {
            my_size += ::protobuf::rt::uint64_size(8, v);
        }
        if let Some(v) = self.bytes_read {
            my_size += ::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.bytes_written {
            my_size += ::protobuf::rt::uint64_size(10, v);
        }
        if let Some(v) = self.limit_maxbytes {
            my_size += ::protobuf::rt::uint64_size(11, v);
        }
        if let Some(v) = self.curr_items {
            my_size += ::protobuf::rt::uint64_size(12, v);
        }
        if let Some(v) = self.evictions {
            my_size += ::protobuf::rt::uint64_size(13, v);
        }
        if let Some(v) = self.bytes {
            my_size += ::protobuf::rt::uint64_size(14, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.curr_connections {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.cmd_get {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.cmd_set {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.cmd_flush {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.get_hits {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.get_misses {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.delete_hits {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.delete_misses {
            os.write_uint64(8, v)?;
        }
        if let Some(v) = self.bytes_read {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.bytes_written {
            os.write_uint64(10, v)?;
        }
        if let Some(v) = self.limit_maxbytes {
            os.write_uint64(11, v)?;
        }
        if let Some(v) = self.curr_items {
            os.write_uint64(12, v)?;
        }
        if let Some(v) = self.evictions {
            os.write_uint64(13, v)?;
        }
        if let Some(v) = self.bytes {
            os.write_uint64(14, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgMemCachedStatsResponse {
        CGCMsgMemCachedStatsResponse::new()
    }

    fn clear(&mut self) {
        self.curr_connections = ::std::option::Option::None;
        self.cmd_get = ::std::option::Option::None;
        self.cmd_set = ::std::option::Option::None;
        self.cmd_flush = ::std::option::Option::None;
        self.get_hits = ::std::option::Option::None;
        self.get_misses = ::std::option::Option::None;
        self.delete_hits = ::std::option::Option::None;
        self.delete_misses = ::std::option::Option::None;
        self.bytes_read = ::std::option::Option::None;
        self.bytes_written = ::std::option::Option::None;
        self.limit_maxbytes = ::std::option::Option::None;
        self.curr_items = ::std::option::Option::None;
        self.evictions = ::std::option::Option::None;
        self.bytes = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgMemCachedStatsResponse {
        static instance: CGCMsgMemCachedStatsResponse = CGCMsgMemCachedStatsResponse {
            curr_connections: ::std::option::Option::None,
            cmd_get: ::std::option::Option::None,
            cmd_set: ::std::option::Option::None,
            cmd_flush: ::std::option::Option::None,
            get_hits: ::std::option::Option::None,
            get_misses: ::std::option::Option::None,
            delete_hits: ::std::option::Option::None,
            delete_misses: ::std::option::Option::None,
            bytes_read: ::std::option::Option::None,
            bytes_written: ::std::option::Option::None,
            limit_maxbytes: ::std::option::Option::None,
            curr_items: ::std::option::Option::None,
            evictions: ::std::option::Option::None,
            bytes: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgMemCachedStatsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgMemCachedStatsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgMemCachedStatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgMemCachedStatsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgSQLStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgSQLStats {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgSQLStats.schema_catalog)
    pub schema_catalog: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgSQLStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgSQLStats {
    fn default() -> &'a CGCMsgSQLStats {
        <CGCMsgSQLStats as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgSQLStats {
    pub fn new() -> CGCMsgSQLStats {
        ::std::default::Default::default()
    }

    // optional uint32 schema_catalog = 1;

    pub fn schema_catalog(&self) -> u32 {
        self.schema_catalog.unwrap_or(0)
    }

    pub fn clear_schema_catalog(&mut self) {
        self.schema_catalog = ::std::option::Option::None;
    }

    pub fn has_schema_catalog(&self) -> bool {
        self.schema_catalog.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema_catalog(&mut self, v: u32) {
        self.schema_catalog = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "schema_catalog",
            |m: &CGCMsgSQLStats| { &m.schema_catalog },
            |m: &mut CGCMsgSQLStats| { &mut m.schema_catalog },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgSQLStats>(
            "CGCMsgSQLStats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgSQLStats {
    const NAME: &'static str = "CGCMsgSQLStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.schema_catalog = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema_catalog {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schema_catalog {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgSQLStats {
        CGCMsgSQLStats::new()
    }

    fn clear(&mut self) {
        self.schema_catalog = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgSQLStats {
        static instance: CGCMsgSQLStats = CGCMsgSQLStats {
            schema_catalog: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgSQLStats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgSQLStats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgSQLStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgSQLStats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgSQLStatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgSQLStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgSQLStatsResponse.threads)
    pub threads: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgSQLStatsResponse.threads_connected)
    pub threads_connected: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgSQLStatsResponse.threads_active)
    pub threads_active: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgSQLStatsResponse.operations_submitted)
    pub operations_submitted: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgSQLStatsResponse.prepared_statements_executed)
    pub prepared_statements_executed: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgSQLStatsResponse.non_prepared_statements_executed)
    pub non_prepared_statements_executed: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgSQLStatsResponse.deadlock_retries)
    pub deadlock_retries: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgSQLStatsResponse.operations_timed_out_in_queue)
    pub operations_timed_out_in_queue: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgSQLStatsResponse.errors)
    pub errors: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgSQLStatsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgSQLStatsResponse {
    fn default() -> &'a CGCMsgSQLStatsResponse {
        <CGCMsgSQLStatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgSQLStatsResponse {
    pub fn new() -> CGCMsgSQLStatsResponse {
        ::std::default::Default::default()
    }

    // optional uint32 threads = 1;

    pub fn threads(&self) -> u32 {
        self.threads.unwrap_or(0)
    }

    pub fn clear_threads(&mut self) {
        self.threads = ::std::option::Option::None;
    }

    pub fn has_threads(&self) -> bool {
        self.threads.is_some()
    }

    // Param is passed by value, moved
    pub fn set_threads(&mut self, v: u32) {
        self.threads = ::std::option::Option::Some(v);
    }

    // optional uint32 threads_connected = 2;

    pub fn threads_connected(&self) -> u32 {
        self.threads_connected.unwrap_or(0)
    }

    pub fn clear_threads_connected(&mut self) {
        self.threads_connected = ::std::option::Option::None;
    }

    pub fn has_threads_connected(&self) -> bool {
        self.threads_connected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_threads_connected(&mut self, v: u32) {
        self.threads_connected = ::std::option::Option::Some(v);
    }

    // optional uint32 threads_active = 3;

    pub fn threads_active(&self) -> u32 {
        self.threads_active.unwrap_or(0)
    }

    pub fn clear_threads_active(&mut self) {
        self.threads_active = ::std::option::Option::None;
    }

    pub fn has_threads_active(&self) -> bool {
        self.threads_active.is_some()
    }

    // Param is passed by value, moved
    pub fn set_threads_active(&mut self, v: u32) {
        self.threads_active = ::std::option::Option::Some(v);
    }

    // optional uint32 operations_submitted = 4;

    pub fn operations_submitted(&self) -> u32 {
        self.operations_submitted.unwrap_or(0)
    }

    pub fn clear_operations_submitted(&mut self) {
        self.operations_submitted = ::std::option::Option::None;
    }

    pub fn has_operations_submitted(&self) -> bool {
        self.operations_submitted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operations_submitted(&mut self, v: u32) {
        self.operations_submitted = ::std::option::Option::Some(v);
    }

    // optional uint32 prepared_statements_executed = 5;

    pub fn prepared_statements_executed(&self) -> u32 {
        self.prepared_statements_executed.unwrap_or(0)
    }

    pub fn clear_prepared_statements_executed(&mut self) {
        self.prepared_statements_executed = ::std::option::Option::None;
    }

    pub fn has_prepared_statements_executed(&self) -> bool {
        self.prepared_statements_executed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prepared_statements_executed(&mut self, v: u32) {
        self.prepared_statements_executed = ::std::option::Option::Some(v);
    }

    // optional uint32 non_prepared_statements_executed = 6;

    pub fn non_prepared_statements_executed(&self) -> u32 {
        self.non_prepared_statements_executed.unwrap_or(0)
    }

    pub fn clear_non_prepared_statements_executed(&mut self) {
        self.non_prepared_statements_executed = ::std::option::Option::None;
    }

    pub fn has_non_prepared_statements_executed(&self) -> bool {
        self.non_prepared_statements_executed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_non_prepared_statements_executed(&mut self, v: u32) {
        self.non_prepared_statements_executed = ::std::option::Option::Some(v);
    }

    // optional uint32 deadlock_retries = 7;

    pub fn deadlock_retries(&self) -> u32 {
        self.deadlock_retries.unwrap_or(0)
    }

    pub fn clear_deadlock_retries(&mut self) {
        self.deadlock_retries = ::std::option::Option::None;
    }

    pub fn has_deadlock_retries(&self) -> bool {
        self.deadlock_retries.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deadlock_retries(&mut self, v: u32) {
        self.deadlock_retries = ::std::option::Option::Some(v);
    }

    // optional uint32 operations_timed_out_in_queue = 8;

    pub fn operations_timed_out_in_queue(&self) -> u32 {
        self.operations_timed_out_in_queue.unwrap_or(0)
    }

    pub fn clear_operations_timed_out_in_queue(&mut self) {
        self.operations_timed_out_in_queue = ::std::option::Option::None;
    }

    pub fn has_operations_timed_out_in_queue(&self) -> bool {
        self.operations_timed_out_in_queue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operations_timed_out_in_queue(&mut self, v: u32) {
        self.operations_timed_out_in_queue = ::std::option::Option::Some(v);
    }

    // optional uint32 errors = 9;

    pub fn errors(&self) -> u32 {
        self.errors.unwrap_or(0)
    }

    pub fn clear_errors(&mut self) {
        self.errors = ::std::option::Option::None;
    }

    pub fn has_errors(&self) -> bool {
        self.errors.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errors(&mut self, v: u32) {
        self.errors = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "threads",
            |m: &CGCMsgSQLStatsResponse| { &m.threads },
            |m: &mut CGCMsgSQLStatsResponse| { &mut m.threads },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "threads_connected",
            |m: &CGCMsgSQLStatsResponse| { &m.threads_connected },
            |m: &mut CGCMsgSQLStatsResponse| { &mut m.threads_connected },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "threads_active",
            |m: &CGCMsgSQLStatsResponse| { &m.threads_active },
            |m: &mut CGCMsgSQLStatsResponse| { &mut m.threads_active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "operations_submitted",
            |m: &CGCMsgSQLStatsResponse| { &m.operations_submitted },
            |m: &mut CGCMsgSQLStatsResponse| { &mut m.operations_submitted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "prepared_statements_executed",
            |m: &CGCMsgSQLStatsResponse| { &m.prepared_statements_executed },
            |m: &mut CGCMsgSQLStatsResponse| { &mut m.prepared_statements_executed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "non_prepared_statements_executed",
            |m: &CGCMsgSQLStatsResponse| { &m.non_prepared_statements_executed },
            |m: &mut CGCMsgSQLStatsResponse| { &mut m.non_prepared_statements_executed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "deadlock_retries",
            |m: &CGCMsgSQLStatsResponse| { &m.deadlock_retries },
            |m: &mut CGCMsgSQLStatsResponse| { &mut m.deadlock_retries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "operations_timed_out_in_queue",
            |m: &CGCMsgSQLStatsResponse| { &m.operations_timed_out_in_queue },
            |m: &mut CGCMsgSQLStatsResponse| { &mut m.operations_timed_out_in_queue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "errors",
            |m: &CGCMsgSQLStatsResponse| { &m.errors },
            |m: &mut CGCMsgSQLStatsResponse| { &mut m.errors },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgSQLStatsResponse>(
            "CGCMsgSQLStatsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgSQLStatsResponse {
    const NAME: &'static str = "CGCMsgSQLStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.threads = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.threads_connected = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.threads_active = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.operations_submitted = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.prepared_statements_executed = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.non_prepared_statements_executed = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.deadlock_retries = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.operations_timed_out_in_queue = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.errors = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.threads {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.threads_connected {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.threads_active {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.operations_submitted {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.prepared_statements_executed {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.non_prepared_statements_executed {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.deadlock_retries {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.operations_timed_out_in_queue {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.errors {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.threads {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.threads_connected {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.threads_active {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.operations_submitted {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.prepared_statements_executed {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.non_prepared_statements_executed {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.deadlock_retries {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.operations_timed_out_in_queue {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.errors {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgSQLStatsResponse {
        CGCMsgSQLStatsResponse::new()
    }

    fn clear(&mut self) {
        self.threads = ::std::option::Option::None;
        self.threads_connected = ::std::option::Option::None;
        self.threads_active = ::std::option::Option::None;
        self.operations_submitted = ::std::option::Option::None;
        self.prepared_statements_executed = ::std::option::Option::None;
        self.non_prepared_statements_executed = ::std::option::Option::None;
        self.deadlock_retries = ::std::option::Option::None;
        self.operations_timed_out_in_queue = ::std::option::Option::None;
        self.errors = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgSQLStatsResponse {
        static instance: CGCMsgSQLStatsResponse = CGCMsgSQLStatsResponse {
            threads: ::std::option::Option::None,
            threads_connected: ::std::option::Option::None,
            threads_active: ::std::option::Option::None,
            operations_submitted: ::std::option::Option::None,
            prepared_statements_executed: ::std::option::Option::None,
            non_prepared_statements_executed: ::std::option::Option::None,
            deadlock_retries: ::std::option::Option::None,
            operations_timed_out_in_queue: ::std::option::Option::None,
            errors: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgSQLStatsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgSQLStatsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgSQLStatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgSQLStatsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgAMAddFreeLicense)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMAddFreeLicense {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMAddFreeLicense.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgAMAddFreeLicense.ip_public)
    pub ip_public: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgAMAddFreeLicense.packageid)
    pub packageid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgAMAddFreeLicense.store_country_code)
    pub store_country_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMAddFreeLicense.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMAddFreeLicense {
    fn default() -> &'a CMsgAMAddFreeLicense {
        <CMsgAMAddFreeLicense as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMAddFreeLicense {
    pub fn new() -> CMsgAMAddFreeLicense {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 ip_public = 2;

    pub fn ip_public(&self) -> u32 {
        self.ip_public.unwrap_or(0)
    }

    pub fn clear_ip_public(&mut self) {
        self.ip_public = ::std::option::Option::None;
    }

    pub fn has_ip_public(&self) -> bool {
        self.ip_public.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_public(&mut self, v: u32) {
        self.ip_public = ::std::option::Option::Some(v);
    }

    // optional uint32 packageid = 3;

    pub fn packageid(&self) -> u32 {
        self.packageid.unwrap_or(0)
    }

    pub fn clear_packageid(&mut self) {
        self.packageid = ::std::option::Option::None;
    }

    pub fn has_packageid(&self) -> bool {
        self.packageid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packageid(&mut self, v: u32) {
        self.packageid = ::std::option::Option::Some(v);
    }

    // optional string store_country_code = 4;

    pub fn store_country_code(&self) -> &str {
        match self.store_country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_store_country_code(&mut self) {
        self.store_country_code = ::std::option::Option::None;
    }

    pub fn has_store_country_code(&self) -> bool {
        self.store_country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_store_country_code(&mut self, v: ::std::string::String) {
        self.store_country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_store_country_code(&mut self) -> &mut ::std::string::String {
        if self.store_country_code.is_none() {
            self.store_country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.store_country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_store_country_code(&mut self) -> ::std::string::String {
        self.store_country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgAMAddFreeLicense| { &m.steamid },
            |m: &mut CMsgAMAddFreeLicense| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ip_public",
            |m: &CMsgAMAddFreeLicense| { &m.ip_public },
            |m: &mut CMsgAMAddFreeLicense| { &mut m.ip_public },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "packageid",
            |m: &CMsgAMAddFreeLicense| { &m.packageid },
            |m: &mut CMsgAMAddFreeLicense| { &mut m.packageid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "store_country_code",
            |m: &CMsgAMAddFreeLicense| { &m.store_country_code },
            |m: &mut CMsgAMAddFreeLicense| { &mut m.store_country_code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMAddFreeLicense>(
            "CMsgAMAddFreeLicense",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMAddFreeLicense {
    const NAME: &'static str = "CMsgAMAddFreeLicense";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.ip_public = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.packageid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.store_country_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.ip_public {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.packageid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.store_country_code.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.ip_public {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.packageid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.store_country_code.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMAddFreeLicense {
        CMsgAMAddFreeLicense::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.ip_public = ::std::option::Option::None;
        self.packageid = ::std::option::Option::None;
        self.store_country_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMAddFreeLicense {
        static instance: CMsgAMAddFreeLicense = CMsgAMAddFreeLicense {
            steamid: ::std::option::Option::None,
            ip_public: ::std::option::Option::None,
            packageid: ::std::option::Option::None,
            store_country_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMAddFreeLicense {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMAddFreeLicense").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMAddFreeLicense {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMAddFreeLicense {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgAMAddFreeLicenseResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMAddFreeLicenseResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMAddFreeLicenseResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgAMAddFreeLicenseResponse.purchase_result_detail)
    pub purchase_result_detail: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgAMAddFreeLicenseResponse.transid)
    pub transid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMAddFreeLicenseResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMAddFreeLicenseResponse {
    fn default() -> &'a CMsgAMAddFreeLicenseResponse {
        <CMsgAMAddFreeLicenseResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMAddFreeLicenseResponse {
    pub fn new() -> CMsgAMAddFreeLicenseResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional int32 purchase_result_detail = 2;

    pub fn purchase_result_detail(&self) -> i32 {
        self.purchase_result_detail.unwrap_or(0)
    }

    pub fn clear_purchase_result_detail(&mut self) {
        self.purchase_result_detail = ::std::option::Option::None;
    }

    pub fn has_purchase_result_detail(&self) -> bool {
        self.purchase_result_detail.is_some()
    }

    // Param is passed by value, moved
    pub fn set_purchase_result_detail(&mut self, v: i32) {
        self.purchase_result_detail = ::std::option::Option::Some(v);
    }

    // optional fixed64 transid = 3;

    pub fn transid(&self) -> u64 {
        self.transid.unwrap_or(0)
    }

    pub fn clear_transid(&mut self) {
        self.transid = ::std::option::Option::None;
    }

    pub fn has_transid(&self) -> bool {
        self.transid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transid(&mut self, v: u64) {
        self.transid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgAMAddFreeLicenseResponse| { &m.eresult },
            |m: &mut CMsgAMAddFreeLicenseResponse| { &mut m.eresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "purchase_result_detail",
            |m: &CMsgAMAddFreeLicenseResponse| { &m.purchase_result_detail },
            |m: &mut CMsgAMAddFreeLicenseResponse| { &mut m.purchase_result_detail },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "transid",
            |m: &CMsgAMAddFreeLicenseResponse| { &m.transid },
            |m: &mut CMsgAMAddFreeLicenseResponse| { &mut m.transid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMAddFreeLicenseResponse>(
            "CMsgAMAddFreeLicenseResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMAddFreeLicenseResponse {
    const NAME: &'static str = "CMsgAMAddFreeLicenseResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.purchase_result_detail = ::std::option::Option::Some(is.read_int32()?);
                },
                25 => {
                    self.transid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.purchase_result_detail {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.transid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.purchase_result_detail {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.transid {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMAddFreeLicenseResponse {
        CMsgAMAddFreeLicenseResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.purchase_result_detail = ::std::option::Option::None;
        self.transid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMAddFreeLicenseResponse {
        static instance: CMsgAMAddFreeLicenseResponse = CMsgAMAddFreeLicenseResponse {
            eresult: ::std::option::Option::None,
            purchase_result_detail: ::std::option::Option::None,
            transid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMAddFreeLicenseResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMAddFreeLicenseResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMAddFreeLicenseResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMAddFreeLicenseResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgGetIPLocation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetIPLocation {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgGetIPLocation.ips)
    pub ips: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgGetIPLocation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetIPLocation {
    fn default() -> &'a CGCMsgGetIPLocation {
        <CGCMsgGetIPLocation as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetIPLocation {
    pub fn new() -> CGCMsgGetIPLocation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ips",
            |m: &CGCMsgGetIPLocation| { &m.ips },
            |m: &mut CGCMsgGetIPLocation| { &mut m.ips },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgGetIPLocation>(
            "CGCMsgGetIPLocation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgGetIPLocation {
    const NAME: &'static str = "CGCMsgGetIPLocation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ips)?;
                },
                13 => {
                    self.ips.push(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 5 * self.ips.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.ips {
            os.write_fixed32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetIPLocation {
        CGCMsgGetIPLocation::new()
    }

    fn clear(&mut self) {
        self.ips.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetIPLocation {
        static instance: CGCMsgGetIPLocation = CGCMsgGetIPLocation {
            ips: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgGetIPLocation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgGetIPLocation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgGetIPLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgGetIPLocation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgGetIPASN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetIPASN {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgGetIPASN.ips)
    pub ips: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgGetIPASN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetIPASN {
    fn default() -> &'a CGCMsgGetIPASN {
        <CGCMsgGetIPASN as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetIPASN {
    pub fn new() -> CGCMsgGetIPASN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ips",
            |m: &CGCMsgGetIPASN| { &m.ips },
            |m: &mut CGCMsgGetIPASN| { &mut m.ips },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgGetIPASN>(
            "CGCMsgGetIPASN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgGetIPASN {
    const NAME: &'static str = "CGCMsgGetIPASN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ips)?;
                },
                13 => {
                    self.ips.push(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 5 * self.ips.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.ips {
            os.write_fixed32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetIPASN {
        CGCMsgGetIPASN::new()
    }

    fn clear(&mut self) {
        self.ips.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetIPASN {
        static instance: CGCMsgGetIPASN = CGCMsgGetIPASN {
            ips: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgGetIPASN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgGetIPASN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgGetIPASN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgGetIPASN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CIPASNInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CIPASNInfo {
    // message fields
    // @@protoc_insertion_point(field:dota.CIPASNInfo.ip)
    pub ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CIPASNInfo.asn)
    pub asn: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CIPASNInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CIPASNInfo {
    fn default() -> &'a CIPASNInfo {
        <CIPASNInfo as ::protobuf::Message>::default_instance()
    }
}

impl CIPASNInfo {
    pub fn new() -> CIPASNInfo {
        ::std::default::Default::default()
    }

    // optional fixed32 ip = 1;

    pub fn ip(&self) -> u32 {
        self.ip.unwrap_or(0)
    }

    pub fn clear_ip(&mut self) {
        self.ip = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: u32) {
        self.ip = ::std::option::Option::Some(v);
    }

    // optional uint32 asn = 2;

    pub fn asn(&self) -> u32 {
        self.asn.unwrap_or(0)
    }

    pub fn clear_asn(&mut self) {
        self.asn = ::std::option::Option::None;
    }

    pub fn has_asn(&self) -> bool {
        self.asn.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asn(&mut self, v: u32) {
        self.asn = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ip",
            |m: &CIPASNInfo| { &m.ip },
            |m: &mut CIPASNInfo| { &mut m.ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "asn",
            |m: &CIPASNInfo| { &m.asn },
            |m: &mut CIPASNInfo| { &mut m.asn },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CIPASNInfo>(
            "CIPASNInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CIPASNInfo {
    const NAME: &'static str = "CIPASNInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                16 => {
                    self.asn = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ip {
            my_size += 1 + 4;
        }
        if let Some(v) = self.asn {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ip {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.asn {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CIPASNInfo {
        CIPASNInfo::new()
    }

    fn clear(&mut self) {
        self.ip = ::std::option::Option::None;
        self.asn = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CIPASNInfo {
        static instance: CIPASNInfo = CIPASNInfo {
            ip: ::std::option::Option::None,
            asn: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CIPASNInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CIPASNInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CIPASNInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CIPASNInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgGetIPASNResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetIPASNResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgGetIPASNResponse.infos)
    pub infos: ::std::vec::Vec<CIPASNInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgGetIPASNResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetIPASNResponse {
    fn default() -> &'a CGCMsgGetIPASNResponse {
        <CGCMsgGetIPASNResponse as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetIPASNResponse {
    pub fn new() -> CGCMsgGetIPASNResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "infos",
            |m: &CGCMsgGetIPASNResponse| { &m.infos },
            |m: &mut CGCMsgGetIPASNResponse| { &mut m.infos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgGetIPASNResponse>(
            "CGCMsgGetIPASNResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgGetIPASNResponse {
    const NAME: &'static str = "CGCMsgGetIPASNResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.infos.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.infos {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetIPASNResponse {
        CGCMsgGetIPASNResponse::new()
    }

    fn clear(&mut self) {
        self.infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetIPASNResponse {
        static instance: CGCMsgGetIPASNResponse = CGCMsgGetIPASNResponse {
            infos: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgGetIPASNResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgGetIPASNResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgGetIPASNResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgGetIPASNResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgSystemStatsSchema)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgSystemStatsSchema {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgSystemStatsSchema.gc_app_id)
    pub gc_app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgSystemStatsSchema.schema_kv)
    pub schema_kv: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgSystemStatsSchema.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgSystemStatsSchema {
    fn default() -> &'a CGCMsgSystemStatsSchema {
        <CGCMsgSystemStatsSchema as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgSystemStatsSchema {
    pub fn new() -> CGCMsgSystemStatsSchema {
        ::std::default::Default::default()
    }

    // optional uint32 gc_app_id = 1;

    pub fn gc_app_id(&self) -> u32 {
        self.gc_app_id.unwrap_or(0)
    }

    pub fn clear_gc_app_id(&mut self) {
        self.gc_app_id = ::std::option::Option::None;
    }

    pub fn has_gc_app_id(&self) -> bool {
        self.gc_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_app_id(&mut self, v: u32) {
        self.gc_app_id = ::std::option::Option::Some(v);
    }

    // optional bytes schema_kv = 2;

    pub fn schema_kv(&self) -> &[u8] {
        match self.schema_kv.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_schema_kv(&mut self) {
        self.schema_kv = ::std::option::Option::None;
    }

    pub fn has_schema_kv(&self) -> bool {
        self.schema_kv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema_kv(&mut self, v: ::std::vec::Vec<u8>) {
        self.schema_kv = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema_kv(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.schema_kv.is_none() {
            self.schema_kv = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.schema_kv.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema_kv(&mut self) -> ::std::vec::Vec<u8> {
        self.schema_kv.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gc_app_id",
            |m: &CGCMsgSystemStatsSchema| { &m.gc_app_id },
            |m: &mut CGCMsgSystemStatsSchema| { &mut m.gc_app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "schema_kv",
            |m: &CGCMsgSystemStatsSchema| { &m.schema_kv },
            |m: &mut CGCMsgSystemStatsSchema| { &mut m.schema_kv },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgSystemStatsSchema>(
            "CGCMsgSystemStatsSchema",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgSystemStatsSchema {
    const NAME: &'static str = "CGCMsgSystemStatsSchema";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gc_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.schema_kv = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gc_app_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.schema_kv.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gc_app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.schema_kv.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgSystemStatsSchema {
        CGCMsgSystemStatsSchema::new()
    }

    fn clear(&mut self) {
        self.gc_app_id = ::std::option::Option::None;
        self.schema_kv = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgSystemStatsSchema {
        static instance: CGCMsgSystemStatsSchema = CGCMsgSystemStatsSchema {
            gc_app_id: ::std::option::Option::None,
            schema_kv: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgSystemStatsSchema {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgSystemStatsSchema").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgSystemStatsSchema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgSystemStatsSchema {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgGetSystemStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetSystemStats {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgGetSystemStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetSystemStats {
    fn default() -> &'a CGCMsgGetSystemStats {
        <CGCMsgGetSystemStats as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetSystemStats {
    pub fn new() -> CGCMsgGetSystemStats {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgGetSystemStats>(
            "CGCMsgGetSystemStats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgGetSystemStats {
    const NAME: &'static str = "CGCMsgGetSystemStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetSystemStats {
        CGCMsgGetSystemStats::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetSystemStats {
        static instance: CGCMsgGetSystemStats = CGCMsgGetSystemStats {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgGetSystemStats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgGetSystemStats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgGetSystemStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgGetSystemStats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCMsgGetSystemStatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCMsgGetSystemStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.gc_app_id)
    pub gc_app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.stats_kv)
    pub stats_kv: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.active_jobs)
    pub active_jobs: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.yielding_jobs)
    pub yielding_jobs: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.user_sessions)
    pub user_sessions: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.game_server_sessions)
    pub game_server_sessions: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.socaches)
    pub socaches: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.socaches_to_unload)
    pub socaches_to_unload: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.socaches_loading)
    pub socaches_loading: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.writeback_queue)
    pub writeback_queue: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.steamid_locks)
    pub steamid_locks: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.logon_queue)
    pub logon_queue: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCMsgGetSystemStatsResponse.logon_jobs)
    pub logon_jobs: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCMsgGetSystemStatsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCMsgGetSystemStatsResponse {
    fn default() -> &'a CGCMsgGetSystemStatsResponse {
        <CGCMsgGetSystemStatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CGCMsgGetSystemStatsResponse {
    pub fn new() -> CGCMsgGetSystemStatsResponse {
        ::std::default::Default::default()
    }

    // optional uint32 gc_app_id = 1;

    pub fn gc_app_id(&self) -> u32 {
        self.gc_app_id.unwrap_or(0)
    }

    pub fn clear_gc_app_id(&mut self) {
        self.gc_app_id = ::std::option::Option::None;
    }

    pub fn has_gc_app_id(&self) -> bool {
        self.gc_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_app_id(&mut self, v: u32) {
        self.gc_app_id = ::std::option::Option::Some(v);
    }

    // optional bytes stats_kv = 2;

    pub fn stats_kv(&self) -> &[u8] {
        match self.stats_kv.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_stats_kv(&mut self) {
        self.stats_kv = ::std::option::Option::None;
    }

    pub fn has_stats_kv(&self) -> bool {
        self.stats_kv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stats_kv(&mut self, v: ::std::vec::Vec<u8>) {
        self.stats_kv = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stats_kv(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.stats_kv.is_none() {
            self.stats_kv = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.stats_kv.as_mut().unwrap()
    }

    // Take field
    pub fn take_stats_kv(&mut self) -> ::std::vec::Vec<u8> {
        self.stats_kv.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 active_jobs = 3;

    pub fn active_jobs(&self) -> u32 {
        self.active_jobs.unwrap_or(0)
    }

    pub fn clear_active_jobs(&mut self) {
        self.active_jobs = ::std::option::Option::None;
    }

    pub fn has_active_jobs(&self) -> bool {
        self.active_jobs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active_jobs(&mut self, v: u32) {
        self.active_jobs = ::std::option::Option::Some(v);
    }

    // optional uint32 yielding_jobs = 4;

    pub fn yielding_jobs(&self) -> u32 {
        self.yielding_jobs.unwrap_or(0)
    }

    pub fn clear_yielding_jobs(&mut self) {
        self.yielding_jobs = ::std::option::Option::None;
    }

    pub fn has_yielding_jobs(&self) -> bool {
        self.yielding_jobs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yielding_jobs(&mut self, v: u32) {
        self.yielding_jobs = ::std::option::Option::Some(v);
    }

    // optional uint32 user_sessions = 5;

    pub fn user_sessions(&self) -> u32 {
        self.user_sessions.unwrap_or(0)
    }

    pub fn clear_user_sessions(&mut self) {
        self.user_sessions = ::std::option::Option::None;
    }

    pub fn has_user_sessions(&self) -> bool {
        self.user_sessions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_sessions(&mut self, v: u32) {
        self.user_sessions = ::std::option::Option::Some(v);
    }

    // optional uint32 game_server_sessions = 6;

    pub fn game_server_sessions(&self) -> u32 {
        self.game_server_sessions.unwrap_or(0)
    }

    pub fn clear_game_server_sessions(&mut self) {
        self.game_server_sessions = ::std::option::Option::None;
    }

    pub fn has_game_server_sessions(&self) -> bool {
        self.game_server_sessions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_server_sessions(&mut self, v: u32) {
        self.game_server_sessions = ::std::option::Option::Some(v);
    }

    // optional uint32 socaches = 7;

    pub fn socaches(&self) -> u32 {
        self.socaches.unwrap_or(0)
    }

    pub fn clear_socaches(&mut self) {
        self.socaches = ::std::option::Option::None;
    }

    pub fn has_socaches(&self) -> bool {
        self.socaches.is_some()
    }

    // Param is passed by value, moved
    pub fn set_socaches(&mut self, v: u32) {
        self.socaches = ::std::option::Option::Some(v);
    }

    // optional uint32 socaches_to_unload = 8;

    pub fn socaches_to_unload(&self) -> u32 {
        self.socaches_to_unload.unwrap_or(0)
    }

    pub fn clear_socaches_to_unload(&mut self) {
        self.socaches_to_unload = ::std::option::Option::None;
    }

    pub fn has_socaches_to_unload(&self) -> bool {
        self.socaches_to_unload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_socaches_to_unload(&mut self, v: u32) {
        self.socaches_to_unload = ::std::option::Option::Some(v);
    }

    // optional uint32 socaches_loading = 9;

    pub fn socaches_loading(&self) -> u32 {
        self.socaches_loading.unwrap_or(0)
    }

    pub fn clear_socaches_loading(&mut self) {
        self.socaches_loading = ::std::option::Option::None;
    }

    pub fn has_socaches_loading(&self) -> bool {
        self.socaches_loading.is_some()
    }

    // Param is passed by value, moved
    pub fn set_socaches_loading(&mut self, v: u32) {
        self.socaches_loading = ::std::option::Option::Some(v);
    }

    // optional uint32 writeback_queue = 10;

    pub fn writeback_queue(&self) -> u32 {
        self.writeback_queue.unwrap_or(0)
    }

    pub fn clear_writeback_queue(&mut self) {
        self.writeback_queue = ::std::option::Option::None;
    }

    pub fn has_writeback_queue(&self) -> bool {
        self.writeback_queue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_writeback_queue(&mut self, v: u32) {
        self.writeback_queue = ::std::option::Option::Some(v);
    }

    // optional uint32 steamid_locks = 11;

    pub fn steamid_locks(&self) -> u32 {
        self.steamid_locks.unwrap_or(0)
    }

    pub fn clear_steamid_locks(&mut self) {
        self.steamid_locks = ::std::option::Option::None;
    }

    pub fn has_steamid_locks(&self) -> bool {
        self.steamid_locks.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_locks(&mut self, v: u32) {
        self.steamid_locks = ::std::option::Option::Some(v);
    }

    // optional uint32 logon_queue = 12;

    pub fn logon_queue(&self) -> u32 {
        self.logon_queue.unwrap_or(0)
    }

    pub fn clear_logon_queue(&mut self) {
        self.logon_queue = ::std::option::Option::None;
    }

    pub fn has_logon_queue(&self) -> bool {
        self.logon_queue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logon_queue(&mut self, v: u32) {
        self.logon_queue = ::std::option::Option::Some(v);
    }

    // optional uint32 logon_jobs = 13;

    pub fn logon_jobs(&self) -> u32 {
        self.logon_jobs.unwrap_or(0)
    }

    pub fn clear_logon_jobs(&mut self) {
        self.logon_jobs = ::std::option::Option::None;
    }

    pub fn has_logon_jobs(&self) -> bool {
        self.logon_jobs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logon_jobs(&mut self, v: u32) {
        self.logon_jobs = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gc_app_id",
            |m: &CGCMsgGetSystemStatsResponse| { &m.gc_app_id },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.gc_app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "stats_kv",
            |m: &CGCMsgGetSystemStatsResponse| { &m.stats_kv },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.stats_kv },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "active_jobs",
            |m: &CGCMsgGetSystemStatsResponse| { &m.active_jobs },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.active_jobs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "yielding_jobs",
            |m: &CGCMsgGetSystemStatsResponse| { &m.yielding_jobs },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.yielding_jobs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "user_sessions",
            |m: &CGCMsgGetSystemStatsResponse| { &m.user_sessions },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.user_sessions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_server_sessions",
            |m: &CGCMsgGetSystemStatsResponse| { &m.game_server_sessions },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.game_server_sessions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "socaches",
            |m: &CGCMsgGetSystemStatsResponse| { &m.socaches },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.socaches },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "socaches_to_unload",
            |m: &CGCMsgGetSystemStatsResponse| { &m.socaches_to_unload },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.socaches_to_unload },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "socaches_loading",
            |m: &CGCMsgGetSystemStatsResponse| { &m.socaches_loading },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.socaches_loading },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "writeback_queue",
            |m: &CGCMsgGetSystemStatsResponse| { &m.writeback_queue },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.writeback_queue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_locks",
            |m: &CGCMsgGetSystemStatsResponse| { &m.steamid_locks },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.steamid_locks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "logon_queue",
            |m: &CGCMsgGetSystemStatsResponse| { &m.logon_queue },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.logon_queue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "logon_jobs",
            |m: &CGCMsgGetSystemStatsResponse| { &m.logon_jobs },
            |m: &mut CGCMsgGetSystemStatsResponse| { &mut m.logon_jobs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCMsgGetSystemStatsResponse>(
            "CGCMsgGetSystemStatsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCMsgGetSystemStatsResponse {
    const NAME: &'static str = "CGCMsgGetSystemStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gc_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.stats_kv = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.active_jobs = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.yielding_jobs = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.user_sessions = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.game_server_sessions = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.socaches = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.socaches_to_unload = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.socaches_loading = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.writeback_queue = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.steamid_locks = ::std::option::Option::Some(is.read_uint32()?);
                },
                96 => {
                    self.logon_queue = ::std::option::Option::Some(is.read_uint32()?);
                },
                104 => {
                    self.logon_jobs = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gc_app_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.stats_kv.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.active_jobs {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.yielding_jobs {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.user_sessions {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.game_server_sessions {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.socaches {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.socaches_to_unload {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.socaches_loading {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.writeback_queue {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.steamid_locks {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.logon_queue {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        if let Some(v) = self.logon_jobs {
            my_size += ::protobuf::rt::uint32_size(13, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gc_app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.stats_kv.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.active_jobs {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.yielding_jobs {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.user_sessions {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.game_server_sessions {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.socaches {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.socaches_to_unload {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.socaches_loading {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.writeback_queue {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.steamid_locks {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.logon_queue {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.logon_jobs {
            os.write_uint32(13, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCMsgGetSystemStatsResponse {
        CGCMsgGetSystemStatsResponse::new()
    }

    fn clear(&mut self) {
        self.gc_app_id = ::std::option::Option::None;
        self.stats_kv = ::std::option::Option::None;
        self.active_jobs = ::std::option::Option::None;
        self.yielding_jobs = ::std::option::Option::None;
        self.user_sessions = ::std::option::Option::None;
        self.game_server_sessions = ::std::option::Option::None;
        self.socaches = ::std::option::Option::None;
        self.socaches_to_unload = ::std::option::Option::None;
        self.socaches_loading = ::std::option::Option::None;
        self.writeback_queue = ::std::option::Option::None;
        self.steamid_locks = ::std::option::Option::None;
        self.logon_queue = ::std::option::Option::None;
        self.logon_jobs = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCMsgGetSystemStatsResponse {
        static instance: CGCMsgGetSystemStatsResponse = CGCMsgGetSystemStatsResponse {
            gc_app_id: ::std::option::Option::None,
            stats_kv: ::std::option::Option::None,
            active_jobs: ::std::option::Option::None,
            yielding_jobs: ::std::option::Option::None,
            user_sessions: ::std::option::Option::None,
            game_server_sessions: ::std::option::Option::None,
            socaches: ::std::option::Option::None,
            socaches_to_unload: ::std::option::Option::None,
            socaches_loading: ::std::option::Option::None,
            writeback_queue: ::std::option::Option::None,
            steamid_locks: ::std::option::Option::None,
            logon_queue: ::std::option::Option::None,
            logon_jobs: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCMsgGetSystemStatsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCMsgGetSystemStatsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCMsgGetSystemStatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCMsgGetSystemStatsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgAMSendEmail)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMSendEmail {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMSendEmail.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgAMSendEmail.email_msg_type)
    pub email_msg_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgAMSendEmail.email_format)
    pub email_format: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgAMSendEmail.persona_name_tokens)
    pub persona_name_tokens: ::std::vec::Vec<cmsg_amsend_email::PersonaNameReplacementToken>,
    // @@protoc_insertion_point(field:dota.CMsgAMSendEmail.source_gc)
    pub source_gc: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgAMSendEmail.tokens)
    pub tokens: ::std::vec::Vec<cmsg_amsend_email::ReplacementToken>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMSendEmail.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMSendEmail {
    fn default() -> &'a CMsgAMSendEmail {
        <CMsgAMSendEmail as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMSendEmail {
    pub fn new() -> CMsgAMSendEmail {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 email_msg_type = 2;

    pub fn email_msg_type(&self) -> u32 {
        self.email_msg_type.unwrap_or(0)
    }

    pub fn clear_email_msg_type(&mut self) {
        self.email_msg_type = ::std::option::Option::None;
    }

    pub fn has_email_msg_type(&self) -> bool {
        self.email_msg_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_msg_type(&mut self, v: u32) {
        self.email_msg_type = ::std::option::Option::Some(v);
    }

    // optional uint32 email_format = 3;

    pub fn email_format(&self) -> u32 {
        self.email_format.unwrap_or(0)
    }

    pub fn clear_email_format(&mut self) {
        self.email_format = ::std::option::Option::None;
    }

    pub fn has_email_format(&self) -> bool {
        self.email_format.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_format(&mut self, v: u32) {
        self.email_format = ::std::option::Option::Some(v);
    }

    // optional uint32 source_gc = 6;

    pub fn source_gc(&self) -> u32 {
        self.source_gc.unwrap_or(0)
    }

    pub fn clear_source_gc(&mut self) {
        self.source_gc = ::std::option::Option::None;
    }

    pub fn has_source_gc(&self) -> bool {
        self.source_gc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_gc(&mut self, v: u32) {
        self.source_gc = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgAMSendEmail| { &m.steamid },
            |m: &mut CMsgAMSendEmail| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "email_msg_type",
            |m: &CMsgAMSendEmail| { &m.email_msg_type },
            |m: &mut CMsgAMSendEmail| { &mut m.email_msg_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "email_format",
            |m: &CMsgAMSendEmail| { &m.email_format },
            |m: &mut CMsgAMSendEmail| { &mut m.email_format },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "persona_name_tokens",
            |m: &CMsgAMSendEmail| { &m.persona_name_tokens },
            |m: &mut CMsgAMSendEmail| { &mut m.persona_name_tokens },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_gc",
            |m: &CMsgAMSendEmail| { &m.source_gc },
            |m: &mut CMsgAMSendEmail| { &mut m.source_gc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tokens",
            |m: &CMsgAMSendEmail| { &m.tokens },
            |m: &mut CMsgAMSendEmail| { &mut m.tokens },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMSendEmail>(
            "CMsgAMSendEmail",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMSendEmail {
    const NAME: &'static str = "CMsgAMSendEmail";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.email_msg_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.email_format = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.persona_name_tokens.push(is.read_message()?);
                },
                48 => {
                    self.source_gc = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.tokens.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.email_msg_type {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.email_format {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.persona_name_tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.source_gc {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        for value in &self.tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.email_msg_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.email_format {
            os.write_uint32(3, v)?;
        }
        for v in &self.persona_name_tokens {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.source_gc {
            os.write_uint32(6, v)?;
        }
        for v in &self.tokens {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMSendEmail {
        CMsgAMSendEmail::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.email_msg_type = ::std::option::Option::None;
        self.email_format = ::std::option::Option::None;
        self.persona_name_tokens.clear();
        self.source_gc = ::std::option::Option::None;
        self.tokens.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMSendEmail {
        static instance: CMsgAMSendEmail = CMsgAMSendEmail {
            steamid: ::std::option::Option::None,
            email_msg_type: ::std::option::Option::None,
            email_format: ::std::option::Option::None,
            persona_name_tokens: ::std::vec::Vec::new(),
            source_gc: ::std::option::Option::None,
            tokens: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMSendEmail {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMSendEmail").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMSendEmail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMSendEmail {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgAMSendEmail`
pub mod cmsg_amsend_email {
    // @@protoc_insertion_point(message:dota.CMsgAMSendEmail.ReplacementToken)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ReplacementToken {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgAMSendEmail.ReplacementToken.token_name)
        pub token_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgAMSendEmail.ReplacementToken.token_value)
        pub token_value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgAMSendEmail.ReplacementToken.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ReplacementToken {
        fn default() -> &'a ReplacementToken {
            <ReplacementToken as ::protobuf::Message>::default_instance()
        }
    }

    impl ReplacementToken {
        pub fn new() -> ReplacementToken {
            ::std::default::Default::default()
        }

        // optional string token_name = 1;

        pub fn token_name(&self) -> &str {
            match self.token_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_token_name(&mut self) {
            self.token_name = ::std::option::Option::None;
        }

        pub fn has_token_name(&self) -> bool {
            self.token_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_token_name(&mut self, v: ::std::string::String) {
            self.token_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_token_name(&mut self) -> &mut ::std::string::String {
            if self.token_name.is_none() {
                self.token_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.token_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_token_name(&mut self) -> ::std::string::String {
            self.token_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string token_value = 2;

        pub fn token_value(&self) -> &str {
            match self.token_value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_token_value(&mut self) {
            self.token_value = ::std::option::Option::None;
        }

        pub fn has_token_value(&self) -> bool {
            self.token_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_token_value(&mut self, v: ::std::string::String) {
            self.token_value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_token_value(&mut self) -> &mut ::std::string::String {
            if self.token_value.is_none() {
                self.token_value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.token_value.as_mut().unwrap()
        }

        // Take field
        pub fn take_token_value(&mut self) -> ::std::string::String {
            self.token_value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "token_name",
                |m: &ReplacementToken| { &m.token_name },
                |m: &mut ReplacementToken| { &mut m.token_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "token_value",
                |m: &ReplacementToken| { &m.token_value },
                |m: &mut ReplacementToken| { &mut m.token_value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReplacementToken>(
                "CMsgAMSendEmail.ReplacementToken",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ReplacementToken {
        const NAME: &'static str = "ReplacementToken";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.token_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.token_value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.token_name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.token_value.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.token_name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.token_value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ReplacementToken {
            ReplacementToken::new()
        }

        fn clear(&mut self) {
            self.token_name = ::std::option::Option::None;
            self.token_value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ReplacementToken {
            static instance: ReplacementToken = ReplacementToken {
                token_name: ::std::option::Option::None,
                token_value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ReplacementToken {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgAMSendEmail.ReplacementToken").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ReplacementToken {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ReplacementToken {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgAMSendEmail.PersonaNameReplacementToken)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PersonaNameReplacementToken {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgAMSendEmail.PersonaNameReplacementToken.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
        pub token_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgAMSendEmail.PersonaNameReplacementToken.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PersonaNameReplacementToken {
        fn default() -> &'a PersonaNameReplacementToken {
            <PersonaNameReplacementToken as ::protobuf::Message>::default_instance()
        }
    }

    impl PersonaNameReplacementToken {
        pub fn new() -> PersonaNameReplacementToken {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional string token_name = 2;

        pub fn token_name(&self) -> &str {
            match self.token_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_token_name(&mut self) {
            self.token_name = ::std::option::Option::None;
        }

        pub fn has_token_name(&self) -> bool {
            self.token_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_token_name(&mut self, v: ::std::string::String) {
            self.token_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_token_name(&mut self) -> &mut ::std::string::String {
            if self.token_name.is_none() {
                self.token_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.token_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_token_name(&mut self) -> ::std::string::String {
            self.token_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &PersonaNameReplacementToken| { &m.steamid },
                |m: &mut PersonaNameReplacementToken| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "token_name",
                |m: &PersonaNameReplacementToken| { &m.token_name },
                |m: &mut PersonaNameReplacementToken| { &mut m.token_name },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PersonaNameReplacementToken>(
                "CMsgAMSendEmail.PersonaNameReplacementToken",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PersonaNameReplacementToken {
        const NAME: &'static str = "PersonaNameReplacementToken";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        self.token_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.token_name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.token_name.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PersonaNameReplacementToken {
            PersonaNameReplacementToken::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.token_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PersonaNameReplacementToken {
            static instance: PersonaNameReplacementToken = PersonaNameReplacementToken {
                steamid: ::std::option::Option::None,
                token_name: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PersonaNameReplacementToken {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgAMSendEmail.PersonaNameReplacementToken").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PersonaNameReplacementToken {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PersonaNameReplacementToken {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgAMSendEmailResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMSendEmailResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMSendEmailResponse.eresult)
    pub eresult: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMSendEmailResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMSendEmailResponse {
    fn default() -> &'a CMsgAMSendEmailResponse {
        <CMsgAMSendEmailResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMSendEmailResponse {
    pub fn new() -> CMsgAMSendEmailResponse {
        ::std::default::Default::default()
    }

    // optional uint32 eresult = 1;

    pub fn eresult(&self) -> u32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: u32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgAMSendEmailResponse| { &m.eresult },
            |m: &mut CMsgAMSendEmailResponse| { &mut m.eresult },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMSendEmailResponse>(
            "CMsgAMSendEmailResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMSendEmailResponse {
    const NAME: &'static str = "CMsgAMSendEmailResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMSendEmailResponse {
        CMsgAMSendEmailResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMSendEmailResponse {
        static instance: CMsgAMSendEmailResponse = CMsgAMSendEmailResponse {
            eresult: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMSendEmailResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMSendEmailResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMSendEmailResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMSendEmailResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCGetEmailTemplate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetEmailTemplate {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCGetEmailTemplate.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetEmailTemplate.email_msg_type)
    pub email_msg_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetEmailTemplate.email_lang)
    pub email_lang: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetEmailTemplate.email_format)
    pub email_format: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCGetEmailTemplate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetEmailTemplate {
    fn default() -> &'a CMsgGCGetEmailTemplate {
        <CMsgGCGetEmailTemplate as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetEmailTemplate {
    pub fn new() -> CMsgGCGetEmailTemplate {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 email_msg_type = 2;

    pub fn email_msg_type(&self) -> u32 {
        self.email_msg_type.unwrap_or(0)
    }

    pub fn clear_email_msg_type(&mut self) {
        self.email_msg_type = ::std::option::Option::None;
    }

    pub fn has_email_msg_type(&self) -> bool {
        self.email_msg_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_msg_type(&mut self, v: u32) {
        self.email_msg_type = ::std::option::Option::Some(v);
    }

    // optional int32 email_lang = 3;

    pub fn email_lang(&self) -> i32 {
        self.email_lang.unwrap_or(0)
    }

    pub fn clear_email_lang(&mut self) {
        self.email_lang = ::std::option::Option::None;
    }

    pub fn has_email_lang(&self) -> bool {
        self.email_lang.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_lang(&mut self, v: i32) {
        self.email_lang = ::std::option::Option::Some(v);
    }

    // optional int32 email_format = 4;

    pub fn email_format(&self) -> i32 {
        self.email_format.unwrap_or(0)
    }

    pub fn clear_email_format(&mut self) {
        self.email_format = ::std::option::Option::None;
    }

    pub fn has_email_format(&self) -> bool {
        self.email_format.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email_format(&mut self, v: i32) {
        self.email_format = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgGCGetEmailTemplate| { &m.app_id },
            |m: &mut CMsgGCGetEmailTemplate| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "email_msg_type",
            |m: &CMsgGCGetEmailTemplate| { &m.email_msg_type },
            |m: &mut CMsgGCGetEmailTemplate| { &mut m.email_msg_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "email_lang",
            |m: &CMsgGCGetEmailTemplate| { &m.email_lang },
            |m: &mut CMsgGCGetEmailTemplate| { &mut m.email_lang },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "email_format",
            |m: &CMsgGCGetEmailTemplate| { &m.email_format },
            |m: &mut CMsgGCGetEmailTemplate| { &mut m.email_format },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGetEmailTemplate>(
            "CMsgGCGetEmailTemplate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGetEmailTemplate {
    const NAME: &'static str = "CMsgGCGetEmailTemplate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.email_msg_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.email_lang = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.email_format = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.email_msg_type {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.email_lang {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.email_format {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.email_msg_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.email_lang {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.email_format {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetEmailTemplate {
        CMsgGCGetEmailTemplate::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.email_msg_type = ::std::option::Option::None;
        self.email_lang = ::std::option::Option::None;
        self.email_format = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetEmailTemplate {
        static instance: CMsgGCGetEmailTemplate = CMsgGCGetEmailTemplate {
            app_id: ::std::option::Option::None,
            email_msg_type: ::std::option::Option::None,
            email_lang: ::std::option::Option::None,
            email_format: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGetEmailTemplate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGetEmailTemplate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGetEmailTemplate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGetEmailTemplate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCGetEmailTemplateResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetEmailTemplateResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCGetEmailTemplateResponse.eresult)
    pub eresult: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetEmailTemplateResponse.template_exists)
    pub template_exists: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetEmailTemplateResponse.template)
    pub template: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCGetEmailTemplateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetEmailTemplateResponse {
    fn default() -> &'a CMsgGCGetEmailTemplateResponse {
        <CMsgGCGetEmailTemplateResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetEmailTemplateResponse {
    pub fn new() -> CMsgGCGetEmailTemplateResponse {
        ::std::default::Default::default()
    }

    // optional uint32 eresult = 1;

    pub fn eresult(&self) -> u32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: u32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional bool template_exists = 2;

    pub fn template_exists(&self) -> bool {
        self.template_exists.unwrap_or(false)
    }

    pub fn clear_template_exists(&mut self) {
        self.template_exists = ::std::option::Option::None;
    }

    pub fn has_template_exists(&self) -> bool {
        self.template_exists.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template_exists(&mut self, v: bool) {
        self.template_exists = ::std::option::Option::Some(v);
    }

    // optional string template = 3;

    pub fn template(&self) -> &str {
        match self.template.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_template(&mut self) {
        self.template = ::std::option::Option::None;
    }

    pub fn has_template(&self) -> bool {
        self.template.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template(&mut self, v: ::std::string::String) {
        self.template = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_template(&mut self) -> &mut ::std::string::String {
        if self.template.is_none() {
            self.template = ::std::option::Option::Some(::std::string::String::new());
        }
        self.template.as_mut().unwrap()
    }

    // Take field
    pub fn take_template(&mut self) -> ::std::string::String {
        self.template.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgGCGetEmailTemplateResponse| { &m.eresult },
            |m: &mut CMsgGCGetEmailTemplateResponse| { &mut m.eresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "template_exists",
            |m: &CMsgGCGetEmailTemplateResponse| { &m.template_exists },
            |m: &mut CMsgGCGetEmailTemplateResponse| { &mut m.template_exists },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "template",
            |m: &CMsgGCGetEmailTemplateResponse| { &m.template },
            |m: &mut CMsgGCGetEmailTemplateResponse| { &mut m.template },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGetEmailTemplateResponse>(
            "CMsgGCGetEmailTemplateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGetEmailTemplateResponse {
    const NAME: &'static str = "CMsgGCGetEmailTemplateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.template_exists = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    self.template = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.template_exists {
            my_size += 1 + 1;
        }
        if let Some(v) = self.template.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.template_exists {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.template.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetEmailTemplateResponse {
        CMsgGCGetEmailTemplateResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.template_exists = ::std::option::Option::None;
        self.template = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetEmailTemplateResponse {
        static instance: CMsgGCGetEmailTemplateResponse = CMsgGCGetEmailTemplateResponse {
            eresult: ::std::option::Option::None,
            template_exists: ::std::option::Option::None,
            template: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGetEmailTemplateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGetEmailTemplateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGetEmailTemplateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGetEmailTemplateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgAMGrantGuestPasses2)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGrantGuestPasses2 {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMGrantGuestPasses2.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgAMGrantGuestPasses2.package_id)
    pub package_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgAMGrantGuestPasses2.passes_to_grant)
    pub passes_to_grant: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgAMGrantGuestPasses2.days_to_expiration)
    pub days_to_expiration: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgAMGrantGuestPasses2.action)
    pub action: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMGrantGuestPasses2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGrantGuestPasses2 {
    fn default() -> &'a CMsgAMGrantGuestPasses2 {
        <CMsgAMGrantGuestPasses2 as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGrantGuestPasses2 {
    pub fn new() -> CMsgAMGrantGuestPasses2 {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 package_id = 2;

    pub fn package_id(&self) -> u32 {
        self.package_id.unwrap_or(0)
    }

    pub fn clear_package_id(&mut self) {
        self.package_id = ::std::option::Option::None;
    }

    pub fn has_package_id(&self) -> bool {
        self.package_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_package_id(&mut self, v: u32) {
        self.package_id = ::std::option::Option::Some(v);
    }

    // optional int32 passes_to_grant = 3;

    pub fn passes_to_grant(&self) -> i32 {
        self.passes_to_grant.unwrap_or(0)
    }

    pub fn clear_passes_to_grant(&mut self) {
        self.passes_to_grant = ::std::option::Option::None;
    }

    pub fn has_passes_to_grant(&self) -> bool {
        self.passes_to_grant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passes_to_grant(&mut self, v: i32) {
        self.passes_to_grant = ::std::option::Option::Some(v);
    }

    // optional int32 days_to_expiration = 4;

    pub fn days_to_expiration(&self) -> i32 {
        self.days_to_expiration.unwrap_or(0)
    }

    pub fn clear_days_to_expiration(&mut self) {
        self.days_to_expiration = ::std::option::Option::None;
    }

    pub fn has_days_to_expiration(&self) -> bool {
        self.days_to_expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_days_to_expiration(&mut self, v: i32) {
        self.days_to_expiration = ::std::option::Option::Some(v);
    }

    // optional int32 action = 5;

    pub fn action(&self) -> i32 {
        self.action.unwrap_or(0)
    }

    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: i32) {
        self.action = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgAMGrantGuestPasses2| { &m.steam_id },
            |m: &mut CMsgAMGrantGuestPasses2| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "package_id",
            |m: &CMsgAMGrantGuestPasses2| { &m.package_id },
            |m: &mut CMsgAMGrantGuestPasses2| { &mut m.package_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "passes_to_grant",
            |m: &CMsgAMGrantGuestPasses2| { &m.passes_to_grant },
            |m: &mut CMsgAMGrantGuestPasses2| { &mut m.passes_to_grant },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "days_to_expiration",
            |m: &CMsgAMGrantGuestPasses2| { &m.days_to_expiration },
            |m: &mut CMsgAMGrantGuestPasses2| { &mut m.days_to_expiration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "action",
            |m: &CMsgAMGrantGuestPasses2| { &m.action },
            |m: &mut CMsgAMGrantGuestPasses2| { &mut m.action },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMGrantGuestPasses2>(
            "CMsgAMGrantGuestPasses2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMGrantGuestPasses2 {
    const NAME: &'static str = "CMsgAMGrantGuestPasses2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.package_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.passes_to_grant = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.days_to_expiration = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.action = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.package_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.passes_to_grant {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.days_to_expiration {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.action {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.package_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.passes_to_grant {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.days_to_expiration {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.action {
            os.write_int32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGrantGuestPasses2 {
        CMsgAMGrantGuestPasses2::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.package_id = ::std::option::Option::None;
        self.passes_to_grant = ::std::option::Option::None;
        self.days_to_expiration = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGrantGuestPasses2 {
        static instance: CMsgAMGrantGuestPasses2 = CMsgAMGrantGuestPasses2 {
            steam_id: ::std::option::Option::None,
            package_id: ::std::option::Option::None,
            passes_to_grant: ::std::option::Option::None,
            days_to_expiration: ::std::option::Option::None,
            action: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMGrantGuestPasses2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMGrantGuestPasses2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMGrantGuestPasses2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMGrantGuestPasses2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgAMGrantGuestPasses2Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAMGrantGuestPasses2Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgAMGrantGuestPasses2Response.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgAMGrantGuestPasses2Response.passes_granted)
    pub passes_granted: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgAMGrantGuestPasses2Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAMGrantGuestPasses2Response {
    fn default() -> &'a CMsgAMGrantGuestPasses2Response {
        <CMsgAMGrantGuestPasses2Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgAMGrantGuestPasses2Response {
    pub fn new() -> CMsgAMGrantGuestPasses2Response {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional int32 passes_granted = 2;

    pub fn passes_granted(&self) -> i32 {
        self.passes_granted.unwrap_or(0)
    }

    pub fn clear_passes_granted(&mut self) {
        self.passes_granted = ::std::option::Option::None;
    }

    pub fn has_passes_granted(&self) -> bool {
        self.passes_granted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passes_granted(&mut self, v: i32) {
        self.passes_granted = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgAMGrantGuestPasses2Response| { &m.eresult },
            |m: &mut CMsgAMGrantGuestPasses2Response| { &mut m.eresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "passes_granted",
            |m: &CMsgAMGrantGuestPasses2Response| { &m.passes_granted },
            |m: &mut CMsgAMGrantGuestPasses2Response| { &mut m.passes_granted },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgAMGrantGuestPasses2Response>(
            "CMsgAMGrantGuestPasses2Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgAMGrantGuestPasses2Response {
    const NAME: &'static str = "CMsgAMGrantGuestPasses2Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.passes_granted = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.passes_granted {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.passes_granted {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAMGrantGuestPasses2Response {
        CMsgAMGrantGuestPasses2Response::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.passes_granted = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAMGrantGuestPasses2Response {
        static instance: CMsgAMGrantGuestPasses2Response = CMsgAMGrantGuestPasses2Response {
            eresult: ::std::option::Option::None,
            passes_granted: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgAMGrantGuestPasses2Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgAMGrantGuestPasses2Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgAMGrantGuestPasses2Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgAMGrantGuestPasses2Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCGetPersonaNames)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetPersonaNames {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCGetPersonaNames.steamids)
    pub steamids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCGetPersonaNames.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetPersonaNames {
    fn default() -> &'a CMsgGCGetPersonaNames {
        <CMsgGCGetPersonaNames as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetPersonaNames {
    pub fn new() -> CMsgGCGetPersonaNames {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "steamids",
            |m: &CMsgGCGetPersonaNames| { &m.steamids },
            |m: &mut CMsgGCGetPersonaNames| { &mut m.steamids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGetPersonaNames>(
            "CMsgGCGetPersonaNames",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGetPersonaNames {
    const NAME: &'static str = "CMsgGCGetPersonaNames";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed64_into(&mut self.steamids)?;
                },
                9 => {
                    self.steamids.push(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 9 * self.steamids.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.steamids {
            os.write_fixed64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetPersonaNames {
        CMsgGCGetPersonaNames::new()
    }

    fn clear(&mut self) {
        self.steamids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetPersonaNames {
        static instance: CMsgGCGetPersonaNames = CMsgGCGetPersonaNames {
            steamids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGetPersonaNames {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGetPersonaNames").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGetPersonaNames {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGetPersonaNames {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCGetPersonaNames_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetPersonaNames_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCGetPersonaNames_Response.succeeded_lookups)
    pub succeeded_lookups: ::std::vec::Vec<cmsg_gcget_persona_names_response::PersonaName>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
    pub failed_lookup_steamids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCGetPersonaNames_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetPersonaNames_Response {
    fn default() -> &'a CMsgGCGetPersonaNames_Response {
        <CMsgGCGetPersonaNames_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetPersonaNames_Response {
    pub fn new() -> CMsgGCGetPersonaNames_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "succeeded_lookups",
            |m: &CMsgGCGetPersonaNames_Response| { &m.succeeded_lookups },
            |m: &mut CMsgGCGetPersonaNames_Response| { &mut m.succeeded_lookups },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "failed_lookup_steamids",
            |m: &CMsgGCGetPersonaNames_Response| { &m.failed_lookup_steamids },
            |m: &mut CMsgGCGetPersonaNames_Response| { &mut m.failed_lookup_steamids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGetPersonaNames_Response>(
            "CMsgGCGetPersonaNames_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGetPersonaNames_Response {
    const NAME: &'static str = "CMsgGCGetPersonaNames_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.succeeded_lookups.push(is.read_message()?);
                },
                18 => {
                    is.read_repeated_packed_fixed64_into(&mut self.failed_lookup_steamids)?;
                },
                17 => {
                    self.failed_lookup_steamids.push(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.succeeded_lookups {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += 9 * self.failed_lookup_steamids.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.succeeded_lookups {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.failed_lookup_steamids {
            os.write_fixed64(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetPersonaNames_Response {
        CMsgGCGetPersonaNames_Response::new()
    }

    fn clear(&mut self) {
        self.succeeded_lookups.clear();
        self.failed_lookup_steamids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetPersonaNames_Response {
        static instance: CMsgGCGetPersonaNames_Response = CMsgGCGetPersonaNames_Response {
            succeeded_lookups: ::std::vec::Vec::new(),
            failed_lookup_steamids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGetPersonaNames_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGetPersonaNames_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGetPersonaNames_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGetPersonaNames_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGCGetPersonaNames_Response`
pub mod cmsg_gcget_persona_names_response {
    // @@protoc_insertion_point(message:dota.CMsgGCGetPersonaNames_Response.PersonaName)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PersonaName {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgGCGetPersonaNames_Response.PersonaName.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
        pub persona_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgGCGetPersonaNames_Response.PersonaName.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PersonaName {
        fn default() -> &'a PersonaName {
            <PersonaName as ::protobuf::Message>::default_instance()
        }
    }

    impl PersonaName {
        pub fn new() -> PersonaName {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional string persona_name = 2;

        pub fn persona_name(&self) -> &str {
            match self.persona_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_persona_name(&mut self) {
            self.persona_name = ::std::option::Option::None;
        }

        pub fn has_persona_name(&self) -> bool {
            self.persona_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_persona_name(&mut self, v: ::std::string::String) {
            self.persona_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
            if self.persona_name.is_none() {
                self.persona_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.persona_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_persona_name(&mut self) -> ::std::string::String {
            self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &PersonaName| { &m.steamid },
                |m: &mut PersonaName| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "persona_name",
                |m: &PersonaName| { &m.persona_name },
                |m: &mut PersonaName| { &mut m.persona_name },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PersonaName>(
                "CMsgGCGetPersonaNames_Response.PersonaName",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PersonaName {
        const NAME: &'static str = "PersonaName";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        self.persona_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.persona_name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.persona_name.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PersonaName {
            PersonaName::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.persona_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PersonaName {
            static instance: PersonaName = PersonaName {
                steamid: ::std::option::Option::None,
                persona_name: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PersonaName {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGCGetPersonaNames_Response.PersonaName").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PersonaName {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PersonaName {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgGCCheckFriendship)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCCheckFriendship {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCCheckFriendship.steamid_left)
    pub steamid_left: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgGCCheckFriendship.steamid_right)
    pub steamid_right: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCCheckFriendship.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCCheckFriendship {
    fn default() -> &'a CMsgGCCheckFriendship {
        <CMsgGCCheckFriendship as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCCheckFriendship {
    pub fn new() -> CMsgGCCheckFriendship {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid_left = 1;

    pub fn steamid_left(&self) -> u64 {
        self.steamid_left.unwrap_or(0)
    }

    pub fn clear_steamid_left(&mut self) {
        self.steamid_left = ::std::option::Option::None;
    }

    pub fn has_steamid_left(&self) -> bool {
        self.steamid_left.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_left(&mut self, v: u64) {
        self.steamid_left = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_right = 2;

    pub fn steamid_right(&self) -> u64 {
        self.steamid_right.unwrap_or(0)
    }

    pub fn clear_steamid_right(&mut self) {
        self.steamid_right = ::std::option::Option::None;
    }

    pub fn has_steamid_right(&self) -> bool {
        self.steamid_right.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_right(&mut self, v: u64) {
        self.steamid_right = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_left",
            |m: &CMsgGCCheckFriendship| { &m.steamid_left },
            |m: &mut CMsgGCCheckFriendship| { &mut m.steamid_left },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_right",
            |m: &CMsgGCCheckFriendship| { &m.steamid_right },
            |m: &mut CMsgGCCheckFriendship| { &mut m.steamid_right },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCCheckFriendship>(
            "CMsgGCCheckFriendship",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCCheckFriendship {
    const NAME: &'static str = "CMsgGCCheckFriendship";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid_left = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steamid_right = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid_left {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid_right {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid_left {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid_right {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCCheckFriendship {
        CMsgGCCheckFriendship::new()
    }

    fn clear(&mut self) {
        self.steamid_left = ::std::option::Option::None;
        self.steamid_right = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCCheckFriendship {
        static instance: CMsgGCCheckFriendship = CMsgGCCheckFriendship {
            steamid_left: ::std::option::Option::None,
            steamid_right: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCCheckFriendship {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCCheckFriendship").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCCheckFriendship {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCCheckFriendship {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCCheckFriendship_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCCheckFriendship_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCCheckFriendship_Response.success)
    pub success: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgGCCheckFriendship_Response.found_friendship)
    pub found_friendship: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCCheckFriendship_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCCheckFriendship_Response {
    fn default() -> &'a CMsgGCCheckFriendship_Response {
        <CMsgGCCheckFriendship_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCCheckFriendship_Response {
    pub fn new() -> CMsgGCCheckFriendship_Response {
        ::std::default::Default::default()
    }

    // optional bool success = 1;

    pub fn success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional bool found_friendship = 2;

    pub fn found_friendship(&self) -> bool {
        self.found_friendship.unwrap_or(false)
    }

    pub fn clear_found_friendship(&mut self) {
        self.found_friendship = ::std::option::Option::None;
    }

    pub fn has_found_friendship(&self) -> bool {
        self.found_friendship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_found_friendship(&mut self, v: bool) {
        self.found_friendship = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "success",
            |m: &CMsgGCCheckFriendship_Response| { &m.success },
            |m: &mut CMsgGCCheckFriendship_Response| { &mut m.success },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "found_friendship",
            |m: &CMsgGCCheckFriendship_Response| { &m.found_friendship },
            |m: &mut CMsgGCCheckFriendship_Response| { &mut m.found_friendship },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCCheckFriendship_Response>(
            "CMsgGCCheckFriendship_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCCheckFriendship_Response {
    const NAME: &'static str = "CMsgGCCheckFriendship_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.found_friendship = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 1 + 1;
        }
        if let Some(v) = self.found_friendship {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.found_friendship {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCCheckFriendship_Response {
        CMsgGCCheckFriendship_Response::new()
    }

    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.found_friendship = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCCheckFriendship_Response {
        static instance: CMsgGCCheckFriendship_Response = CMsgGCCheckFriendship_Response {
            success: ::std::option::Option::None,
            found_friendship: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCCheckFriendship_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCCheckFriendship_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCCheckFriendship_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCCheckFriendship_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCGetAppFriendsList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetAppFriendsList {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCGetAppFriendsList.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetAppFriendsList.include_friendship_timestamps)
    pub include_friendship_timestamps: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCGetAppFriendsList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetAppFriendsList {
    fn default() -> &'a CMsgGCGetAppFriendsList {
        <CMsgGCGetAppFriendsList as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetAppFriendsList {
    pub fn new() -> CMsgGCGetAppFriendsList {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool include_friendship_timestamps = 2;

    pub fn include_friendship_timestamps(&self) -> bool {
        self.include_friendship_timestamps.unwrap_or(false)
    }

    pub fn clear_include_friendship_timestamps(&mut self) {
        self.include_friendship_timestamps = ::std::option::Option::None;
    }

    pub fn has_include_friendship_timestamps(&self) -> bool {
        self.include_friendship_timestamps.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_friendship_timestamps(&mut self, v: bool) {
        self.include_friendship_timestamps = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgGCGetAppFriendsList| { &m.steamid },
            |m: &mut CMsgGCGetAppFriendsList| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_friendship_timestamps",
            |m: &CMsgGCGetAppFriendsList| { &m.include_friendship_timestamps },
            |m: &mut CMsgGCGetAppFriendsList| { &mut m.include_friendship_timestamps },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGetAppFriendsList>(
            "CMsgGCGetAppFriendsList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGetAppFriendsList {
    const NAME: &'static str = "CMsgGCGetAppFriendsList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.include_friendship_timestamps = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.include_friendship_timestamps {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.include_friendship_timestamps {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetAppFriendsList {
        CMsgGCGetAppFriendsList::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.include_friendship_timestamps = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetAppFriendsList {
        static instance: CMsgGCGetAppFriendsList = CMsgGCGetAppFriendsList {
            steamid: ::std::option::Option::None,
            include_friendship_timestamps: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGetAppFriendsList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGetAppFriendsList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGetAppFriendsList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGetAppFriendsList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCGetAppFriendsList_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetAppFriendsList_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCGetAppFriendsList_Response.success)
    pub success: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetAppFriendsList_Response.steamids)
    pub steamids: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetAppFriendsList_Response.friendship_timestamps)
    pub friendship_timestamps: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetAppFriendsList_Response.last_playtimes)
    pub last_playtimes: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCGetAppFriendsList_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetAppFriendsList_Response {
    fn default() -> &'a CMsgGCGetAppFriendsList_Response {
        <CMsgGCGetAppFriendsList_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetAppFriendsList_Response {
    pub fn new() -> CMsgGCGetAppFriendsList_Response {
        ::std::default::Default::default()
    }

    // optional bool success = 1;

    pub fn success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "success",
            |m: &CMsgGCGetAppFriendsList_Response| { &m.success },
            |m: &mut CMsgGCGetAppFriendsList_Response| { &mut m.success },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "steamids",
            |m: &CMsgGCGetAppFriendsList_Response| { &m.steamids },
            |m: &mut CMsgGCGetAppFriendsList_Response| { &mut m.steamids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "friendship_timestamps",
            |m: &CMsgGCGetAppFriendsList_Response| { &m.friendship_timestamps },
            |m: &mut CMsgGCGetAppFriendsList_Response| { &mut m.friendship_timestamps },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "last_playtimes",
            |m: &CMsgGCGetAppFriendsList_Response| { &m.last_playtimes },
            |m: &mut CMsgGCGetAppFriendsList_Response| { &mut m.last_playtimes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGetAppFriendsList_Response>(
            "CMsgGCGetAppFriendsList_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGetAppFriendsList_Response {
    const NAME: &'static str = "CMsgGCGetAppFriendsList_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    is.read_repeated_packed_fixed64_into(&mut self.steamids)?;
                },
                17 => {
                    self.steamids.push(is.read_fixed64()?);
                },
                26 => {
                    is.read_repeated_packed_fixed32_into(&mut self.friendship_timestamps)?;
                },
                29 => {
                    self.friendship_timestamps.push(is.read_fixed32()?);
                },
                34 => {
                    is.read_repeated_packed_fixed32_into(&mut self.last_playtimes)?;
                },
                37 => {
                    self.last_playtimes.push(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 1 + 1;
        }
        my_size += 9 * self.steamids.len() as u64;
        my_size += 5 * self.friendship_timestamps.len() as u64;
        my_size += 5 * self.last_playtimes.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        for v in &self.steamids {
            os.write_fixed64(2, *v)?;
        };
        for v in &self.friendship_timestamps {
            os.write_fixed32(3, *v)?;
        };
        for v in &self.last_playtimes {
            os.write_fixed32(4, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetAppFriendsList_Response {
        CMsgGCGetAppFriendsList_Response::new()
    }

    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.steamids.clear();
        self.friendship_timestamps.clear();
        self.last_playtimes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetAppFriendsList_Response {
        static instance: CMsgGCGetAppFriendsList_Response = CMsgGCGetAppFriendsList_Response {
            success: ::std::option::Option::None,
            steamids: ::std::vec::Vec::new(),
            friendship_timestamps: ::std::vec::Vec::new(),
            last_playtimes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGetAppFriendsList_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGetAppFriendsList_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGetAppFriendsList_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGetAppFriendsList_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCMsgMasterSetDirectory)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetDirectory {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetDirectory.master_dir_index)
    pub master_dir_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetDirectory.dir)
    pub dir: ::std::vec::Vec<cmsg_gcmsg_master_set_directory::SubGC>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCMsgMasterSetDirectory.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetDirectory {
    fn default() -> &'a CMsgGCMsgMasterSetDirectory {
        <CMsgGCMsgMasterSetDirectory as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetDirectory {
    pub fn new() -> CMsgGCMsgMasterSetDirectory {
        ::std::default::Default::default()
    }

    // optional int32 master_dir_index = 1;

    pub fn master_dir_index(&self) -> i32 {
        self.master_dir_index.unwrap_or(0)
    }

    pub fn clear_master_dir_index(&mut self) {
        self.master_dir_index = ::std::option::Option::None;
    }

    pub fn has_master_dir_index(&self) -> bool {
        self.master_dir_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_master_dir_index(&mut self, v: i32) {
        self.master_dir_index = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "master_dir_index",
            |m: &CMsgGCMsgMasterSetDirectory| { &m.master_dir_index },
            |m: &mut CMsgGCMsgMasterSetDirectory| { &mut m.master_dir_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dir",
            |m: &CMsgGCMsgMasterSetDirectory| { &m.dir },
            |m: &mut CMsgGCMsgMasterSetDirectory| { &mut m.dir },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCMsgMasterSetDirectory>(
            "CMsgGCMsgMasterSetDirectory",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCMsgMasterSetDirectory {
    const NAME: &'static str = "CMsgGCMsgMasterSetDirectory";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.master_dir_index = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.dir.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.master_dir_index {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        for value in &self.dir {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.master_dir_index {
            os.write_int32(1, v)?;
        }
        for v in &self.dir {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetDirectory {
        CMsgGCMsgMasterSetDirectory::new()
    }

    fn clear(&mut self) {
        self.master_dir_index = ::std::option::Option::None;
        self.dir.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetDirectory {
        static instance: CMsgGCMsgMasterSetDirectory = CMsgGCMsgMasterSetDirectory {
            master_dir_index: ::std::option::Option::None,
            dir: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCMsgMasterSetDirectory {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCMsgMasterSetDirectory").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCMsgMasterSetDirectory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCMsgMasterSetDirectory {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGCMsgMasterSetDirectory`
pub mod cmsg_gcmsg_master_set_directory {
    // @@protoc_insertion_point(message:dota.CMsgGCMsgMasterSetDirectory.SubGC)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SubGC {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetDirectory.SubGC.dir_index)
        pub dir_index: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetDirectory.SubGC.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetDirectory.SubGC.box)
        pub box_: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line)
        pub command_line: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
        pub gc_binary: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgGCMsgMasterSetDirectory.SubGC.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SubGC {
        fn default() -> &'a SubGC {
            <SubGC as ::protobuf::Message>::default_instance()
        }
    }

    impl SubGC {
        pub fn new() -> SubGC {
            ::std::default::Default::default()
        }

        // optional int32 dir_index = 1;

        pub fn dir_index(&self) -> i32 {
            self.dir_index.unwrap_or(0)
        }

        pub fn clear_dir_index(&mut self) {
            self.dir_index = ::std::option::Option::None;
        }

        pub fn has_dir_index(&self) -> bool {
            self.dir_index.is_some()
        }

        // Param is passed by value, moved
        pub fn set_dir_index(&mut self, v: i32) {
            self.dir_index = ::std::option::Option::Some(v);
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string box = 3;

        pub fn box_(&self) -> &str {
            match self.box_.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_box_(&mut self) {
            self.box_ = ::std::option::Option::None;
        }

        pub fn has_box(&self) -> bool {
            self.box_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_box(&mut self, v: ::std::string::String) {
            self.box_ = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_box(&mut self) -> &mut ::std::string::String {
            if self.box_.is_none() {
                self.box_ = ::std::option::Option::Some(::std::string::String::new());
            }
            self.box_.as_mut().unwrap()
        }

        // Take field
        pub fn take_box_(&mut self) -> ::std::string::String {
            self.box_.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string command_line = 4;

        pub fn command_line(&self) -> &str {
            match self.command_line.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_command_line(&mut self) {
            self.command_line = ::std::option::Option::None;
        }

        pub fn has_command_line(&self) -> bool {
            self.command_line.is_some()
        }

        // Param is passed by value, moved
        pub fn set_command_line(&mut self, v: ::std::string::String) {
            self.command_line = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_command_line(&mut self) -> &mut ::std::string::String {
            if self.command_line.is_none() {
                self.command_line = ::std::option::Option::Some(::std::string::String::new());
            }
            self.command_line.as_mut().unwrap()
        }

        // Take field
        pub fn take_command_line(&mut self) -> ::std::string::String {
            self.command_line.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string gc_binary = 5;

        pub fn gc_binary(&self) -> &str {
            match self.gc_binary.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_gc_binary(&mut self) {
            self.gc_binary = ::std::option::Option::None;
        }

        pub fn has_gc_binary(&self) -> bool {
            self.gc_binary.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gc_binary(&mut self, v: ::std::string::String) {
            self.gc_binary = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_gc_binary(&mut self) -> &mut ::std::string::String {
            if self.gc_binary.is_none() {
                self.gc_binary = ::std::option::Option::Some(::std::string::String::new());
            }
            self.gc_binary.as_mut().unwrap()
        }

        // Take field
        pub fn take_gc_binary(&mut self) -> ::std::string::String {
            self.gc_binary.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "dir_index",
                |m: &SubGC| { &m.dir_index },
                |m: &mut SubGC| { &mut m.dir_index },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &SubGC| { &m.name },
                |m: &mut SubGC| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "box",
                |m: &SubGC| { &m.box_ },
                |m: &mut SubGC| { &mut m.box_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "command_line",
                |m: &SubGC| { &m.command_line },
                |m: &mut SubGC| { &mut m.command_line },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "gc_binary",
                |m: &SubGC| { &m.gc_binary },
                |m: &mut SubGC| { &mut m.gc_binary },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubGC>(
                "CMsgGCMsgMasterSetDirectory.SubGC",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for SubGC {
        const NAME: &'static str = "SubGC";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.dir_index = ::std::option::Option::Some(is.read_int32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.box_ = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.command_line = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.gc_binary = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.dir_index {
                my_size += ::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.box_.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.command_line.as_ref() {
                my_size += ::protobuf::rt::string_size(4, &v);
            }
            if let Some(v) = self.gc_binary.as_ref() {
                my_size += ::protobuf::rt::string_size(5, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.dir_index {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.box_.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.command_line.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.gc_binary.as_ref() {
                os.write_string(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SubGC {
            SubGC::new()
        }

        fn clear(&mut self) {
            self.dir_index = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.box_ = ::std::option::Option::None;
            self.command_line = ::std::option::Option::None;
            self.gc_binary = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SubGC {
            static instance: SubGC = SubGC {
                dir_index: ::std::option::Option::None,
                name: ::std::option::Option::None,
                box_: ::std::option::Option::None,
                command_line: ::std::option::Option::None,
                gc_binary: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for SubGC {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGCMsgMasterSetDirectory.SubGC").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for SubGC {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for SubGC {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgGCMsgMasterSetDirectory_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetDirectory_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetDirectory_Response.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetDirectory_Response.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCMsgMasterSetDirectory_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetDirectory_Response {
    fn default() -> &'a CMsgGCMsgMasterSetDirectory_Response {
        <CMsgGCMsgMasterSetDirectory_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetDirectory_Response {
    pub fn new() -> CMsgGCMsgMasterSetDirectory_Response {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional string message = 2;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgGCMsgMasterSetDirectory_Response| { &m.eresult },
            |m: &mut CMsgGCMsgMasterSetDirectory_Response| { &mut m.eresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &CMsgGCMsgMasterSetDirectory_Response| { &m.message },
            |m: &mut CMsgGCMsgMasterSetDirectory_Response| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCMsgMasterSetDirectory_Response>(
            "CMsgGCMsgMasterSetDirectory_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCMsgMasterSetDirectory_Response {
    const NAME: &'static str = "CMsgGCMsgMasterSetDirectory_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetDirectory_Response {
        CMsgGCMsgMasterSetDirectory_Response::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetDirectory_Response {
        static instance: CMsgGCMsgMasterSetDirectory_Response = CMsgGCMsgMasterSetDirectory_Response {
            eresult: ::std::option::Option::None,
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCMsgMasterSetDirectory_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCMsgMasterSetDirectory_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCMsgMasterSetDirectory_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCMsgMasterSetDirectory_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgWebAPIJobRequestForwardResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCMsgWebAPIJobRequestForwardResponse.dir_index)
    pub dir_index: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCMsgWebAPIJobRequestForwardResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgWebAPIJobRequestForwardResponse {
    fn default() -> &'a CMsgGCMsgWebAPIJobRequestForwardResponse {
        <CMsgGCMsgWebAPIJobRequestForwardResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgWebAPIJobRequestForwardResponse {
    pub fn new() -> CMsgGCMsgWebAPIJobRequestForwardResponse {
        ::std::default::Default::default()
    }

    // optional int32 dir_index = 1;

    pub fn dir_index(&self) -> i32 {
        self.dir_index.unwrap_or(0)
    }

    pub fn clear_dir_index(&mut self) {
        self.dir_index = ::std::option::Option::None;
    }

    pub fn has_dir_index(&self) -> bool {
        self.dir_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dir_index(&mut self, v: i32) {
        self.dir_index = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dir_index",
            |m: &CMsgGCMsgWebAPIJobRequestForwardResponse| { &m.dir_index },
            |m: &mut CMsgGCMsgWebAPIJobRequestForwardResponse| { &mut m.dir_index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCMsgWebAPIJobRequestForwardResponse>(
            "CMsgGCMsgWebAPIJobRequestForwardResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCMsgWebAPIJobRequestForwardResponse {
    const NAME: &'static str = "CMsgGCMsgWebAPIJobRequestForwardResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.dir_index = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.dir_index {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.dir_index {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgWebAPIJobRequestForwardResponse {
        CMsgGCMsgWebAPIJobRequestForwardResponse::new()
    }

    fn clear(&mut self) {
        self.dir_index = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgWebAPIJobRequestForwardResponse {
        static instance: CMsgGCMsgWebAPIJobRequestForwardResponse = CMsgGCMsgWebAPIJobRequestForwardResponse {
            dir_index: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCMsgWebAPIJobRequestForwardResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCMsgWebAPIJobRequestForwardResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCMsgWebAPIJobRequestForwardResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCMsgWebAPIJobRequestForwardResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCSystemMsg_GetPurchaseTrust_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_GetPurchaseTrust_Request {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetPurchaseTrust_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCSystemMsg_GetPurchaseTrust_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_GetPurchaseTrust_Request {
    fn default() -> &'a CGCSystemMsg_GetPurchaseTrust_Request {
        <CGCSystemMsg_GetPurchaseTrust_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_GetPurchaseTrust_Request {
    pub fn new() -> CGCSystemMsg_GetPurchaseTrust_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGCSystemMsg_GetPurchaseTrust_Request| { &m.steamid },
            |m: &mut CGCSystemMsg_GetPurchaseTrust_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCSystemMsg_GetPurchaseTrust_Request>(
            "CGCSystemMsg_GetPurchaseTrust_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCSystemMsg_GetPurchaseTrust_Request {
    const NAME: &'static str = "CGCSystemMsg_GetPurchaseTrust_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_GetPurchaseTrust_Request {
        CGCSystemMsg_GetPurchaseTrust_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_GetPurchaseTrust_Request {
        static instance: CGCSystemMsg_GetPurchaseTrust_Request = CGCSystemMsg_GetPurchaseTrust_Request {
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCSystemMsg_GetPurchaseTrust_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCSystemMsg_GetPurchaseTrust_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCSystemMsg_GetPurchaseTrust_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCSystemMsg_GetPurchaseTrust_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCSystemMsg_GetPurchaseTrust_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_GetPurchaseTrust_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetPurchaseTrust_Response.has_prior_purchase_history)
    pub has_prior_purchase_history: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetPurchaseTrust_Response.has_no_recent_password_resets)
    pub has_no_recent_password_resets: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetPurchaseTrust_Response.is_wallet_cash_trusted)
    pub is_wallet_cash_trusted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_GetPurchaseTrust_Response.time_all_trusted)
    pub time_all_trusted: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCSystemMsg_GetPurchaseTrust_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_GetPurchaseTrust_Response {
    fn default() -> &'a CGCSystemMsg_GetPurchaseTrust_Response {
        <CGCSystemMsg_GetPurchaseTrust_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_GetPurchaseTrust_Response {
    pub fn new() -> CGCSystemMsg_GetPurchaseTrust_Response {
        ::std::default::Default::default()
    }

    // optional bool has_prior_purchase_history = 1;

    pub fn has_prior_purchase_history(&self) -> bool {
        self.has_prior_purchase_history.unwrap_or(false)
    }

    pub fn clear_has_prior_purchase_history(&mut self) {
        self.has_prior_purchase_history = ::std::option::Option::None;
    }

    pub fn has_has_prior_purchase_history(&self) -> bool {
        self.has_prior_purchase_history.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_prior_purchase_history(&mut self, v: bool) {
        self.has_prior_purchase_history = ::std::option::Option::Some(v);
    }

    // optional bool has_no_recent_password_resets = 2;

    pub fn has_no_recent_password_resets(&self) -> bool {
        self.has_no_recent_password_resets.unwrap_or(false)
    }

    pub fn clear_has_no_recent_password_resets(&mut self) {
        self.has_no_recent_password_resets = ::std::option::Option::None;
    }

    pub fn has_has_no_recent_password_resets(&self) -> bool {
        self.has_no_recent_password_resets.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_no_recent_password_resets(&mut self, v: bool) {
        self.has_no_recent_password_resets = ::std::option::Option::Some(v);
    }

    // optional bool is_wallet_cash_trusted = 3;

    pub fn is_wallet_cash_trusted(&self) -> bool {
        self.is_wallet_cash_trusted.unwrap_or(false)
    }

    pub fn clear_is_wallet_cash_trusted(&mut self) {
        self.is_wallet_cash_trusted = ::std::option::Option::None;
    }

    pub fn has_is_wallet_cash_trusted(&self) -> bool {
        self.is_wallet_cash_trusted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_wallet_cash_trusted(&mut self, v: bool) {
        self.is_wallet_cash_trusted = ::std::option::Option::Some(v);
    }

    // optional uint32 time_all_trusted = 4;

    pub fn time_all_trusted(&self) -> u32 {
        self.time_all_trusted.unwrap_or(0)
    }

    pub fn clear_time_all_trusted(&mut self) {
        self.time_all_trusted = ::std::option::Option::None;
    }

    pub fn has_time_all_trusted(&self) -> bool {
        self.time_all_trusted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_all_trusted(&mut self, v: u32) {
        self.time_all_trusted = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_prior_purchase_history",
            |m: &CGCSystemMsg_GetPurchaseTrust_Response| { &m.has_prior_purchase_history },
            |m: &mut CGCSystemMsg_GetPurchaseTrust_Response| { &mut m.has_prior_purchase_history },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_no_recent_password_resets",
            |m: &CGCSystemMsg_GetPurchaseTrust_Response| { &m.has_no_recent_password_resets },
            |m: &mut CGCSystemMsg_GetPurchaseTrust_Response| { &mut m.has_no_recent_password_resets },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_wallet_cash_trusted",
            |m: &CGCSystemMsg_GetPurchaseTrust_Response| { &m.is_wallet_cash_trusted },
            |m: &mut CGCSystemMsg_GetPurchaseTrust_Response| { &mut m.is_wallet_cash_trusted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_all_trusted",
            |m: &CGCSystemMsg_GetPurchaseTrust_Response| { &m.time_all_trusted },
            |m: &mut CGCSystemMsg_GetPurchaseTrust_Response| { &mut m.time_all_trusted },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCSystemMsg_GetPurchaseTrust_Response>(
            "CGCSystemMsg_GetPurchaseTrust_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCSystemMsg_GetPurchaseTrust_Response {
    const NAME: &'static str = "CGCSystemMsg_GetPurchaseTrust_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.has_prior_purchase_history = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.has_no_recent_password_resets = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.is_wallet_cash_trusted = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.time_all_trusted = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.has_prior_purchase_history {
            my_size += 1 + 1;
        }
        if let Some(v) = self.has_no_recent_password_resets {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_wallet_cash_trusted {
            my_size += 1 + 1;
        }
        if let Some(v) = self.time_all_trusted {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.has_prior_purchase_history {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.has_no_recent_password_resets {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.is_wallet_cash_trusted {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.time_all_trusted {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_GetPurchaseTrust_Response {
        CGCSystemMsg_GetPurchaseTrust_Response::new()
    }

    fn clear(&mut self) {
        self.has_prior_purchase_history = ::std::option::Option::None;
        self.has_no_recent_password_resets = ::std::option::Option::None;
        self.is_wallet_cash_trusted = ::std::option::Option::None;
        self.time_all_trusted = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_GetPurchaseTrust_Response {
        static instance: CGCSystemMsg_GetPurchaseTrust_Response = CGCSystemMsg_GetPurchaseTrust_Response {
            has_prior_purchase_history: ::std::option::Option::None,
            has_no_recent_password_resets: ::std::option::Option::None,
            is_wallet_cash_trusted: ::std::option::Option::None,
            time_all_trusted: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCSystemMsg_GetPurchaseTrust_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCSystemMsg_GetPurchaseTrust_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCSystemMsg_GetPurchaseTrust_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCSystemMsg_GetPurchaseTrust_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCHAccountVacStatusChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAccountVacStatusChange {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCHAccountVacStatusChange.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgGCHAccountVacStatusChange.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHAccountVacStatusChange.rtime_vacban_starts)
    pub rtime_vacban_starts: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHAccountVacStatusChange.is_banned_now)
    pub is_banned_now: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgGCHAccountVacStatusChange.is_banned_future)
    pub is_banned_future: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCHAccountVacStatusChange.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAccountVacStatusChange {
    fn default() -> &'a CMsgGCHAccountVacStatusChange {
        <CMsgGCHAccountVacStatusChange as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAccountVacStatusChange {
    pub fn new() -> CMsgGCHAccountVacStatusChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 2;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 rtime_vacban_starts = 3;

    pub fn rtime_vacban_starts(&self) -> u32 {
        self.rtime_vacban_starts.unwrap_or(0)
    }

    pub fn clear_rtime_vacban_starts(&mut self) {
        self.rtime_vacban_starts = ::std::option::Option::None;
    }

    pub fn has_rtime_vacban_starts(&self) -> bool {
        self.rtime_vacban_starts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime_vacban_starts(&mut self, v: u32) {
        self.rtime_vacban_starts = ::std::option::Option::Some(v);
    }

    // optional bool is_banned_now = 4;

    pub fn is_banned_now(&self) -> bool {
        self.is_banned_now.unwrap_or(false)
    }

    pub fn clear_is_banned_now(&mut self) {
        self.is_banned_now = ::std::option::Option::None;
    }

    pub fn has_is_banned_now(&self) -> bool {
        self.is_banned_now.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_banned_now(&mut self, v: bool) {
        self.is_banned_now = ::std::option::Option::Some(v);
    }

    // optional bool is_banned_future = 5;

    pub fn is_banned_future(&self) -> bool {
        self.is_banned_future.unwrap_or(false)
    }

    pub fn clear_is_banned_future(&mut self) {
        self.is_banned_future = ::std::option::Option::None;
    }

    pub fn has_is_banned_future(&self) -> bool {
        self.is_banned_future.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_banned_future(&mut self, v: bool) {
        self.is_banned_future = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgGCHAccountVacStatusChange| { &m.steam_id },
            |m: &mut CMsgGCHAccountVacStatusChange| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgGCHAccountVacStatusChange| { &m.app_id },
            |m: &mut CMsgGCHAccountVacStatusChange| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rtime_vacban_starts",
            |m: &CMsgGCHAccountVacStatusChange| { &m.rtime_vacban_starts },
            |m: &mut CMsgGCHAccountVacStatusChange| { &mut m.rtime_vacban_starts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_banned_now",
            |m: &CMsgGCHAccountVacStatusChange| { &m.is_banned_now },
            |m: &mut CMsgGCHAccountVacStatusChange| { &mut m.is_banned_now },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_banned_future",
            |m: &CMsgGCHAccountVacStatusChange| { &m.is_banned_future },
            |m: &mut CMsgGCHAccountVacStatusChange| { &mut m.is_banned_future },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHAccountVacStatusChange>(
            "CMsgGCHAccountVacStatusChange",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHAccountVacStatusChange {
    const NAME: &'static str = "CMsgGCHAccountVacStatusChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.rtime_vacban_starts = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.is_banned_now = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_banned_future = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.rtime_vacban_starts {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.is_banned_now {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_banned_future {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.rtime_vacban_starts {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.is_banned_now {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_banned_future {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAccountVacStatusChange {
        CMsgGCHAccountVacStatusChange::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.rtime_vacban_starts = ::std::option::Option::None;
        self.is_banned_now = ::std::option::Option::None;
        self.is_banned_future = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAccountVacStatusChange {
        static instance: CMsgGCHAccountVacStatusChange = CMsgGCHAccountVacStatusChange {
            steam_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            rtime_vacban_starts: ::std::option::Option::None,
            is_banned_now: ::std::option::Option::None,
            is_banned_future: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHAccountVacStatusChange {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHAccountVacStatusChange").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHAccountVacStatusChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHAccountVacStatusChange {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCGetPartnerAccountLink)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetPartnerAccountLink {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCGetPartnerAccountLink.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCGetPartnerAccountLink.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetPartnerAccountLink {
    fn default() -> &'a CMsgGCGetPartnerAccountLink {
        <CMsgGCGetPartnerAccountLink as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetPartnerAccountLink {
    pub fn new() -> CMsgGCGetPartnerAccountLink {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgGCGetPartnerAccountLink| { &m.steamid },
            |m: &mut CMsgGCGetPartnerAccountLink| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGetPartnerAccountLink>(
            "CMsgGCGetPartnerAccountLink",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGetPartnerAccountLink {
    const NAME: &'static str = "CMsgGCGetPartnerAccountLink";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetPartnerAccountLink {
        CMsgGCGetPartnerAccountLink::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetPartnerAccountLink {
        static instance: CMsgGCGetPartnerAccountLink = CMsgGCGetPartnerAccountLink {
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGetPartnerAccountLink {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGetPartnerAccountLink").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGetPartnerAccountLink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGetPartnerAccountLink {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCGetPartnerAccountLink_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCGetPartnerAccountLink_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCGetPartnerAccountLink_Response.pwid)
    pub pwid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetPartnerAccountLink_Response.nexonid)
    pub nexonid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetPartnerAccountLink_Response.ageclass)
    pub ageclass: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetPartnerAccountLink_Response.id_verified)
    pub id_verified: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgGCGetPartnerAccountLink_Response.is_adult)
    pub is_adult: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCGetPartnerAccountLink_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGetPartnerAccountLink_Response {
    fn default() -> &'a CMsgGCGetPartnerAccountLink_Response {
        <CMsgGCGetPartnerAccountLink_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGetPartnerAccountLink_Response {
    pub fn new() -> CMsgGCGetPartnerAccountLink_Response {
        ::std::default::Default::default()
    }

    // optional uint32 pwid = 1;

    pub fn pwid(&self) -> u32 {
        self.pwid.unwrap_or(0)
    }

    pub fn clear_pwid(&mut self) {
        self.pwid = ::std::option::Option::None;
    }

    pub fn has_pwid(&self) -> bool {
        self.pwid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pwid(&mut self, v: u32) {
        self.pwid = ::std::option::Option::Some(v);
    }

    // optional uint32 nexonid = 2;

    pub fn nexonid(&self) -> u32 {
        self.nexonid.unwrap_or(0)
    }

    pub fn clear_nexonid(&mut self) {
        self.nexonid = ::std::option::Option::None;
    }

    pub fn has_nexonid(&self) -> bool {
        self.nexonid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nexonid(&mut self, v: u32) {
        self.nexonid = ::std::option::Option::Some(v);
    }

    // optional int32 ageclass = 3;

    pub fn ageclass(&self) -> i32 {
        self.ageclass.unwrap_or(0)
    }

    pub fn clear_ageclass(&mut self) {
        self.ageclass = ::std::option::Option::None;
    }

    pub fn has_ageclass(&self) -> bool {
        self.ageclass.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ageclass(&mut self, v: i32) {
        self.ageclass = ::std::option::Option::Some(v);
    }

    // optional bool id_verified = 4;

    pub fn id_verified(&self) -> bool {
        self.id_verified.unwrap_or(false)
    }

    pub fn clear_id_verified(&mut self) {
        self.id_verified = ::std::option::Option::None;
    }

    pub fn has_id_verified(&self) -> bool {
        self.id_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id_verified(&mut self, v: bool) {
        self.id_verified = ::std::option::Option::Some(v);
    }

    // optional bool is_adult = 5;

    pub fn is_adult(&self) -> bool {
        self.is_adult.unwrap_or(false)
    }

    pub fn clear_is_adult(&mut self) {
        self.is_adult = ::std::option::Option::None;
    }

    pub fn has_is_adult(&self) -> bool {
        self.is_adult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_adult(&mut self, v: bool) {
        self.is_adult = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pwid",
            |m: &CMsgGCGetPartnerAccountLink_Response| { &m.pwid },
            |m: &mut CMsgGCGetPartnerAccountLink_Response| { &mut m.pwid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "nexonid",
            |m: &CMsgGCGetPartnerAccountLink_Response| { &m.nexonid },
            |m: &mut CMsgGCGetPartnerAccountLink_Response| { &mut m.nexonid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ageclass",
            |m: &CMsgGCGetPartnerAccountLink_Response| { &m.ageclass },
            |m: &mut CMsgGCGetPartnerAccountLink_Response| { &mut m.ageclass },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "id_verified",
            |m: &CMsgGCGetPartnerAccountLink_Response| { &m.id_verified },
            |m: &mut CMsgGCGetPartnerAccountLink_Response| { &mut m.id_verified },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_adult",
            |m: &CMsgGCGetPartnerAccountLink_Response| { &m.is_adult },
            |m: &mut CMsgGCGetPartnerAccountLink_Response| { &mut m.is_adult },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGetPartnerAccountLink_Response>(
            "CMsgGCGetPartnerAccountLink_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGetPartnerAccountLink_Response {
    const NAME: &'static str = "CMsgGCGetPartnerAccountLink_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pwid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.nexonid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.ageclass = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.id_verified = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_adult = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pwid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.nexonid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.ageclass {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.id_verified {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_adult {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pwid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.nexonid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.ageclass {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.id_verified {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_adult {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGetPartnerAccountLink_Response {
        CMsgGCGetPartnerAccountLink_Response::new()
    }

    fn clear(&mut self) {
        self.pwid = ::std::option::Option::None;
        self.nexonid = ::std::option::Option::None;
        self.ageclass = ::std::option::Option::None;
        self.id_verified = ::std::option::Option::None;
        self.is_adult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGetPartnerAccountLink_Response {
        static instance: CMsgGCGetPartnerAccountLink_Response = CMsgGCGetPartnerAccountLink_Response {
            pwid: ::std::option::Option::None,
            nexonid: ::std::option::Option::None,
            ageclass: ::std::option::Option::None,
            id_verified: ::std::option::Option::None,
            is_adult: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGetPartnerAccountLink_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGetPartnerAccountLink_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGetPartnerAccountLink_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGetPartnerAccountLink_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCRoutingInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCRoutingInfo {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCRoutingInfo.dir_index)
    pub dir_index: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:dota.CMsgGCRoutingInfo.method)
    pub method: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_gcrouting_info::RoutingMethod>>,
    // @@protoc_insertion_point(field:dota.CMsgGCRoutingInfo.fallback)
    pub fallback: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_gcrouting_info::RoutingMethod>>,
    // @@protoc_insertion_point(field:dota.CMsgGCRoutingInfo.protobuf_field)
    pub protobuf_field: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCRoutingInfo.webapi_param)
    pub webapi_param: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCRoutingInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCRoutingInfo {
    fn default() -> &'a CMsgGCRoutingInfo {
        <CMsgGCRoutingInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCRoutingInfo {
    pub fn new() -> CMsgGCRoutingInfo {
        ::std::default::Default::default()
    }

    // optional .dota.CMsgGCRoutingInfo.RoutingMethod method = 2;

    pub fn method(&self) -> cmsg_gcrouting_info::RoutingMethod {
        match self.method {
            Some(e) => e.enum_value_or(cmsg_gcrouting_info::RoutingMethod::RANDOM),
            None => cmsg_gcrouting_info::RoutingMethod::RANDOM,
        }
    }

    pub fn clear_method(&mut self) {
        self.method = ::std::option::Option::None;
    }

    pub fn has_method(&self) -> bool {
        self.method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: cmsg_gcrouting_info::RoutingMethod) {
        self.method = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional .dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3;

    pub fn fallback(&self) -> cmsg_gcrouting_info::RoutingMethod {
        match self.fallback {
            Some(e) => e.enum_value_or(cmsg_gcrouting_info::RoutingMethod::RANDOM),
            None => cmsg_gcrouting_info::RoutingMethod::RANDOM,
        }
    }

    pub fn clear_fallback(&mut self) {
        self.fallback = ::std::option::Option::None;
    }

    pub fn has_fallback(&self) -> bool {
        self.fallback.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fallback(&mut self, v: cmsg_gcrouting_info::RoutingMethod) {
        self.fallback = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 protobuf_field = 4;

    pub fn protobuf_field(&self) -> u32 {
        self.protobuf_field.unwrap_or(0)
    }

    pub fn clear_protobuf_field(&mut self) {
        self.protobuf_field = ::std::option::Option::None;
    }

    pub fn has_protobuf_field(&self) -> bool {
        self.protobuf_field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protobuf_field(&mut self, v: u32) {
        self.protobuf_field = ::std::option::Option::Some(v);
    }

    // optional string webapi_param = 5;

    pub fn webapi_param(&self) -> &str {
        match self.webapi_param.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_webapi_param(&mut self) {
        self.webapi_param = ::std::option::Option::None;
    }

    pub fn has_webapi_param(&self) -> bool {
        self.webapi_param.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webapi_param(&mut self, v: ::std::string::String) {
        self.webapi_param = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_webapi_param(&mut self) -> &mut ::std::string::String {
        if self.webapi_param.is_none() {
            self.webapi_param = ::std::option::Option::Some(::std::string::String::new());
        }
        self.webapi_param.as_mut().unwrap()
    }

    // Take field
    pub fn take_webapi_param(&mut self) -> ::std::string::String {
        self.webapi_param.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dir_index",
            |m: &CMsgGCRoutingInfo| { &m.dir_index },
            |m: &mut CMsgGCRoutingInfo| { &mut m.dir_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "method",
            |m: &CMsgGCRoutingInfo| { &m.method },
            |m: &mut CMsgGCRoutingInfo| { &mut m.method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fallback",
            |m: &CMsgGCRoutingInfo| { &m.fallback },
            |m: &mut CMsgGCRoutingInfo| { &mut m.fallback },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protobuf_field",
            |m: &CMsgGCRoutingInfo| { &m.protobuf_field },
            |m: &mut CMsgGCRoutingInfo| { &mut m.protobuf_field },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "webapi_param",
            |m: &CMsgGCRoutingInfo| { &m.webapi_param },
            |m: &mut CMsgGCRoutingInfo| { &mut m.webapi_param },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCRoutingInfo>(
            "CMsgGCRoutingInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCRoutingInfo {
    const NAME: &'static str = "CMsgGCRoutingInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_int32_into(&mut self.dir_index)?;
                },
                8 => {
                    self.dir_index.push(is.read_int32()?);
                },
                16 => {
                    self.method = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.fallback = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.protobuf_field = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.webapi_param = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.dir_index {
            my_size += ::protobuf::rt::int32_size(1, *value);
        };
        if let Some(v) = self.method {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.fallback {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.protobuf_field {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.webapi_param.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.dir_index {
            os.write_int32(1, *v)?;
        };
        if let Some(v) = self.method {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.fallback {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.protobuf_field {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.webapi_param.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCRoutingInfo {
        CMsgGCRoutingInfo::new()
    }

    fn clear(&mut self) {
        self.dir_index.clear();
        self.method = ::std::option::Option::None;
        self.fallback = ::std::option::Option::None;
        self.protobuf_field = ::std::option::Option::None;
        self.webapi_param = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCRoutingInfo {
        static instance: CMsgGCRoutingInfo = CMsgGCRoutingInfo {
            dir_index: ::std::vec::Vec::new(),
            method: ::std::option::Option::None,
            fallback: ::std::option::Option::None,
            protobuf_field: ::std::option::Option::None,
            webapi_param: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCRoutingInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCRoutingInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCRoutingInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCRoutingInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGCRoutingInfo`
pub mod cmsg_gcrouting_info {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgGCRoutingInfo.RoutingMethod)
    pub enum RoutingMethod {
        // @@protoc_insertion_point(enum_value:dota.CMsgGCRoutingInfo.RoutingMethod.RANDOM)
        RANDOM = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCRoutingInfo.RoutingMethod.DISCARD)
        DISCARD = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCRoutingInfo.RoutingMethod.CLIENT_STEAMID)
        CLIENT_STEAMID = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCRoutingInfo.RoutingMethod.PROTOBUF_FIELD_UINT64)
        PROTOBUF_FIELD_UINT64 = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCRoutingInfo.RoutingMethod.WEBAPI_PARAM)
        WEBAPI_PARAM = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCRoutingInfo.RoutingMethod.WEBAPI_PARAM_STEAMID_ACCOUNTID)
        WEBAPI_PARAM_STEAMID_ACCOUNTID = 5,
    }

    impl ::protobuf::Enum for RoutingMethod {
        const NAME: &'static str = "RoutingMethod";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<RoutingMethod> {
            match value {
                0 => ::std::option::Option::Some(RoutingMethod::RANDOM),
                1 => ::std::option::Option::Some(RoutingMethod::DISCARD),
                2 => ::std::option::Option::Some(RoutingMethod::CLIENT_STEAMID),
                3 => ::std::option::Option::Some(RoutingMethod::PROTOBUF_FIELD_UINT64),
                4 => ::std::option::Option::Some(RoutingMethod::WEBAPI_PARAM),
                5 => ::std::option::Option::Some(RoutingMethod::WEBAPI_PARAM_STEAMID_ACCOUNTID),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<RoutingMethod> {
            match str {
                "RANDOM" => ::std::option::Option::Some(RoutingMethod::RANDOM),
                "DISCARD" => ::std::option::Option::Some(RoutingMethod::DISCARD),
                "CLIENT_STEAMID" => ::std::option::Option::Some(RoutingMethod::CLIENT_STEAMID),
                "PROTOBUF_FIELD_UINT64" => ::std::option::Option::Some(RoutingMethod::PROTOBUF_FIELD_UINT64),
                "WEBAPI_PARAM" => ::std::option::Option::Some(RoutingMethod::WEBAPI_PARAM),
                "WEBAPI_PARAM_STEAMID_ACCOUNTID" => ::std::option::Option::Some(RoutingMethod::WEBAPI_PARAM_STEAMID_ACCOUNTID),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [RoutingMethod] = &[
            RoutingMethod::RANDOM,
            RoutingMethod::DISCARD,
            RoutingMethod::CLIENT_STEAMID,
            RoutingMethod::PROTOBUF_FIELD_UINT64,
            RoutingMethod::WEBAPI_PARAM,
            RoutingMethod::WEBAPI_PARAM_STEAMID_ACCOUNTID,
        ];
    }

    impl ::protobuf::EnumFull for RoutingMethod {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgGCRoutingInfo.RoutingMethod").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for RoutingMethod {
        fn default() -> Self {
            RoutingMethod::RANDOM
        }
    }

    impl RoutingMethod {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<RoutingMethod>("CMsgGCRoutingInfo.RoutingMethod")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgGCMsgMasterSetWebAPIRouting)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetWebAPIRouting {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetWebAPIRouting.entries)
    pub entries: ::std::vec::Vec<cmsg_gcmsg_master_set_web_apirouting::Entry>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCMsgMasterSetWebAPIRouting.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetWebAPIRouting {
    fn default() -> &'a CMsgGCMsgMasterSetWebAPIRouting {
        <CMsgGCMsgMasterSetWebAPIRouting as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetWebAPIRouting {
    pub fn new() -> CMsgGCMsgMasterSetWebAPIRouting {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &CMsgGCMsgMasterSetWebAPIRouting| { &m.entries },
            |m: &mut CMsgGCMsgMasterSetWebAPIRouting| { &mut m.entries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCMsgMasterSetWebAPIRouting>(
            "CMsgGCMsgMasterSetWebAPIRouting",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCMsgMasterSetWebAPIRouting {
    const NAME: &'static str = "CMsgGCMsgMasterSetWebAPIRouting";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetWebAPIRouting {
        CMsgGCMsgMasterSetWebAPIRouting::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetWebAPIRouting {
        static instance: CMsgGCMsgMasterSetWebAPIRouting = CMsgGCMsgMasterSetWebAPIRouting {
            entries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCMsgMasterSetWebAPIRouting {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCMsgMasterSetWebAPIRouting").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCMsgMasterSetWebAPIRouting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCMsgMasterSetWebAPIRouting {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGCMsgMasterSetWebAPIRouting`
pub mod cmsg_gcmsg_master_set_web_apirouting {
    // @@protoc_insertion_point(message:dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Entry {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
        pub interface_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
        pub method_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
        pub routing: ::protobuf::MessageField<super::CMsgGCRoutingInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Entry {
        fn default() -> &'a Entry {
            <Entry as ::protobuf::Message>::default_instance()
        }
    }

    impl Entry {
        pub fn new() -> Entry {
            ::std::default::Default::default()
        }

        // optional string interface_name = 1;

        pub fn interface_name(&self) -> &str {
            match self.interface_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_interface_name(&mut self) {
            self.interface_name = ::std::option::Option::None;
        }

        pub fn has_interface_name(&self) -> bool {
            self.interface_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_interface_name(&mut self, v: ::std::string::String) {
            self.interface_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_interface_name(&mut self) -> &mut ::std::string::String {
            if self.interface_name.is_none() {
                self.interface_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.interface_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_interface_name(&mut self) -> ::std::string::String {
            self.interface_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string method_name = 2;

        pub fn method_name(&self) -> &str {
            match self.method_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_method_name(&mut self) {
            self.method_name = ::std::option::Option::None;
        }

        pub fn has_method_name(&self) -> bool {
            self.method_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_method_name(&mut self, v: ::std::string::String) {
            self.method_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_method_name(&mut self) -> &mut ::std::string::String {
            if self.method_name.is_none() {
                self.method_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.method_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_method_name(&mut self) -> ::std::string::String {
            self.method_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "interface_name",
                |m: &Entry| { &m.interface_name },
                |m: &mut Entry| { &mut m.interface_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "method_name",
                |m: &Entry| { &m.method_name },
                |m: &mut Entry| { &mut m.method_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CMsgGCRoutingInfo>(
                "routing",
                |m: &Entry| { &m.routing },
                |m: &mut Entry| { &mut m.routing },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Entry>(
                "CMsgGCMsgMasterSetWebAPIRouting.Entry",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Entry {
        const NAME: &'static str = "Entry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.interface_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.method_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.routing)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.interface_name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.method_name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.routing.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.interface_name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.method_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.routing.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Entry {
            Entry::new()
        }

        fn clear(&mut self) {
            self.interface_name = ::std::option::Option::None;
            self.method_name = ::std::option::Option::None;
            self.routing.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Entry {
            static instance: Entry = Entry {
                interface_name: ::std::option::Option::None,
                method_name: ::std::option::Option::None,
                routing: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Entry {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGCMsgMasterSetWebAPIRouting.Entry").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Entry {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Entry {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgGCMsgMasterSetClientMsgRouting)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetClientMsgRouting {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetClientMsgRouting.entries)
    pub entries: ::std::vec::Vec<cmsg_gcmsg_master_set_client_msg_routing::Entry>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCMsgMasterSetClientMsgRouting.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetClientMsgRouting {
    fn default() -> &'a CMsgGCMsgMasterSetClientMsgRouting {
        <CMsgGCMsgMasterSetClientMsgRouting as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetClientMsgRouting {
    pub fn new() -> CMsgGCMsgMasterSetClientMsgRouting {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &CMsgGCMsgMasterSetClientMsgRouting| { &m.entries },
            |m: &mut CMsgGCMsgMasterSetClientMsgRouting| { &mut m.entries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCMsgMasterSetClientMsgRouting>(
            "CMsgGCMsgMasterSetClientMsgRouting",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCMsgMasterSetClientMsgRouting {
    const NAME: &'static str = "CMsgGCMsgMasterSetClientMsgRouting";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetClientMsgRouting {
        CMsgGCMsgMasterSetClientMsgRouting::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetClientMsgRouting {
        static instance: CMsgGCMsgMasterSetClientMsgRouting = CMsgGCMsgMasterSetClientMsgRouting {
            entries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCMsgMasterSetClientMsgRouting {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCMsgMasterSetClientMsgRouting").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCMsgMasterSetClientMsgRouting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCMsgMasterSetClientMsgRouting {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGCMsgMasterSetClientMsgRouting`
pub mod cmsg_gcmsg_master_set_client_msg_routing {
    // @@protoc_insertion_point(message:dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Entry {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetClientMsgRouting.Entry.msg_type)
        pub msg_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
        pub routing: ::protobuf::MessageField<super::CMsgGCRoutingInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgGCMsgMasterSetClientMsgRouting.Entry.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Entry {
        fn default() -> &'a Entry {
            <Entry as ::protobuf::Message>::default_instance()
        }
    }

    impl Entry {
        pub fn new() -> Entry {
            ::std::default::Default::default()
        }

        // optional uint32 msg_type = 1;

        pub fn msg_type(&self) -> u32 {
            self.msg_type.unwrap_or(0)
        }

        pub fn clear_msg_type(&mut self) {
            self.msg_type = ::std::option::Option::None;
        }

        pub fn has_msg_type(&self) -> bool {
            self.msg_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_msg_type(&mut self, v: u32) {
            self.msg_type = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "msg_type",
                |m: &Entry| { &m.msg_type },
                |m: &mut Entry| { &mut m.msg_type },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CMsgGCRoutingInfo>(
                "routing",
                |m: &Entry| { &m.routing },
                |m: &mut Entry| { &mut m.routing },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Entry>(
                "CMsgGCMsgMasterSetClientMsgRouting.Entry",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Entry {
        const NAME: &'static str = "Entry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.msg_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.routing)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.msg_type {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.routing.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.msg_type {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.routing.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Entry {
            Entry::new()
        }

        fn clear(&mut self) {
            self.msg_type = ::std::option::Option::None;
            self.routing.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Entry {
            static instance: Entry = Entry {
                msg_type: ::std::option::Option::None,
                routing: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Entry {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGCMsgMasterSetClientMsgRouting.Entry").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Entry {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Entry {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetWebAPIRouting_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetWebAPIRouting_Response.eresult)
    pub eresult: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCMsgMasterSetWebAPIRouting_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetWebAPIRouting_Response {
    fn default() -> &'a CMsgGCMsgMasterSetWebAPIRouting_Response {
        <CMsgGCMsgMasterSetWebAPIRouting_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetWebAPIRouting_Response {
    pub fn new() -> CMsgGCMsgMasterSetWebAPIRouting_Response {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgGCMsgMasterSetWebAPIRouting_Response| { &m.eresult },
            |m: &mut CMsgGCMsgMasterSetWebAPIRouting_Response| { &mut m.eresult },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCMsgMasterSetWebAPIRouting_Response>(
            "CMsgGCMsgMasterSetWebAPIRouting_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCMsgMasterSetWebAPIRouting_Response {
    const NAME: &'static str = "CMsgGCMsgMasterSetWebAPIRouting_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetWebAPIRouting_Response {
        CMsgGCMsgMasterSetWebAPIRouting_Response::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetWebAPIRouting_Response {
        static instance: CMsgGCMsgMasterSetWebAPIRouting_Response = CMsgGCMsgMasterSetWebAPIRouting_Response {
            eresult: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCMsgMasterSetWebAPIRouting_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCMsgMasterSetWebAPIRouting_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCMsgMasterSetWebAPIRouting_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCMsgMasterSetWebAPIRouting_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgMasterSetClientMsgRouting_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCMsgMasterSetClientMsgRouting_Response.eresult)
    pub eresult: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCMsgMasterSetClientMsgRouting_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgMasterSetClientMsgRouting_Response {
    fn default() -> &'a CMsgGCMsgMasterSetClientMsgRouting_Response {
        <CMsgGCMsgMasterSetClientMsgRouting_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgMasterSetClientMsgRouting_Response {
    pub fn new() -> CMsgGCMsgMasterSetClientMsgRouting_Response {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgGCMsgMasterSetClientMsgRouting_Response| { &m.eresult },
            |m: &mut CMsgGCMsgMasterSetClientMsgRouting_Response| { &mut m.eresult },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCMsgMasterSetClientMsgRouting_Response>(
            "CMsgGCMsgMasterSetClientMsgRouting_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCMsgMasterSetClientMsgRouting_Response {
    const NAME: &'static str = "CMsgGCMsgMasterSetClientMsgRouting_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgMasterSetClientMsgRouting_Response {
        CMsgGCMsgMasterSetClientMsgRouting_Response::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgMasterSetClientMsgRouting_Response {
        static instance: CMsgGCMsgMasterSetClientMsgRouting_Response = CMsgGCMsgMasterSetClientMsgRouting_Response {
            eresult: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCMsgMasterSetClientMsgRouting_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCMsgMasterSetClientMsgRouting_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCMsgMasterSetClientMsgRouting_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCMsgMasterSetClientMsgRouting_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCMsgSetOptions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCMsgSetOptions {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCMsgSetOptions.options)
    pub options: ::std::vec::Vec<::protobuf::EnumOrUnknown<cmsg_gcmsg_set_options::Option>>,
    // @@protoc_insertion_point(field:dota.CMsgGCMsgSetOptions.client_msg_ranges)
    pub client_msg_ranges: ::std::vec::Vec<cmsg_gcmsg_set_options::MessageRange>,
    // @@protoc_insertion_point(field:dota.CMsgGCMsgSetOptions.gcsql_version)
    pub gcsql_version: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_gcmsg_set_options::GCSQLVersion>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCMsgSetOptions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCMsgSetOptions {
    fn default() -> &'a CMsgGCMsgSetOptions {
        <CMsgGCMsgSetOptions as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCMsgSetOptions {
    pub fn new() -> CMsgGCMsgSetOptions {
        ::std::default::Default::default()
    }

    // optional .dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3;

    pub fn gcsql_version(&self) -> cmsg_gcmsg_set_options::GCSQLVersion {
        match self.gcsql_version {
            Some(e) => e.enum_value_or(cmsg_gcmsg_set_options::GCSQLVersion::GCSQL_VERSION_BASELINE),
            None => cmsg_gcmsg_set_options::GCSQLVersion::GCSQL_VERSION_BASELINE,
        }
    }

    pub fn clear_gcsql_version(&mut self) {
        self.gcsql_version = ::std::option::Option::None;
    }

    pub fn has_gcsql_version(&self) -> bool {
        self.gcsql_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gcsql_version(&mut self, v: cmsg_gcmsg_set_options::GCSQLVersion) {
        self.gcsql_version = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &CMsgGCMsgSetOptions| { &m.options },
            |m: &mut CMsgGCMsgSetOptions| { &mut m.options },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "client_msg_ranges",
            |m: &CMsgGCMsgSetOptions| { &m.client_msg_ranges },
            |m: &mut CMsgGCMsgSetOptions| { &mut m.client_msg_ranges },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gcsql_version",
            |m: &CMsgGCMsgSetOptions| { &m.gcsql_version },
            |m: &mut CMsgGCMsgSetOptions| { &mut m.gcsql_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCMsgSetOptions>(
            "CMsgGCMsgSetOptions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCMsgSetOptions {
    const NAME: &'static str = "CMsgGCMsgSetOptions";

    fn is_initialized(&self) -> bool {
        for v in &self.client_msg_ranges {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.options.push(is.read_enum_or_unknown()?);
                },
                10 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.options)?
                },
                18 => {
                    self.client_msg_ranges.push(is.read_message()?);
                },
                24 => {
                    self.gcsql_version = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.options {
            my_size += ::protobuf::rt::int32_size(1, value.value());
        };
        for value in &self.client_msg_ranges {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.gcsql_version {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.options {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(v))?;
        };
        for v in &self.client_msg_ranges {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.gcsql_version {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCMsgSetOptions {
        CMsgGCMsgSetOptions::new()
    }

    fn clear(&mut self) {
        self.options.clear();
        self.client_msg_ranges.clear();
        self.gcsql_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCMsgSetOptions {
        static instance: CMsgGCMsgSetOptions = CMsgGCMsgSetOptions {
            options: ::std::vec::Vec::new(),
            client_msg_ranges: ::std::vec::Vec::new(),
            gcsql_version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCMsgSetOptions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCMsgSetOptions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCMsgSetOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCMsgSetOptions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGCMsgSetOptions`
pub mod cmsg_gcmsg_set_options {
    // @@protoc_insertion_point(message:dota.CMsgGCMsgSetOptions.MessageRange)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MessageRange {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgGCMsgSetOptions.MessageRange.low)
        pub low: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgGCMsgSetOptions.MessageRange.high)
        pub high: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgGCMsgSetOptions.MessageRange.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MessageRange {
        fn default() -> &'a MessageRange {
            <MessageRange as ::protobuf::Message>::default_instance()
        }
    }

    impl MessageRange {
        pub fn new() -> MessageRange {
            ::std::default::Default::default()
        }

        // required uint32 low = 1;

        pub fn low(&self) -> u32 {
            self.low.unwrap_or(0)
        }

        pub fn clear_low(&mut self) {
            self.low = ::std::option::Option::None;
        }

        pub fn has_low(&self) -> bool {
            self.low.is_some()
        }

        // Param is passed by value, moved
        pub fn set_low(&mut self, v: u32) {
            self.low = ::std::option::Option::Some(v);
        }

        // required uint32 high = 2;

        pub fn high(&self) -> u32 {
            self.high.unwrap_or(0)
        }

        pub fn clear_high(&mut self) {
            self.high = ::std::option::Option::None;
        }

        pub fn has_high(&self) -> bool {
            self.high.is_some()
        }

        // Param is passed by value, moved
        pub fn set_high(&mut self, v: u32) {
            self.high = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "low",
                |m: &MessageRange| { &m.low },
                |m: &mut MessageRange| { &mut m.low },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "high",
                |m: &MessageRange| { &m.high },
                |m: &mut MessageRange| { &mut m.high },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageRange>(
                "CMsgGCMsgSetOptions.MessageRange",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for MessageRange {
        const NAME: &'static str = "MessageRange";

        fn is_initialized(&self) -> bool {
            if self.low.is_none() {
                return false;
            }
            if self.high.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.low = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.high = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.low {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.high {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.low {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.high {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MessageRange {
            MessageRange::new()
        }

        fn clear(&mut self) {
            self.low = ::std::option::Option::None;
            self.high = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MessageRange {
            static instance: MessageRange = MessageRange {
                low: ::std::option::Option::None,
                high: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for MessageRange {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGCMsgSetOptions.MessageRange").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for MessageRange {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for MessageRange {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgGCMsgSetOptions.Option)
    pub enum Option {
        // @@protoc_insertion_point(enum_value:dota.CMsgGCMsgSetOptions.Option.NOTIFY_USER_SESSIONS)
        NOTIFY_USER_SESSIONS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCMsgSetOptions.Option.NOTIFY_SERVER_SESSIONS)
        NOTIFY_SERVER_SESSIONS = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCMsgSetOptions.Option.NOTIFY_ACHIEVEMENTS)
        NOTIFY_ACHIEVEMENTS = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCMsgSetOptions.Option.NOTIFY_VAC_ACTION)
        NOTIFY_VAC_ACTION = 3,
    }

    impl ::protobuf::Enum for Option {
        const NAME: &'static str = "Option";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Option> {
            match value {
                0 => ::std::option::Option::Some(Option::NOTIFY_USER_SESSIONS),
                1 => ::std::option::Option::Some(Option::NOTIFY_SERVER_SESSIONS),
                2 => ::std::option::Option::Some(Option::NOTIFY_ACHIEVEMENTS),
                3 => ::std::option::Option::Some(Option::NOTIFY_VAC_ACTION),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Option> {
            match str {
                "NOTIFY_USER_SESSIONS" => ::std::option::Option::Some(Option::NOTIFY_USER_SESSIONS),
                "NOTIFY_SERVER_SESSIONS" => ::std::option::Option::Some(Option::NOTIFY_SERVER_SESSIONS),
                "NOTIFY_ACHIEVEMENTS" => ::std::option::Option::Some(Option::NOTIFY_ACHIEVEMENTS),
                "NOTIFY_VAC_ACTION" => ::std::option::Option::Some(Option::NOTIFY_VAC_ACTION),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Option] = &[
            Option::NOTIFY_USER_SESSIONS,
            Option::NOTIFY_SERVER_SESSIONS,
            Option::NOTIFY_ACHIEVEMENTS,
            Option::NOTIFY_VAC_ACTION,
        ];
    }

    impl ::protobuf::EnumFull for Option {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgGCMsgSetOptions.Option").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Option {
        fn default() -> Self {
            Option::NOTIFY_USER_SESSIONS
        }
    }

    impl Option {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Option>("CMsgGCMsgSetOptions.Option")
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgGCMsgSetOptions.GCSQLVersion)
    pub enum GCSQLVersion {
        // @@protoc_insertion_point(enum_value:dota.CMsgGCMsgSetOptions.GCSQLVersion.GCSQL_VERSION_BASELINE)
        GCSQL_VERSION_BASELINE = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCMsgSetOptions.GCSQLVersion.GCSQL_VERSION_BOOLTYPE)
        GCSQL_VERSION_BOOLTYPE = 2,
    }

    impl ::protobuf::Enum for GCSQLVersion {
        const NAME: &'static str = "GCSQLVersion";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<GCSQLVersion> {
            match value {
                1 => ::std::option::Option::Some(GCSQLVersion::GCSQL_VERSION_BASELINE),
                2 => ::std::option::Option::Some(GCSQLVersion::GCSQL_VERSION_BOOLTYPE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<GCSQLVersion> {
            match str {
                "GCSQL_VERSION_BASELINE" => ::std::option::Option::Some(GCSQLVersion::GCSQL_VERSION_BASELINE),
                "GCSQL_VERSION_BOOLTYPE" => ::std::option::Option::Some(GCSQLVersion::GCSQL_VERSION_BOOLTYPE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [GCSQLVersion] = &[
            GCSQLVersion::GCSQL_VERSION_BASELINE,
            GCSQLVersion::GCSQL_VERSION_BOOLTYPE,
        ];
    }

    impl ::protobuf::EnumFull for GCSQLVersion {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgGCMsgSetOptions.GCSQLVersion").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                GCSQLVersion::GCSQL_VERSION_BASELINE => 0,
                GCSQLVersion::GCSQL_VERSION_BOOLTYPE => 1,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for GCSQLVersion {
        fn default() -> Self {
            GCSQLVersion::GCSQL_VERSION_BASELINE
        }
    }

    impl GCSQLVersion {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<GCSQLVersion>("CMsgGCMsgSetOptions.GCSQLVersion")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgGCHUpdateSession)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHUpdateSession {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.online)
    pub online: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.server_steam_id)
    pub server_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.server_addr)
    pub server_addr: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.server_port)
    pub server_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.os_type)
    pub os_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.client_addr)
    pub client_addr: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.extra_fields)
    pub extra_fields: ::std::vec::Vec<cmsg_gchupdate_session::ExtraField>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCHUpdateSession.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHUpdateSession {
    fn default() -> &'a CMsgGCHUpdateSession {
        <CMsgGCHUpdateSession as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHUpdateSession {
    pub fn new() -> CMsgGCHUpdateSession {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 2;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional bool online = 3;

    pub fn online(&self) -> bool {
        self.online.unwrap_or(false)
    }

    pub fn clear_online(&mut self) {
        self.online = ::std::option::Option::None;
    }

    pub fn has_online(&self) -> bool {
        self.online.is_some()
    }

    // Param is passed by value, moved
    pub fn set_online(&mut self, v: bool) {
        self.online = ::std::option::Option::Some(v);
    }

    // optional fixed64 server_steam_id = 4;

    pub fn server_steam_id(&self) -> u64 {
        self.server_steam_id.unwrap_or(0)
    }

    pub fn clear_server_steam_id(&mut self) {
        self.server_steam_id = ::std::option::Option::None;
    }

    pub fn has_server_steam_id(&self) -> bool {
        self.server_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steam_id(&mut self, v: u64) {
        self.server_steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 server_addr = 5;

    pub fn server_addr(&self) -> u32 {
        self.server_addr.unwrap_or(0)
    }

    pub fn clear_server_addr(&mut self) {
        self.server_addr = ::std::option::Option::None;
    }

    pub fn has_server_addr(&self) -> bool {
        self.server_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_addr(&mut self, v: u32) {
        self.server_addr = ::std::option::Option::Some(v);
    }

    // optional uint32 server_port = 6;

    pub fn server_port(&self) -> u32 {
        self.server_port.unwrap_or(0)
    }

    pub fn clear_server_port(&mut self) {
        self.server_port = ::std::option::Option::None;
    }

    pub fn has_server_port(&self) -> bool {
        self.server_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_port(&mut self, v: u32) {
        self.server_port = ::std::option::Option::Some(v);
    }

    // optional uint32 os_type = 7;

    pub fn os_type(&self) -> u32 {
        self.os_type.unwrap_or(0)
    }

    pub fn clear_os_type(&mut self) {
        self.os_type = ::std::option::Option::None;
    }

    pub fn has_os_type(&self) -> bool {
        self.os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_type(&mut self, v: u32) {
        self.os_type = ::std::option::Option::Some(v);
    }

    // optional uint32 client_addr = 8;

    pub fn client_addr(&self) -> u32 {
        self.client_addr.unwrap_or(0)
    }

    pub fn clear_client_addr(&mut self) {
        self.client_addr = ::std::option::Option::None;
    }

    pub fn has_client_addr(&self) -> bool {
        self.client_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_addr(&mut self, v: u32) {
        self.client_addr = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgGCHUpdateSession| { &m.steam_id },
            |m: &mut CMsgGCHUpdateSession| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgGCHUpdateSession| { &m.app_id },
            |m: &mut CMsgGCHUpdateSession| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "online",
            |m: &CMsgGCHUpdateSession| { &m.online },
            |m: &mut CMsgGCHUpdateSession| { &mut m.online },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_steam_id",
            |m: &CMsgGCHUpdateSession| { &m.server_steam_id },
            |m: &mut CMsgGCHUpdateSession| { &mut m.server_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_addr",
            |m: &CMsgGCHUpdateSession| { &m.server_addr },
            |m: &mut CMsgGCHUpdateSession| { &mut m.server_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_port",
            |m: &CMsgGCHUpdateSession| { &m.server_port },
            |m: &mut CMsgGCHUpdateSession| { &mut m.server_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "os_type",
            |m: &CMsgGCHUpdateSession| { &m.os_type },
            |m: &mut CMsgGCHUpdateSession| { &mut m.os_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_addr",
            |m: &CMsgGCHUpdateSession| { &m.client_addr },
            |m: &mut CMsgGCHUpdateSession| { &mut m.client_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "extra_fields",
            |m: &CMsgGCHUpdateSession| { &m.extra_fields },
            |m: &mut CMsgGCHUpdateSession| { &mut m.extra_fields },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHUpdateSession>(
            "CMsgGCHUpdateSession",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHUpdateSession {
    const NAME: &'static str = "CMsgGCHUpdateSession";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.online = ::std::option::Option::Some(is.read_bool()?);
                },
                33 => {
                    self.server_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                40 => {
                    self.server_addr = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.server_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.os_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.client_addr = ::std::option::Option::Some(is.read_uint32()?);
                },
                74 => {
                    self.extra_fields.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.online {
            my_size += 1 + 1;
        }
        if let Some(v) = self.server_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.server_addr {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.server_port {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.os_type {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.client_addr {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        for value in &self.extra_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.online {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.server_steam_id {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.server_addr {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.server_port {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.os_type {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.client_addr {
            os.write_uint32(8, v)?;
        }
        for v in &self.extra_fields {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHUpdateSession {
        CMsgGCHUpdateSession::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.online = ::std::option::Option::None;
        self.server_steam_id = ::std::option::Option::None;
        self.server_addr = ::std::option::Option::None;
        self.server_port = ::std::option::Option::None;
        self.os_type = ::std::option::Option::None;
        self.client_addr = ::std::option::Option::None;
        self.extra_fields.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHUpdateSession {
        static instance: CMsgGCHUpdateSession = CMsgGCHUpdateSession {
            steam_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            online: ::std::option::Option::None,
            server_steam_id: ::std::option::Option::None,
            server_addr: ::std::option::Option::None,
            server_port: ::std::option::Option::None,
            os_type: ::std::option::Option::None,
            client_addr: ::std::option::Option::None,
            extra_fields: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHUpdateSession {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHUpdateSession").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHUpdateSession {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHUpdateSession {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGCHUpdateSession`
pub mod cmsg_gchupdate_session {
    // @@protoc_insertion_point(message:dota.CMsgGCHUpdateSession.ExtraField)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ExtraField {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.ExtraField.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgGCHUpdateSession.ExtraField.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgGCHUpdateSession.ExtraField.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ExtraField {
        fn default() -> &'a ExtraField {
            <ExtraField as ::protobuf::Message>::default_instance()
        }
    }

    impl ExtraField {
        pub fn new() -> ExtraField {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &ExtraField| { &m.name },
                |m: &mut ExtraField| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &ExtraField| { &m.value },
                |m: &mut ExtraField| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtraField>(
                "CMsgGCHUpdateSession.ExtraField",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ExtraField {
        const NAME: &'static str = "ExtraField";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ExtraField {
            ExtraField::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ExtraField {
            static instance: ExtraField = ExtraField {
                name: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ExtraField {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGCHUpdateSession.ExtraField").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ExtraField {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ExtraField {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgNotificationOfSuspiciousActivity)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgNotificationOfSuspiciousActivity {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgNotificationOfSuspiciousActivity.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgNotificationOfSuspiciousActivity.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgNotificationOfSuspiciousActivity.multiple_instances)
    pub multiple_instances: ::protobuf::MessageField<cmsg_notification_of_suspicious_activity::MultipleGameInstances>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgNotificationOfSuspiciousActivity.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgNotificationOfSuspiciousActivity {
    fn default() -> &'a CMsgNotificationOfSuspiciousActivity {
        <CMsgNotificationOfSuspiciousActivity as ::protobuf::Message>::default_instance()
    }
}

impl CMsgNotificationOfSuspiciousActivity {
    pub fn new() -> CMsgNotificationOfSuspiciousActivity {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgNotificationOfSuspiciousActivity| { &m.steamid },
            |m: &mut CMsgNotificationOfSuspiciousActivity| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgNotificationOfSuspiciousActivity| { &m.appid },
            |m: &mut CMsgNotificationOfSuspiciousActivity| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_notification_of_suspicious_activity::MultipleGameInstances>(
            "multiple_instances",
            |m: &CMsgNotificationOfSuspiciousActivity| { &m.multiple_instances },
            |m: &mut CMsgNotificationOfSuspiciousActivity| { &mut m.multiple_instances },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgNotificationOfSuspiciousActivity>(
            "CMsgNotificationOfSuspiciousActivity",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgNotificationOfSuspiciousActivity {
    const NAME: &'static str = "CMsgNotificationOfSuspiciousActivity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.multiple_instances)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.multiple_instances.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.multiple_instances.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgNotificationOfSuspiciousActivity {
        CMsgNotificationOfSuspiciousActivity::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.multiple_instances.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgNotificationOfSuspiciousActivity {
        static instance: CMsgNotificationOfSuspiciousActivity = CMsgNotificationOfSuspiciousActivity {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            multiple_instances: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgNotificationOfSuspiciousActivity {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgNotificationOfSuspiciousActivity").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgNotificationOfSuspiciousActivity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgNotificationOfSuspiciousActivity {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgNotificationOfSuspiciousActivity`
pub mod cmsg_notification_of_suspicious_activity {
    // @@protoc_insertion_point(message:dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MultipleGameInstances {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.app_instance_count)
        pub app_instance_count: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
        pub other_steamids: ::std::vec::Vec<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MultipleGameInstances {
        fn default() -> &'a MultipleGameInstances {
            <MultipleGameInstances as ::protobuf::Message>::default_instance()
        }
    }

    impl MultipleGameInstances {
        pub fn new() -> MultipleGameInstances {
            ::std::default::Default::default()
        }

        // optional uint32 app_instance_count = 1;

        pub fn app_instance_count(&self) -> u32 {
            self.app_instance_count.unwrap_or(0)
        }

        pub fn clear_app_instance_count(&mut self) {
            self.app_instance_count = ::std::option::Option::None;
        }

        pub fn has_app_instance_count(&self) -> bool {
            self.app_instance_count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_app_instance_count(&mut self, v: u32) {
            self.app_instance_count = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "app_instance_count",
                |m: &MultipleGameInstances| { &m.app_instance_count },
                |m: &mut MultipleGameInstances| { &mut m.app_instance_count },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "other_steamids",
                |m: &MultipleGameInstances| { &m.other_steamids },
                |m: &mut MultipleGameInstances| { &mut m.other_steamids },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MultipleGameInstances>(
                "CMsgNotificationOfSuspiciousActivity.MultipleGameInstances",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for MultipleGameInstances {
        const NAME: &'static str = "MultipleGameInstances";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.app_instance_count = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        is.read_repeated_packed_fixed64_into(&mut self.other_steamids)?;
                    },
                    17 => {
                        self.other_steamids.push(is.read_fixed64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.app_instance_count {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            my_size += 9 * self.other_steamids.len() as u64;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.app_instance_count {
                os.write_uint32(1, v)?;
            }
            for v in &self.other_steamids {
                os.write_fixed64(2, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MultipleGameInstances {
            MultipleGameInstances::new()
        }

        fn clear(&mut self) {
            self.app_instance_count = ::std::option::Option::None;
            self.other_steamids.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MultipleGameInstances {
            static instance: MultipleGameInstances = MultipleGameInstances {
                app_instance_count: ::std::option::Option::None,
                other_steamids: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for MultipleGameInstances {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgNotificationOfSuspiciousActivity.MultipleGameInstances").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for MultipleGameInstances {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for MultipleGameInstances {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDPPartnerMicroTxns)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDPPartnerMicroTxns {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.gc_name)
    pub gc_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.partner)
    pub partner: ::protobuf::MessageField<cmsg_dppartner_micro_txns::PartnerInfo>,
    // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.transactions)
    pub transactions: ::std::vec::Vec<cmsg_dppartner_micro_txns::PartnerMicroTxn>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDPPartnerMicroTxns.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDPPartnerMicroTxns {
    fn default() -> &'a CMsgDPPartnerMicroTxns {
        <CMsgDPPartnerMicroTxns as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDPPartnerMicroTxns {
    pub fn new() -> CMsgDPPartnerMicroTxns {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string gc_name = 2;

    pub fn gc_name(&self) -> &str {
        match self.gc_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gc_name(&mut self) {
        self.gc_name = ::std::option::Option::None;
    }

    pub fn has_gc_name(&self) -> bool {
        self.gc_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_name(&mut self, v: ::std::string::String) {
        self.gc_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gc_name(&mut self) -> &mut ::std::string::String {
        if self.gc_name.is_none() {
            self.gc_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gc_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_gc_name(&mut self) -> ::std::string::String {
        self.gc_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgDPPartnerMicroTxns| { &m.appid },
            |m: &mut CMsgDPPartnerMicroTxns| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gc_name",
            |m: &CMsgDPPartnerMicroTxns| { &m.gc_name },
            |m: &mut CMsgDPPartnerMicroTxns| { &mut m.gc_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_dppartner_micro_txns::PartnerInfo>(
            "partner",
            |m: &CMsgDPPartnerMicroTxns| { &m.partner },
            |m: &mut CMsgDPPartnerMicroTxns| { &mut m.partner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "transactions",
            |m: &CMsgDPPartnerMicroTxns| { &m.transactions },
            |m: &mut CMsgDPPartnerMicroTxns| { &mut m.transactions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDPPartnerMicroTxns>(
            "CMsgDPPartnerMicroTxns",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDPPartnerMicroTxns {
    const NAME: &'static str = "CMsgDPPartnerMicroTxns";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.gc_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.partner)?;
                },
                34 => {
                    self.transactions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gc_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.partner.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gc_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.partner.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.transactions {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDPPartnerMicroTxns {
        CMsgDPPartnerMicroTxns::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gc_name = ::std::option::Option::None;
        self.partner.clear();
        self.transactions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDPPartnerMicroTxns {
        static instance: CMsgDPPartnerMicroTxns = CMsgDPPartnerMicroTxns {
            appid: ::std::option::Option::None,
            gc_name: ::std::option::Option::None,
            partner: ::protobuf::MessageField::none(),
            transactions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDPPartnerMicroTxns {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDPPartnerMicroTxns").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDPPartnerMicroTxns {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDPPartnerMicroTxns {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDPPartnerMicroTxns`
pub mod cmsg_dppartner_micro_txns {
    // @@protoc_insertion_point(message:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PartnerMicroTxn {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.init_time)
        pub init_time: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.last_update_time)
        pub last_update_time: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.txn_id)
        pub txn_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.line_item)
        pub line_item: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.item_id)
        pub item_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.def_index)
        pub def_index: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.price)
        pub price: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax)
        pub tax: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.price_usd)
        pub price_usd: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax_usd)
        pub tax_usd: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.purchase_type)
        pub purchase_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.steam_txn_type)
        pub steam_txn_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
        pub country_code: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
        pub region_code: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.quantity)
        pub quantity: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.ref_trans_id)
        pub ref_trans_id: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PartnerMicroTxn {
        fn default() -> &'a PartnerMicroTxn {
            <PartnerMicroTxn as ::protobuf::Message>::default_instance()
        }
    }

    impl PartnerMicroTxn {
        pub fn new() -> PartnerMicroTxn {
            ::std::default::Default::default()
        }

        // optional uint32 init_time = 1;

        pub fn init_time(&self) -> u32 {
            self.init_time.unwrap_or(0)
        }

        pub fn clear_init_time(&mut self) {
            self.init_time = ::std::option::Option::None;
        }

        pub fn has_init_time(&self) -> bool {
            self.init_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_init_time(&mut self, v: u32) {
            self.init_time = ::std::option::Option::Some(v);
        }

        // optional uint32 last_update_time = 2;

        pub fn last_update_time(&self) -> u32 {
            self.last_update_time.unwrap_or(0)
        }

        pub fn clear_last_update_time(&mut self) {
            self.last_update_time = ::std::option::Option::None;
        }

        pub fn has_last_update_time(&self) -> bool {
            self.last_update_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_update_time(&mut self, v: u32) {
            self.last_update_time = ::std::option::Option::Some(v);
        }

        // optional uint64 txn_id = 3;

        pub fn txn_id(&self) -> u64 {
            self.txn_id.unwrap_or(0)
        }

        pub fn clear_txn_id(&mut self) {
            self.txn_id = ::std::option::Option::None;
        }

        pub fn has_txn_id(&self) -> bool {
            self.txn_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_txn_id(&mut self, v: u64) {
            self.txn_id = ::std::option::Option::Some(v);
        }

        // optional uint32 account_id = 4;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional uint32 line_item = 5;

        pub fn line_item(&self) -> u32 {
            self.line_item.unwrap_or(0)
        }

        pub fn clear_line_item(&mut self) {
            self.line_item = ::std::option::Option::None;
        }

        pub fn has_line_item(&self) -> bool {
            self.line_item.is_some()
        }

        // Param is passed by value, moved
        pub fn set_line_item(&mut self, v: u32) {
            self.line_item = ::std::option::Option::Some(v);
        }

        // optional uint64 item_id = 6;

        pub fn item_id(&self) -> u64 {
            self.item_id.unwrap_or(0)
        }

        pub fn clear_item_id(&mut self) {
            self.item_id = ::std::option::Option::None;
        }

        pub fn has_item_id(&self) -> bool {
            self.item_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_item_id(&mut self, v: u64) {
            self.item_id = ::std::option::Option::Some(v);
        }

        // optional uint32 def_index = 7;

        pub fn def_index(&self) -> u32 {
            self.def_index.unwrap_or(0)
        }

        pub fn clear_def_index(&mut self) {
            self.def_index = ::std::option::Option::None;
        }

        pub fn has_def_index(&self) -> bool {
            self.def_index.is_some()
        }

        // Param is passed by value, moved
        pub fn set_def_index(&mut self, v: u32) {
            self.def_index = ::std::option::Option::Some(v);
        }

        // optional uint64 price = 8;

        pub fn price(&self) -> u64 {
            self.price.unwrap_or(0)
        }

        pub fn clear_price(&mut self) {
            self.price = ::std::option::Option::None;
        }

        pub fn has_price(&self) -> bool {
            self.price.is_some()
        }

        // Param is passed by value, moved
        pub fn set_price(&mut self, v: u64) {
            self.price = ::std::option::Option::Some(v);
        }

        // optional uint64 tax = 9;

        pub fn tax(&self) -> u64 {
            self.tax.unwrap_or(0)
        }

        pub fn clear_tax(&mut self) {
            self.tax = ::std::option::Option::None;
        }

        pub fn has_tax(&self) -> bool {
            self.tax.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tax(&mut self, v: u64) {
            self.tax = ::std::option::Option::Some(v);
        }

        // optional uint64 price_usd = 10;

        pub fn price_usd(&self) -> u64 {
            self.price_usd.unwrap_or(0)
        }

        pub fn clear_price_usd(&mut self) {
            self.price_usd = ::std::option::Option::None;
        }

        pub fn has_price_usd(&self) -> bool {
            self.price_usd.is_some()
        }

        // Param is passed by value, moved
        pub fn set_price_usd(&mut self, v: u64) {
            self.price_usd = ::std::option::Option::Some(v);
        }

        // optional uint64 tax_usd = 11;

        pub fn tax_usd(&self) -> u64 {
            self.tax_usd.unwrap_or(0)
        }

        pub fn clear_tax_usd(&mut self) {
            self.tax_usd = ::std::option::Option::None;
        }

        pub fn has_tax_usd(&self) -> bool {
            self.tax_usd.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tax_usd(&mut self, v: u64) {
            self.tax_usd = ::std::option::Option::Some(v);
        }

        // optional uint32 purchase_type = 12;

        pub fn purchase_type(&self) -> u32 {
            self.purchase_type.unwrap_or(0)
        }

        pub fn clear_purchase_type(&mut self) {
            self.purchase_type = ::std::option::Option::None;
        }

        pub fn has_purchase_type(&self) -> bool {
            self.purchase_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_purchase_type(&mut self, v: u32) {
            self.purchase_type = ::std::option::Option::Some(v);
        }

        // optional uint32 steam_txn_type = 13;

        pub fn steam_txn_type(&self) -> u32 {
            self.steam_txn_type.unwrap_or(0)
        }

        pub fn clear_steam_txn_type(&mut self) {
            self.steam_txn_type = ::std::option::Option::None;
        }

        pub fn has_steam_txn_type(&self) -> bool {
            self.steam_txn_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steam_txn_type(&mut self, v: u32) {
            self.steam_txn_type = ::std::option::Option::Some(v);
        }

        // optional string country_code = 14;

        pub fn country_code(&self) -> &str {
            match self.country_code.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_country_code(&mut self) {
            self.country_code = ::std::option::Option::None;
        }

        pub fn has_country_code(&self) -> bool {
            self.country_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_country_code(&mut self, v: ::std::string::String) {
            self.country_code = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
            if self.country_code.is_none() {
                self.country_code = ::std::option::Option::Some(::std::string::String::new());
            }
            self.country_code.as_mut().unwrap()
        }

        // Take field
        pub fn take_country_code(&mut self) -> ::std::string::String {
            self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string region_code = 15;

        pub fn region_code(&self) -> &str {
            match self.region_code.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_region_code(&mut self) {
            self.region_code = ::std::option::Option::None;
        }

        pub fn has_region_code(&self) -> bool {
            self.region_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_region_code(&mut self, v: ::std::string::String) {
            self.region_code = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_region_code(&mut self) -> &mut ::std::string::String {
            if self.region_code.is_none() {
                self.region_code = ::std::option::Option::Some(::std::string::String::new());
            }
            self.region_code.as_mut().unwrap()
        }

        // Take field
        pub fn take_region_code(&mut self) -> ::std::string::String {
            self.region_code.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 quantity = 16;

        pub fn quantity(&self) -> i32 {
            self.quantity.unwrap_or(0)
        }

        pub fn clear_quantity(&mut self) {
            self.quantity = ::std::option::Option::None;
        }

        pub fn has_quantity(&self) -> bool {
            self.quantity.is_some()
        }

        // Param is passed by value, moved
        pub fn set_quantity(&mut self, v: i32) {
            self.quantity = ::std::option::Option::Some(v);
        }

        // optional uint64 ref_trans_id = 17;

        pub fn ref_trans_id(&self) -> u64 {
            self.ref_trans_id.unwrap_or(0)
        }

        pub fn clear_ref_trans_id(&mut self) {
            self.ref_trans_id = ::std::option::Option::None;
        }

        pub fn has_ref_trans_id(&self) -> bool {
            self.ref_trans_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ref_trans_id(&mut self, v: u64) {
            self.ref_trans_id = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(17);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "init_time",
                |m: &PartnerMicroTxn| { &m.init_time },
                |m: &mut PartnerMicroTxn| { &mut m.init_time },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_update_time",
                |m: &PartnerMicroTxn| { &m.last_update_time },
                |m: &mut PartnerMicroTxn| { &mut m.last_update_time },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "txn_id",
                |m: &PartnerMicroTxn| { &m.txn_id },
                |m: &mut PartnerMicroTxn| { &mut m.txn_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account_id",
                |m: &PartnerMicroTxn| { &m.account_id },
                |m: &mut PartnerMicroTxn| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "line_item",
                |m: &PartnerMicroTxn| { &m.line_item },
                |m: &mut PartnerMicroTxn| { &mut m.line_item },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "item_id",
                |m: &PartnerMicroTxn| { &m.item_id },
                |m: &mut PartnerMicroTxn| { &mut m.item_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "def_index",
                |m: &PartnerMicroTxn| { &m.def_index },
                |m: &mut PartnerMicroTxn| { &mut m.def_index },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "price",
                |m: &PartnerMicroTxn| { &m.price },
                |m: &mut PartnerMicroTxn| { &mut m.price },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "tax",
                |m: &PartnerMicroTxn| { &m.tax },
                |m: &mut PartnerMicroTxn| { &mut m.tax },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "price_usd",
                |m: &PartnerMicroTxn| { &m.price_usd },
                |m: &mut PartnerMicroTxn| { &mut m.price_usd },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "tax_usd",
                |m: &PartnerMicroTxn| { &m.tax_usd },
                |m: &mut PartnerMicroTxn| { &mut m.tax_usd },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "purchase_type",
                |m: &PartnerMicroTxn| { &m.purchase_type },
                |m: &mut PartnerMicroTxn| { &mut m.purchase_type },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "steam_txn_type",
                |m: &PartnerMicroTxn| { &m.steam_txn_type },
                |m: &mut PartnerMicroTxn| { &mut m.steam_txn_type },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "country_code",
                |m: &PartnerMicroTxn| { &m.country_code },
                |m: &mut PartnerMicroTxn| { &mut m.country_code },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "region_code",
                |m: &PartnerMicroTxn| { &m.region_code },
                |m: &mut PartnerMicroTxn| { &mut m.region_code },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "quantity",
                |m: &PartnerMicroTxn| { &m.quantity },
                |m: &mut PartnerMicroTxn| { &mut m.quantity },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "ref_trans_id",
                |m: &PartnerMicroTxn| { &m.ref_trans_id },
                |m: &mut PartnerMicroTxn| { &mut m.ref_trans_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PartnerMicroTxn>(
                "CMsgDPPartnerMicroTxns.PartnerMicroTxn",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PartnerMicroTxn {
        const NAME: &'static str = "PartnerMicroTxn";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.init_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.last_update_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.txn_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    32 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.line_item = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.item_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    56 => {
                        self.def_index = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    64 => {
                        self.price = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    72 => {
                        self.tax = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    80 => {
                        self.price_usd = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    88 => {
                        self.tax_usd = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    96 => {
                        self.purchase_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    104 => {
                        self.steam_txn_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    114 => {
                        self.country_code = ::std::option::Option::Some(is.read_string()?);
                    },
                    122 => {
                        self.region_code = ::std::option::Option::Some(is.read_string()?);
                    },
                    128 => {
                        self.quantity = ::std::option::Option::Some(is.read_int32()?);
                    },
                    136 => {
                        self.ref_trans_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.init_time {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.last_update_time {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.txn_id {
                my_size += ::protobuf::rt::uint64_size(3, v);
            }
            if let Some(v) = self.account_id {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.line_item {
                my_size += ::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.item_id {
                my_size += ::protobuf::rt::uint64_size(6, v);
            }
            if let Some(v) = self.def_index {
                my_size += ::protobuf::rt::uint32_size(7, v);
            }
            if let Some(v) = self.price {
                my_size += ::protobuf::rt::uint64_size(8, v);
            }
            if let Some(v) = self.tax {
                my_size += ::protobuf::rt::uint64_size(9, v);
            }
            if let Some(v) = self.price_usd {
                my_size += ::protobuf::rt::uint64_size(10, v);
            }
            if let Some(v) = self.tax_usd {
                my_size += ::protobuf::rt::uint64_size(11, v);
            }
            if let Some(v) = self.purchase_type {
                my_size += ::protobuf::rt::uint32_size(12, v);
            }
            if let Some(v) = self.steam_txn_type {
                my_size += ::protobuf::rt::uint32_size(13, v);
            }
            if let Some(v) = self.country_code.as_ref() {
                my_size += ::protobuf::rt::string_size(14, &v);
            }
            if let Some(v) = self.region_code.as_ref() {
                my_size += ::protobuf::rt::string_size(15, &v);
            }
            if let Some(v) = self.quantity {
                my_size += ::protobuf::rt::int32_size(16, v);
            }
            if let Some(v) = self.ref_trans_id {
                my_size += ::protobuf::rt::uint64_size(17, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.init_time {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.last_update_time {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.txn_id {
                os.write_uint64(3, v)?;
            }
            if let Some(v) = self.account_id {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.line_item {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.item_id {
                os.write_uint64(6, v)?;
            }
            if let Some(v) = self.def_index {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.price {
                os.write_uint64(8, v)?;
            }
            if let Some(v) = self.tax {
                os.write_uint64(9, v)?;
            }
            if let Some(v) = self.price_usd {
                os.write_uint64(10, v)?;
            }
            if let Some(v) = self.tax_usd {
                os.write_uint64(11, v)?;
            }
            if let Some(v) = self.purchase_type {
                os.write_uint32(12, v)?;
            }
            if let Some(v) = self.steam_txn_type {
                os.write_uint32(13, v)?;
            }
            if let Some(v) = self.country_code.as_ref() {
                os.write_string(14, v)?;
            }
            if let Some(v) = self.region_code.as_ref() {
                os.write_string(15, v)?;
            }
            if let Some(v) = self.quantity {
                os.write_int32(16, v)?;
            }
            if let Some(v) = self.ref_trans_id {
                os.write_uint64(17, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PartnerMicroTxn {
            PartnerMicroTxn::new()
        }

        fn clear(&mut self) {
            self.init_time = ::std::option::Option::None;
            self.last_update_time = ::std::option::Option::None;
            self.txn_id = ::std::option::Option::None;
            self.account_id = ::std::option::Option::None;
            self.line_item = ::std::option::Option::None;
            self.item_id = ::std::option::Option::None;
            self.def_index = ::std::option::Option::None;
            self.price = ::std::option::Option::None;
            self.tax = ::std::option::Option::None;
            self.price_usd = ::std::option::Option::None;
            self.tax_usd = ::std::option::Option::None;
            self.purchase_type = ::std::option::Option::None;
            self.steam_txn_type = ::std::option::Option::None;
            self.country_code = ::std::option::Option::None;
            self.region_code = ::std::option::Option::None;
            self.quantity = ::std::option::Option::None;
            self.ref_trans_id = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PartnerMicroTxn {
            static instance: PartnerMicroTxn = PartnerMicroTxn {
                init_time: ::std::option::Option::None,
                last_update_time: ::std::option::Option::None,
                txn_id: ::std::option::Option::None,
                account_id: ::std::option::Option::None,
                line_item: ::std::option::Option::None,
                item_id: ::std::option::Option::None,
                def_index: ::std::option::Option::None,
                price: ::std::option::Option::None,
                tax: ::std::option::Option::None,
                price_usd: ::std::option::Option::None,
                tax_usd: ::std::option::Option::None,
                purchase_type: ::std::option::Option::None,
                steam_txn_type: ::std::option::Option::None,
                country_code: ::std::option::Option::None,
                region_code: ::std::option::Option::None,
                quantity: ::std::option::Option::None,
                ref_trans_id: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PartnerMicroTxn {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDPPartnerMicroTxns.PartnerMicroTxn").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PartnerMicroTxn {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PartnerMicroTxn {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDPPartnerMicroTxns.PartnerInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PartnerInfo {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_id)
        pub partner_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
        pub partner_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
        pub currency_code: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
        pub currency_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDPPartnerMicroTxns.PartnerInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PartnerInfo {
        fn default() -> &'a PartnerInfo {
            <PartnerInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl PartnerInfo {
        pub fn new() -> PartnerInfo {
            ::std::default::Default::default()
        }

        // optional uint32 partner_id = 1;

        pub fn partner_id(&self) -> u32 {
            self.partner_id.unwrap_or(0)
        }

        pub fn clear_partner_id(&mut self) {
            self.partner_id = ::std::option::Option::None;
        }

        pub fn has_partner_id(&self) -> bool {
            self.partner_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_partner_id(&mut self, v: u32) {
            self.partner_id = ::std::option::Option::Some(v);
        }

        // optional string partner_name = 2;

        pub fn partner_name(&self) -> &str {
            match self.partner_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_partner_name(&mut self) {
            self.partner_name = ::std::option::Option::None;
        }

        pub fn has_partner_name(&self) -> bool {
            self.partner_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_partner_name(&mut self, v: ::std::string::String) {
            self.partner_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_partner_name(&mut self) -> &mut ::std::string::String {
            if self.partner_name.is_none() {
                self.partner_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.partner_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_partner_name(&mut self) -> ::std::string::String {
            self.partner_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string currency_code = 3;

        pub fn currency_code(&self) -> &str {
            match self.currency_code.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_currency_code(&mut self) {
            self.currency_code = ::std::option::Option::None;
        }

        pub fn has_currency_code(&self) -> bool {
            self.currency_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_currency_code(&mut self, v: ::std::string::String) {
            self.currency_code = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_currency_code(&mut self) -> &mut ::std::string::String {
            if self.currency_code.is_none() {
                self.currency_code = ::std::option::Option::Some(::std::string::String::new());
            }
            self.currency_code.as_mut().unwrap()
        }

        // Take field
        pub fn take_currency_code(&mut self) -> ::std::string::String {
            self.currency_code.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string currency_name = 4;

        pub fn currency_name(&self) -> &str {
            match self.currency_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_currency_name(&mut self) {
            self.currency_name = ::std::option::Option::None;
        }

        pub fn has_currency_name(&self) -> bool {
            self.currency_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_currency_name(&mut self, v: ::std::string::String) {
            self.currency_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_currency_name(&mut self) -> &mut ::std::string::String {
            if self.currency_name.is_none() {
                self.currency_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.currency_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_currency_name(&mut self) -> ::std::string::String {
            self.currency_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "partner_id",
                |m: &PartnerInfo| { &m.partner_id },
                |m: &mut PartnerInfo| { &mut m.partner_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "partner_name",
                |m: &PartnerInfo| { &m.partner_name },
                |m: &mut PartnerInfo| { &mut m.partner_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "currency_code",
                |m: &PartnerInfo| { &m.currency_code },
                |m: &mut PartnerInfo| { &mut m.currency_code },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "currency_name",
                |m: &PartnerInfo| { &m.currency_name },
                |m: &mut PartnerInfo| { &mut m.currency_name },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PartnerInfo>(
                "CMsgDPPartnerMicroTxns.PartnerInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PartnerInfo {
        const NAME: &'static str = "PartnerInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.partner_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.partner_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.currency_code = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.currency_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.partner_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.partner_name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.currency_code.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.currency_name.as_ref() {
                my_size += ::protobuf::rt::string_size(4, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.partner_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.partner_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.currency_code.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.currency_name.as_ref() {
                os.write_string(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PartnerInfo {
            PartnerInfo::new()
        }

        fn clear(&mut self) {
            self.partner_id = ::std::option::Option::None;
            self.partner_name = ::std::option::Option::None;
            self.currency_code = ::std::option::Option::None;
            self.currency_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PartnerInfo {
            static instance: PartnerInfo = PartnerInfo {
                partner_id: ::std::option::Option::None,
                partner_name: ::std::option::Option::None,
                currency_code: ::std::option::Option::None,
                currency_name: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PartnerInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDPPartnerMicroTxns.PartnerInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PartnerInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PartnerInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDPPartnerMicroTxnsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDPPartnerMicroTxnsResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxnsResponse.eresult)
    pub eresult: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDPPartnerMicroTxnsResponse.eerrorcode)
    pub eerrorcode: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_dppartner_micro_txns_response::EErrorCode>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDPPartnerMicroTxnsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDPPartnerMicroTxnsResponse {
    fn default() -> &'a CMsgDPPartnerMicroTxnsResponse {
        <CMsgDPPartnerMicroTxnsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDPPartnerMicroTxnsResponse {
    pub fn new() -> CMsgDPPartnerMicroTxnsResponse {
        ::std::default::Default::default()
    }

    // optional uint32 eresult = 1;

    pub fn eresult(&self) -> u32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: u32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional .dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2;

    pub fn eerrorcode(&self) -> cmsg_dppartner_micro_txns_response::EErrorCode {
        match self.eerrorcode {
            Some(e) => e.enum_value_or(cmsg_dppartner_micro_txns_response::EErrorCode::k_MsgValid),
            None => cmsg_dppartner_micro_txns_response::EErrorCode::k_MsgValid,
        }
    }

    pub fn clear_eerrorcode(&mut self) {
        self.eerrorcode = ::std::option::Option::None;
    }

    pub fn has_eerrorcode(&self) -> bool {
        self.eerrorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eerrorcode(&mut self, v: cmsg_dppartner_micro_txns_response::EErrorCode) {
        self.eerrorcode = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgDPPartnerMicroTxnsResponse| { &m.eresult },
            |m: &mut CMsgDPPartnerMicroTxnsResponse| { &mut m.eresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eerrorcode",
            |m: &CMsgDPPartnerMicroTxnsResponse| { &m.eerrorcode },
            |m: &mut CMsgDPPartnerMicroTxnsResponse| { &mut m.eerrorcode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDPPartnerMicroTxnsResponse>(
            "CMsgDPPartnerMicroTxnsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDPPartnerMicroTxnsResponse {
    const NAME: &'static str = "CMsgDPPartnerMicroTxnsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.eerrorcode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.eerrorcode {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.eerrorcode {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDPPartnerMicroTxnsResponse {
        CMsgDPPartnerMicroTxnsResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.eerrorcode = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDPPartnerMicroTxnsResponse {
        static instance: CMsgDPPartnerMicroTxnsResponse = CMsgDPPartnerMicroTxnsResponse {
            eresult: ::std::option::Option::None,
            eerrorcode: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDPPartnerMicroTxnsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDPPartnerMicroTxnsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDPPartnerMicroTxnsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDPPartnerMicroTxnsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDPPartnerMicroTxnsResponse`
pub mod cmsg_dppartner_micro_txns_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode)
    pub enum EErrorCode {
        // @@protoc_insertion_point(enum_value:dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgValid)
        k_MsgValid = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgInvalidAppID)
        k_MsgInvalidAppID = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgInvalidPartnerInfo)
        k_MsgInvalidPartnerInfo = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgNoTransactions)
        k_MsgNoTransactions = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgSQLFailure)
        k_MsgSQLFailure = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgPartnerInfoDiscrepancy)
        k_MsgPartnerInfoDiscrepancy = 5,
        // @@protoc_insertion_point(enum_value:dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgTransactionInsertFailed)
        k_MsgTransactionInsertFailed = 7,
        // @@protoc_insertion_point(enum_value:dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgAlreadyRunning)
        k_MsgAlreadyRunning = 8,
        // @@protoc_insertion_point(enum_value:dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode.k_MsgInvalidTransactionData)
        k_MsgInvalidTransactionData = 9,
    }

    impl ::protobuf::Enum for EErrorCode {
        const NAME: &'static str = "EErrorCode";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EErrorCode> {
            match value {
                0 => ::std::option::Option::Some(EErrorCode::k_MsgValid),
                1 => ::std::option::Option::Some(EErrorCode::k_MsgInvalidAppID),
                2 => ::std::option::Option::Some(EErrorCode::k_MsgInvalidPartnerInfo),
                3 => ::std::option::Option::Some(EErrorCode::k_MsgNoTransactions),
                4 => ::std::option::Option::Some(EErrorCode::k_MsgSQLFailure),
                5 => ::std::option::Option::Some(EErrorCode::k_MsgPartnerInfoDiscrepancy),
                7 => ::std::option::Option::Some(EErrorCode::k_MsgTransactionInsertFailed),
                8 => ::std::option::Option::Some(EErrorCode::k_MsgAlreadyRunning),
                9 => ::std::option::Option::Some(EErrorCode::k_MsgInvalidTransactionData),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EErrorCode> {
            match str {
                "k_MsgValid" => ::std::option::Option::Some(EErrorCode::k_MsgValid),
                "k_MsgInvalidAppID" => ::std::option::Option::Some(EErrorCode::k_MsgInvalidAppID),
                "k_MsgInvalidPartnerInfo" => ::std::option::Option::Some(EErrorCode::k_MsgInvalidPartnerInfo),
                "k_MsgNoTransactions" => ::std::option::Option::Some(EErrorCode::k_MsgNoTransactions),
                "k_MsgSQLFailure" => ::std::option::Option::Some(EErrorCode::k_MsgSQLFailure),
                "k_MsgPartnerInfoDiscrepancy" => ::std::option::Option::Some(EErrorCode::k_MsgPartnerInfoDiscrepancy),
                "k_MsgTransactionInsertFailed" => ::std::option::Option::Some(EErrorCode::k_MsgTransactionInsertFailed),
                "k_MsgAlreadyRunning" => ::std::option::Option::Some(EErrorCode::k_MsgAlreadyRunning),
                "k_MsgInvalidTransactionData" => ::std::option::Option::Some(EErrorCode::k_MsgInvalidTransactionData),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EErrorCode] = &[
            EErrorCode::k_MsgValid,
            EErrorCode::k_MsgInvalidAppID,
            EErrorCode::k_MsgInvalidPartnerInfo,
            EErrorCode::k_MsgNoTransactions,
            EErrorCode::k_MsgSQLFailure,
            EErrorCode::k_MsgPartnerInfoDiscrepancy,
            EErrorCode::k_MsgTransactionInsertFailed,
            EErrorCode::k_MsgAlreadyRunning,
            EErrorCode::k_MsgInvalidTransactionData,
        ];
    }

    impl ::protobuf::EnumFull for EErrorCode {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgDPPartnerMicroTxnsResponse.EErrorCode").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                EErrorCode::k_MsgValid => 0,
                EErrorCode::k_MsgInvalidAppID => 1,
                EErrorCode::k_MsgInvalidPartnerInfo => 2,
                EErrorCode::k_MsgNoTransactions => 3,
                EErrorCode::k_MsgSQLFailure => 4,
                EErrorCode::k_MsgPartnerInfoDiscrepancy => 5,
                EErrorCode::k_MsgTransactionInsertFailed => 6,
                EErrorCode::k_MsgAlreadyRunning => 7,
                EErrorCode::k_MsgInvalidTransactionData => 8,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EErrorCode {
        fn default() -> Self {
            EErrorCode::k_MsgValid
        }
    }

    impl EErrorCode {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EErrorCode>("CMsgDPPartnerMicroTxnsResponse.EErrorCode")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgGCHVacVerificationChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHVacVerificationChange {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCHVacVerificationChange.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgGCHVacVerificationChange.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHVacVerificationChange.is_verified)
    pub is_verified: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCHVacVerificationChange.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHVacVerificationChange {
    fn default() -> &'a CMsgGCHVacVerificationChange {
        <CMsgGCHVacVerificationChange as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHVacVerificationChange {
    pub fn new() -> CMsgGCHVacVerificationChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool is_verified = 3;

    pub fn is_verified(&self) -> bool {
        self.is_verified.unwrap_or(false)
    }

    pub fn clear_is_verified(&mut self) {
        self.is_verified = ::std::option::Option::None;
    }

    pub fn has_is_verified(&self) -> bool {
        self.is_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_verified(&mut self, v: bool) {
        self.is_verified = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgGCHVacVerificationChange| { &m.steamid },
            |m: &mut CMsgGCHVacVerificationChange| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgGCHVacVerificationChange| { &m.appid },
            |m: &mut CMsgGCHVacVerificationChange| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_verified",
            |m: &CMsgGCHVacVerificationChange| { &m.is_verified },
            |m: &mut CMsgGCHVacVerificationChange| { &mut m.is_verified },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHVacVerificationChange>(
            "CMsgGCHVacVerificationChange",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHVacVerificationChange {
    const NAME: &'static str = "CMsgGCHVacVerificationChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.is_verified = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.is_verified {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.is_verified {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHVacVerificationChange {
        CMsgGCHVacVerificationChange::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.is_verified = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHVacVerificationChange {
        static instance: CMsgGCHVacVerificationChange = CMsgGCHVacVerificationChange {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            is_verified: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHVacVerificationChange {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHVacVerificationChange").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHVacVerificationChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHVacVerificationChange {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCHAccountTwoFactorChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAccountTwoFactorChange {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCHAccountTwoFactorChange.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgGCHAccountTwoFactorChange.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHAccountTwoFactorChange.twofactor_enabled)
    pub twofactor_enabled: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCHAccountTwoFactorChange.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAccountTwoFactorChange {
    fn default() -> &'a CMsgGCHAccountTwoFactorChange {
        <CMsgGCHAccountTwoFactorChange as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAccountTwoFactorChange {
    pub fn new() -> CMsgGCHAccountTwoFactorChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool twofactor_enabled = 3;

    pub fn twofactor_enabled(&self) -> bool {
        self.twofactor_enabled.unwrap_or(false)
    }

    pub fn clear_twofactor_enabled(&mut self) {
        self.twofactor_enabled = ::std::option::Option::None;
    }

    pub fn has_twofactor_enabled(&self) -> bool {
        self.twofactor_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_twofactor_enabled(&mut self, v: bool) {
        self.twofactor_enabled = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgGCHAccountTwoFactorChange| { &m.steamid },
            |m: &mut CMsgGCHAccountTwoFactorChange| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgGCHAccountTwoFactorChange| { &m.appid },
            |m: &mut CMsgGCHAccountTwoFactorChange| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "twofactor_enabled",
            |m: &CMsgGCHAccountTwoFactorChange| { &m.twofactor_enabled },
            |m: &mut CMsgGCHAccountTwoFactorChange| { &mut m.twofactor_enabled },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHAccountTwoFactorChange>(
            "CMsgGCHAccountTwoFactorChange",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHAccountTwoFactorChange {
    const NAME: &'static str = "CMsgGCHAccountTwoFactorChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.twofactor_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.twofactor_enabled {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.twofactor_enabled {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAccountTwoFactorChange {
        CMsgGCHAccountTwoFactorChange::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.twofactor_enabled = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAccountTwoFactorChange {
        static instance: CMsgGCHAccountTwoFactorChange = CMsgGCHAccountTwoFactorChange {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            twofactor_enabled: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHAccountTwoFactorChange {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHAccountTwoFactorChange").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHAccountTwoFactorChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHAccountTwoFactorChange {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCCheckClanMembership)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCCheckClanMembership {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCCheckClanMembership.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgGCCheckClanMembership.clanid)
    pub clanid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCCheckClanMembership.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCCheckClanMembership {
    fn default() -> &'a CMsgGCCheckClanMembership {
        <CMsgGCCheckClanMembership as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCCheckClanMembership {
    pub fn new() -> CMsgGCCheckClanMembership {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 clanid = 2;

    pub fn clanid(&self) -> u32 {
        self.clanid.unwrap_or(0)
    }

    pub fn clear_clanid(&mut self) {
        self.clanid = ::std::option::Option::None;
    }

    pub fn has_clanid(&self) -> bool {
        self.clanid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clanid(&mut self, v: u32) {
        self.clanid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgGCCheckClanMembership| { &m.steamid },
            |m: &mut CMsgGCCheckClanMembership| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "clanid",
            |m: &CMsgGCCheckClanMembership| { &m.clanid },
            |m: &mut CMsgGCCheckClanMembership| { &mut m.clanid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCCheckClanMembership>(
            "CMsgGCCheckClanMembership",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCCheckClanMembership {
    const NAME: &'static str = "CMsgGCCheckClanMembership";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.clanid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.clanid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.clanid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCCheckClanMembership {
        CMsgGCCheckClanMembership::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.clanid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCCheckClanMembership {
        static instance: CMsgGCCheckClanMembership = CMsgGCCheckClanMembership {
            steamid: ::std::option::Option::None,
            clanid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCCheckClanMembership {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCCheckClanMembership").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCCheckClanMembership {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCCheckClanMembership {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCCheckClanMembership_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCCheckClanMembership_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCCheckClanMembership_Response.ismember)
    pub ismember: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCCheckClanMembership_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCCheckClanMembership_Response {
    fn default() -> &'a CMsgGCCheckClanMembership_Response {
        <CMsgGCCheckClanMembership_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCCheckClanMembership_Response {
    pub fn new() -> CMsgGCCheckClanMembership_Response {
        ::std::default::Default::default()
    }

    // optional bool ismember = 1;

    pub fn ismember(&self) -> bool {
        self.ismember.unwrap_or(false)
    }

    pub fn clear_ismember(&mut self) {
        self.ismember = ::std::option::Option::None;
    }

    pub fn has_ismember(&self) -> bool {
        self.ismember.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ismember(&mut self, v: bool) {
        self.ismember = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ismember",
            |m: &CMsgGCCheckClanMembership_Response| { &m.ismember },
            |m: &mut CMsgGCCheckClanMembership_Response| { &mut m.ismember },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCCheckClanMembership_Response>(
            "CMsgGCCheckClanMembership_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCCheckClanMembership_Response {
    const NAME: &'static str = "CMsgGCCheckClanMembership_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ismember = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ismember {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ismember {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCCheckClanMembership_Response {
        CMsgGCCheckClanMembership_Response::new()
    }

    fn clear(&mut self) {
        self.ismember = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCCheckClanMembership_Response {
        static instance: CMsgGCCheckClanMembership_Response = CMsgGCCheckClanMembership_Response {
            ismember: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCCheckClanMembership_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCCheckClanMembership_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCCheckClanMembership_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCCheckClanMembership_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCHAppCheersReceived)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAppCheersReceived {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersReceived.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersReceived.cheer_targets)
    pub cheer_targets: ::std::vec::Vec<cmsg_gchapp_cheers_received::CheerTarget>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCHAppCheersReceived.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAppCheersReceived {
    fn default() -> &'a CMsgGCHAppCheersReceived {
        <CMsgGCHAppCheersReceived as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAppCheersReceived {
    pub fn new() -> CMsgGCHAppCheersReceived {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgGCHAppCheersReceived| { &m.appid },
            |m: &mut CMsgGCHAppCheersReceived| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "cheer_targets",
            |m: &CMsgGCHAppCheersReceived| { &m.cheer_targets },
            |m: &mut CMsgGCHAppCheersReceived| { &mut m.cheer_targets },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHAppCheersReceived>(
            "CMsgGCHAppCheersReceived",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHAppCheersReceived {
    const NAME: &'static str = "CMsgGCHAppCheersReceived";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.cheer_targets.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.cheer_targets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        for v in &self.cheer_targets {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAppCheersReceived {
        CMsgGCHAppCheersReceived::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.cheer_targets.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAppCheersReceived {
        static instance: CMsgGCHAppCheersReceived = CMsgGCHAppCheersReceived {
            appid: ::std::option::Option::None,
            cheer_targets: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHAppCheersReceived {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHAppCheersReceived").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHAppCheersReceived {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHAppCheersReceived {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGCHAppCheersReceived`
pub mod cmsg_gchapp_cheers_received {
    // @@protoc_insertion_point(message:dota.CMsgGCHAppCheersReceived.CheerTypeAmount)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CheerTypeAmount {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersReceived.CheerTypeAmount.cheer_type)
        pub cheer_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersReceived.CheerTypeAmount.cheer_amount)
        pub cheer_amount: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgGCHAppCheersReceived.CheerTypeAmount.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CheerTypeAmount {
        fn default() -> &'a CheerTypeAmount {
            <CheerTypeAmount as ::protobuf::Message>::default_instance()
        }
    }

    impl CheerTypeAmount {
        pub fn new() -> CheerTypeAmount {
            ::std::default::Default::default()
        }

        // optional uint32 cheer_type = 1;

        pub fn cheer_type(&self) -> u32 {
            self.cheer_type.unwrap_or(0)
        }

        pub fn clear_cheer_type(&mut self) {
            self.cheer_type = ::std::option::Option::None;
        }

        pub fn has_cheer_type(&self) -> bool {
            self.cheer_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cheer_type(&mut self, v: u32) {
            self.cheer_type = ::std::option::Option::Some(v);
        }

        // optional uint32 cheer_amount = 2;

        pub fn cheer_amount(&self) -> u32 {
            self.cheer_amount.unwrap_or(0)
        }

        pub fn clear_cheer_amount(&mut self) {
            self.cheer_amount = ::std::option::Option::None;
        }

        pub fn has_cheer_amount(&self) -> bool {
            self.cheer_amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cheer_amount(&mut self, v: u32) {
            self.cheer_amount = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "cheer_type",
                |m: &CheerTypeAmount| { &m.cheer_type },
                |m: &mut CheerTypeAmount| { &mut m.cheer_type },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "cheer_amount",
                |m: &CheerTypeAmount| { &m.cheer_amount },
                |m: &mut CheerTypeAmount| { &mut m.cheer_amount },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheerTypeAmount>(
                "CMsgGCHAppCheersReceived.CheerTypeAmount",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CheerTypeAmount {
        const NAME: &'static str = "CheerTypeAmount";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.cheer_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.cheer_amount = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.cheer_type {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.cheer_amount {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.cheer_type {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.cheer_amount {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CheerTypeAmount {
            CheerTypeAmount::new()
        }

        fn clear(&mut self) {
            self.cheer_type = ::std::option::Option::None;
            self.cheer_amount = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CheerTypeAmount {
            static instance: CheerTypeAmount = CheerTypeAmount {
                cheer_type: ::std::option::Option::None,
                cheer_amount: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CheerTypeAmount {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGCHAppCheersReceived.CheerTypeAmount").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CheerTypeAmount {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CheerTypeAmount {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgGCHAppCheersReceived.CheerTarget)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CheerTarget {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersReceived.CheerTarget.cheer_target)
        pub cheer_target: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersReceived.CheerTarget.cheer_types)
        pub cheer_types: ::std::vec::Vec<CheerTypeAmount>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgGCHAppCheersReceived.CheerTarget.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CheerTarget {
        fn default() -> &'a CheerTarget {
            <CheerTarget as ::protobuf::Message>::default_instance()
        }
    }

    impl CheerTarget {
        pub fn new() -> CheerTarget {
            ::std::default::Default::default()
        }

        // optional uint64 cheer_target = 1;

        pub fn cheer_target(&self) -> u64 {
            self.cheer_target.unwrap_or(0)
        }

        pub fn clear_cheer_target(&mut self) {
            self.cheer_target = ::std::option::Option::None;
        }

        pub fn has_cheer_target(&self) -> bool {
            self.cheer_target.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cheer_target(&mut self, v: u64) {
            self.cheer_target = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "cheer_target",
                |m: &CheerTarget| { &m.cheer_target },
                |m: &mut CheerTarget| { &mut m.cheer_target },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "cheer_types",
                |m: &CheerTarget| { &m.cheer_types },
                |m: &mut CheerTarget| { &mut m.cheer_types },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheerTarget>(
                "CMsgGCHAppCheersReceived.CheerTarget",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CheerTarget {
        const NAME: &'static str = "CheerTarget";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.cheer_target = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    18 => {
                        self.cheer_types.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.cheer_target {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            for value in &self.cheer_types {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.cheer_target {
                os.write_uint64(1, v)?;
            }
            for v in &self.cheer_types {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CheerTarget {
            CheerTarget::new()
        }

        fn clear(&mut self) {
            self.cheer_target = ::std::option::Option::None;
            self.cheer_types.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CheerTarget {
            static instance: CheerTarget = CheerTarget {
                cheer_target: ::std::option::Option::None,
                cheer_types: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CheerTarget {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGCHAppCheersReceived.CheerTarget").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CheerTarget {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CheerTarget {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgGCHAppCheersGetAllowedTypes)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAppCheersGetAllowedTypes {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersGetAllowedTypes.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersGetAllowedTypes.cheer_target)
    pub cheer_target: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCHAppCheersGetAllowedTypes.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAppCheersGetAllowedTypes {
    fn default() -> &'a CMsgGCHAppCheersGetAllowedTypes {
        <CMsgGCHAppCheersGetAllowedTypes as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAppCheersGetAllowedTypes {
    pub fn new() -> CMsgGCHAppCheersGetAllowedTypes {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 cheer_target = 2;

    pub fn cheer_target(&self) -> u64 {
        self.cheer_target.unwrap_or(0)
    }

    pub fn clear_cheer_target(&mut self) {
        self.cheer_target = ::std::option::Option::None;
    }

    pub fn has_cheer_target(&self) -> bool {
        self.cheer_target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cheer_target(&mut self, v: u64) {
        self.cheer_target = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgGCHAppCheersGetAllowedTypes| { &m.appid },
            |m: &mut CMsgGCHAppCheersGetAllowedTypes| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cheer_target",
            |m: &CMsgGCHAppCheersGetAllowedTypes| { &m.cheer_target },
            |m: &mut CMsgGCHAppCheersGetAllowedTypes| { &mut m.cheer_target },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHAppCheersGetAllowedTypes>(
            "CMsgGCHAppCheersGetAllowedTypes",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHAppCheersGetAllowedTypes {
    const NAME: &'static str = "CMsgGCHAppCheersGetAllowedTypes";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.cheer_target = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.cheer_target {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.cheer_target {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAppCheersGetAllowedTypes {
        CMsgGCHAppCheersGetAllowedTypes::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.cheer_target = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAppCheersGetAllowedTypes {
        static instance: CMsgGCHAppCheersGetAllowedTypes = CMsgGCHAppCheersGetAllowedTypes {
            appid: ::std::option::Option::None,
            cheer_target: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHAppCheersGetAllowedTypes {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHAppCheersGetAllowedTypes").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHAppCheersGetAllowedTypes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHAppCheersGetAllowedTypes {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCHAppCheersGetAllowedTypesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAppCheersGetAllowedTypesResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersGetAllowedTypesResponse.cheer_types_valid_all_users)
    pub cheer_types_valid_all_users: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersGetAllowedTypesResponse.cheer_remaps)
    pub cheer_remaps: ::std::vec::Vec<cmsg_gchapp_cheers_get_allowed_types_response::CheerRemaps>,
    // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersGetAllowedTypesResponse.cache_duration)
    pub cache_duration: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCHAppCheersGetAllowedTypesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAppCheersGetAllowedTypesResponse {
    fn default() -> &'a CMsgGCHAppCheersGetAllowedTypesResponse {
        <CMsgGCHAppCheersGetAllowedTypesResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAppCheersGetAllowedTypesResponse {
    pub fn new() -> CMsgGCHAppCheersGetAllowedTypesResponse {
        ::std::default::Default::default()
    }

    // optional uint32 cache_duration = 3;

    pub fn cache_duration(&self) -> u32 {
        self.cache_duration.unwrap_or(0)
    }

    pub fn clear_cache_duration(&mut self) {
        self.cache_duration = ::std::option::Option::None;
    }

    pub fn has_cache_duration(&self) -> bool {
        self.cache_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cache_duration(&mut self, v: u32) {
        self.cache_duration = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "cheer_types_valid_all_users",
            |m: &CMsgGCHAppCheersGetAllowedTypesResponse| { &m.cheer_types_valid_all_users },
            |m: &mut CMsgGCHAppCheersGetAllowedTypesResponse| { &mut m.cheer_types_valid_all_users },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "cheer_remaps",
            |m: &CMsgGCHAppCheersGetAllowedTypesResponse| { &m.cheer_remaps },
            |m: &mut CMsgGCHAppCheersGetAllowedTypesResponse| { &mut m.cheer_remaps },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cache_duration",
            |m: &CMsgGCHAppCheersGetAllowedTypesResponse| { &m.cache_duration },
            |m: &mut CMsgGCHAppCheersGetAllowedTypesResponse| { &mut m.cache_duration },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHAppCheersGetAllowedTypesResponse>(
            "CMsgGCHAppCheersGetAllowedTypesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHAppCheersGetAllowedTypesResponse {
    const NAME: &'static str = "CMsgGCHAppCheersGetAllowedTypesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.cheer_types_valid_all_users)?;
                },
                8 => {
                    self.cheer_types_valid_all_users.push(is.read_uint32()?);
                },
                18 => {
                    self.cheer_remaps.push(is.read_message()?);
                },
                24 => {
                    self.cache_duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.cheer_types_valid_all_users {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        for value in &self.cheer_remaps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.cache_duration {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.cheer_types_valid_all_users {
            os.write_uint32(1, *v)?;
        };
        for v in &self.cheer_remaps {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.cache_duration {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAppCheersGetAllowedTypesResponse {
        CMsgGCHAppCheersGetAllowedTypesResponse::new()
    }

    fn clear(&mut self) {
        self.cheer_types_valid_all_users.clear();
        self.cheer_remaps.clear();
        self.cache_duration = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAppCheersGetAllowedTypesResponse {
        static instance: CMsgGCHAppCheersGetAllowedTypesResponse = CMsgGCHAppCheersGetAllowedTypesResponse {
            cheer_types_valid_all_users: ::std::vec::Vec::new(),
            cheer_remaps: ::std::vec::Vec::new(),
            cache_duration: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHAppCheersGetAllowedTypesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHAppCheersGetAllowedTypesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHAppCheersGetAllowedTypesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHAppCheersGetAllowedTypesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGCHAppCheersGetAllowedTypesResponse`
pub mod cmsg_gchapp_cheers_get_allowed_types_response {
    // @@protoc_insertion_point(message:dota.CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CheerRemaps {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.original_cheer_type)
        pub original_cheer_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.remapped_cheer_type)
        pub remapped_cheer_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.account_ids)
        pub account_ids: ::std::vec::Vec<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CheerRemaps {
        fn default() -> &'a CheerRemaps {
            <CheerRemaps as ::protobuf::Message>::default_instance()
        }
    }

    impl CheerRemaps {
        pub fn new() -> CheerRemaps {
            ::std::default::Default::default()
        }

        // optional uint32 original_cheer_type = 1;

        pub fn original_cheer_type(&self) -> u32 {
            self.original_cheer_type.unwrap_or(0)
        }

        pub fn clear_original_cheer_type(&mut self) {
            self.original_cheer_type = ::std::option::Option::None;
        }

        pub fn has_original_cheer_type(&self) -> bool {
            self.original_cheer_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_original_cheer_type(&mut self, v: u32) {
            self.original_cheer_type = ::std::option::Option::Some(v);
        }

        // optional uint32 remapped_cheer_type = 2;

        pub fn remapped_cheer_type(&self) -> u32 {
            self.remapped_cheer_type.unwrap_or(0)
        }

        pub fn clear_remapped_cheer_type(&mut self) {
            self.remapped_cheer_type = ::std::option::Option::None;
        }

        pub fn has_remapped_cheer_type(&self) -> bool {
            self.remapped_cheer_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_remapped_cheer_type(&mut self, v: u32) {
            self.remapped_cheer_type = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "original_cheer_type",
                |m: &CheerRemaps| { &m.original_cheer_type },
                |m: &mut CheerRemaps| { &mut m.original_cheer_type },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "remapped_cheer_type",
                |m: &CheerRemaps| { &m.remapped_cheer_type },
                |m: &mut CheerRemaps| { &mut m.remapped_cheer_type },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "account_ids",
                |m: &CheerRemaps| { &m.account_ids },
                |m: &mut CheerRemaps| { &mut m.account_ids },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheerRemaps>(
                "CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CheerRemaps {
        const NAME: &'static str = "CheerRemaps";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.original_cheer_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.remapped_cheer_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        is.read_repeated_packed_uint32_into(&mut self.account_ids)?;
                    },
                    24 => {
                        self.account_ids.push(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.original_cheer_type {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.remapped_cheer_type {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            for value in &self.account_ids {
                my_size += ::protobuf::rt::uint32_size(3, *value);
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.original_cheer_type {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.remapped_cheer_type {
                os.write_uint32(2, v)?;
            }
            for v in &self.account_ids {
                os.write_uint32(3, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CheerRemaps {
            CheerRemaps::new()
        }

        fn clear(&mut self) {
            self.original_cheer_type = ::std::option::Option::None;
            self.remapped_cheer_type = ::std::option::Option::None;
            self.account_ids.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CheerRemaps {
            static instance: CheerRemaps = CheerRemaps {
                original_cheer_type: ::std::option::Option::None,
                remapped_cheer_type: ::std::option::Option::None,
                account_ids: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CheerRemaps {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CheerRemaps {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CheerRemaps {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CGCSystemMsg_ReportExternalPurchase_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_ReportExternalPurchase_Request {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.provider)
    pub provider: ::std::option::Option<::protobuf::EnumOrUnknown<EMobilePaymentProvider>>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.orderid)
    pub orderid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.provider_orderid)
    pub provider_orderid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.amount)
    pub amount: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.currency)
    pub currency: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.quantity)
    pub quantity: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.itemid)
    pub itemid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.item_description)
    pub item_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.category)
    pub category: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Request.time_created)
    pub time_created: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCSystemMsg_ReportExternalPurchase_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_ReportExternalPurchase_Request {
    fn default() -> &'a CGCSystemMsg_ReportExternalPurchase_Request {
        <CGCSystemMsg_ReportExternalPurchase_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_ReportExternalPurchase_Request {
    pub fn new() -> CGCSystemMsg_ReportExternalPurchase_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .dota.EMobilePaymentProvider provider = 3;

    pub fn provider(&self) -> EMobilePaymentProvider {
        match self.provider {
            Some(e) => e.enum_value_or(EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid),
            None => EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid,
        }
    }

    pub fn clear_provider(&mut self) {
        self.provider = ::std::option::Option::None;
    }

    pub fn has_provider(&self) -> bool {
        self.provider.is_some()
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: EMobilePaymentProvider) {
        self.provider = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint64 orderid = 4;

    pub fn orderid(&self) -> u64 {
        self.orderid.unwrap_or(0)
    }

    pub fn clear_orderid(&mut self) {
        self.orderid = ::std::option::Option::None;
    }

    pub fn has_orderid(&self) -> bool {
        self.orderid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orderid(&mut self, v: u64) {
        self.orderid = ::std::option::Option::Some(v);
    }

    // optional string provider_orderid = 5;

    pub fn provider_orderid(&self) -> &str {
        match self.provider_orderid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_provider_orderid(&mut self) {
        self.provider_orderid = ::std::option::Option::None;
    }

    pub fn has_provider_orderid(&self) -> bool {
        self.provider_orderid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_provider_orderid(&mut self, v: ::std::string::String) {
        self.provider_orderid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider_orderid(&mut self) -> &mut ::std::string::String {
        if self.provider_orderid.is_none() {
            self.provider_orderid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.provider_orderid.as_mut().unwrap()
    }

    // Take field
    pub fn take_provider_orderid(&mut self) -> ::std::string::String {
        self.provider_orderid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int64 amount = 6;

    pub fn amount(&self) -> i64 {
        self.amount.unwrap_or(0)
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional string currency = 7;

    pub fn currency(&self) -> &str {
        match self.currency.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_currency(&mut self) {
        self.currency = ::std::option::Option::None;
    }

    pub fn has_currency(&self) -> bool {
        self.currency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        if self.currency.is_none() {
            self.currency = ::std::option::Option::Some(::std::string::String::new());
        }
        self.currency.as_mut().unwrap()
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        self.currency.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 quantity = 8;

    pub fn quantity(&self) -> u32 {
        self.quantity.unwrap_or(0)
    }

    pub fn clear_quantity(&mut self) {
        self.quantity = ::std::option::Option::None;
    }

    pub fn has_quantity(&self) -> bool {
        self.quantity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: u32) {
        self.quantity = ::std::option::Option::Some(v);
    }

    // optional uint32 itemid = 9;

    pub fn itemid(&self) -> u32 {
        self.itemid.unwrap_or(0)
    }

    pub fn clear_itemid(&mut self) {
        self.itemid = ::std::option::Option::None;
    }

    pub fn has_itemid(&self) -> bool {
        self.itemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u32) {
        self.itemid = ::std::option::Option::Some(v);
    }

    // optional string item_description = 10;

    pub fn item_description(&self) -> &str {
        match self.item_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_item_description(&mut self) {
        self.item_description = ::std::option::Option::None;
    }

    pub fn has_item_description(&self) -> bool {
        self.item_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_description(&mut self, v: ::std::string::String) {
        self.item_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_item_description(&mut self) -> &mut ::std::string::String {
        if self.item_description.is_none() {
            self.item_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.item_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_item_description(&mut self) -> ::std::string::String {
        self.item_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string language = 11;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string category = 12;

    pub fn category(&self) -> &str {
        match self.category.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_category(&mut self) {
        self.category = ::std::option::Option::None;
    }

    pub fn has_category(&self) -> bool {
        self.category.is_some()
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        if self.category.is_none() {
            self.category = ::std::option::Option::Some(::std::string::String::new());
        }
        self.category.as_mut().unwrap()
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        self.category.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_created = 13;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.appid },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.steamid },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "provider",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.provider },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.provider },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "orderid",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.orderid },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.orderid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "provider_orderid",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.provider_orderid },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.provider_orderid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "amount",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.amount },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "currency",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.currency },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.currency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quantity",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.quantity },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.quantity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "itemid",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.itemid },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.itemid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_description",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.item_description },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.item_description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.language },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.language },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "category",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.category },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.category },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_created",
            |m: &CGCSystemMsg_ReportExternalPurchase_Request| { &m.time_created },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Request| { &mut m.time_created },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCSystemMsg_ReportExternalPurchase_Request>(
            "CGCSystemMsg_ReportExternalPurchase_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCSystemMsg_ReportExternalPurchase_Request {
    const NAME: &'static str = "CGCSystemMsg_ReportExternalPurchase_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.provider = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.orderid = ::std::option::Option::Some(is.read_uint64()?);
                },
                42 => {
                    self.provider_orderid = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.amount = ::std::option::Option::Some(is.read_int64()?);
                },
                58 => {
                    self.currency = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.quantity = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.itemid = ::std::option::Option::Some(is.read_uint32()?);
                },
                82 => {
                    self.item_description = ::std::option::Option::Some(is.read_string()?);
                },
                90 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                98 => {
                    self.category = ::std::option::Option::Some(is.read_string()?);
                },
                104 => {
                    self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.provider {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.orderid {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.provider_orderid.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::int64_size(6, v);
        }
        if let Some(v) = self.currency.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.quantity {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.itemid {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.item_description.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.category.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        if let Some(v) = self.time_created {
            my_size += ::protobuf::rt::uint32_size(13, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.provider {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.orderid {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.provider_orderid.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.amount {
            os.write_int64(6, v)?;
        }
        if let Some(v) = self.currency.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.quantity {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.itemid {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.item_description.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.category.as_ref() {
            os.write_string(12, v)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(13, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_ReportExternalPurchase_Request {
        CGCSystemMsg_ReportExternalPurchase_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.provider = ::std::option::Option::None;
        self.orderid = ::std::option::Option::None;
        self.provider_orderid = ::std::option::Option::None;
        self.amount = ::std::option::Option::None;
        self.currency = ::std::option::Option::None;
        self.quantity = ::std::option::Option::None;
        self.itemid = ::std::option::Option::None;
        self.item_description = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.category = ::std::option::Option::None;
        self.time_created = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_ReportExternalPurchase_Request {
        static instance: CGCSystemMsg_ReportExternalPurchase_Request = CGCSystemMsg_ReportExternalPurchase_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            provider: ::std::option::Option::None,
            orderid: ::std::option::Option::None,
            provider_orderid: ::std::option::Option::None,
            amount: ::std::option::Option::None,
            currency: ::std::option::Option::None,
            quantity: ::std::option::Option::None,
            itemid: ::std::option::Option::None,
            item_description: ::std::option::Option::None,
            language: ::std::option::Option::None,
            category: ::std::option::Option::None,
            time_created: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCSystemMsg_ReportExternalPurchase_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCSystemMsg_ReportExternalPurchase_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCSystemMsg_ReportExternalPurchase_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCSystemMsg_ReportExternalPurchase_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CGCSystemMsg_ReportExternalPurchase_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGCSystemMsg_ReportExternalPurchase_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Response.transid)
    pub transid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CGCSystemMsg_ReportExternalPurchase_Response.orderid)
    pub orderid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CGCSystemMsg_ReportExternalPurchase_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGCSystemMsg_ReportExternalPurchase_Response {
    fn default() -> &'a CGCSystemMsg_ReportExternalPurchase_Response {
        <CGCSystemMsg_ReportExternalPurchase_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGCSystemMsg_ReportExternalPurchase_Response {
    pub fn new() -> CGCSystemMsg_ReportExternalPurchase_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 transid = 1;

    pub fn transid(&self) -> u64 {
        self.transid.unwrap_or(0)
    }

    pub fn clear_transid(&mut self) {
        self.transid = ::std::option::Option::None;
    }

    pub fn has_transid(&self) -> bool {
        self.transid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transid(&mut self, v: u64) {
        self.transid = ::std::option::Option::Some(v);
    }

    // optional uint64 orderid = 2;

    pub fn orderid(&self) -> u64 {
        self.orderid.unwrap_or(0)
    }

    pub fn clear_orderid(&mut self) {
        self.orderid = ::std::option::Option::None;
    }

    pub fn has_orderid(&self) -> bool {
        self.orderid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orderid(&mut self, v: u64) {
        self.orderid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "transid",
            |m: &CGCSystemMsg_ReportExternalPurchase_Response| { &m.transid },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Response| { &mut m.transid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "orderid",
            |m: &CGCSystemMsg_ReportExternalPurchase_Response| { &m.orderid },
            |m: &mut CGCSystemMsg_ReportExternalPurchase_Response| { &mut m.orderid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGCSystemMsg_ReportExternalPurchase_Response>(
            "CGCSystemMsg_ReportExternalPurchase_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGCSystemMsg_ReportExternalPurchase_Response {
    const NAME: &'static str = "CGCSystemMsg_ReportExternalPurchase_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.transid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.orderid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.transid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.orderid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.transid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.orderid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGCSystemMsg_ReportExternalPurchase_Response {
        CGCSystemMsg_ReportExternalPurchase_Response::new()
    }

    fn clear(&mut self) {
        self.transid = ::std::option::Option::None;
        self.orderid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGCSystemMsg_ReportExternalPurchase_Response {
        static instance: CGCSystemMsg_ReportExternalPurchase_Response = CGCSystemMsg_ReportExternalPurchase_Response {
            transid: ::std::option::Option::None,
            orderid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGCSystemMsg_ReportExternalPurchase_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGCSystemMsg_ReportExternalPurchase_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGCSystemMsg_ReportExternalPurchase_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGCSystemMsg_ReportExternalPurchase_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CWorkshop_AddSpecialPayment_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_AddSpecialPayment_Request {
    // message fields
    // @@protoc_insertion_point(field:dota.CWorkshop_AddSpecialPayment_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CWorkshop_AddSpecialPayment_Request.gameitemid)
    pub gameitemid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CWorkshop_AddSpecialPayment_Request.date)
    pub date: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CWorkshop_AddSpecialPayment_Request.payment_us_usd)
    pub payment_us_usd: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CWorkshop_AddSpecialPayment_Request.payment_row_usd)
    pub payment_row_usd: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CWorkshop_AddSpecialPayment_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_AddSpecialPayment_Request {
    fn default() -> &'a CWorkshop_AddSpecialPayment_Request {
        <CWorkshop_AddSpecialPayment_Request as ::protobuf::Message>::default_instance()
    }
}

impl CWorkshop_AddSpecialPayment_Request {
    pub fn new() -> CWorkshop_AddSpecialPayment_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 gameitemid = 2;

    pub fn gameitemid(&self) -> u32 {
        self.gameitemid.unwrap_or(0)
    }

    pub fn clear_gameitemid(&mut self) {
        self.gameitemid = ::std::option::Option::None;
    }

    pub fn has_gameitemid(&self) -> bool {
        self.gameitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameitemid(&mut self, v: u32) {
        self.gameitemid = ::std::option::Option::Some(v);
    }

    // optional string date = 3;

    pub fn date(&self) -> &str {
        match self.date.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_date(&mut self) {
        self.date = ::std::option::Option::None;
    }

    pub fn has_date(&self) -> bool {
        self.date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        if self.date.is_none() {
            self.date = ::std::option::Option::Some(::std::string::String::new());
        }
        self.date.as_mut().unwrap()
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        self.date.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 payment_us_usd = 4;

    pub fn payment_us_usd(&self) -> u64 {
        self.payment_us_usd.unwrap_or(0)
    }

    pub fn clear_payment_us_usd(&mut self) {
        self.payment_us_usd = ::std::option::Option::None;
    }

    pub fn has_payment_us_usd(&self) -> bool {
        self.payment_us_usd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payment_us_usd(&mut self, v: u64) {
        self.payment_us_usd = ::std::option::Option::Some(v);
    }

    // optional uint64 payment_row_usd = 5;

    pub fn payment_row_usd(&self) -> u64 {
        self.payment_row_usd.unwrap_or(0)
    }

    pub fn clear_payment_row_usd(&mut self) {
        self.payment_row_usd = ::std::option::Option::None;
    }

    pub fn has_payment_row_usd(&self) -> bool {
        self.payment_row_usd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payment_row_usd(&mut self, v: u64) {
        self.payment_row_usd = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CWorkshop_AddSpecialPayment_Request| { &m.appid },
            |m: &mut CWorkshop_AddSpecialPayment_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameitemid",
            |m: &CWorkshop_AddSpecialPayment_Request| { &m.gameitemid },
            |m: &mut CWorkshop_AddSpecialPayment_Request| { &mut m.gameitemid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "date",
            |m: &CWorkshop_AddSpecialPayment_Request| { &m.date },
            |m: &mut CWorkshop_AddSpecialPayment_Request| { &mut m.date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "payment_us_usd",
            |m: &CWorkshop_AddSpecialPayment_Request| { &m.payment_us_usd },
            |m: &mut CWorkshop_AddSpecialPayment_Request| { &mut m.payment_us_usd },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "payment_row_usd",
            |m: &CWorkshop_AddSpecialPayment_Request| { &m.payment_row_usd },
            |m: &mut CWorkshop_AddSpecialPayment_Request| { &mut m.payment_row_usd },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CWorkshop_AddSpecialPayment_Request>(
            "CWorkshop_AddSpecialPayment_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CWorkshop_AddSpecialPayment_Request {
    const NAME: &'static str = "CWorkshop_AddSpecialPayment_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.gameitemid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.date = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.payment_us_usd = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.payment_row_usd = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gameitemid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.date.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.payment_us_usd {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.payment_row_usd {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gameitemid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.date.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.payment_us_usd {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.payment_row_usd {
            os.write_uint64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_AddSpecialPayment_Request {
        CWorkshop_AddSpecialPayment_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gameitemid = ::std::option::Option::None;
        self.date = ::std::option::Option::None;
        self.payment_us_usd = ::std::option::Option::None;
        self.payment_row_usd = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_AddSpecialPayment_Request {
        static instance: CWorkshop_AddSpecialPayment_Request = CWorkshop_AddSpecialPayment_Request {
            appid: ::std::option::Option::None,
            gameitemid: ::std::option::Option::None,
            date: ::std::option::Option::None,
            payment_us_usd: ::std::option::Option::None,
            payment_row_usd: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CWorkshop_AddSpecialPayment_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CWorkshop_AddSpecialPayment_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CWorkshop_AddSpecialPayment_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CWorkshop_AddSpecialPayment_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CWorkshop_AddSpecialPayment_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_AddSpecialPayment_Response {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CWorkshop_AddSpecialPayment_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_AddSpecialPayment_Response {
    fn default() -> &'a CWorkshop_AddSpecialPayment_Response {
        <CWorkshop_AddSpecialPayment_Response as ::protobuf::Message>::default_instance()
    }
}

impl CWorkshop_AddSpecialPayment_Response {
    pub fn new() -> CWorkshop_AddSpecialPayment_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CWorkshop_AddSpecialPayment_Response>(
            "CWorkshop_AddSpecialPayment_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CWorkshop_AddSpecialPayment_Response {
    const NAME: &'static str = "CWorkshop_AddSpecialPayment_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_AddSpecialPayment_Response {
        CWorkshop_AddSpecialPayment_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_AddSpecialPayment_Response {
        static instance: CWorkshop_AddSpecialPayment_Response = CWorkshop_AddSpecialPayment_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CWorkshop_AddSpecialPayment_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CWorkshop_AddSpecialPayment_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CWorkshop_AddSpecialPayment_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CWorkshop_AddSpecialPayment_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CWorkshop_GetSpecialPayments_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_GetSpecialPayments_Request {
    // message fields
    // @@protoc_insertion_point(field:dota.CWorkshop_GetSpecialPayments_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CWorkshop_GetSpecialPayments_Request.gameitemid)
    pub gameitemid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CWorkshop_GetSpecialPayments_Request.date)
    pub date: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CWorkshop_GetSpecialPayments_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_GetSpecialPayments_Request {
    fn default() -> &'a CWorkshop_GetSpecialPayments_Request {
        <CWorkshop_GetSpecialPayments_Request as ::protobuf::Message>::default_instance()
    }
}

impl CWorkshop_GetSpecialPayments_Request {
    pub fn new() -> CWorkshop_GetSpecialPayments_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 gameitemid = 2;

    pub fn gameitemid(&self) -> u32 {
        self.gameitemid.unwrap_or(0)
    }

    pub fn clear_gameitemid(&mut self) {
        self.gameitemid = ::std::option::Option::None;
    }

    pub fn has_gameitemid(&self) -> bool {
        self.gameitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameitemid(&mut self, v: u32) {
        self.gameitemid = ::std::option::Option::Some(v);
    }

    // optional string date = 3;

    pub fn date(&self) -> &str {
        match self.date.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_date(&mut self) {
        self.date = ::std::option::Option::None;
    }

    pub fn has_date(&self) -> bool {
        self.date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        if self.date.is_none() {
            self.date = ::std::option::Option::Some(::std::string::String::new());
        }
        self.date.as_mut().unwrap()
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        self.date.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CWorkshop_GetSpecialPayments_Request| { &m.appid },
            |m: &mut CWorkshop_GetSpecialPayments_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameitemid",
            |m: &CWorkshop_GetSpecialPayments_Request| { &m.gameitemid },
            |m: &mut CWorkshop_GetSpecialPayments_Request| { &mut m.gameitemid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "date",
            |m: &CWorkshop_GetSpecialPayments_Request| { &m.date },
            |m: &mut CWorkshop_GetSpecialPayments_Request| { &mut m.date },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CWorkshop_GetSpecialPayments_Request>(
            "CWorkshop_GetSpecialPayments_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CWorkshop_GetSpecialPayments_Request {
    const NAME: &'static str = "CWorkshop_GetSpecialPayments_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.gameitemid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.date = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gameitemid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.date.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gameitemid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.date.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_GetSpecialPayments_Request {
        CWorkshop_GetSpecialPayments_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gameitemid = ::std::option::Option::None;
        self.date = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_GetSpecialPayments_Request {
        static instance: CWorkshop_GetSpecialPayments_Request = CWorkshop_GetSpecialPayments_Request {
            appid: ::std::option::Option::None,
            gameitemid: ::std::option::Option::None,
            date: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CWorkshop_GetSpecialPayments_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CWorkshop_GetSpecialPayments_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CWorkshop_GetSpecialPayments_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CWorkshop_GetSpecialPayments_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CWorkshop_GetSpecialPayments_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_GetSpecialPayments_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.CWorkshop_GetSpecialPayments_Response.special_payments)
    pub special_payments: ::std::vec::Vec<cworkshop_get_special_payments_response::SpecialPayment>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CWorkshop_GetSpecialPayments_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_GetSpecialPayments_Response {
    fn default() -> &'a CWorkshop_GetSpecialPayments_Response {
        <CWorkshop_GetSpecialPayments_Response as ::protobuf::Message>::default_instance()
    }
}

impl CWorkshop_GetSpecialPayments_Response {
    pub fn new() -> CWorkshop_GetSpecialPayments_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "special_payments",
            |m: &CWorkshop_GetSpecialPayments_Response| { &m.special_payments },
            |m: &mut CWorkshop_GetSpecialPayments_Response| { &mut m.special_payments },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CWorkshop_GetSpecialPayments_Response>(
            "CWorkshop_GetSpecialPayments_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CWorkshop_GetSpecialPayments_Response {
    const NAME: &'static str = "CWorkshop_GetSpecialPayments_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.special_payments.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.special_payments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.special_payments {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_GetSpecialPayments_Response {
        CWorkshop_GetSpecialPayments_Response::new()
    }

    fn clear(&mut self) {
        self.special_payments.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_GetSpecialPayments_Response {
        static instance: CWorkshop_GetSpecialPayments_Response = CWorkshop_GetSpecialPayments_Response {
            special_payments: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CWorkshop_GetSpecialPayments_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CWorkshop_GetSpecialPayments_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CWorkshop_GetSpecialPayments_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CWorkshop_GetSpecialPayments_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CWorkshop_GetSpecialPayments_Response`
pub mod cworkshop_get_special_payments_response {
    // @@protoc_insertion_point(message:dota.CWorkshop_GetSpecialPayments_Response.SpecialPayment)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SpecialPayment {
        // message fields
        // @@protoc_insertion_point(field:dota.CWorkshop_GetSpecialPayments_Response.SpecialPayment.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CWorkshop_GetSpecialPayments_Response.SpecialPayment.gameitemid)
        pub gameitemid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CWorkshop_GetSpecialPayments_Response.SpecialPayment.date)
        pub date: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CWorkshop_GetSpecialPayments_Response.SpecialPayment.net_payment_us_usd)
        pub net_payment_us_usd: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CWorkshop_GetSpecialPayments_Response.SpecialPayment.net_payment_row_usd)
        pub net_payment_row_usd: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CWorkshop_GetSpecialPayments_Response.SpecialPayment.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SpecialPayment {
        fn default() -> &'a SpecialPayment {
            <SpecialPayment as ::protobuf::Message>::default_instance()
        }
    }

    impl SpecialPayment {
        pub fn new() -> SpecialPayment {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint32 gameitemid = 2;

        pub fn gameitemid(&self) -> u32 {
            self.gameitemid.unwrap_or(0)
        }

        pub fn clear_gameitemid(&mut self) {
            self.gameitemid = ::std::option::Option::None;
        }

        pub fn has_gameitemid(&self) -> bool {
            self.gameitemid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gameitemid(&mut self, v: u32) {
            self.gameitemid = ::std::option::Option::Some(v);
        }

        // optional string date = 3;

        pub fn date(&self) -> &str {
            match self.date.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_date(&mut self) {
            self.date = ::std::option::Option::None;
        }

        pub fn has_date(&self) -> bool {
            self.date.is_some()
        }

        // Param is passed by value, moved
        pub fn set_date(&mut self, v: ::std::string::String) {
            self.date = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_date(&mut self) -> &mut ::std::string::String {
            if self.date.is_none() {
                self.date = ::std::option::Option::Some(::std::string::String::new());
            }
            self.date.as_mut().unwrap()
        }

        // Take field
        pub fn take_date(&mut self) -> ::std::string::String {
            self.date.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint64 net_payment_us_usd = 4;

        pub fn net_payment_us_usd(&self) -> u64 {
            self.net_payment_us_usd.unwrap_or(0)
        }

        pub fn clear_net_payment_us_usd(&mut self) {
            self.net_payment_us_usd = ::std::option::Option::None;
        }

        pub fn has_net_payment_us_usd(&self) -> bool {
            self.net_payment_us_usd.is_some()
        }

        // Param is passed by value, moved
        pub fn set_net_payment_us_usd(&mut self, v: u64) {
            self.net_payment_us_usd = ::std::option::Option::Some(v);
        }

        // optional uint64 net_payment_row_usd = 5;

        pub fn net_payment_row_usd(&self) -> u64 {
            self.net_payment_row_usd.unwrap_or(0)
        }

        pub fn clear_net_payment_row_usd(&mut self) {
            self.net_payment_row_usd = ::std::option::Option::None;
        }

        pub fn has_net_payment_row_usd(&self) -> bool {
            self.net_payment_row_usd.is_some()
        }

        // Param is passed by value, moved
        pub fn set_net_payment_row_usd(&mut self, v: u64) {
            self.net_payment_row_usd = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &SpecialPayment| { &m.appid },
                |m: &mut SpecialPayment| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "gameitemid",
                |m: &SpecialPayment| { &m.gameitemid },
                |m: &mut SpecialPayment| { &mut m.gameitemid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "date",
                |m: &SpecialPayment| { &m.date },
                |m: &mut SpecialPayment| { &mut m.date },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "net_payment_us_usd",
                |m: &SpecialPayment| { &m.net_payment_us_usd },
                |m: &mut SpecialPayment| { &mut m.net_payment_us_usd },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "net_payment_row_usd",
                |m: &SpecialPayment| { &m.net_payment_row_usd },
                |m: &mut SpecialPayment| { &mut m.net_payment_row_usd },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SpecialPayment>(
                "CWorkshop_GetSpecialPayments_Response.SpecialPayment",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for SpecialPayment {
        const NAME: &'static str = "SpecialPayment";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.gameitemid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.date = ::std::option::Option::Some(is.read_string()?);
                    },
                    32 => {
                        self.net_payment_us_usd = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    40 => {
                        self.net_payment_row_usd = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.gameitemid {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.date.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.net_payment_us_usd {
                my_size += ::protobuf::rt::uint64_size(4, v);
            }
            if let Some(v) = self.net_payment_row_usd {
                my_size += ::protobuf::rt::uint64_size(5, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.gameitemid {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.date.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.net_payment_us_usd {
                os.write_uint64(4, v)?;
            }
            if let Some(v) = self.net_payment_row_usd {
                os.write_uint64(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SpecialPayment {
            SpecialPayment::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.gameitemid = ::std::option::Option::None;
            self.date = ::std::option::Option::None;
            self.net_payment_us_usd = ::std::option::Option::None;
            self.net_payment_row_usd = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SpecialPayment {
            static instance: SpecialPayment = SpecialPayment {
                appid: ::std::option::Option::None,
                gameitemid: ::std::option::Option::None,
                date: ::std::option::Option::None,
                net_payment_us_usd: ::std::option::Option::None,
                net_payment_row_usd: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for SpecialPayment {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CWorkshop_GetSpecialPayments_Response.SpecialPayment").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for SpecialPayment {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for SpecialPayment {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EMobilePaymentProvider)
pub enum EMobilePaymentProvider {
    // @@protoc_insertion_point(enum_value:dota.EMobilePaymentProvider.k_EMobilePaymentProvider_Invalid)
    k_EMobilePaymentProvider_Invalid = 0,
    // @@protoc_insertion_point(enum_value:dota.EMobilePaymentProvider.k_EMobilePaymentProvider_GooglePlay)
    k_EMobilePaymentProvider_GooglePlay = 1,
    // @@protoc_insertion_point(enum_value:dota.EMobilePaymentProvider.k_EMobilePaymentProvider_AppleAppStore)
    k_EMobilePaymentProvider_AppleAppStore = 2,
}

impl ::protobuf::Enum for EMobilePaymentProvider {
    const NAME: &'static str = "EMobilePaymentProvider";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EMobilePaymentProvider> {
        match value {
            0 => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid),
            1 => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_GooglePlay),
            2 => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_AppleAppStore),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EMobilePaymentProvider> {
        match str {
            "k_EMobilePaymentProvider_Invalid" => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid),
            "k_EMobilePaymentProvider_GooglePlay" => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_GooglePlay),
            "k_EMobilePaymentProvider_AppleAppStore" => ::std::option::Option::Some(EMobilePaymentProvider::k_EMobilePaymentProvider_AppleAppStore),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EMobilePaymentProvider] = &[
        EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid,
        EMobilePaymentProvider::k_EMobilePaymentProvider_GooglePlay,
        EMobilePaymentProvider::k_EMobilePaymentProvider_AppleAppStore,
    ];
}

impl ::protobuf::EnumFull for EMobilePaymentProvider {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EMobilePaymentProvider").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EMobilePaymentProvider {
    fn default() -> Self {
        EMobilePaymentProvider::k_EMobilePaymentProvider_Invalid
    }
}

impl EMobilePaymentProvider {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EMobilePaymentProvider>("EMobilePaymentProvider")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17steammessages_int.proto\x12\x04dota\x1a\x13steammessages.proto\"\
    \xa3\x01\n\rCMsgWebAPIKey\x12\x16\n\x06status\x18\x01\x20\x01(\rR\x06sta\
    tus\x12\x1d\n\naccount_id\x18\x02\x20\x01(\rR\taccountId\x12,\n\x12publi\
    sher_group_id\x18\x03\x20\x01(\rR\x10publisherGroupId\x12\x15\n\x06key_i\
    d\x18\x04\x20\x01(\rR\x05keyId\x12\x16\n\x06domain\x18\x05\x20\x01(\tR\
    \x06domain\"\xf8\x03\n\x0fCMsgHttpRequest\x12%\n\x0erequest_method\x18\
    \x01\x20\x01(\rR\rrequestMethod\x12\x1a\n\x08hostname\x18\x02\x20\x01(\t\
    R\x08hostname\x12\x10\n\x03url\x18\x03\x20\x01(\tR\x03url\x12=\n\x07head\
    ers\x18\x04\x20\x03(\x0b2#.dota.CMsgHttpRequest.RequestHeaderR\x07header\
    s\x12?\n\nget_params\x18\x05\x20\x03(\x0b2\x20.dota.CMsgHttpRequest.Quer\
    yParamR\tgetParams\x12A\n\x0bpost_params\x18\x06\x20\x03(\x0b2\x20.dota.\
    CMsgHttpRequest.QueryParamR\npostParams\x12\x12\n\x04body\x18\x07\x20\
    \x01(\x0cR\x04body\x12)\n\x10absolute_timeout\x18\x08\x20\x01(\rR\x0fabs\
    oluteTimeout\x12\x1b\n\tuse_https\x18\t\x20\x01(\x08R\x08useHttps\x1a9\n\
    \rRequestHeader\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value\x1a6\n\nQueryParam\x12\x12\n\x04n\
    ame\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\
    \x05value\"\xfa\x01\n\x11CMsgWebAPIRequest\x12%\n\x0einterface_name\x18\
    \x02\x20\x01(\tR\rinterfaceName\x12\x1f\n\x0bmethod_name\x18\x03\x20\x01\
    (\tR\nmethodName\x12\x18\n\x07version\x18\x04\x20\x01(\rR\x07version\x12\
    ,\n\x07api_key\x18\x05\x20\x01(\x0b2\x13.dota.CMsgWebAPIKeyR\x06apiKey\
    \x12/\n\x07request\x18\x06\x20\x01(\x0b2\x15.dota.CMsgHttpRequestR\x07re\
    quest\x12$\n\x0erouting_app_id\x18\x07\x20\x01(\rR\x0croutingAppId\"\xc4\
    \x01\n\x10CMsgHttpResponse\x12\x1f\n\x0bstatus_code\x18\x01\x20\x01(\rR\
    \nstatusCode\x12?\n\x07headers\x18\x02\x20\x03(\x0b2%.dota.CMsgHttpRespo\
    nse.ResponseHeaderR\x07headers\x12\x12\n\x04body\x18\x03\x20\x01(\x0cR\
    \x04body\x1a:\n\x0eResponseHeader\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"Z\n\x12CMsgAMF\
    indAccounts\x12\x1f\n\x0bsearch_type\x18\x01\x20\x01(\rR\nsearchType\x12\
    #\n\rsearch_string\x18\x02\x20\x01(\tR\x0csearchString\"7\n\x1aCMsgAMFin\
    dAccountsResponse\x12\x19\n\x08steam_id\x18\x01\x20\x03(\x06R\x07steamId\
    \"\xc3\x01\n\x12CMsgNotifyWatchdog\x12\x16\n\x06source\x18\x01\x20\x01(\
    \rR\x06source\x12\x1d\n\nalert_type\x18\x02\x20\x01(\rR\talertType\x12\
    \x1a\n\x08critical\x18\x04\x20\x01(\x08R\x08critical\x12\x12\n\x04time\
    \x18\x05\x20\x01(\rR\x04time\x12\x14\n\x05appid\x18\x06\x20\x01(\rR\x05a\
    ppid\x12\x12\n\x04text\x18\x07\x20\x01(\tR\x04text\x12\x1c\n\trecipient\
    \x18\x0c\x20\x01(\tR\trecipient\"-\n\x11CMsgAMGetLicenses\x12\x18\n\x07s\
    teamid\x18\x01\x20\x01(\x06R\x07steamid\"q\n\x12CMsgPackageLicense\x12\
    \x1d\n\npackage_id\x18\x01\x20\x01(\rR\tpackageId\x12!\n\x0ctime_created\
    \x18\x02\x20\x01(\rR\x0btimeCreated\x12\x19\n\x08owner_id\x18\x03\x20\
    \x01(\rR\x07ownerId\"g\n\x19CMsgAMGetLicensesResponse\x122\n\x07license\
    \x18\x01\x20\x03(\x0b2\x18.dota.CMsgPackageLicenseR\x07license\x12\x16\n\
    \x06result\x18\x02\x20\x01(\rR\x06result\"b\n\x16CMsgAMGetUserGameStats\
    \x12\x19\n\x08steam_id\x18\x01\x20\x01(\x06R\x07steamId\x12\x17\n\x07gam\
    e_id\x18\x02\x20\x01(\x06R\x06gameId\x12\x14\n\x05stats\x18\x03\x20\x03(\
    \rR\x05stats\"\xe6\x03\n\x1eCMsgAMGetUserGameStatsResponse\x12\x19\n\x08\
    steam_id\x18\x01\x20\x01(\x06R\x07steamId\x12\x17\n\x07game_id\x18\x02\
    \x20\x01(\x06R\x06gameId\x12\x18\n\x07eresult\x18\x03\x20\x01(\x05R\x07e\
    result\x12@\n\x05stats\x18\x04\x20\x03(\x0b2*.dota.CMsgAMGetUserGameStat\
    sResponse.StatsR\x05stats\x12f\n\x12achievement_blocks\x18\x05\x20\x03(\
    \x0b27.dota.CMsgAMGetUserGameStatsResponse.Achievement_BlocksR\x11achiev\
    ementBlocks\x1a?\n\x05Stats\x12\x17\n\x07stat_id\x18\x01\x20\x01(\rR\x06\
    statId\x12\x1d\n\nstat_value\x18\x02\x20\x01(\rR\tstatValue\x1a\x8a\x01\
    \n\x12Achievement_Blocks\x12%\n\x0eachievement_id\x18\x01\x20\x01(\rR\ra\
    chievementId\x12,\n\x12achievement_bit_id\x18\x02\x20\x01(\rR\x10achieve\
    mentBitId\x12\x1f\n\x0bunlock_time\x18\x03\x20\x01(\x07R\nunlockTime\"T\
    \n\x14CMsgGCGetCommandList\x12\x15\n\x06app_id\x18\x01\x20\x01(\rR\x05ap\
    pId\x12%\n\x0ecommand_prefix\x18\x02\x20\x01(\tR\rcommandPrefix\"A\n\x1c\
    CMsgGCGetCommandListResponse\x12!\n\x0ccommand_name\x18\x01\x20\x03(\tR\
    \x0bcommandName\"(\n\x12CGCMsgMemCachedGet\x12\x12\n\x04keys\x18\x01\x20\
    \x03(\tR\x04keys\"\x97\x01\n\x1aCGCMsgMemCachedGetResponse\x12A\n\x06val\
    ues\x18\x01\x20\x03(\x0b2).dota.CGCMsgMemCachedGetResponse.ValueTagR\x06\
    values\x1a6\n\x08ValueTag\x12\x14\n\x05found\x18\x01\x20\x01(\x08R\x05fo\
    und\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\"\x7f\n\x12CGCMsgM\
    emCachedSet\x124\n\x04keys\x18\x01\x20\x03(\x0b2\x20.dota.CGCMsgMemCache\
    dSet.KeyPairR\x04keys\x1a3\n\x07KeyPair\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\"+\n\
    \x15CGCMsgMemCachedDelete\x12\x12\n\x04keys\x18\x01\x20\x03(\tR\x04keys\
    \"\x16\n\x14CGCMsgMemCachedStats\"\xd6\x03\n\x1cCGCMsgMemCachedStatsResp\
    onse\x12)\n\x10curr_connections\x18\x01\x20\x01(\x04R\x0fcurrConnections\
    \x12\x17\n\x07cmd_get\x18\x02\x20\x01(\x04R\x06cmdGet\x12\x17\n\x07cmd_s\
    et\x18\x03\x20\x01(\x04R\x06cmdSet\x12\x1b\n\tcmd_flush\x18\x04\x20\x01(\
    \x04R\x08cmdFlush\x12\x19\n\x08get_hits\x18\x05\x20\x01(\x04R\x07getHits\
    \x12\x1d\n\nget_misses\x18\x06\x20\x01(\x04R\tgetMisses\x12\x1f\n\x0bdel\
    ete_hits\x18\x07\x20\x01(\x04R\ndeleteHits\x12#\n\rdelete_misses\x18\x08\
    \x20\x01(\x04R\x0cdeleteMisses\x12\x1d\n\nbytes_read\x18\t\x20\x01(\x04R\
    \tbytesRead\x12#\n\rbytes_written\x18\n\x20\x01(\x04R\x0cbytesWritten\
    \x12%\n\x0elimit_maxbytes\x18\x0b\x20\x01(\x04R\rlimitMaxbytes\x12\x1d\n\
    \ncurr_items\x18\x0c\x20\x01(\x04R\tcurrItems\x12\x1c\n\tevictions\x18\r\
    \x20\x01(\x04R\tevictions\x12\x14\n\x05bytes\x18\x0e\x20\x01(\x04R\x05by\
    tes\"7\n\x0eCGCMsgSQLStats\x12%\n\x0eschema_catalog\x18\x01\x20\x01(\rR\
    \rschemaCatalog\"\xc9\x03\n\x16CGCMsgSQLStatsResponse\x12\x18\n\x07threa\
    ds\x18\x01\x20\x01(\rR\x07threads\x12+\n\x11threads_connected\x18\x02\
    \x20\x01(\rR\x10threadsConnected\x12%\n\x0ethreads_active\x18\x03\x20\
    \x01(\rR\rthreadsActive\x121\n\x14operations_submitted\x18\x04\x20\x01(\
    \rR\x13operationsSubmitted\x12@\n\x1cprepared_statements_executed\x18\
    \x05\x20\x01(\rR\x1apreparedStatementsExecuted\x12G\n\x20non_prepared_st\
    atements_executed\x18\x06\x20\x01(\rR\x1dnonPreparedStatementsExecuted\
    \x12)\n\x10deadlock_retries\x18\x07\x20\x01(\rR\x0fdeadlockRetries\x12@\
    \n\x1doperations_timed_out_in_queue\x18\x08\x20\x01(\rR\x19operationsTim\
    edOutInQueue\x12\x16\n\x06errors\x18\t\x20\x01(\rR\x06errors\"\x99\x01\n\
    \x14CMsgAMAddFreeLicense\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07s\
    teamid\x12\x1b\n\tip_public\x18\x02\x20\x01(\rR\x08ipPublic\x12\x1c\n\tp\
    ackageid\x18\x03\x20\x01(\rR\tpackageid\x12,\n\x12store_country_code\x18\
    \x04\x20\x01(\tR\x10storeCountryCode\"\x88\x01\n\x1cCMsgAMAddFreeLicense\
    Response\x12\x18\n\x07eresult\x18\x01\x20\x01(\x05R\x07eresult\x124\n\
    \x16purchase_result_detail\x18\x02\x20\x01(\x05R\x14purchaseResultDetail\
    \x12\x18\n\x07transid\x18\x03\x20\x01(\x06R\x07transid\"'\n\x13CGCMsgGet\
    IPLocation\x12\x10\n\x03ips\x18\x01\x20\x03(\x07R\x03ips\"\"\n\x0eCGCMsg\
    GetIPASN\x12\x10\n\x03ips\x18\x01\x20\x03(\x07R\x03ips\".\n\nCIPASNInfo\
    \x12\x0e\n\x02ip\x18\x01\x20\x01(\x07R\x02ip\x12\x10\n\x03asn\x18\x02\
    \x20\x01(\rR\x03asn\"@\n\x16CGCMsgGetIPASNResponse\x12&\n\x05infos\x18\
    \x01\x20\x03(\x0b2\x10.dota.CIPASNInfoR\x05infos\"R\n\x17CGCMsgSystemSta\
    tsSchema\x12\x1a\n\tgc_app_id\x18\x01\x20\x01(\rR\x07gcAppId\x12\x1b\n\t\
    schema_kv\x18\x02\x20\x01(\x0cR\x08schemaKv\"\x16\n\x14CGCMsgGetSystemSt\
    ats\"\xf5\x03\n\x1cCGCMsgGetSystemStatsResponse\x12\x1a\n\tgc_app_id\x18\
    \x01\x20\x01(\rR\x07gcAppId\x12\x19\n\x08stats_kv\x18\x02\x20\x01(\x0cR\
    \x07statsKv\x12\x1f\n\x0bactive_jobs\x18\x03\x20\x01(\rR\nactiveJobs\x12\
    #\n\ryielding_jobs\x18\x04\x20\x01(\rR\x0cyieldingJobs\x12#\n\ruser_sess\
    ions\x18\x05\x20\x01(\rR\x0cuserSessions\x120\n\x14game_server_sessions\
    \x18\x06\x20\x01(\rR\x12gameServerSessions\x12\x1a\n\x08socaches\x18\x07\
    \x20\x01(\rR\x08socaches\x12,\n\x12socaches_to_unload\x18\x08\x20\x01(\r\
    R\x10socachesToUnload\x12)\n\x10socaches_loading\x18\t\x20\x01(\rR\x0fso\
    cachesLoading\x12'\n\x0fwriteback_queue\x18\n\x20\x01(\rR\x0ewritebackQu\
    eue\x12#\n\rsteamid_locks\x18\x0b\x20\x01(\rR\x0csteamidLocks\x12\x1f\n\
    \x0blogon_queue\x18\x0c\x20\x01(\rR\nlogonQueue\x12\x1d\n\nlogon_jobs\
    \x18\r\x20\x01(\rR\tlogonJobs\"\xe0\x03\n\x0fCMsgAMSendEmail\x12\x18\n\
    \x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12$\n\x0eemail_msg_type\
    \x18\x02\x20\x01(\rR\x0cemailMsgType\x12!\n\x0cemail_format\x18\x03\x20\
    \x01(\rR\x0bemailFormat\x12a\n\x13persona_name_tokens\x18\x05\x20\x03(\
    \x0b21.dota.CMsgAMSendEmail.PersonaNameReplacementTokenR\x11personaNameT\
    okens\x12\x1b\n\tsource_gc\x18\x06\x20\x01(\rR\x08sourceGc\x12>\n\x06tok\
    ens\x18\x07\x20\x03(\x0b2&.dota.CMsgAMSendEmail.ReplacementTokenR\x06tok\
    ens\x1aR\n\x10ReplacementToken\x12\x1d\n\ntoken_name\x18\x01\x20\x01(\tR\
    \ttokenName\x12\x1f\n\x0btoken_value\x18\x02\x20\x01(\tR\ntokenValue\x1a\
    V\n\x1bPersonaNameReplacementToken\x12\x18\n\x07steamid\x18\x01\x20\x01(\
    \x06R\x07steamid\x12\x1d\n\ntoken_name\x18\x02\x20\x01(\tR\ttokenName\"3\
    \n\x17CMsgAMSendEmailResponse\x12\x18\n\x07eresult\x18\x01\x20\x01(\rR\
    \x07eresult\"\x97\x01\n\x16CMsgGCGetEmailTemplate\x12\x15\n\x06app_id\
    \x18\x01\x20\x01(\rR\x05appId\x12$\n\x0eemail_msg_type\x18\x02\x20\x01(\
    \rR\x0cemailMsgType\x12\x1d\n\nemail_lang\x18\x03\x20\x01(\x05R\temailLa\
    ng\x12!\n\x0cemail_format\x18\x04\x20\x01(\x05R\x0bemailFormat\"\x7f\n\
    \x1eCMsgGCGetEmailTemplateResponse\x12\x18\n\x07eresult\x18\x01\x20\x01(\
    \rR\x07eresult\x12'\n\x0ftemplate_exists\x18\x02\x20\x01(\x08R\x0etempla\
    teExists\x12\x1a\n\x08template\x18\x03\x20\x01(\tR\x08template\"\xc1\x01\
    \n\x17CMsgAMGrantGuestPasses2\x12\x19\n\x08steam_id\x18\x01\x20\x01(\x06\
    R\x07steamId\x12\x1d\n\npackage_id\x18\x02\x20\x01(\rR\tpackageId\x12&\n\
    \x0fpasses_to_grant\x18\x03\x20\x01(\x05R\rpassesToGrant\x12,\n\x12days_\
    to_expiration\x18\x04\x20\x01(\x05R\x10daysToExpiration\x12\x16\n\x06act\
    ion\x18\x05\x20\x01(\x05R\x06action\"b\n\x1fCMsgAMGrantGuestPasses2Respo\
    nse\x12\x18\n\x07eresult\x18\x01\x20\x01(\x05R\x07eresult\x12%\n\x0epass\
    es_granted\x18\x02\x20\x01(\x05R\rpassesGranted\"3\n\x15CMsgGCGetPersona\
    Names\x12\x1a\n\x08steamids\x18\x01\x20\x03(\x06R\x08steamids\"\x81\x02\
    \n\x1eCMsgGCGetPersonaNames_Response\x12]\n\x11succeeded_lookups\x18\x01\
    \x20\x03(\x0b20.dota.CMsgGCGetPersonaNames_Response.PersonaNameR\x10succ\
    eededLookups\x124\n\x16failed_lookup_steamids\x18\x02\x20\x03(\x06R\x14f\
    ailedLookupSteamids\x1aJ\n\x0bPersonaName\x12\x18\n\x07steamid\x18\x01\
    \x20\x01(\x06R\x07steamid\x12!\n\x0cpersona_name\x18\x02\x20\x01(\tR\x0b\
    personaName\"_\n\x15CMsgGCCheckFriendship\x12!\n\x0csteamid_left\x18\x01\
    \x20\x01(\x06R\x0bsteamidLeft\x12#\n\rsteamid_right\x18\x02\x20\x01(\x06\
    R\x0csteamidRight\"e\n\x1eCMsgGCCheckFriendship_Response\x12\x18\n\x07su\
    ccess\x18\x01\x20\x01(\x08R\x07success\x12)\n\x10found_friendship\x18\
    \x02\x20\x01(\x08R\x0ffoundFriendship\"w\n\x17CMsgGCGetAppFriendsList\
    \x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12B\n\x1dinclude\
    _friendship_timestamps\x18\x02\x20\x01(\x08R\x1bincludeFriendshipTimesta\
    mps\"\xb4\x01\n\x20CMsgGCGetAppFriendsList_Response\x12\x18\n\x07success\
    \x18\x01\x20\x01(\x08R\x07success\x12\x1a\n\x08steamids\x18\x02\x20\x03(\
    \x06R\x08steamids\x123\n\x15friendship_timestamps\x18\x03\x20\x03(\x07R\
    \x14friendshipTimestamps\x12%\n\x0elast_playtimes\x18\x04\x20\x03(\x07R\
    \rlastPlaytimes\"\x8f\x02\n\x1bCMsgGCMsgMasterSetDirectory\x12(\n\x10mas\
    ter_dir_index\x18\x01\x20\x01(\x05R\x0emasterDirIndex\x129\n\x03dir\x18\
    \x02\x20\x03(\x0b2'.dota.CMsgGCMsgMasterSetDirectory.SubGCR\x03dir\x1a\
    \x8a\x01\n\x05SubGC\x12\x1b\n\tdir_index\x18\x01\x20\x01(\x05R\x08dirInd\
    ex\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x10\n\x03box\x18\
    \x03\x20\x01(\tR\x03box\x12!\n\x0ccommand_line\x18\x04\x20\x01(\tR\x0bco\
    mmandLine\x12\x1b\n\tgc_binary\x18\x05\x20\x01(\tR\x08gcBinary\"Z\n$CMsg\
    GCMsgMasterSetDirectory_Response\x12\x18\n\x07eresult\x18\x01\x20\x01(\
    \x05R\x07eresult\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"G\
    \n(CMsgGCMsgWebAPIJobRequestForwardResponse\x12\x1b\n\tdir_index\x18\x01\
    \x20\x01(\x05R\x08dirIndex\"A\n%CGCSystemMsg_GetPurchaseTrust_Request\
    \x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\"\x86\x02\n&CGCSy\
    stemMsg_GetPurchaseTrust_Response\x12;\n\x1ahas_prior_purchase_history\
    \x18\x01\x20\x01(\x08R\x17hasPriorPurchaseHistory\x12@\n\x1dhas_no_recen\
    t_password_resets\x18\x02\x20\x01(\x08R\x19hasNoRecentPasswordResets\x12\
    3\n\x16is_wallet_cash_trusted\x18\x03\x20\x01(\x08R\x13isWalletCashTrust\
    ed\x12(\n\x10time_all_trusted\x18\x04\x20\x01(\rR\x0etimeAllTrusted\"\
    \xcf\x01\n\x1dCMsgGCHAccountVacStatusChange\x12\x19\n\x08steam_id\x18\
    \x01\x20\x01(\x06R\x07steamId\x12\x15\n\x06app_id\x18\x02\x20\x01(\rR\
    \x05appId\x12.\n\x13rtime_vacban_starts\x18\x03\x20\x01(\rR\x11rtimeVacb\
    anStarts\x12\"\n\ris_banned_now\x18\x04\x20\x01(\x08R\x0bisBannedNow\x12\
    (\n\x10is_banned_future\x18\x05\x20\x01(\x08R\x0eisBannedFuture\"7\n\x1b\
    CMsgGCGetPartnerAccountLink\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\
    \x07steamid\"\xac\x01\n$CMsgGCGetPartnerAccountLink_Response\x12\x12\n\
    \x04pwid\x18\x01\x20\x01(\rR\x04pwid\x12\x18\n\x07nexonid\x18\x02\x20\
    \x01(\rR\x07nexonid\x12\x1a\n\x08ageclass\x18\x03\x20\x01(\x05R\x08agecl\
    ass\x12\x1f\n\x0bid_verified\x18\x04\x20\x01(\x08R\nidVerified\x12\x19\n\
    \x08is_adult\x18\x05\x20\x01(\x08R\x07isAdult\"\x8c\x03\n\x11CMsgGCRouti\
    ngInfo\x12\x1b\n\tdir_index\x18\x01\x20\x03(\x05R\x08dirIndex\x12=\n\x06\
    method\x18\x02\x20\x01(\x0e2%.dota.CMsgGCRoutingInfo.RoutingMethodR\x06m\
    ethod\x12A\n\x08fallback\x18\x03\x20\x01(\x0e2%.dota.CMsgGCRoutingInfo.R\
    outingMethodR\x08fallback\x12%\n\x0eprotobuf_field\x18\x04\x20\x01(\rR\r\
    protobufField\x12!\n\x0cwebapi_param\x18\x05\x20\x01(\tR\x0bwebapiParam\
    \"\x8d\x01\n\rRoutingMethod\x12\n\n\x06RANDOM\x10\0\x12\x0b\n\x07DISCARD\
    \x10\x01\x12\x12\n\x0eCLIENT_STEAMID\x10\x02\x12\x19\n\x15PROTOBUF_FIELD\
    _UINT64\x10\x03\x12\x10\n\x0cWEBAPI_PARAM\x10\x04\x12\"\n\x1eWEBAPI_PARA\
    M_STEAMID_ACCOUNTID\x10\x05\"\xed\x01\n\x1fCMsgGCMsgMasterSetWebAPIRouti\
    ng\x12E\n\x07entries\x18\x01\x20\x03(\x0b2+.dota.CMsgGCMsgMasterSetWebAP\
    IRouting.EntryR\x07entries\x1a\x82\x01\n\x05Entry\x12%\n\x0einterface_na\
    me\x18\x01\x20\x01(\tR\rinterfaceName\x12\x1f\n\x0bmethod_name\x18\x02\
    \x20\x01(\tR\nmethodName\x121\n\x07routing\x18\x03\x20\x01(\x0b2\x17.dot\
    a.CMsgGCRoutingInfoR\x07routing\"\xc5\x01\n\"CMsgGCMsgMasterSetClientMsg\
    Routing\x12H\n\x07entries\x18\x01\x20\x03(\x0b2..dota.CMsgGCMsgMasterSet\
    ClientMsgRouting.EntryR\x07entries\x1aU\n\x05Entry\x12\x19\n\x08msg_type\
    \x18\x01\x20\x01(\rR\x07msgType\x121\n\x07routing\x18\x02\x20\x01(\x0b2\
    \x17.dota.CMsgGCRoutingInfoR\x07routing\"D\n(CMsgGCMsgMasterSetWebAPIRou\
    ting_Response\x12\x18\n\x07eresult\x18\x01\x20\x01(\x05R\x07eresult\"G\n\
    +CMsgGCMsgMasterSetClientMsgRouting_Response\x12\x18\n\x07eresult\x18\
    \x01\x20\x01(\x05R\x07eresult\"\xe0\x03\n\x13CMsgGCMsgSetOptions\x12:\n\
    \x07options\x18\x01\x20\x03(\x0e2\x20.dota.CMsgGCMsgSetOptions.OptionR\
    \x07options\x12R\n\x11client_msg_ranges\x18\x02\x20\x03(\x0b2&.dota.CMsg\
    GCMsgSetOptions.MessageRangeR\x0fclientMsgRanges\x12K\n\rgcsql_version\
    \x18\x03\x20\x01(\x0e2&.dota.CMsgGCMsgSetOptions.GCSQLVersionR\x0cgcsqlV\
    ersion\x1a4\n\x0cMessageRange\x12\x10\n\x03low\x18\x01\x20\x02(\rR\x03lo\
    w\x12\x12\n\x04high\x18\x02\x20\x02(\rR\x04high\"n\n\x06Option\x12\x18\n\
    \x14NOTIFY_USER_SESSIONS\x10\0\x12\x1a\n\x16NOTIFY_SERVER_SESSIONS\x10\
    \x01\x12\x17\n\x13NOTIFY_ACHIEVEMENTS\x10\x02\x12\x15\n\x11NOTIFY_VAC_AC\
    TION\x10\x03\"F\n\x0cGCSQLVersion\x12\x1a\n\x16GCSQL_VERSION_BASELINE\
    \x10\x01\x12\x1a\n\x16GCSQL_VERSION_BOOLTYPE\x10\x02\"\x86\x03\n\x14CMsg\
    GCHUpdateSession\x12\x19\n\x08steam_id\x18\x01\x20\x01(\x06R\x07steamId\
    \x12\x15\n\x06app_id\x18\x02\x20\x01(\rR\x05appId\x12\x16\n\x06online\
    \x18\x03\x20\x01(\x08R\x06online\x12&\n\x0fserver_steam_id\x18\x04\x20\
    \x01(\x06R\rserverSteamId\x12\x1f\n\x0bserver_addr\x18\x05\x20\x01(\rR\n\
    serverAddr\x12\x1f\n\x0bserver_port\x18\x06\x20\x01(\rR\nserverPort\x12\
    \x17\n\x07os_type\x18\x07\x20\x01(\rR\x06osType\x12\x1f\n\x0bclient_addr\
    \x18\x08\x20\x01(\rR\nclientAddr\x12H\n\x0cextra_fields\x18\t\x20\x03(\
    \x0b2%.dota.CMsgGCHUpdateSession.ExtraFieldR\x0bextraFields\x1a6\n\nExtr\
    aField\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value\"\xb5\x02\n$CMsgNotificationOfSuspiciousAc\
    tivity\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\
    \x05appid\x18\x02\x20\x01(\rR\x05appid\x12o\n\x12multiple_instances\x18\
    \x03\x20\x01(\x0b2@.dota.CMsgNotificationOfSuspiciousActivity.MultipleGa\
    meInstancesR\x11multipleInstances\x1al\n\x15MultipleGameInstances\x12,\n\
    \x12app_instance_count\x18\x01\x20\x01(\rR\x10appInstanceCount\x12%\n\
    \x0eother_steamids\x18\x02\x20\x03(\x06R\rotherSteamids\"\x88\x07\n\x16C\
    MsgDPPartnerMicroTxns\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\
    \x12\x17\n\x07gc_name\x18\x02\x20\x01(\tR\x06gcName\x12B\n\x07partner\
    \x18\x03\x20\x01(\x0b2(.dota.CMsgDPPartnerMicroTxns.PartnerInfoR\x07part\
    ner\x12P\n\x0ctransactions\x18\x04\x20\x03(\x0b2,.dota.CMsgDPPartnerMicr\
    oTxns.PartnerMicroTxnR\x0ctransactions\x1a\x8c\x04\n\x0fPartnerMicroTxn\
    \x12\x1b\n\tinit_time\x18\x01\x20\x01(\rR\x08initTime\x12(\n\x10last_upd\
    ate_time\x18\x02\x20\x01(\rR\x0elastUpdateTime\x12\x15\n\x06txn_id\x18\
    \x03\x20\x01(\x04R\x05txnId\x12\x1d\n\naccount_id\x18\x04\x20\x01(\rR\ta\
    ccountId\x12\x1b\n\tline_item\x18\x05\x20\x01(\rR\x08lineItem\x12\x17\n\
    \x07item_id\x18\x06\x20\x01(\x04R\x06itemId\x12\x1b\n\tdef_index\x18\x07\
    \x20\x01(\rR\x08defIndex\x12\x14\n\x05price\x18\x08\x20\x01(\x04R\x05pri\
    ce\x12\x10\n\x03tax\x18\t\x20\x01(\x04R\x03tax\x12\x1b\n\tprice_usd\x18\
    \n\x20\x01(\x04R\x08priceUsd\x12\x17\n\x07tax_usd\x18\x0b\x20\x01(\x04R\
    \x06taxUsd\x12#\n\rpurchase_type\x18\x0c\x20\x01(\rR\x0cpurchaseType\x12\
    $\n\x0esteam_txn_type\x18\r\x20\x01(\rR\x0csteamTxnType\x12!\n\x0ccountr\
    y_code\x18\x0e\x20\x01(\tR\x0bcountryCode\x12\x1f\n\x0bregion_code\x18\
    \x0f\x20\x01(\tR\nregionCode\x12\x1a\n\x08quantity\x18\x10\x20\x01(\x05R\
    \x08quantity\x12\x20\n\x0cref_trans_id\x18\x11\x20\x01(\x04R\nrefTransId\
    \x1a\x99\x01\n\x0bPartnerInfo\x12\x1d\n\npartner_id\x18\x01\x20\x01(\rR\
    \tpartnerId\x12!\n\x0cpartner_name\x18\x02\x20\x01(\tR\x0bpartnerName\
    \x12#\n\rcurrency_code\x18\x03\x20\x01(\tR\x0ccurrencyCode\x12#\n\rcurre\
    ncy_name\x18\x04\x20\x01(\tR\x0ccurrencyName\"\x89\x03\n\x1eCMsgDPPartne\
    rMicroTxnsResponse\x12\x18\n\x07eresult\x18\x01\x20\x01(\rR\x07eresult\
    \x12O\n\neerrorcode\x18\x02\x20\x01(\x0e2/.dota.CMsgDPPartnerMicroTxnsRe\
    sponse.EErrorCodeR\neerrorcode\"\xfb\x01\n\nEErrorCode\x12\x0e\n\nk_MsgV\
    alid\x10\0\x12\x15\n\x11k_MsgInvalidAppID\x10\x01\x12\x1b\n\x17k_MsgInva\
    lidPartnerInfo\x10\x02\x12\x17\n\x13k_MsgNoTransactions\x10\x03\x12\x13\
    \n\x0fk_MsgSQLFailure\x10\x04\x12\x1f\n\x1bk_MsgPartnerInfoDiscrepancy\
    \x10\x05\x12\x20\n\x1ck_MsgTransactionInsertFailed\x10\x07\x12\x17\n\x13\
    k_MsgAlreadyRunning\x10\x08\x12\x1f\n\x1bk_MsgInvalidTransactionData\x10\
    \t\"o\n\x1cCMsgGCHVacVerificationChange\x12\x18\n\x07steamid\x18\x01\x20\
    \x01(\x06R\x07steamid\x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\
    \x12\x1f\n\x0bis_verified\x18\x03\x20\x01(\x08R\nisVerified\"|\n\x1dCMsg\
    GCHAccountTwoFactorChange\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07\
    steamid\x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12+\n\x11twofac\
    tor_enabled\x18\x03\x20\x01(\x08R\x10twofactorEnabled\"M\n\x19CMsgGCChec\
    kClanMembership\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\
    \x12\x16\n\x06clanid\x18\x02\x20\x01(\rR\x06clanid\"@\n\"CMsgGCCheckClan\
    Membership_Response\x12\x1a\n\x08ismember\x18\x01\x20\x01(\x08R\x08ismem\
    ber\"\xda\x02\n\x18CMsgGCHAppCheersReceived\x12\x14\n\x05appid\x18\x01\
    \x20\x01(\rR\x05appid\x12O\n\rcheer_targets\x18\x02\x20\x03(\x0b2*.dota.\
    CMsgGCHAppCheersReceived.CheerTargetR\x0ccheerTargets\x1aS\n\x0fCheerTyp\
    eAmount\x12\x1d\n\ncheer_type\x18\x01\x20\x01(\rR\tcheerType\x12!\n\x0cc\
    heer_amount\x18\x02\x20\x01(\rR\x0bcheerAmount\x1a\x81\x01\n\x0bCheerTar\
    get\x12!\n\x0ccheer_target\x18\x01\x20\x01(\x04R\x0bcheerTarget\x12O\n\
    \x0bcheer_types\x18\x02\x20\x03(\x0b2..dota.CMsgGCHAppCheersReceived.Che\
    erTypeAmountR\ncheerTypes\"Z\n\x1fCMsgGCHAppCheersGetAllowedTypes\x12\
    \x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12!\n\x0ccheer_target\x18\
    \x02\x20\x01(\x04R\x0bcheerTarget\"\xfd\x02\n'CMsgGCHAppCheersGetAllowed\
    TypesResponse\x12<\n\x1bcheer_types_valid_all_users\x18\x01\x20\x03(\rR\
    \x17cheerTypesValidAllUsers\x12\\\n\x0ccheer_remaps\x18\x02\x20\x03(\x0b\
    29.dota.CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemapsR\x0bcheerRem\
    aps\x12%\n\x0ecache_duration\x18\x03\x20\x01(\rR\rcacheDuration\x1a\x8e\
    \x01\n\x0bCheerRemaps\x12.\n\x13original_cheer_type\x18\x01\x20\x01(\rR\
    \x11originalCheerType\x12.\n\x13remapped_cheer_type\x18\x02\x20\x01(\rR\
    \x11remappedCheerType\x12\x1f\n\x0baccount_ids\x18\x03\x20\x03(\rR\nacco\
    untIds\"\xca\x03\n+CGCSystemMsg_ReportExternalPurchase_Request\x12\x14\n\
    \x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07steamid\x18\x02\x20\
    \x01(\x06R\x07steamid\x128\n\x08provider\x18\x03\x20\x01(\x0e2\x1c.dota.\
    EMobilePaymentProviderR\x08provider\x12\x18\n\x07orderid\x18\x04\x20\x01\
    (\x04R\x07orderid\x12)\n\x10provider_orderid\x18\x05\x20\x01(\tR\x0fprov\
    iderOrderid\x12\x16\n\x06amount\x18\x06\x20\x01(\x03R\x06amount\x12\x1a\
    \n\x08currency\x18\x07\x20\x01(\tR\x08currency\x12\x1a\n\x08quantity\x18\
    \x08\x20\x01(\rR\x08quantity\x12\x16\n\x06itemid\x18\t\x20\x01(\rR\x06it\
    emid\x12)\n\x10item_description\x18\n\x20\x01(\tR\x0fitemDescription\x12\
    \x1a\n\x08language\x18\x0b\x20\x01(\tR\x08language\x12\x1a\n\x08category\
    \x18\x0c\x20\x01(\tR\x08category\x12!\n\x0ctime_created\x18\r\x20\x01(\r\
    R\x0btimeCreated\"b\n,CGCSystemMsg_ReportExternalPurchase_Response\x12\
    \x18\n\x07transid\x18\x01\x20\x01(\x06R\x07transid\x12\x18\n\x07orderid\
    \x18\x02\x20\x01(\x04R\x07orderid\"\xbd\x01\n#CWorkshop_AddSpecialPaymen\
    t_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x1e\n\ngam\
    eitemid\x18\x02\x20\x01(\rR\ngameitemid\x12\x12\n\x04date\x18\x03\x20\
    \x01(\tR\x04date\x12$\n\x0epayment_us_usd\x18\x04\x20\x01(\x04R\x0cpayme\
    ntUsUsd\x12&\n\x0fpayment_row_usd\x18\x05\x20\x01(\x04R\rpaymentRowUsd\"\
    &\n$CWorkshop_AddSpecialPayment_Response\"p\n$CWorkshop_GetSpecialPaymen\
    ts_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x1e\n\nga\
    meitemid\x18\x02\x20\x01(\rR\ngameitemid\x12\x12\n\x04date\x18\x03\x20\
    \x01(\tR\x04date\"\xc7\x02\n%CWorkshop_GetSpecialPayments_Response\x12e\
    \n\x10special_payments\x18\x01\x20\x03(\x0b2:.dota.CWorkshop_GetSpecialP\
    ayments_Response.SpecialPaymentR\x0fspecialPayments\x1a\xb6\x01\n\x0eSpe\
    cialPayment\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x1e\n\ng\
    ameitemid\x18\x02\x20\x01(\rR\ngameitemid\x12\x12\n\x04date\x18\x03\x20\
    \x01(\tR\x04date\x12+\n\x12net_payment_us_usd\x18\x04\x20\x01(\x04R\x0fn\
    etPaymentUsUsd\x12-\n\x13net_payment_row_usd\x18\x05\x20\x01(\x04R\x10ne\
    tPaymentRowUsd*\x93\x01\n\x16EMobilePaymentProvider\x12$\n\x20k_EMobileP\
    aymentProvider_Invalid\x10\0\x12'\n#k_EMobilePaymentProvider_GooglePlay\
    \x10\x01\x12*\n&k_EMobilePaymentProvider_AppleAppStore\x10\x02B%Z#github\
    .com/dotabuff/manta/dota;dotaJ\xee\xcf\x01\n\x07\x12\x05\0\0\xf8\x04\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0c\n\
    \x08\n\x01\x08\x12\x03\x03\0:\n\t\n\x02\x08\x0b\x12\x03\x03\0:\n\t\n\x02\
    \x03\0\x12\x03\x05\x07\x1c\n\n\n\x02\x05\0\x12\x04\x07\0\x0b\x01\n\n\n\
    \x03\x05\0\x01\x12\x03\x07\x05\x1b\n\x0b\n\x04\x05\0\x02\0\x12\x03\x08\
    \x08-\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x08\x08(\n\x0c\n\x05\x05\0\x02\
    \0\x02\x12\x03\x08+,\n\x0b\n\x04\x05\0\x02\x01\x12\x03\t\x080\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\t\x08+\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03\t./\n\x0b\n\x04\x05\0\x02\x02\x12\x03\n\x083\n\x0c\n\x05\x05\0\x02\
    \x02\x01\x12\x03\n\x08.\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\n12\n\n\n\
    \x02\x04\0\x12\x04\r\0\x13\x01\n\n\n\x03\x04\0\x01\x12\x03\r\x08\x15\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x0e\x08#\n\x0c\n\x05\x04\0\x02\0\x04\x12\
    \x03\x0e\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0e\x11\x17\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x0e\x18\x1e\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x0e!\"\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0f\x08'\n\x0c\n\x05\x04\0\
    \x02\x01\x04\x12\x03\x0f\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x0f\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\x18\"\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x0f%&\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x10\
    \x08/\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x10\x08\x10\n\x0c\n\x05\x04\
    \0\x02\x02\x05\x12\x03\x10\x11\x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \x10\x18*\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x10-.\n\x0b\n\x04\x04\0\
    \x02\x03\x12\x03\x11\x08#\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x11\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x11\x11\x17\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\x11\x18\x1e\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x11!\"\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x12\x08#\n\x0c\n\x05\x04\0\x02\
    \x04\x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x12\
    \x11\x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x12\x18\x1e\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\x12!\"\n\n\n\x02\x04\x01\x12\x04\x15\0)\x01\n\
    \n\n\x03\x04\x01\x01\x12\x03\x15\x08\x17\n\x0c\n\x04\x04\x01\x03\0\x12\
    \x04\x16\x08\x19\t\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03\x16\x10\x1d\n\r\
    \n\x06\x04\x01\x03\0\x02\0\x12\x03\x17\x10)\n\x0e\n\x07\x04\x01\x03\0\
    \x02\0\x04\x12\x03\x17\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\
    \x03\x17\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\x02\0\x01\x12\x03\x17\x20$\n\
    \x0e\n\x07\x04\x01\x03\0\x02\0\x03\x12\x03\x17'(\n\r\n\x06\x04\x01\x03\0\
    \x02\x01\x12\x03\x18\x10*\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x04\x12\x03\
    \x18\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x05\x12\x03\x18\x19\x1f\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x01\x01\x12\x03\x18\x20%\n\x0e\n\x07\x04\
    \x01\x03\0\x02\x01\x03\x12\x03\x18()\n\x0c\n\x04\x04\x01\x03\x01\x12\x04\
    \x1b\x08\x1e\t\n\x0c\n\x05\x04\x01\x03\x01\x01\x12\x03\x1b\x10\x1a\n\r\n\
    \x06\x04\x01\x03\x01\x02\0\x12\x03\x1c\x10)\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\0\x04\x12\x03\x1c\x10\x18\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x05\x12\
    \x03\x1c\x19\x1f\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x01\x12\x03\x1c\x20$\
    \n\x0e\n\x07\x04\x01\x03\x01\x02\0\x03\x12\x03\x1c'(\n\r\n\x06\x04\x01\
    \x03\x01\x02\x01\x12\x03\x1d\x10)\n\x0e\n\x07\x04\x01\x03\x01\x02\x01\
    \x04\x12\x03\x1d\x10\x18\n\x0e\n\x07\x04\x01\x03\x01\x02\x01\x05\x12\x03\
    \x1d\x19\x1e\n\x0e\n\x07\x04\x01\x03\x01\x02\x01\x01\x12\x03\x1d\x1f$\n\
    \x0e\n\x07\x04\x01\x03\x01\x02\x01\x03\x12\x03\x1d'(\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\x20\x08+\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x20\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x20\x11\x17\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x20\x18&\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x20)*\n\x0b\n\x04\x04\x01\x02\x01\x12\x03!\x08%\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03!\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03!\x11\
    \x17\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03!\x18\x20\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03!#$\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\"\x08\
    \x20\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\"\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\x02\x05\x12\x03\"\x11\x17\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\
    \x03\"\x18\x1b\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\"\x1e\x1f\n\x0b\n\
    \x04\x04\x01\x02\x03\x12\x03#\x08;\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\
    \x03#\x08\x10\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03#\x11.\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03#/6\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03#\
    9:\n\x0b\n\x04\x04\x01\x02\x04\x12\x03$\x08;\n\x0c\n\x05\x04\x01\x02\x04\
    \x04\x12\x03$\x08\x10\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03$\x11+\n\
    \x0c\n\x05\x04\x01\x02\x04\x01\x12\x03$,6\n\x0c\n\x05\x04\x01\x02\x04\
    \x03\x12\x03$9:\n\x0b\n\x04\x04\x01\x02\x05\x12\x03%\x08<\n\x0c\n\x05\
    \x04\x01\x02\x05\x04\x12\x03%\x08\x10\n\x0c\n\x05\x04\x01\x02\x05\x06\
    \x12\x03%\x11+\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03%,7\n\x0c\n\x05\
    \x04\x01\x02\x05\x03\x12\x03%:;\n\x0b\n\x04\x04\x01\x02\x06\x12\x03&\x08\
    \x20\n\x0c\n\x05\x04\x01\x02\x06\x04\x12\x03&\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\x06\x05\x12\x03&\x11\x16\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\
    \x03&\x17\x1b\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03&\x1e\x1f\n\x0b\n\
    \x04\x04\x01\x02\x07\x12\x03'\x08-\n\x0c\n\x05\x04\x01\x02\x07\x04\x12\
    \x03'\x08\x10\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03'\x11\x17\n\x0c\n\
    \x05\x04\x01\x02\x07\x01\x12\x03'\x18(\n\x0c\n\x05\x04\x01\x02\x07\x03\
    \x12\x03'+,\n\x0b\n\x04\x04\x01\x02\x08\x12\x03(\x08$\n\x0c\n\x05\x04\
    \x01\x02\x08\x04\x12\x03(\x08\x10\n\x0c\n\x05\x04\x01\x02\x08\x05\x12\
    \x03(\x11\x15\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03(\x16\x1f\n\x0c\n\
    \x05\x04\x01\x02\x08\x03\x12\x03(\"#\n\n\n\x02\x04\x02\x12\x04+\02\x01\n\
    \n\n\x03\x04\x02\x01\x12\x03+\x08\x19\n\x0b\n\x04\x04\x02\x02\0\x12\x03,\
    \x08+\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03,\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03,\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03,\x18&\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03,)*\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03-\x08(\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03-\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03-\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03-\x18#\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03-&'\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03.\x08$\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\
    \x03.\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03.\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03.\x18\x1f\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03.\"#\n\x0b\n\x04\x04\x02\x02\x03\x12\x03/\x08+\n\x0c\n\x05\
    \x04\x02\x02\x03\x04\x12\x03/\x08\x10\n\x0c\n\x05\x04\x02\x02\x03\x06\
    \x12\x03/\x11\x1e\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03/\x1f&\n\x0c\n\
    \x05\x04\x02\x02\x03\x03\x12\x03/)*\n\x0b\n\x04\x04\x02\x02\x04\x12\x030\
    \x08-\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x030\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x04\x06\x12\x030\x11\x20\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\
    \x030!(\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x030+,\n\x0b\n\x04\x04\x02\
    \x02\x05\x12\x031\x08+\n\x0c\n\x05\x04\x02\x02\x05\x04\x12\x031\x08\x10\
    \n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x031\x11\x17\n\x0c\n\x05\x04\x02\
    \x02\x05\x01\x12\x031\x18&\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x031)*\n\
    \n\n\x02\x04\x03\x12\x044\0=\x01\n\n\n\x03\x04\x03\x01\x12\x034\x08\x18\
    \n\x0c\n\x04\x04\x03\x03\0\x12\x045\x088\t\n\x0c\n\x05\x04\x03\x03\0\x01\
    \x12\x035\x10\x1e\n\r\n\x06\x04\x03\x03\0\x02\0\x12\x036\x10)\n\x0e\n\
    \x07\x04\x03\x03\0\x02\0\x04\x12\x036\x10\x18\n\x0e\n\x07\x04\x03\x03\0\
    \x02\0\x05\x12\x036\x19\x1f\n\x0e\n\x07\x04\x03\x03\0\x02\0\x01\x12\x036\
    \x20$\n\x0e\n\x07\x04\x03\x03\0\x02\0\x03\x12\x036'(\n\r\n\x06\x04\x03\
    \x03\0\x02\x01\x12\x037\x10*\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x04\x12\
    \x037\x10\x18\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x05\x12\x037\x19\x1f\n\
    \x0e\n\x07\x04\x03\x03\0\x02\x01\x01\x12\x037\x20%\n\x0e\n\x07\x04\x03\
    \x03\0\x02\x01\x03\x12\x037()\n\x0b\n\x04\x04\x03\x02\0\x12\x03:\x08(\n\
    \x0c\n\x05\x04\x03\x02\0\x04\x12\x03:\x08\x10\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03:\x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03:\x18#\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03:&'\n\x0b\n\x04\x04\x03\x02\x01\x12\x03;\
    \x08=\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03;\x08\x10\n\x0c\n\x05\x04\
    \x03\x02\x01\x06\x12\x03;\x110\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03;1\
    8\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03;;<\n\x0b\n\x04\x04\x03\x02\x02\
    \x12\x03<\x08\x20\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03<\x08\x10\n\x0c\
    \n\x05\x04\x03\x02\x02\x05\x12\x03<\x11\x16\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03<\x17\x1b\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03<\x1e\x1f\n\
    \n\n\x02\x04\x04\x12\x04?\0B\x01\n\n\n\x03\x04\x04\x01\x12\x03?\x08\x1a\
    \n\x0b\n\x04\x04\x04\x02\0\x12\x03@\x08(\n\x0c\n\x05\x04\x04\x02\0\x04\
    \x12\x03@\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03@\x11\x17\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03@\x18#\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03@&'\n\x0b\n\x04\x04\x04\x02\x01\x12\x03A\x08*\n\x0c\n\x05\x04\x04\
    \x02\x01\x04\x12\x03A\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03A\
    \x11\x17\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03A\x18%\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x03A()\n\n\n\x02\x04\x05\x12\x04D\0F\x01\n\n\n\x03\
    \x04\x05\x01\x12\x03D\x08\"\n\x0b\n\x04\x04\x05\x02\0\x12\x03E\x08&\n\
    \x0c\n\x05\x04\x05\x02\0\x04\x12\x03E\x08\x10\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x03E\x11\x18\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03E\x19!\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x03E$%\n\n\n\x02\x04\x06\x12\x04H\0P\x01\n\
    \n\n\x03\x04\x06\x01\x12\x03H\x08\x1a\n\x0b\n\x04\x04\x06\x02\0\x12\x03I\
    \x08#\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03I\x08\x10\n\x0c\n\x05\x04\x06\
    \x02\0\x05\x12\x03I\x11\x17\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03I\x18\
    \x1e\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03I!\"\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03J\x08'\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03J\x08\x10\n\
    \x0c\n\x05\x04\x06\x02\x01\x05\x12\x03J\x11\x17\n\x0c\n\x05\x04\x06\x02\
    \x01\x01\x12\x03J\x18\"\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03J%&\n\x0b\
    \n\x04\x04\x06\x02\x02\x12\x03K\x08#\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\
    \x03K\x08\x10\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03K\x11\x15\n\x0c\n\
    \x05\x04\x06\x02\x02\x01\x12\x03K\x16\x1e\n\x0c\n\x05\x04\x06\x02\x02\
    \x03\x12\x03K!\"\n\x0b\n\x04\x04\x06\x02\x03\x12\x03L\x08!\n\x0c\n\x05\
    \x04\x06\x02\x03\x04\x12\x03L\x08\x10\n\x0c\n\x05\x04\x06\x02\x03\x05\
    \x12\x03L\x11\x17\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03L\x18\x1c\n\x0c\
    \n\x05\x04\x06\x02\x03\x03\x12\x03L\x1f\x20\n\x0b\n\x04\x04\x06\x02\x04\
    \x12\x03M\x08\"\n\x0c\n\x05\x04\x06\x02\x04\x04\x12\x03M\x08\x10\n\x0c\n\
    \x05\x04\x06\x02\x04\x05\x12\x03M\x11\x17\n\x0c\n\x05\x04\x06\x02\x04\
    \x01\x12\x03M\x18\x1d\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\x03M\x20!\n\
    \x0b\n\x04\x04\x06\x02\x05\x12\x03N\x08!\n\x0c\n\x05\x04\x06\x02\x05\x04\
    \x12\x03N\x08\x10\n\x0c\n\x05\x04\x06\x02\x05\x05\x12\x03N\x11\x17\n\x0c\
    \n\x05\x04\x06\x02\x05\x01\x12\x03N\x18\x1c\n\x0c\n\x05\x04\x06\x02\x05\
    \x03\x12\x03N\x1f\x20\n\x0b\n\x04\x04\x06\x02\x06\x12\x03O\x08'\n\x0c\n\
    \x05\x04\x06\x02\x06\x04\x12\x03O\x08\x10\n\x0c\n\x05\x04\x06\x02\x06\
    \x05\x12\x03O\x11\x17\n\x0c\n\x05\x04\x06\x02\x06\x01\x12\x03O\x18!\n\
    \x0c\n\x05\x04\x06\x02\x06\x03\x12\x03O$&\n\n\n\x02\x04\x07\x12\x04R\0T\
    \x01\n\n\n\x03\x04\x07\x01\x12\x03R\x08\x19\n\x0b\n\x04\x04\x07\x02\0\
    \x12\x03S\x08%\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03S\x08\x10\n\x0c\n\
    \x05\x04\x07\x02\0\x05\x12\x03S\x11\x18\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x03S\x19\x20\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03S#$\n\n\n\x02\x04\
    \x08\x12\x04V\0Z\x01\n\n\n\x03\x04\x08\x01\x12\x03V\x08\x1a\n\x0b\n\x04\
    \x04\x08\x02\0\x12\x03W\x08'\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03W\x08\
    \x10\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03W\x11\x17\n\x0c\n\x05\x04\x08\
    \x02\0\x01\x12\x03W\x18\"\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03W%&\n\x0b\
    \n\x04\x04\x08\x02\x01\x12\x03X\x08)\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\
    \x03X\x08\x10\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03X\x11\x17\n\x0c\n\
    \x05\x04\x08\x02\x01\x01\x12\x03X\x18$\n\x0c\n\x05\x04\x08\x02\x01\x03\
    \x12\x03X'(\n\x0b\n\x04\x04\x08\x02\x02\x12\x03Y\x08%\n\x0c\n\x05\x04\
    \x08\x02\x02\x04\x12\x03Y\x08\x10\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\
    \x03Y\x11\x17\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03Y\x18\x20\n\x0c\n\
    \x05\x04\x08\x02\x02\x03\x12\x03Y#$\n\n\n\x02\x04\t\x12\x04\\\0_\x01\n\n\
    \n\x03\x04\t\x01\x12\x03\\\x08!\n\x0b\n\x04\x04\t\x02\0\x12\x03]\x080\n\
    \x0c\n\x05\x04\t\x02\0\x04\x12\x03]\x08\x10\n\x0c\n\x05\x04\t\x02\0\x06\
    \x12\x03]\x11#\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03]$+\n\x0c\n\x05\x04\t\
    \x02\0\x03\x12\x03]./\n\x0b\n\x04\x04\t\x02\x01\x12\x03^\x08#\n\x0c\n\
    \x05\x04\t\x02\x01\x04\x12\x03^\x08\x10\n\x0c\n\x05\x04\t\x02\x01\x05\
    \x12\x03^\x11\x17\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03^\x18\x1e\n\x0c\n\
    \x05\x04\t\x02\x01\x03\x12\x03^!\"\n\n\n\x02\x04\n\x12\x04a\0e\x01\n\n\n\
    \x03\x04\n\x01\x12\x03a\x08\x1e\n\x0b\n\x04\x04\n\x02\0\x12\x03b\x08&\n\
    \x0c\n\x05\x04\n\x02\0\x04\x12\x03b\x08\x10\n\x0c\n\x05\x04\n\x02\0\x05\
    \x12\x03b\x11\x18\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03b\x19!\n\x0c\n\x05\
    \x04\n\x02\0\x03\x12\x03b$%\n\x0b\n\x04\x04\n\x02\x01\x12\x03c\x08%\n\
    \x0c\n\x05\x04\n\x02\x01\x04\x12\x03c\x08\x10\n\x0c\n\x05\x04\n\x02\x01\
    \x05\x12\x03c\x11\x18\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03c\x19\x20\n\
    \x0c\n\x05\x04\n\x02\x01\x03\x12\x03c#$\n\x0b\n\x04\x04\n\x02\x02\x12\
    \x03d\x08\"\n\x0c\n\x05\x04\n\x02\x02\x04\x12\x03d\x08\x10\n\x0c\n\x05\
    \x04\n\x02\x02\x05\x12\x03d\x11\x17\n\x0c\n\x05\x04\n\x02\x02\x01\x12\
    \x03d\x18\x1d\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03d\x20!\n\n\n\x02\x04\
    \x0b\x12\x04g\0x\x01\n\n\n\x03\x04\x0b\x01\x12\x03g\x08&\n\x0c\n\x04\x04\
    \x0b\x03\0\x12\x04h\x08k\t\n\x0c\n\x05\x04\x0b\x03\0\x01\x12\x03h\x10\
    \x15\n\r\n\x06\x04\x0b\x03\0\x02\0\x12\x03i\x10,\n\x0e\n\x07\x04\x0b\x03\
    \0\x02\0\x04\x12\x03i\x10\x18\n\x0e\n\x07\x04\x0b\x03\0\x02\0\x05\x12\
    \x03i\x19\x1f\n\x0e\n\x07\x04\x0b\x03\0\x02\0\x01\x12\x03i\x20'\n\x0e\n\
    \x07\x04\x0b\x03\0\x02\0\x03\x12\x03i*+\n\r\n\x06\x04\x0b\x03\0\x02\x01\
    \x12\x03j\x10/\n\x0e\n\x07\x04\x0b\x03\0\x02\x01\x04\x12\x03j\x10\x18\n\
    \x0e\n\x07\x04\x0b\x03\0\x02\x01\x05\x12\x03j\x19\x1f\n\x0e\n\x07\x04\
    \x0b\x03\0\x02\x01\x01\x12\x03j\x20*\n\x0e\n\x07\x04\x0b\x03\0\x02\x01\
    \x03\x12\x03j-.\n\x0c\n\x04\x04\x0b\x03\x01\x12\x04m\x08q\t\n\x0c\n\x05\
    \x04\x0b\x03\x01\x01\x12\x03m\x10\"\n\r\n\x06\x04\x0b\x03\x01\x02\0\x12\
    \x03n\x103\n\x0e\n\x07\x04\x0b\x03\x01\x02\0\x04\x12\x03n\x10\x18\n\x0e\
    \n\x07\x04\x0b\x03\x01\x02\0\x05\x12\x03n\x19\x1f\n\x0e\n\x07\x04\x0b\
    \x03\x01\x02\0\x01\x12\x03n\x20.\n\x0e\n\x07\x04\x0b\x03\x01\x02\0\x03\
    \x12\x03n12\n\r\n\x06\x04\x0b\x03\x01\x02\x01\x12\x03o\x107\n\x0e\n\x07\
    \x04\x0b\x03\x01\x02\x01\x04\x12\x03o\x10\x18\n\x0e\n\x07\x04\x0b\x03\
    \x01\x02\x01\x05\x12\x03o\x19\x1f\n\x0e\n\x07\x04\x0b\x03\x01\x02\x01\
    \x01\x12\x03o\x202\n\x0e\n\x07\x04\x0b\x03\x01\x02\x01\x03\x12\x03o56\n\
    \r\n\x06\x04\x0b\x03\x01\x02\x02\x12\x03p\x101\n\x0e\n\x07\x04\x0b\x03\
    \x01\x02\x02\x04\x12\x03p\x10\x18\n\x0e\n\x07\x04\x0b\x03\x01\x02\x02\
    \x05\x12\x03p\x19\x20\n\x0e\n\x07\x04\x0b\x03\x01\x02\x02\x01\x12\x03p!,\
    \n\x0e\n\x07\x04\x0b\x03\x01\x02\x02\x03\x12\x03p/0\n\x0b\n\x04\x04\x0b\
    \x02\0\x12\x03s\x08&\n\x0c\n\x05\x04\x0b\x02\0\x04\x12\x03s\x08\x10\n\
    \x0c\n\x05\x04\x0b\x02\0\x05\x12\x03s\x11\x18\n\x0c\n\x05\x04\x0b\x02\0\
    \x01\x12\x03s\x19!\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03s$%\n\x0b\n\x04\
    \x04\x0b\x02\x01\x12\x03t\x08%\n\x0c\n\x05\x04\x0b\x02\x01\x04\x12\x03t\
    \x08\x10\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03t\x11\x18\n\x0c\n\x05\
    \x04\x0b\x02\x01\x01\x12\x03t\x19\x20\n\x0c\n\x05\x04\x0b\x02\x01\x03\
    \x12\x03t#$\n\x0b\n\x04\x04\x0b\x02\x02\x12\x03u\x08#\n\x0c\n\x05\x04\
    \x0b\x02\x02\x04\x12\x03u\x08\x10\n\x0c\n\x05\x04\x0b\x02\x02\x05\x12\
    \x03u\x11\x16\n\x0c\n\x05\x04\x0b\x02\x02\x01\x12\x03u\x17\x1e\n\x0c\n\
    \x05\x04\x0b\x02\x02\x03\x12\x03u!\"\n\x0b\n\x04\x04\x0b\x02\x03\x12\x03\
    v\x08@\n\x0c\n\x05\x04\x0b\x02\x03\x04\x12\x03v\x08\x10\n\x0c\n\x05\x04\
    \x0b\x02\x03\x06\x12\x03v\x115\n\x0c\n\x05\x04\x0b\x02\x03\x01\x12\x03v6\
    ;\n\x0c\n\x05\x04\x0b\x02\x03\x03\x12\x03v>?\n\x0b\n\x04\x04\x0b\x02\x04\
    \x12\x03w\x08Z\n\x0c\n\x05\x04\x0b\x02\x04\x04\x12\x03w\x08\x10\n\x0c\n\
    \x05\x04\x0b\x02\x04\x06\x12\x03w\x11B\n\x0c\n\x05\x04\x0b\x02\x04\x01\
    \x12\x03wCU\n\x0c\n\x05\x04\x0b\x02\x04\x03\x12\x03wXY\n\n\n\x02\x04\x0c\
    \x12\x04z\0}\x01\n\n\n\x03\x04\x0c\x01\x12\x03z\x08\x1c\n\x0b\n\x04\x04\
    \x0c\x02\0\x12\x03{\x08#\n\x0c\n\x05\x04\x0c\x02\0\x04\x12\x03{\x08\x10\
    \n\x0c\n\x05\x04\x0c\x02\0\x05\x12\x03{\x11\x17\n\x0c\n\x05\x04\x0c\x02\
    \0\x01\x12\x03{\x18\x1e\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03{!\"\n\x0b\
    \n\x04\x04\x0c\x02\x01\x12\x03|\x08+\n\x0c\n\x05\x04\x0c\x02\x01\x04\x12\
    \x03|\x08\x10\n\x0c\n\x05\x04\x0c\x02\x01\x05\x12\x03|\x11\x17\n\x0c\n\
    \x05\x04\x0c\x02\x01\x01\x12\x03|\x18&\n\x0c\n\x05\x04\x0c\x02\x01\x03\
    \x12\x03|)*\n\x0b\n\x02\x04\r\x12\x05\x7f\0\x81\x01\x01\n\n\n\x03\x04\r\
    \x01\x12\x03\x7f\x08$\n\x0c\n\x04\x04\r\x02\0\x12\x04\x80\x01\x08)\n\r\n\
    \x05\x04\r\x02\0\x04\x12\x04\x80\x01\x08\x10\n\r\n\x05\x04\r\x02\0\x05\
    \x12\x04\x80\x01\x11\x17\n\r\n\x05\x04\r\x02\0\x01\x12\x04\x80\x01\x18$\
    \n\r\n\x05\x04\r\x02\0\x03\x12\x04\x80\x01'(\n\x0c\n\x02\x04\x0e\x12\x06\
    \x83\x01\0\x85\x01\x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\x83\x01\x08\x1a\n\
    \x0c\n\x04\x04\x0e\x02\0\x12\x04\x84\x01\x08!\n\r\n\x05\x04\x0e\x02\0\
    \x04\x12\x04\x84\x01\x08\x10\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\x84\x01\
    \x11\x17\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\x84\x01\x18\x1c\n\r\n\x05\
    \x04\x0e\x02\0\x03\x12\x04\x84\x01\x1f\x20\n\x0c\n\x02\x04\x0f\x12\x06\
    \x87\x01\0\x8e\x01\x01\n\x0b\n\x03\x04\x0f\x01\x12\x04\x87\x01\x08\"\n\
    \x0e\n\x04\x04\x0f\x03\0\x12\x06\x88\x01\x08\x8b\x01\t\n\r\n\x05\x04\x0f\
    \x03\0\x01\x12\x04\x88\x01\x10\x18\n\x0e\n\x06\x04\x0f\x03\0\x02\0\x12\
    \x04\x89\x01\x10(\n\x0f\n\x07\x04\x0f\x03\0\x02\0\x04\x12\x04\x89\x01\
    \x10\x18\n\x0f\n\x07\x04\x0f\x03\0\x02\0\x05\x12\x04\x89\x01\x19\x1d\n\
    \x0f\n\x07\x04\x0f\x03\0\x02\0\x01\x12\x04\x89\x01\x1e#\n\x0f\n\x07\x04\
    \x0f\x03\0\x02\0\x03\x12\x04\x89\x01&'\n\x0e\n\x06\x04\x0f\x03\0\x02\x01\
    \x12\x04\x8a\x01\x10)\n\x0f\n\x07\x04\x0f\x03\0\x02\x01\x04\x12\x04\x8a\
    \x01\x10\x18\n\x0f\n\x07\x04\x0f\x03\0\x02\x01\x05\x12\x04\x8a\x01\x19\
    \x1e\n\x0f\n\x07\x04\x0f\x03\0\x02\x01\x01\x12\x04\x8a\x01\x1f$\n\x0f\n\
    \x07\x04\x0f\x03\0\x02\x01\x03\x12\x04\x8a\x01'(\n\x0c\n\x04\x04\x0f\x02\
    \0\x12\x04\x8d\x01\x08@\n\r\n\x05\x04\x0f\x02\0\x04\x12\x04\x8d\x01\x08\
    \x10\n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\x8d\x01\x114\n\r\n\x05\x04\x0f\
    \x02\0\x01\x12\x04\x8d\x015;\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\x8d\x01\
    >?\n\x0c\n\x02\x04\x10\x12\x06\x90\x01\0\x97\x01\x01\n\x0b\n\x03\x04\x10\
    \x01\x12\x04\x90\x01\x08\x1a\n\x0e\n\x04\x04\x10\x03\0\x12\x06\x91\x01\
    \x08\x94\x01\t\n\r\n\x05\x04\x10\x03\0\x01\x12\x04\x91\x01\x10\x17\n\x0e\
    \n\x06\x04\x10\x03\0\x02\0\x12\x04\x92\x01\x10)\n\x0f\n\x07\x04\x10\x03\
    \0\x02\0\x04\x12\x04\x92\x01\x10\x18\n\x0f\n\x07\x04\x10\x03\0\x02\0\x05\
    \x12\x04\x92\x01\x19\x1f\n\x0f\n\x07\x04\x10\x03\0\x02\0\x01\x12\x04\x92\
    \x01\x20$\n\x0f\n\x07\x04\x10\x03\0\x02\0\x03\x12\x04\x92\x01'(\n\x0e\n\
    \x06\x04\x10\x03\0\x02\x01\x12\x04\x93\x01\x10)\n\x0f\n\x07\x04\x10\x03\
    \0\x02\x01\x04\x12\x04\x93\x01\x10\x18\n\x0f\n\x07\x04\x10\x03\0\x02\x01\
    \x05\x12\x04\x93\x01\x19\x1e\n\x0f\n\x07\x04\x10\x03\0\x02\x01\x01\x12\
    \x04\x93\x01\x1f$\n\x0f\n\x07\x04\x10\x03\0\x02\x01\x03\x12\x04\x93\x01'\
    (\n\x0c\n\x04\x04\x10\x02\0\x12\x04\x96\x01\x085\n\r\n\x05\x04\x10\x02\0\
    \x04\x12\x04\x96\x01\x08\x10\n\r\n\x05\x04\x10\x02\0\x06\x12\x04\x96\x01\
    \x11+\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\x96\x01,0\n\r\n\x05\x04\x10\
    \x02\0\x03\x12\x04\x96\x0134\n\x0c\n\x02\x04\x11\x12\x06\x99\x01\0\x9b\
    \x01\x01\n\x0b\n\x03\x04\x11\x01\x12\x04\x99\x01\x08\x1d\n\x0c\n\x04\x04\
    \x11\x02\0\x12\x04\x9a\x01\x08!\n\r\n\x05\x04\x11\x02\0\x04\x12\x04\x9a\
    \x01\x08\x10\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\x9a\x01\x11\x17\n\r\n\
    \x05\x04\x11\x02\0\x01\x12\x04\x9a\x01\x18\x1c\n\r\n\x05\x04\x11\x02\0\
    \x03\x12\x04\x9a\x01\x1f\x20\n\x0c\n\x02\x04\x12\x12\x06\x9d\x01\0\x9e\
    \x01\x01\n\x0b\n\x03\x04\x12\x01\x12\x04\x9d\x01\x08\x1c\n\x0c\n\x02\x04\
    \x13\x12\x06\xa0\x01\0\xaf\x01\x01\n\x0b\n\x03\x04\x13\x01\x12\x04\xa0\
    \x01\x08$\n\x0c\n\x04\x04\x13\x02\0\x12\x04\xa1\x01\x08-\n\r\n\x05\x04\
    \x13\x02\0\x04\x12\x04\xa1\x01\x08\x10\n\r\n\x05\x04\x13\x02\0\x05\x12\
    \x04\xa1\x01\x11\x17\n\r\n\x05\x04\x13\x02\0\x01\x12\x04\xa1\x01\x18(\n\
    \r\n\x05\x04\x13\x02\0\x03\x12\x04\xa1\x01+,\n\x0c\n\x04\x04\x13\x02\x01\
    \x12\x04\xa2\x01\x08$\n\r\n\x05\x04\x13\x02\x01\x04\x12\x04\xa2\x01\x08\
    \x10\n\r\n\x05\x04\x13\x02\x01\x05\x12\x04\xa2\x01\x11\x17\n\r\n\x05\x04\
    \x13\x02\x01\x01\x12\x04\xa2\x01\x18\x1f\n\r\n\x05\x04\x13\x02\x01\x03\
    \x12\x04\xa2\x01\"#\n\x0c\n\x04\x04\x13\x02\x02\x12\x04\xa3\x01\x08$\n\r\
    \n\x05\x04\x13\x02\x02\x04\x12\x04\xa3\x01\x08\x10\n\r\n\x05\x04\x13\x02\
    \x02\x05\x12\x04\xa3\x01\x11\x17\n\r\n\x05\x04\x13\x02\x02\x01\x12\x04\
    \xa3\x01\x18\x1f\n\r\n\x05\x04\x13\x02\x02\x03\x12\x04\xa3\x01\"#\n\x0c\
    \n\x04\x04\x13\x02\x03\x12\x04\xa4\x01\x08&\n\r\n\x05\x04\x13\x02\x03\
    \x04\x12\x04\xa4\x01\x08\x10\n\r\n\x05\x04\x13\x02\x03\x05\x12\x04\xa4\
    \x01\x11\x17\n\r\n\x05\x04\x13\x02\x03\x01\x12\x04\xa4\x01\x18!\n\r\n\
    \x05\x04\x13\x02\x03\x03\x12\x04\xa4\x01$%\n\x0c\n\x04\x04\x13\x02\x04\
    \x12\x04\xa5\x01\x08%\n\r\n\x05\x04\x13\x02\x04\x04\x12\x04\xa5\x01\x08\
    \x10\n\r\n\x05\x04\x13\x02\x04\x05\x12\x04\xa5\x01\x11\x17\n\r\n\x05\x04\
    \x13\x02\x04\x01\x12\x04\xa5\x01\x18\x20\n\r\n\x05\x04\x13\x02\x04\x03\
    \x12\x04\xa5\x01#$\n\x0c\n\x04\x04\x13\x02\x05\x12\x04\xa6\x01\x08'\n\r\
    \n\x05\x04\x13\x02\x05\x04\x12\x04\xa6\x01\x08\x10\n\r\n\x05\x04\x13\x02\
    \x05\x05\x12\x04\xa6\x01\x11\x17\n\r\n\x05\x04\x13\x02\x05\x01\x12\x04\
    \xa6\x01\x18\"\n\r\n\x05\x04\x13\x02\x05\x03\x12\x04\xa6\x01%&\n\x0c\n\
    \x04\x04\x13\x02\x06\x12\x04\xa7\x01\x08(\n\r\n\x05\x04\x13\x02\x06\x04\
    \x12\x04\xa7\x01\x08\x10\n\r\n\x05\x04\x13\x02\x06\x05\x12\x04\xa7\x01\
    \x11\x17\n\r\n\x05\x04\x13\x02\x06\x01\x12\x04\xa7\x01\x18#\n\r\n\x05\
    \x04\x13\x02\x06\x03\x12\x04\xa7\x01&'\n\x0c\n\x04\x04\x13\x02\x07\x12\
    \x04\xa8\x01\x08*\n\r\n\x05\x04\x13\x02\x07\x04\x12\x04\xa8\x01\x08\x10\
    \n\r\n\x05\x04\x13\x02\x07\x05\x12\x04\xa8\x01\x11\x17\n\r\n\x05\x04\x13\
    \x02\x07\x01\x12\x04\xa8\x01\x18%\n\r\n\x05\x04\x13\x02\x07\x03\x12\x04\
    \xa8\x01()\n\x0c\n\x04\x04\x13\x02\x08\x12\x04\xa9\x01\x08'\n\r\n\x05\
    \x04\x13\x02\x08\x04\x12\x04\xa9\x01\x08\x10\n\r\n\x05\x04\x13\x02\x08\
    \x05\x12\x04\xa9\x01\x11\x17\n\r\n\x05\x04\x13\x02\x08\x01\x12\x04\xa9\
    \x01\x18\"\n\r\n\x05\x04\x13\x02\x08\x03\x12\x04\xa9\x01%&\n\x0c\n\x04\
    \x04\x13\x02\t\x12\x04\xaa\x01\x08+\n\r\n\x05\x04\x13\x02\t\x04\x12\x04\
    \xaa\x01\x08\x10\n\r\n\x05\x04\x13\x02\t\x05\x12\x04\xaa\x01\x11\x17\n\r\
    \n\x05\x04\x13\x02\t\x01\x12\x04\xaa\x01\x18%\n\r\n\x05\x04\x13\x02\t\
    \x03\x12\x04\xaa\x01(*\n\x0c\n\x04\x04\x13\x02\n\x12\x04\xab\x01\x08,\n\
    \r\n\x05\x04\x13\x02\n\x04\x12\x04\xab\x01\x08\x10\n\r\n\x05\x04\x13\x02\
    \n\x05\x12\x04\xab\x01\x11\x17\n\r\n\x05\x04\x13\x02\n\x01\x12\x04\xab\
    \x01\x18&\n\r\n\x05\x04\x13\x02\n\x03\x12\x04\xab\x01)+\n\x0c\n\x04\x04\
    \x13\x02\x0b\x12\x04\xac\x01\x08(\n\r\n\x05\x04\x13\x02\x0b\x04\x12\x04\
    \xac\x01\x08\x10\n\r\n\x05\x04\x13\x02\x0b\x05\x12\x04\xac\x01\x11\x17\n\
    \r\n\x05\x04\x13\x02\x0b\x01\x12\x04\xac\x01\x18\"\n\r\n\x05\x04\x13\x02\
    \x0b\x03\x12\x04\xac\x01%'\n\x0c\n\x04\x04\x13\x02\x0c\x12\x04\xad\x01\
    \x08'\n\r\n\x05\x04\x13\x02\x0c\x04\x12\x04\xad\x01\x08\x10\n\r\n\x05\
    \x04\x13\x02\x0c\x05\x12\x04\xad\x01\x11\x17\n\r\n\x05\x04\x13\x02\x0c\
    \x01\x12\x04\xad\x01\x18!\n\r\n\x05\x04\x13\x02\x0c\x03\x12\x04\xad\x01$\
    &\n\x0c\n\x04\x04\x13\x02\r\x12\x04\xae\x01\x08#\n\r\n\x05\x04\x13\x02\r\
    \x04\x12\x04\xae\x01\x08\x10\n\r\n\x05\x04\x13\x02\r\x05\x12\x04\xae\x01\
    \x11\x17\n\r\n\x05\x04\x13\x02\r\x01\x12\x04\xae\x01\x18\x1d\n\r\n\x05\
    \x04\x13\x02\r\x03\x12\x04\xae\x01\x20\"\n\x0c\n\x02\x04\x14\x12\x06\xb1\
    \x01\0\xb3\x01\x01\n\x0b\n\x03\x04\x14\x01\x12\x04\xb1\x01\x08\x16\n\x0c\
    \n\x04\x04\x14\x02\0\x12\x04\xb2\x01\x08+\n\r\n\x05\x04\x14\x02\0\x04\
    \x12\x04\xb2\x01\x08\x10\n\r\n\x05\x04\x14\x02\0\x05\x12\x04\xb2\x01\x11\
    \x17\n\r\n\x05\x04\x14\x02\0\x01\x12\x04\xb2\x01\x18&\n\r\n\x05\x04\x14\
    \x02\0\x03\x12\x04\xb2\x01)*\n\x0c\n\x02\x04\x15\x12\x06\xb5\x01\0\xbf\
    \x01\x01\n\x0b\n\x03\x04\x15\x01\x12\x04\xb5\x01\x08\x1e\n\x0c\n\x04\x04\
    \x15\x02\0\x12\x04\xb6\x01\x08$\n\r\n\x05\x04\x15\x02\0\x04\x12\x04\xb6\
    \x01\x08\x10\n\r\n\x05\x04\x15\x02\0\x05\x12\x04\xb6\x01\x11\x17\n\r\n\
    \x05\x04\x15\x02\0\x01\x12\x04\xb6\x01\x18\x1f\n\r\n\x05\x04\x15\x02\0\
    \x03\x12\x04\xb6\x01\"#\n\x0c\n\x04\x04\x15\x02\x01\x12\x04\xb7\x01\x08.\
    \n\r\n\x05\x04\x15\x02\x01\x04\x12\x04\xb7\x01\x08\x10\n\r\n\x05\x04\x15\
    \x02\x01\x05\x12\x04\xb7\x01\x11\x17\n\r\n\x05\x04\x15\x02\x01\x01\x12\
    \x04\xb7\x01\x18)\n\r\n\x05\x04\x15\x02\x01\x03\x12\x04\xb7\x01,-\n\x0c\
    \n\x04\x04\x15\x02\x02\x12\x04\xb8\x01\x08+\n\r\n\x05\x04\x15\x02\x02\
    \x04\x12\x04\xb8\x01\x08\x10\n\r\n\x05\x04\x15\x02\x02\x05\x12\x04\xb8\
    \x01\x11\x17\n\r\n\x05\x04\x15\x02\x02\x01\x12\x04\xb8\x01\x18&\n\r\n\
    \x05\x04\x15\x02\x02\x03\x12\x04\xb8\x01)*\n\x0c\n\x04\x04\x15\x02\x03\
    \x12\x04\xb9\x01\x081\n\r\n\x05\x04\x15\x02\x03\x04\x12\x04\xb9\x01\x08\
    \x10\n\r\n\x05\x04\x15\x02\x03\x05\x12\x04\xb9\x01\x11\x17\n\r\n\x05\x04\
    \x15\x02\x03\x01\x12\x04\xb9\x01\x18,\n\r\n\x05\x04\x15\x02\x03\x03\x12\
    \x04\xb9\x01/0\n\x0c\n\x04\x04\x15\x02\x04\x12\x04\xba\x01\x089\n\r\n\
    \x05\x04\x15\x02\x04\x04\x12\x04\xba\x01\x08\x10\n\r\n\x05\x04\x15\x02\
    \x04\x05\x12\x04\xba\x01\x11\x17\n\r\n\x05\x04\x15\x02\x04\x01\x12\x04\
    \xba\x01\x184\n\r\n\x05\x04\x15\x02\x04\x03\x12\x04\xba\x0178\n\x0c\n\
    \x04\x04\x15\x02\x05\x12\x04\xbb\x01\x08=\n\r\n\x05\x04\x15\x02\x05\x04\
    \x12\x04\xbb\x01\x08\x10\n\r\n\x05\x04\x15\x02\x05\x05\x12\x04\xbb\x01\
    \x11\x17\n\r\n\x05\x04\x15\x02\x05\x01\x12\x04\xbb\x01\x188\n\r\n\x05\
    \x04\x15\x02\x05\x03\x12\x04\xbb\x01;<\n\x0c\n\x04\x04\x15\x02\x06\x12\
    \x04\xbc\x01\x08-\n\r\n\x05\x04\x15\x02\x06\x04\x12\x04\xbc\x01\x08\x10\
    \n\r\n\x05\x04\x15\x02\x06\x05\x12\x04\xbc\x01\x11\x17\n\r\n\x05\x04\x15\
    \x02\x06\x01\x12\x04\xbc\x01\x18(\n\r\n\x05\x04\x15\x02\x06\x03\x12\x04\
    \xbc\x01+,\n\x0c\n\x04\x04\x15\x02\x07\x12\x04\xbd\x01\x08:\n\r\n\x05\
    \x04\x15\x02\x07\x04\x12\x04\xbd\x01\x08\x10\n\r\n\x05\x04\x15\x02\x07\
    \x05\x12\x04\xbd\x01\x11\x17\n\r\n\x05\x04\x15\x02\x07\x01\x12\x04\xbd\
    \x01\x185\n\r\n\x05\x04\x15\x02\x07\x03\x12\x04\xbd\x0189\n\x0c\n\x04\
    \x04\x15\x02\x08\x12\x04\xbe\x01\x08#\n\r\n\x05\x04\x15\x02\x08\x04\x12\
    \x04\xbe\x01\x08\x10\n\r\n\x05\x04\x15\x02\x08\x05\x12\x04\xbe\x01\x11\
    \x17\n\r\n\x05\x04\x15\x02\x08\x01\x12\x04\xbe\x01\x18\x1e\n\r\n\x05\x04\
    \x15\x02\x08\x03\x12\x04\xbe\x01!\"\n\x0c\n\x02\x04\x16\x12\x06\xc1\x01\
    \0\xc6\x01\x01\n\x0b\n\x03\x04\x16\x01\x12\x04\xc1\x01\x08\x1c\n\x0c\n\
    \x04\x04\x16\x02\0\x12\x04\xc2\x01\x08%\n\r\n\x05\x04\x16\x02\0\x04\x12\
    \x04\xc2\x01\x08\x10\n\r\n\x05\x04\x16\x02\0\x05\x12\x04\xc2\x01\x11\x18\
    \n\r\n\x05\x04\x16\x02\0\x01\x12\x04\xc2\x01\x19\x20\n\r\n\x05\x04\x16\
    \x02\0\x03\x12\x04\xc2\x01#$\n\x0c\n\x04\x04\x16\x02\x01\x12\x04\xc3\x01\
    \x08&\n\r\n\x05\x04\x16\x02\x01\x04\x12\x04\xc3\x01\x08\x10\n\r\n\x05\
    \x04\x16\x02\x01\x05\x12\x04\xc3\x01\x11\x17\n\r\n\x05\x04\x16\x02\x01\
    \x01\x12\x04\xc3\x01\x18!\n\r\n\x05\x04\x16\x02\x01\x03\x12\x04\xc3\x01$\
    %\n\x0c\n\x04\x04\x16\x02\x02\x12\x04\xc4\x01\x08&\n\r\n\x05\x04\x16\x02\
    \x02\x04\x12\x04\xc4\x01\x08\x10\n\r\n\x05\x04\x16\x02\x02\x05\x12\x04\
    \xc4\x01\x11\x17\n\r\n\x05\x04\x16\x02\x02\x01\x12\x04\xc4\x01\x18!\n\r\
    \n\x05\x04\x16\x02\x02\x03\x12\x04\xc4\x01$%\n\x0c\n\x04\x04\x16\x02\x03\
    \x12\x04\xc5\x01\x08/\n\r\n\x05\x04\x16\x02\x03\x04\x12\x04\xc5\x01\x08\
    \x10\n\r\n\x05\x04\x16\x02\x03\x05\x12\x04\xc5\x01\x11\x17\n\r\n\x05\x04\
    \x16\x02\x03\x01\x12\x04\xc5\x01\x18*\n\r\n\x05\x04\x16\x02\x03\x03\x12\
    \x04\xc5\x01-.\n\x0c\n\x02\x04\x17\x12\x06\xc8\x01\0\xcc\x01\x01\n\x0b\n\
    \x03\x04\x17\x01\x12\x04\xc8\x01\x08$\n\x0c\n\x04\x04\x17\x02\0\x12\x04\
    \xc9\x01\x08#\n\r\n\x05\x04\x17\x02\0\x04\x12\x04\xc9\x01\x08\x10\n\r\n\
    \x05\x04\x17\x02\0\x05\x12\x04\xc9\x01\x11\x16\n\r\n\x05\x04\x17\x02\0\
    \x01\x12\x04\xc9\x01\x17\x1e\n\r\n\x05\x04\x17\x02\0\x03\x12\x04\xc9\x01\
    !\"\n\x0c\n\x04\x04\x17\x02\x01\x12\x04\xca\x01\x082\n\r\n\x05\x04\x17\
    \x02\x01\x04\x12\x04\xca\x01\x08\x10\n\r\n\x05\x04\x17\x02\x01\x05\x12\
    \x04\xca\x01\x11\x16\n\r\n\x05\x04\x17\x02\x01\x01\x12\x04\xca\x01\x17-\
    \n\r\n\x05\x04\x17\x02\x01\x03\x12\x04\xca\x0101\n\x0c\n\x04\x04\x17\x02\
    \x02\x12\x04\xcb\x01\x08%\n\r\n\x05\x04\x17\x02\x02\x04\x12\x04\xcb\x01\
    \x08\x10\n\r\n\x05\x04\x17\x02\x02\x05\x12\x04\xcb\x01\x11\x18\n\r\n\x05\
    \x04\x17\x02\x02\x01\x12\x04\xcb\x01\x19\x20\n\r\n\x05\x04\x17\x02\x02\
    \x03\x12\x04\xcb\x01#$\n\x0c\n\x02\x04\x18\x12\x06\xce\x01\0\xd0\x01\x01\
    \n\x0b\n\x03\x04\x18\x01\x12\x04\xce\x01\x08\x1b\n\x0c\n\x04\x04\x18\x02\
    \0\x12\x04\xcf\x01\x08!\n\r\n\x05\x04\x18\x02\0\x04\x12\x04\xcf\x01\x08\
    \x10\n\r\n\x05\x04\x18\x02\0\x05\x12\x04\xcf\x01\x11\x18\n\r\n\x05\x04\
    \x18\x02\0\x01\x12\x04\xcf\x01\x19\x1c\n\r\n\x05\x04\x18\x02\0\x03\x12\
    \x04\xcf\x01\x1f\x20\n\x0c\n\x02\x04\x19\x12\x06\xd2\x01\0\xd4\x01\x01\n\
    \x0b\n\x03\x04\x19\x01\x12\x04\xd2\x01\x08\x16\n\x0c\n\x04\x04\x19\x02\0\
    \x12\x04\xd3\x01\x08!\n\r\n\x05\x04\x19\x02\0\x04\x12\x04\xd3\x01\x08\
    \x10\n\r\n\x05\x04\x19\x02\0\x05\x12\x04\xd3\x01\x11\x18\n\r\n\x05\x04\
    \x19\x02\0\x01\x12\x04\xd3\x01\x19\x1c\n\r\n\x05\x04\x19\x02\0\x03\x12\
    \x04\xd3\x01\x1f\x20\n\x0c\n\x02\x04\x1a\x12\x06\xd6\x01\0\xd9\x01\x01\n\
    \x0b\n\x03\x04\x1a\x01\x12\x04\xd6\x01\x08\x12\n\x0c\n\x04\x04\x1a\x02\0\
    \x12\x04\xd7\x01\x08\x20\n\r\n\x05\x04\x1a\x02\0\x04\x12\x04\xd7\x01\x08\
    \x10\n\r\n\x05\x04\x1a\x02\0\x05\x12\x04\xd7\x01\x11\x18\n\r\n\x05\x04\
    \x1a\x02\0\x01\x12\x04\xd7\x01\x19\x1b\n\r\n\x05\x04\x1a\x02\0\x03\x12\
    \x04\xd7\x01\x1e\x1f\n\x0c\n\x04\x04\x1a\x02\x01\x12\x04\xd8\x01\x08\x20\
    \n\r\n\x05\x04\x1a\x02\x01\x04\x12\x04\xd8\x01\x08\x10\n\r\n\x05\x04\x1a\
    \x02\x01\x05\x12\x04\xd8\x01\x11\x17\n\r\n\x05\x04\x1a\x02\x01\x01\x12\
    \x04\xd8\x01\x18\x1b\n\r\n\x05\x04\x1a\x02\x01\x03\x12\x04\xd8\x01\x1e\
    \x1f\n\x0c\n\x02\x04\x1b\x12\x06\xdb\x01\0\xdd\x01\x01\n\x0b\n\x03\x04\
    \x1b\x01\x12\x04\xdb\x01\x08\x1e\n\x0c\n\x04\x04\x1b\x02\0\x12\x04\xdc\
    \x01\x08&\n\r\n\x05\x04\x1b\x02\0\x04\x12\x04\xdc\x01\x08\x10\n\r\n\x05\
    \x04\x1b\x02\0\x06\x12\x04\xdc\x01\x11\x1b\n\r\n\x05\x04\x1b\x02\0\x01\
    \x12\x04\xdc\x01\x1c!\n\r\n\x05\x04\x1b\x02\0\x03\x12\x04\xdc\x01$%\n\
    \x0c\n\x02\x04\x1c\x12\x06\xdf\x01\0\xe2\x01\x01\n\x0b\n\x03\x04\x1c\x01\
    \x12\x04\xdf\x01\x08\x1f\n\x0c\n\x04\x04\x1c\x02\0\x12\x04\xe0\x01\x08&\
    \n\r\n\x05\x04\x1c\x02\0\x04\x12\x04\xe0\x01\x08\x10\n\r\n\x05\x04\x1c\
    \x02\0\x05\x12\x04\xe0\x01\x11\x17\n\r\n\x05\x04\x1c\x02\0\x01\x12\x04\
    \xe0\x01\x18!\n\r\n\x05\x04\x1c\x02\0\x03\x12\x04\xe0\x01$%\n\x0c\n\x04\
    \x04\x1c\x02\x01\x12\x04\xe1\x01\x08%\n\r\n\x05\x04\x1c\x02\x01\x04\x12\
    \x04\xe1\x01\x08\x10\n\r\n\x05\x04\x1c\x02\x01\x05\x12\x04\xe1\x01\x11\
    \x16\n\r\n\x05\x04\x1c\x02\x01\x01\x12\x04\xe1\x01\x17\x20\n\r\n\x05\x04\
    \x1c\x02\x01\x03\x12\x04\xe1\x01#$\n\x0c\n\x02\x04\x1d\x12\x06\xe4\x01\0\
    \xe5\x01\x01\n\x0b\n\x03\x04\x1d\x01\x12\x04\xe4\x01\x08\x1c\n\x0c\n\x02\
    \x04\x1e\x12\x06\xe7\x01\0\xf5\x01\x01\n\x0b\n\x03\x04\x1e\x01\x12\x04\
    \xe7\x01\x08$\n\x0c\n\x04\x04\x1e\x02\0\x12\x04\xe8\x01\x08&\n\r\n\x05\
    \x04\x1e\x02\0\x04\x12\x04\xe8\x01\x08\x10\n\r\n\x05\x04\x1e\x02\0\x05\
    \x12\x04\xe8\x01\x11\x17\n\r\n\x05\x04\x1e\x02\0\x01\x12\x04\xe8\x01\x18\
    !\n\r\n\x05\x04\x1e\x02\0\x03\x12\x04\xe8\x01$%\n\x0c\n\x04\x04\x1e\x02\
    \x01\x12\x04\xe9\x01\x08$\n\r\n\x05\x04\x1e\x02\x01\x04\x12\x04\xe9\x01\
    \x08\x10\n\r\n\x05\x04\x1e\x02\x01\x05\x12\x04\xe9\x01\x11\x16\n\r\n\x05\
    \x04\x1e\x02\x01\x01\x12\x04\xe9\x01\x17\x1f\n\r\n\x05\x04\x1e\x02\x01\
    \x03\x12\x04\xe9\x01\"#\n\x0c\n\x04\x04\x1e\x02\x02\x12\x04\xea\x01\x08(\
    \n\r\n\x05\x04\x1e\x02\x02\x04\x12\x04\xea\x01\x08\x10\n\r\n\x05\x04\x1e\
    \x02\x02\x05\x12\x04\xea\x01\x11\x17\n\r\n\x05\x04\x1e\x02\x02\x01\x12\
    \x04\xea\x01\x18#\n\r\n\x05\x04\x1e\x02\x02\x03\x12\x04\xea\x01&'\n\x0c\
    \n\x04\x04\x1e\x02\x03\x12\x04\xeb\x01\x08*\n\r\n\x05\x04\x1e\x02\x03\
    \x04\x12\x04\xeb\x01\x08\x10\n\r\n\x05\x04\x1e\x02\x03\x05\x12\x04\xeb\
    \x01\x11\x17\n\r\n\x05\x04\x1e\x02\x03\x01\x12\x04\xeb\x01\x18%\n\r\n\
    \x05\x04\x1e\x02\x03\x03\x12\x04\xeb\x01()\n\x0c\n\x04\x04\x1e\x02\x04\
    \x12\x04\xec\x01\x08*\n\r\n\x05\x04\x1e\x02\x04\x04\x12\x04\xec\x01\x08\
    \x10\n\r\n\x05\x04\x1e\x02\x04\x05\x12\x04\xec\x01\x11\x17\n\r\n\x05\x04\
    \x1e\x02\x04\x01\x12\x04\xec\x01\x18%\n\r\n\x05\x04\x1e\x02\x04\x03\x12\
    \x04\xec\x01()\n\x0c\n\x04\x04\x1e\x02\x05\x12\x04\xed\x01\x081\n\r\n\
    \x05\x04\x1e\x02\x05\x04\x12\x04\xed\x01\x08\x10\n\r\n\x05\x04\x1e\x02\
    \x05\x05\x12\x04\xed\x01\x11\x17\n\r\n\x05\x04\x1e\x02\x05\x01\x12\x04\
    \xed\x01\x18,\n\r\n\x05\x04\x1e\x02\x05\x03\x12\x04\xed\x01/0\n\x0c\n\
    \x04\x04\x1e\x02\x06\x12\x04\xee\x01\x08%\n\r\n\x05\x04\x1e\x02\x06\x04\
    \x12\x04\xee\x01\x08\x10\n\r\n\x05\x04\x1e\x02\x06\x05\x12\x04\xee\x01\
    \x11\x17\n\r\n\x05\x04\x1e\x02\x06\x01\x12\x04\xee\x01\x18\x20\n\r\n\x05\
    \x04\x1e\x02\x06\x03\x12\x04\xee\x01#$\n\x0c\n\x04\x04\x1e\x02\x07\x12\
    \x04\xef\x01\x08/\n\r\n\x05\x04\x1e\x02\x07\x04\x12\x04\xef\x01\x08\x10\
    \n\r\n\x05\x04\x1e\x02\x07\x05\x12\x04\xef\x01\x11\x17\n\r\n\x05\x04\x1e\
    \x02\x07\x01\x12\x04\xef\x01\x18*\n\r\n\x05\x04\x1e\x02\x07\x03\x12\x04\
    \xef\x01-.\n\x0c\n\x04\x04\x1e\x02\x08\x12\x04\xf0\x01\x08-\n\r\n\x05\
    \x04\x1e\x02\x08\x04\x12\x04\xf0\x01\x08\x10\n\r\n\x05\x04\x1e\x02\x08\
    \x05\x12\x04\xf0\x01\x11\x17\n\r\n\x05\x04\x1e\x02\x08\x01\x12\x04\xf0\
    \x01\x18(\n\r\n\x05\x04\x1e\x02\x08\x03\x12\x04\xf0\x01+,\n\x0c\n\x04\
    \x04\x1e\x02\t\x12\x04\xf1\x01\x08-\n\r\n\x05\x04\x1e\x02\t\x04\x12\x04\
    \xf1\x01\x08\x10\n\r\n\x05\x04\x1e\x02\t\x05\x12\x04\xf1\x01\x11\x17\n\r\
    \n\x05\x04\x1e\x02\t\x01\x12\x04\xf1\x01\x18'\n\r\n\x05\x04\x1e\x02\t\
    \x03\x12\x04\xf1\x01*,\n\x0c\n\x04\x04\x1e\x02\n\x12\x04\xf2\x01\x08+\n\
    \r\n\x05\x04\x1e\x02\n\x04\x12\x04\xf2\x01\x08\x10\n\r\n\x05\x04\x1e\x02\
    \n\x05\x12\x04\xf2\x01\x11\x17\n\r\n\x05\x04\x1e\x02\n\x01\x12\x04\xf2\
    \x01\x18%\n\r\n\x05\x04\x1e\x02\n\x03\x12\x04\xf2\x01(*\n\x0c\n\x04\x04\
    \x1e\x02\x0b\x12\x04\xf3\x01\x08)\n\r\n\x05\x04\x1e\x02\x0b\x04\x12\x04\
    \xf3\x01\x08\x10\n\r\n\x05\x04\x1e\x02\x0b\x05\x12\x04\xf3\x01\x11\x17\n\
    \r\n\x05\x04\x1e\x02\x0b\x01\x12\x04\xf3\x01\x18#\n\r\n\x05\x04\x1e\x02\
    \x0b\x03\x12\x04\xf3\x01&(\n\x0c\n\x04\x04\x1e\x02\x0c\x12\x04\xf4\x01\
    \x08(\n\r\n\x05\x04\x1e\x02\x0c\x04\x12\x04\xf4\x01\x08\x10\n\r\n\x05\
    \x04\x1e\x02\x0c\x05\x12\x04\xf4\x01\x11\x17\n\r\n\x05\x04\x1e\x02\x0c\
    \x01\x12\x04\xf4\x01\x18\"\n\r\n\x05\x04\x1e\x02\x0c\x03\x12\x04\xf4\x01\
    %'\n\x0c\n\x02\x04\x1f\x12\x06\xf7\x01\0\x88\x02\x01\n\x0b\n\x03\x04\x1f\
    \x01\x12\x04\xf7\x01\x08\x17\n\x0e\n\x04\x04\x1f\x03\0\x12\x06\xf8\x01\
    \x08\xfb\x01\t\n\r\n\x05\x04\x1f\x03\0\x01\x12\x04\xf8\x01\x10\x20\n\x0e\
    \n\x06\x04\x1f\x03\0\x02\0\x12\x04\xf9\x01\x10/\n\x0f\n\x07\x04\x1f\x03\
    \0\x02\0\x04\x12\x04\xf9\x01\x10\x18\n\x0f\n\x07\x04\x1f\x03\0\x02\0\x05\
    \x12\x04\xf9\x01\x19\x1f\n\x0f\n\x07\x04\x1f\x03\0\x02\0\x01\x12\x04\xf9\
    \x01\x20*\n\x0f\n\x07\x04\x1f\x03\0\x02\0\x03\x12\x04\xf9\x01-.\n\x0e\n\
    \x06\x04\x1f\x03\0\x02\x01\x12\x04\xfa\x01\x100\n\x0f\n\x07\x04\x1f\x03\
    \0\x02\x01\x04\x12\x04\xfa\x01\x10\x18\n\x0f\n\x07\x04\x1f\x03\0\x02\x01\
    \x05\x12\x04\xfa\x01\x19\x1f\n\x0f\n\x07\x04\x1f\x03\0\x02\x01\x01\x12\
    \x04\xfa\x01\x20+\n\x0f\n\x07\x04\x1f\x03\0\x02\x01\x03\x12\x04\xfa\x01.\
    /\n\x0e\n\x04\x04\x1f\x03\x01\x12\x06\xfd\x01\x08\x80\x02\t\n\r\n\x05\
    \x04\x1f\x03\x01\x01\x12\x04\xfd\x01\x10+\n\x0e\n\x06\x04\x1f\x03\x01\
    \x02\0\x12\x04\xfe\x01\x10-\n\x0f\n\x07\x04\x1f\x03\x01\x02\0\x04\x12\
    \x04\xfe\x01\x10\x18\n\x0f\n\x07\x04\x1f\x03\x01\x02\0\x05\x12\x04\xfe\
    \x01\x19\x20\n\x0f\n\x07\x04\x1f\x03\x01\x02\0\x01\x12\x04\xfe\x01!(\n\
    \x0f\n\x07\x04\x1f\x03\x01\x02\0\x03\x12\x04\xfe\x01+,\n\x0e\n\x06\x04\
    \x1f\x03\x01\x02\x01\x12\x04\xff\x01\x10/\n\x0f\n\x07\x04\x1f\x03\x01\
    \x02\x01\x04\x12\x04\xff\x01\x10\x18\n\x0f\n\x07\x04\x1f\x03\x01\x02\x01\
    \x05\x12\x04\xff\x01\x19\x1f\n\x0f\n\x07\x04\x1f\x03\x01\x02\x01\x01\x12\
    \x04\xff\x01\x20*\n\x0f\n\x07\x04\x1f\x03\x01\x02\x01\x03\x12\x04\xff\
    \x01-.\n\x0c\n\x04\x04\x1f\x02\0\x12\x04\x82\x02\x08%\n\r\n\x05\x04\x1f\
    \x02\0\x04\x12\x04\x82\x02\x08\x10\n\r\n\x05\x04\x1f\x02\0\x05\x12\x04\
    \x82\x02\x11\x18\n\r\n\x05\x04\x1f\x02\0\x01\x12\x04\x82\x02\x19\x20\n\r\
    \n\x05\x04\x1f\x02\0\x03\x12\x04\x82\x02#$\n\x0c\n\x04\x04\x1f\x02\x01\
    \x12\x04\x83\x02\x08+\n\r\n\x05\x04\x1f\x02\x01\x04\x12\x04\x83\x02\x08\
    \x10\n\r\n\x05\x04\x1f\x02\x01\x05\x12\x04\x83\x02\x11\x17\n\r\n\x05\x04\
    \x1f\x02\x01\x01\x12\x04\x83\x02\x18&\n\r\n\x05\x04\x1f\x02\x01\x03\x12\
    \x04\x83\x02)*\n\x0c\n\x04\x04\x1f\x02\x02\x12\x04\x84\x02\x08)\n\r\n\
    \x05\x04\x1f\x02\x02\x04\x12\x04\x84\x02\x08\x10\n\r\n\x05\x04\x1f\x02\
    \x02\x05\x12\x04\x84\x02\x11\x17\n\r\n\x05\x04\x1f\x02\x02\x01\x12\x04\
    \x84\x02\x18$\n\r\n\x05\x04\x1f\x02\x02\x03\x12\x04\x84\x02'(\n\x0c\n\
    \x04\x04\x1f\x02\x03\x12\x04\x85\x02\x08U\n\r\n\x05\x04\x1f\x02\x03\x04\
    \x12\x04\x85\x02\x08\x10\n\r\n\x05\x04\x1f\x02\x03\x06\x12\x04\x85\x02\
    \x11<\n\r\n\x05\x04\x1f\x02\x03\x01\x12\x04\x85\x02=P\n\r\n\x05\x04\x1f\
    \x02\x03\x03\x12\x04\x85\x02ST\n\x0c\n\x04\x04\x1f\x02\x04\x12\x04\x86\
    \x02\x08&\n\r\n\x05\x04\x1f\x02\x04\x04\x12\x04\x86\x02\x08\x10\n\r\n\
    \x05\x04\x1f\x02\x04\x05\x12\x04\x86\x02\x11\x17\n\r\n\x05\x04\x1f\x02\
    \x04\x01\x12\x04\x86\x02\x18!\n\r\n\x05\x04\x1f\x02\x04\x03\x12\x04\x86\
    \x02$%\n\x0c\n\x04\x04\x1f\x02\x05\x12\x04\x87\x02\x08=\n\r\n\x05\x04\
    \x1f\x02\x05\x04\x12\x04\x87\x02\x08\x10\n\r\n\x05\x04\x1f\x02\x05\x06\
    \x12\x04\x87\x02\x111\n\r\n\x05\x04\x1f\x02\x05\x01\x12\x04\x87\x0228\n\
    \r\n\x05\x04\x1f\x02\x05\x03\x12\x04\x87\x02;<\n\x0c\n\x02\x04\x20\x12\
    \x06\x8a\x02\0\x8c\x02\x01\n\x0b\n\x03\x04\x20\x01\x12\x04\x8a\x02\x08\
    \x1f\n\x0c\n\x04\x04\x20\x02\0\x12\x04\x8b\x02\x08$\n\r\n\x05\x04\x20\
    \x02\0\x04\x12\x04\x8b\x02\x08\x10\n\r\n\x05\x04\x20\x02\0\x05\x12\x04\
    \x8b\x02\x11\x17\n\r\n\x05\x04\x20\x02\0\x01\x12\x04\x8b\x02\x18\x1f\n\r\
    \n\x05\x04\x20\x02\0\x03\x12\x04\x8b\x02\"#\n\x0c\n\x02\x04!\x12\x06\x8e\
    \x02\0\x93\x02\x01\n\x0b\n\x03\x04!\x01\x12\x04\x8e\x02\x08\x1e\n\x0c\n\
    \x04\x04!\x02\0\x12\x04\x8f\x02\x08#\n\r\n\x05\x04!\x02\0\x04\x12\x04\
    \x8f\x02\x08\x10\n\r\n\x05\x04!\x02\0\x05\x12\x04\x8f\x02\x11\x17\n\r\n\
    \x05\x04!\x02\0\x01\x12\x04\x8f\x02\x18\x1e\n\r\n\x05\x04!\x02\0\x03\x12\
    \x04\x8f\x02!\"\n\x0c\n\x04\x04!\x02\x01\x12\x04\x90\x02\x08+\n\r\n\x05\
    \x04!\x02\x01\x04\x12\x04\x90\x02\x08\x10\n\r\n\x05\x04!\x02\x01\x05\x12\
    \x04\x90\x02\x11\x17\n\r\n\x05\x04!\x02\x01\x01\x12\x04\x90\x02\x18&\n\r\
    \n\x05\x04!\x02\x01\x03\x12\x04\x90\x02)*\n\x0c\n\x04\x04!\x02\x02\x12\
    \x04\x91\x02\x08&\n\r\n\x05\x04!\x02\x02\x04\x12\x04\x91\x02\x08\x10\n\r\
    \n\x05\x04!\x02\x02\x05\x12\x04\x91\x02\x11\x16\n\r\n\x05\x04!\x02\x02\
    \x01\x12\x04\x91\x02\x17!\n\r\n\x05\x04!\x02\x02\x03\x12\x04\x91\x02$%\n\
    \x0c\n\x04\x04!\x02\x03\x12\x04\x92\x02\x08(\n\r\n\x05\x04!\x02\x03\x04\
    \x12\x04\x92\x02\x08\x10\n\r\n\x05\x04!\x02\x03\x05\x12\x04\x92\x02\x11\
    \x16\n\r\n\x05\x04!\x02\x03\x01\x12\x04\x92\x02\x17#\n\r\n\x05\x04!\x02\
    \x03\x03\x12\x04\x92\x02&'\n\x0c\n\x02\x04\"\x12\x06\x95\x02\0\x99\x02\
    \x01\n\x0b\n\x03\x04\"\x01\x12\x04\x95\x02\x08&\n\x0c\n\x04\x04\"\x02\0\
    \x12\x04\x96\x02\x08$\n\r\n\x05\x04\"\x02\0\x04\x12\x04\x96\x02\x08\x10\
    \n\r\n\x05\x04\"\x02\0\x05\x12\x04\x96\x02\x11\x17\n\r\n\x05\x04\"\x02\0\
    \x01\x12\x04\x96\x02\x18\x1f\n\r\n\x05\x04\"\x02\0\x03\x12\x04\x96\x02\"\
    #\n\x0c\n\x04\x04\"\x02\x01\x12\x04\x97\x02\x08*\n\r\n\x05\x04\"\x02\x01\
    \x04\x12\x04\x97\x02\x08\x10\n\r\n\x05\x04\"\x02\x01\x05\x12\x04\x97\x02\
    \x11\x15\n\r\n\x05\x04\"\x02\x01\x01\x12\x04\x97\x02\x16%\n\r\n\x05\x04\
    \"\x02\x01\x03\x12\x04\x97\x02()\n\x0c\n\x04\x04\"\x02\x02\x12\x04\x98\
    \x02\x08%\n\r\n\x05\x04\"\x02\x02\x04\x12\x04\x98\x02\x08\x10\n\r\n\x05\
    \x04\"\x02\x02\x05\x12\x04\x98\x02\x11\x17\n\r\n\x05\x04\"\x02\x02\x01\
    \x12\x04\x98\x02\x18\x20\n\r\n\x05\x04\"\x02\x02\x03\x12\x04\x98\x02#$\n\
    \x0c\n\x02\x04#\x12\x06\x9b\x02\0\xa1\x02\x01\n\x0b\n\x03\x04#\x01\x12\
    \x04\x9b\x02\x08\x1f\n\x0c\n\x04\x04#\x02\0\x12\x04\x9c\x02\x08&\n\r\n\
    \x05\x04#\x02\0\x04\x12\x04\x9c\x02\x08\x10\n\r\n\x05\x04#\x02\0\x05\x12\
    \x04\x9c\x02\x11\x18\n\r\n\x05\x04#\x02\0\x01\x12\x04\x9c\x02\x19!\n\r\n\
    \x05\x04#\x02\0\x03\x12\x04\x9c\x02$%\n\x0c\n\x04\x04#\x02\x01\x12\x04\
    \x9d\x02\x08'\n\r\n\x05\x04#\x02\x01\x04\x12\x04\x9d\x02\x08\x10\n\r\n\
    \x05\x04#\x02\x01\x05\x12\x04\x9d\x02\x11\x17\n\r\n\x05\x04#\x02\x01\x01\
    \x12\x04\x9d\x02\x18\"\n\r\n\x05\x04#\x02\x01\x03\x12\x04\x9d\x02%&\n\
    \x0c\n\x04\x04#\x02\x02\x12\x04\x9e\x02\x08+\n\r\n\x05\x04#\x02\x02\x04\
    \x12\x04\x9e\x02\x08\x10\n\r\n\x05\x04#\x02\x02\x05\x12\x04\x9e\x02\x11\
    \x16\n\r\n\x05\x04#\x02\x02\x01\x12\x04\x9e\x02\x17&\n\r\n\x05\x04#\x02\
    \x02\x03\x12\x04\x9e\x02)*\n\x0c\n\x04\x04#\x02\x03\x12\x04\x9f\x02\x08.\
    \n\r\n\x05\x04#\x02\x03\x04\x12\x04\x9f\x02\x08\x10\n\r\n\x05\x04#\x02\
    \x03\x05\x12\x04\x9f\x02\x11\x16\n\r\n\x05\x04#\x02\x03\x01\x12\x04\x9f\
    \x02\x17)\n\r\n\x05\x04#\x02\x03\x03\x12\x04\x9f\x02,-\n\x0c\n\x04\x04#\
    \x02\x04\x12\x04\xa0\x02\x08\"\n\r\n\x05\x04#\x02\x04\x04\x12\x04\xa0\
    \x02\x08\x10\n\r\n\x05\x04#\x02\x04\x05\x12\x04\xa0\x02\x11\x16\n\r\n\
    \x05\x04#\x02\x04\x01\x12\x04\xa0\x02\x17\x1d\n\r\n\x05\x04#\x02\x04\x03\
    \x12\x04\xa0\x02\x20!\n\x0c\n\x02\x04$\x12\x06\xa3\x02\0\xa6\x02\x01\n\
    \x0b\n\x03\x04$\x01\x12\x04\xa3\x02\x08'\n\x0c\n\x04\x04$\x02\0\x12\x04\
    \xa4\x02\x08#\n\r\n\x05\x04$\x02\0\x04\x12\x04\xa4\x02\x08\x10\n\r\n\x05\
    \x04$\x02\0\x05\x12\x04\xa4\x02\x11\x16\n\r\n\x05\x04$\x02\0\x01\x12\x04\
    \xa4\x02\x17\x1e\n\r\n\x05\x04$\x02\0\x03\x12\x04\xa4\x02!\"\n\x0c\n\x04\
    \x04$\x02\x01\x12\x04\xa5\x02\x08*\n\r\n\x05\x04$\x02\x01\x04\x12\x04\
    \xa5\x02\x08\x10\n\r\n\x05\x04$\x02\x01\x05\x12\x04\xa5\x02\x11\x16\n\r\
    \n\x05\x04$\x02\x01\x01\x12\x04\xa5\x02\x17%\n\r\n\x05\x04$\x02\x01\x03\
    \x12\x04\xa5\x02()\n\x0c\n\x02\x04%\x12\x06\xa8\x02\0\xaa\x02\x01\n\x0b\
    \n\x03\x04%\x01\x12\x04\xa8\x02\x08\x1d\n\x0c\n\x04\x04%\x02\0\x12\x04\
    \xa9\x02\x08&\n\r\n\x05\x04%\x02\0\x04\x12\x04\xa9\x02\x08\x10\n\r\n\x05\
    \x04%\x02\0\x05\x12\x04\xa9\x02\x11\x18\n\r\n\x05\x04%\x02\0\x01\x12\x04\
    \xa9\x02\x19!\n\r\n\x05\x04%\x02\0\x03\x12\x04\xa9\x02$%\n\x0c\n\x02\x04\
    &\x12\x06\xac\x02\0\xb4\x02\x01\n\x0b\n\x03\x04&\x01\x12\x04\xac\x02\x08\
    &\n\x0e\n\x04\x04&\x03\0\x12\x06\xad\x02\x08\xb0\x02\t\n\r\n\x05\x04&\
    \x03\0\x01\x12\x04\xad\x02\x10\x1b\n\x0e\n\x06\x04&\x03\0\x02\0\x12\x04\
    \xae\x02\x10-\n\x0f\n\x07\x04&\x03\0\x02\0\x04\x12\x04\xae\x02\x10\x18\n\
    \x0f\n\x07\x04&\x03\0\x02\0\x05\x12\x04\xae\x02\x19\x20\n\x0f\n\x07\x04&\
    \x03\0\x02\0\x01\x12\x04\xae\x02!(\n\x0f\n\x07\x04&\x03\0\x02\0\x03\x12\
    \x04\xae\x02+,\n\x0e\n\x06\x04&\x03\0\x02\x01\x12\x04\xaf\x02\x101\n\x0f\
    \n\x07\x04&\x03\0\x02\x01\x04\x12\x04\xaf\x02\x10\x18\n\x0f\n\x07\x04&\
    \x03\0\x02\x01\x05\x12\x04\xaf\x02\x19\x1f\n\x0f\n\x07\x04&\x03\0\x02\
    \x01\x01\x12\x04\xaf\x02\x20,\n\x0f\n\x07\x04&\x03\0\x02\x01\x03\x12\x04\
    \xaf\x02/0\n\x0c\n\x04\x04&\x02\0\x12\x04\xb2\x02\x08R\n\r\n\x05\x04&\
    \x02\0\x04\x12\x04\xb2\x02\x08\x10\n\r\n\x05\x04&\x02\0\x06\x12\x04\xb2\
    \x02\x11;\n\r\n\x05\x04&\x02\0\x01\x12\x04\xb2\x02<M\n\r\n\x05\x04&\x02\
    \0\x03\x12\x04\xb2\x02PQ\n\x0c\n\x04\x04&\x02\x01\x12\x04\xb3\x02\x084\n\
    \r\n\x05\x04&\x02\x01\x04\x12\x04\xb3\x02\x08\x10\n\r\n\x05\x04&\x02\x01\
    \x05\x12\x04\xb3\x02\x11\x18\n\r\n\x05\x04&\x02\x01\x01\x12\x04\xb3\x02\
    \x19/\n\r\n\x05\x04&\x02\x01\x03\x12\x04\xb3\x0223\n\x0c\n\x02\x04'\x12\
    \x06\xb6\x02\0\xb9\x02\x01\n\x0b\n\x03\x04'\x01\x12\x04\xb6\x02\x08\x1d\
    \n\x0c\n\x04\x04'\x02\0\x12\x04\xb7\x02\x08*\n\r\n\x05\x04'\x02\0\x04\
    \x12\x04\xb7\x02\x08\x10\n\r\n\x05\x04'\x02\0\x05\x12\x04\xb7\x02\x11\
    \x18\n\r\n\x05\x04'\x02\0\x01\x12\x04\xb7\x02\x19%\n\r\n\x05\x04'\x02\0\
    \x03\x12\x04\xb7\x02()\n\x0c\n\x04\x04'\x02\x01\x12\x04\xb8\x02\x08+\n\r\
    \n\x05\x04'\x02\x01\x04\x12\x04\xb8\x02\x08\x10\n\r\n\x05\x04'\x02\x01\
    \x05\x12\x04\xb8\x02\x11\x18\n\r\n\x05\x04'\x02\x01\x01\x12\x04\xb8\x02\
    \x19&\n\r\n\x05\x04'\x02\x01\x03\x12\x04\xb8\x02)*\n\x0c\n\x02\x04(\x12\
    \x06\xbb\x02\0\xbe\x02\x01\n\x0b\n\x03\x04(\x01\x12\x04\xbb\x02\x08&\n\
    \x0c\n\x04\x04(\x02\0\x12\x04\xbc\x02\x08\"\n\r\n\x05\x04(\x02\0\x04\x12\
    \x04\xbc\x02\x08\x10\n\r\n\x05\x04(\x02\0\x05\x12\x04\xbc\x02\x11\x15\n\
    \r\n\x05\x04(\x02\0\x01\x12\x04\xbc\x02\x16\x1d\n\r\n\x05\x04(\x02\0\x03\
    \x12\x04\xbc\x02\x20!\n\x0c\n\x04\x04(\x02\x01\x12\x04\xbd\x02\x08+\n\r\
    \n\x05\x04(\x02\x01\x04\x12\x04\xbd\x02\x08\x10\n\r\n\x05\x04(\x02\x01\
    \x05\x12\x04\xbd\x02\x11\x15\n\r\n\x05\x04(\x02\x01\x01\x12\x04\xbd\x02\
    \x16&\n\r\n\x05\x04(\x02\x01\x03\x12\x04\xbd\x02)*\n\x0c\n\x02\x04)\x12\
    \x06\xc0\x02\0\xc3\x02\x01\n\x0b\n\x03\x04)\x01\x12\x04\xc0\x02\x08\x1f\
    \n\x0c\n\x04\x04)\x02\0\x12\x04\xc1\x02\x08%\n\r\n\x05\x04)\x02\0\x04\
    \x12\x04\xc1\x02\x08\x10\n\r\n\x05\x04)\x02\0\x05\x12\x04\xc1\x02\x11\
    \x18\n\r\n\x05\x04)\x02\0\x01\x12\x04\xc1\x02\x19\x20\n\r\n\x05\x04)\x02\
    \0\x03\x12\x04\xc1\x02#$\n\x0c\n\x04\x04)\x02\x01\x12\x04\xc2\x02\x088\n\
    \r\n\x05\x04)\x02\x01\x04\x12\x04\xc2\x02\x08\x10\n\r\n\x05\x04)\x02\x01\
    \x05\x12\x04\xc2\x02\x11\x15\n\r\n\x05\x04)\x02\x01\x01\x12\x04\xc2\x02\
    \x163\n\r\n\x05\x04)\x02\x01\x03\x12\x04\xc2\x0267\n\x0c\n\x02\x04*\x12\
    \x06\xc5\x02\0\xca\x02\x01\n\x0b\n\x03\x04*\x01\x12\x04\xc5\x02\x08(\n\
    \x0c\n\x04\x04*\x02\0\x12\x04\xc6\x02\x08\"\n\r\n\x05\x04*\x02\0\x04\x12\
    \x04\xc6\x02\x08\x10\n\r\n\x05\x04*\x02\0\x05\x12\x04\xc6\x02\x11\x15\n\
    \r\n\x05\x04*\x02\0\x01\x12\x04\xc6\x02\x16\x1d\n\r\n\x05\x04*\x02\0\x03\
    \x12\x04\xc6\x02\x20!\n\x0c\n\x04\x04*\x02\x01\x12\x04\xc7\x02\x08&\n\r\
    \n\x05\x04*\x02\x01\x04\x12\x04\xc7\x02\x08\x10\n\r\n\x05\x04*\x02\x01\
    \x05\x12\x04\xc7\x02\x11\x18\n\r\n\x05\x04*\x02\x01\x01\x12\x04\xc7\x02\
    \x19!\n\r\n\x05\x04*\x02\x01\x03\x12\x04\xc7\x02$%\n\x0c\n\x04\x04*\x02\
    \x02\x12\x04\xc8\x02\x083\n\r\n\x05\x04*\x02\x02\x04\x12\x04\xc8\x02\x08\
    \x10\n\r\n\x05\x04*\x02\x02\x05\x12\x04\xc8\x02\x11\x18\n\r\n\x05\x04*\
    \x02\x02\x01\x12\x04\xc8\x02\x19.\n\r\n\x05\x04*\x02\x02\x03\x12\x04\xc8\
    \x0212\n\x0c\n\x04\x04*\x02\x03\x12\x04\xc9\x02\x08,\n\r\n\x05\x04*\x02\
    \x03\x04\x12\x04\xc9\x02\x08\x10\n\r\n\x05\x04*\x02\x03\x05\x12\x04\xc9\
    \x02\x11\x18\n\r\n\x05\x04*\x02\x03\x01\x12\x04\xc9\x02\x19'\n\r\n\x05\
    \x04*\x02\x03\x03\x12\x04\xc9\x02*+\n\x0c\n\x02\x04+\x12\x06\xcc\x02\0\
    \xd7\x02\x01\n\x0b\n\x03\x04+\x01\x12\x04\xcc\x02\x08#\n\x0e\n\x04\x04+\
    \x03\0\x12\x06\xcd\x02\x08\xd3\x02\t\n\r\n\x05\x04+\x03\0\x01\x12\x04\
    \xcd\x02\x10\x15\n\x0e\n\x06\x04+\x03\0\x02\0\x12\x04\xce\x02\x10-\n\x0f\
    \n\x07\x04+\x03\0\x02\0\x04\x12\x04\xce\x02\x10\x18\n\x0f\n\x07\x04+\x03\
    \0\x02\0\x05\x12\x04\xce\x02\x19\x1e\n\x0f\n\x07\x04+\x03\0\x02\0\x01\
    \x12\x04\xce\x02\x1f(\n\x0f\n\x07\x04+\x03\0\x02\0\x03\x12\x04\xce\x02+,\
    \n\x0e\n\x06\x04+\x03\0\x02\x01\x12\x04\xcf\x02\x10)\n\x0f\n\x07\x04+\
    \x03\0\x02\x01\x04\x12\x04\xcf\x02\x10\x18\n\x0f\n\x07\x04+\x03\0\x02\
    \x01\x05\x12\x04\xcf\x02\x19\x1f\n\x0f\n\x07\x04+\x03\0\x02\x01\x01\x12\
    \x04\xcf\x02\x20$\n\x0f\n\x07\x04+\x03\0\x02\x01\x03\x12\x04\xcf\x02'(\n\
    \x0e\n\x06\x04+\x03\0\x02\x02\x12\x04\xd0\x02\x10(\n\x0f\n\x07\x04+\x03\
    \0\x02\x02\x04\x12\x04\xd0\x02\x10\x18\n\x0f\n\x07\x04+\x03\0\x02\x02\
    \x05\x12\x04\xd0\x02\x19\x1f\n\x0f\n\x07\x04+\x03\0\x02\x02\x01\x12\x04\
    \xd0\x02\x20#\n\x0f\n\x07\x04+\x03\0\x02\x02\x03\x12\x04\xd0\x02&'\n\x0e\
    \n\x06\x04+\x03\0\x02\x03\x12\x04\xd1\x02\x101\n\x0f\n\x07\x04+\x03\0\
    \x02\x03\x04\x12\x04\xd1\x02\x10\x18\n\x0f\n\x07\x04+\x03\0\x02\x03\x05\
    \x12\x04\xd1\x02\x19\x1f\n\x0f\n\x07\x04+\x03\0\x02\x03\x01\x12\x04\xd1\
    \x02\x20,\n\x0f\n\x07\x04+\x03\0\x02\x03\x03\x12\x04\xd1\x02/0\n\x0e\n\
    \x06\x04+\x03\0\x02\x04\x12\x04\xd2\x02\x10.\n\x0f\n\x07\x04+\x03\0\x02\
    \x04\x04\x12\x04\xd2\x02\x10\x18\n\x0f\n\x07\x04+\x03\0\x02\x04\x05\x12\
    \x04\xd2\x02\x19\x1f\n\x0f\n\x07\x04+\x03\0\x02\x04\x01\x12\x04\xd2\x02\
    \x20)\n\x0f\n\x07\x04+\x03\0\x02\x04\x03\x12\x04\xd2\x02,-\n\x0c\n\x04\
    \x04+\x02\0\x12\x04\xd5\x02\x08,\n\r\n\x05\x04+\x02\0\x04\x12\x04\xd5\
    \x02\x08\x10\n\r\n\x05\x04+\x02\0\x05\x12\x04\xd5\x02\x11\x16\n\r\n\x05\
    \x04+\x02\0\x01\x12\x04\xd5\x02\x17'\n\r\n\x05\x04+\x02\0\x03\x12\x04\
    \xd5\x02*+\n\x0c\n\x04\x04+\x02\x01\x12\x04\xd6\x02\x08;\n\r\n\x05\x04+\
    \x02\x01\x04\x12\x04\xd6\x02\x08\x10\n\r\n\x05\x04+\x02\x01\x06\x12\x04\
    \xd6\x02\x112\n\r\n\x05\x04+\x02\x01\x01\x12\x04\xd6\x0236\n\r\n\x05\x04\
    +\x02\x01\x03\x12\x04\xd6\x029:\n\x0c\n\x02\x04,\x12\x06\xd9\x02\0\xdc\
    \x02\x01\n\x0b\n\x03\x04,\x01\x12\x04\xd9\x02\x08,\n\x0c\n\x04\x04,\x02\
    \0\x12\x04\xda\x02\x08#\n\r\n\x05\x04,\x02\0\x04\x12\x04\xda\x02\x08\x10\
    \n\r\n\x05\x04,\x02\0\x05\x12\x04\xda\x02\x11\x16\n\r\n\x05\x04,\x02\0\
    \x01\x12\x04\xda\x02\x17\x1e\n\r\n\x05\x04,\x02\0\x03\x12\x04\xda\x02!\"\
    \n\x0c\n\x04\x04,\x02\x01\x12\x04\xdb\x02\x08$\n\r\n\x05\x04,\x02\x01\
    \x04\x12\x04\xdb\x02\x08\x10\n\r\n\x05\x04,\x02\x01\x05\x12\x04\xdb\x02\
    \x11\x17\n\r\n\x05\x04,\x02\x01\x01\x12\x04\xdb\x02\x18\x1f\n\r\n\x05\
    \x04,\x02\x01\x03\x12\x04\xdb\x02\"#\n\x0c\n\x02\x04-\x12\x06\xde\x02\0\
    \xe0\x02\x01\n\x0b\n\x03\x04-\x01\x12\x04\xde\x02\x080\n\x0c\n\x04\x04-\
    \x02\0\x12\x04\xdf\x02\x08%\n\r\n\x05\x04-\x02\0\x04\x12\x04\xdf\x02\x08\
    \x10\n\r\n\x05\x04-\x02\0\x05\x12\x04\xdf\x02\x11\x16\n\r\n\x05\x04-\x02\
    \0\x01\x12\x04\xdf\x02\x17\x20\n\r\n\x05\x04-\x02\0\x03\x12\x04\xdf\x02#\
    $\n\x0c\n\x02\x04.\x12\x06\xe2\x02\0\xe4\x02\x01\n\x0b\n\x03\x04.\x01\
    \x12\x04\xe2\x02\x08-\n\x0c\n\x04\x04.\x02\0\x12\x04\xe3\x02\x08%\n\r\n\
    \x05\x04.\x02\0\x04\x12\x04\xe3\x02\x08\x10\n\r\n\x05\x04.\x02\0\x05\x12\
    \x04\xe3\x02\x11\x18\n\r\n\x05\x04.\x02\0\x01\x12\x04\xe3\x02\x19\x20\n\
    \r\n\x05\x04.\x02\0\x03\x12\x04\xe3\x02#$\n\x0c\n\x02\x04/\x12\x06\xe6\
    \x02\0\xeb\x02\x01\n\x0b\n\x03\x04/\x01\x12\x04\xe6\x02\x08.\n\x0c\n\x04\
    \x04/\x02\0\x12\x04\xe7\x02\x085\n\r\n\x05\x04/\x02\0\x04\x12\x04\xe7\
    \x02\x08\x10\n\r\n\x05\x04/\x02\0\x05\x12\x04\xe7\x02\x11\x15\n\r\n\x05\
    \x04/\x02\0\x01\x12\x04\xe7\x02\x160\n\r\n\x05\x04/\x02\0\x03\x12\x04\
    \xe7\x0234\n\x0c\n\x04\x04/\x02\x01\x12\x04\xe8\x02\x088\n\r\n\x05\x04/\
    \x02\x01\x04\x12\x04\xe8\x02\x08\x10\n\r\n\x05\x04/\x02\x01\x05\x12\x04\
    \xe8\x02\x11\x15\n\r\n\x05\x04/\x02\x01\x01\x12\x04\xe8\x02\x163\n\r\n\
    \x05\x04/\x02\x01\x03\x12\x04\xe8\x0267\n\x0c\n\x04\x04/\x02\x02\x12\x04\
    \xe9\x02\x081\n\r\n\x05\x04/\x02\x02\x04\x12\x04\xe9\x02\x08\x10\n\r\n\
    \x05\x04/\x02\x02\x05\x12\x04\xe9\x02\x11\x15\n\r\n\x05\x04/\x02\x02\x01\
    \x12\x04\xe9\x02\x16,\n\r\n\x05\x04/\x02\x02\x03\x12\x04\xe9\x02/0\n\x0c\
    \n\x04\x04/\x02\x03\x12\x04\xea\x02\x08-\n\r\n\x05\x04/\x02\x03\x04\x12\
    \x04\xea\x02\x08\x10\n\r\n\x05\x04/\x02\x03\x05\x12\x04\xea\x02\x11\x17\
    \n\r\n\x05\x04/\x02\x03\x01\x12\x04\xea\x02\x18(\n\r\n\x05\x04/\x02\x03\
    \x03\x12\x04\xea\x02+,\n\x0c\n\x02\x040\x12\x06\xed\x02\0\xf3\x02\x01\n\
    \x0b\n\x03\x040\x01\x12\x04\xed\x02\x08%\n\x0c\n\x04\x040\x02\0\x12\x04\
    \xee\x02\x08&\n\r\n\x05\x040\x02\0\x04\x12\x04\xee\x02\x08\x10\n\r\n\x05\
    \x040\x02\0\x05\x12\x04\xee\x02\x11\x18\n\r\n\x05\x040\x02\0\x01\x12\x04\
    \xee\x02\x19!\n\r\n\x05\x040\x02\0\x03\x12\x04\xee\x02$%\n\x0c\n\x04\x04\
    0\x02\x01\x12\x04\xef\x02\x08#\n\r\n\x05\x040\x02\x01\x04\x12\x04\xef\
    \x02\x08\x10\n\r\n\x05\x040\x02\x01\x05\x12\x04\xef\x02\x11\x17\n\r\n\
    \x05\x040\x02\x01\x01\x12\x04\xef\x02\x18\x1e\n\r\n\x05\x040\x02\x01\x03\
    \x12\x04\xef\x02!\"\n\x0c\n\x04\x040\x02\x02\x12\x04\xf0\x02\x080\n\r\n\
    \x05\x040\x02\x02\x04\x12\x04\xf0\x02\x08\x10\n\r\n\x05\x040\x02\x02\x05\
    \x12\x04\xf0\x02\x11\x17\n\r\n\x05\x040\x02\x02\x01\x12\x04\xf0\x02\x18+\
    \n\r\n\x05\x040\x02\x02\x03\x12\x04\xf0\x02./\n\x0c\n\x04\x040\x02\x03\
    \x12\x04\xf1\x02\x08(\n\r\n\x05\x040\x02\x03\x04\x12\x04\xf1\x02\x08\x10\
    \n\r\n\x05\x040\x02\x03\x05\x12\x04\xf1\x02\x11\x15\n\r\n\x05\x040\x02\
    \x03\x01\x12\x04\xf1\x02\x16#\n\r\n\x05\x040\x02\x03\x03\x12\x04\xf1\x02\
    &'\n\x0c\n\x04\x040\x02\x04\x12\x04\xf2\x02\x08+\n\r\n\x05\x040\x02\x04\
    \x04\x12\x04\xf2\x02\x08\x10\n\r\n\x05\x040\x02\x04\x05\x12\x04\xf2\x02\
    \x11\x15\n\r\n\x05\x040\x02\x04\x01\x12\x04\xf2\x02\x16&\n\r\n\x05\x040\
    \x02\x04\x03\x12\x04\xf2\x02)*\n\x0c\n\x02\x041\x12\x06\xf5\x02\0\xf7\
    \x02\x01\n\x0b\n\x03\x041\x01\x12\x04\xf5\x02\x08#\n\x0c\n\x04\x041\x02\
    \0\x12\x04\xf6\x02\x08%\n\r\n\x05\x041\x02\0\x04\x12\x04\xf6\x02\x08\x10\
    \n\r\n\x05\x041\x02\0\x05\x12\x04\xf6\x02\x11\x18\n\r\n\x05\x041\x02\0\
    \x01\x12\x04\xf6\x02\x19\x20\n\r\n\x05\x041\x02\0\x03\x12\x04\xf6\x02#$\
    \n\x0c\n\x02\x042\x12\x06\xf9\x02\0\xff\x02\x01\n\x0b\n\x03\x042\x01\x12\
    \x04\xf9\x02\x08,\n\x0c\n\x04\x042\x02\0\x12\x04\xfa\x02\x08!\n\r\n\x05\
    \x042\x02\0\x04\x12\x04\xfa\x02\x08\x10\n\r\n\x05\x042\x02\0\x05\x12\x04\
    \xfa\x02\x11\x17\n\r\n\x05\x042\x02\0\x01\x12\x04\xfa\x02\x18\x1c\n\r\n\
    \x05\x042\x02\0\x03\x12\x04\xfa\x02\x1f\x20\n\x0c\n\x04\x042\x02\x01\x12\
    \x04\xfb\x02\x08$\n\r\n\x05\x042\x02\x01\x04\x12\x04\xfb\x02\x08\x10\n\r\
    \n\x05\x042\x02\x01\x05\x12\x04\xfb\x02\x11\x17\n\r\n\x05\x042\x02\x01\
    \x01\x12\x04\xfb\x02\x18\x1f\n\r\n\x05\x042\x02\x01\x03\x12\x04\xfb\x02\
    \"#\n\x0c\n\x04\x042\x02\x02\x12\x04\xfc\x02\x08$\n\r\n\x05\x042\x02\x02\
    \x04\x12\x04\xfc\x02\x08\x10\n\r\n\x05\x042\x02\x02\x05\x12\x04\xfc\x02\
    \x11\x16\n\r\n\x05\x042\x02\x02\x01\x12\x04\xfc\x02\x17\x1f\n\r\n\x05\
    \x042\x02\x02\x03\x12\x04\xfc\x02\"#\n\x0c\n\x04\x042\x02\x03\x12\x04\
    \xfd\x02\x08&\n\r\n\x05\x042\x02\x03\x04\x12\x04\xfd\x02\x08\x10\n\r\n\
    \x05\x042\x02\x03\x05\x12\x04\xfd\x02\x11\x15\n\r\n\x05\x042\x02\x03\x01\
    \x12\x04\xfd\x02\x16!\n\r\n\x05\x042\x02\x03\x03\x12\x04\xfd\x02$%\n\x0c\
    \n\x04\x042\x02\x04\x12\x04\xfe\x02\x08#\n\r\n\x05\x042\x02\x04\x04\x12\
    \x04\xfe\x02\x08\x10\n\r\n\x05\x042\x02\x04\x05\x12\x04\xfe\x02\x11\x15\
    \n\r\n\x05\x042\x02\x04\x01\x12\x04\xfe\x02\x16\x1e\n\r\n\x05\x042\x02\
    \x04\x03\x12\x04\xfe\x02!\"\n\x0c\n\x02\x043\x12\x06\x81\x03\0\x90\x03\
    \x01\n\x0b\n\x03\x043\x01\x12\x04\x81\x03\x08\x19\n\x0e\n\x04\x043\x04\0\
    \x12\x06\x82\x03\x08\x89\x03\t\n\r\n\x05\x043\x04\0\x01\x12\x04\x82\x03\
    \r\x1a\n\x0e\n\x06\x043\x04\0\x02\0\x12\x04\x83\x03\x10\x1b\n\x0f\n\x07\
    \x043\x04\0\x02\0\x01\x12\x04\x83\x03\x10\x16\n\x0f\n\x07\x043\x04\0\x02\
    \0\x02\x12\x04\x83\x03\x19\x1a\n\x0e\n\x06\x043\x04\0\x02\x01\x12\x04\
    \x84\x03\x10\x1c\n\x0f\n\x07\x043\x04\0\x02\x01\x01\x12\x04\x84\x03\x10\
    \x17\n\x0f\n\x07\x043\x04\0\x02\x01\x02\x12\x04\x84\x03\x1a\x1b\n\x0e\n\
    \x06\x043\x04\0\x02\x02\x12\x04\x85\x03\x10#\n\x0f\n\x07\x043\x04\0\x02\
    \x02\x01\x12\x04\x85\x03\x10\x1e\n\x0f\n\x07\x043\x04\0\x02\x02\x02\x12\
    \x04\x85\x03!\"\n\x0e\n\x06\x043\x04\0\x02\x03\x12\x04\x86\x03\x10*\n\
    \x0f\n\x07\x043\x04\0\x02\x03\x01\x12\x04\x86\x03\x10%\n\x0f\n\x07\x043\
    \x04\0\x02\x03\x02\x12\x04\x86\x03()\n\x0e\n\x06\x043\x04\0\x02\x04\x12\
    \x04\x87\x03\x10!\n\x0f\n\x07\x043\x04\0\x02\x04\x01\x12\x04\x87\x03\x10\
    \x1c\n\x0f\n\x07\x043\x04\0\x02\x04\x02\x12\x04\x87\x03\x1f\x20\n\x0e\n\
    \x06\x043\x04\0\x02\x05\x12\x04\x88\x03\x103\n\x0f\n\x07\x043\x04\0\x02\
    \x05\x01\x12\x04\x88\x03\x10.\n\x0f\n\x07\x043\x04\0\x02\x05\x02\x12\x04\
    \x88\x0312\n\x0c\n\x04\x043\x02\0\x12\x04\x8b\x03\x08%\n\r\n\x05\x043\
    \x02\0\x04\x12\x04\x8b\x03\x08\x10\n\r\n\x05\x043\x02\0\x05\x12\x04\x8b\
    \x03\x11\x16\n\r\n\x05\x043\x02\0\x01\x12\x04\x8b\x03\x17\x20\n\r\n\x05\
    \x043\x02\0\x03\x12\x04\x8b\x03#$\n\x0c\n\x04\x043\x02\x01\x12\x04\x8c\
    \x03\x08<\n\r\n\x05\x043\x02\x01\x04\x12\x04\x8c\x03\x08\x10\n\r\n\x05\
    \x043\x02\x01\x06\x12\x04\x8c\x03\x110\n\r\n\x05\x043\x02\x01\x01\x12\
    \x04\x8c\x0317\n\r\n\x05\x043\x02\x01\x03\x12\x04\x8c\x03:;\n\x0c\n\x04\
    \x043\x02\x02\x12\x04\x8d\x03\x08>\n\r\n\x05\x043\x02\x02\x04\x12\x04\
    \x8d\x03\x08\x10\n\r\n\x05\x043\x02\x02\x06\x12\x04\x8d\x03\x110\n\r\n\
    \x05\x043\x02\x02\x01\x12\x04\x8d\x0319\n\r\n\x05\x043\x02\x02\x03\x12\
    \x04\x8d\x03<=\n\x0c\n\x04\x043\x02\x03\x12\x04\x8e\x03\x08+\n\r\n\x05\
    \x043\x02\x03\x04\x12\x04\x8e\x03\x08\x10\n\r\n\x05\x043\x02\x03\x05\x12\
    \x04\x8e\x03\x11\x17\n\r\n\x05\x043\x02\x03\x01\x12\x04\x8e\x03\x18&\n\r\
    \n\x05\x043\x02\x03\x03\x12\x04\x8e\x03)*\n\x0c\n\x04\x043\x02\x04\x12\
    \x04\x8f\x03\x08)\n\r\n\x05\x043\x02\x04\x04\x12\x04\x8f\x03\x08\x10\n\r\
    \n\x05\x043\x02\x04\x05\x12\x04\x8f\x03\x11\x17\n\r\n\x05\x043\x02\x04\
    \x01\x12\x04\x8f\x03\x18$\n\r\n\x05\x043\x02\x04\x03\x12\x04\x8f\x03'(\n\
    \x0c\n\x02\x044\x12\x06\x92\x03\0\x9a\x03\x01\n\x0b\n\x03\x044\x01\x12\
    \x04\x92\x03\x08'\n\x0e\n\x04\x044\x03\0\x12\x06\x93\x03\x08\x97\x03\t\n\
    \r\n\x05\x044\x03\0\x01\x12\x04\x93\x03\x10\x15\n\x0e\n\x06\x044\x03\0\
    \x02\0\x12\x04\x94\x03\x103\n\x0f\n\x07\x044\x03\0\x02\0\x04\x12\x04\x94\
    \x03\x10\x18\n\x0f\n\x07\x044\x03\0\x02\0\x05\x12\x04\x94\x03\x19\x1f\n\
    \x0f\n\x07\x044\x03\0\x02\0\x01\x12\x04\x94\x03\x20.\n\x0f\n\x07\x044\
    \x03\0\x02\0\x03\x12\x04\x94\x0312\n\x0e\n\x06\x044\x03\0\x02\x01\x12\
    \x04\x95\x03\x100\n\x0f\n\x07\x044\x03\0\x02\x01\x04\x12\x04\x95\x03\x10\
    \x18\n\x0f\n\x07\x044\x03\0\x02\x01\x05\x12\x04\x95\x03\x19\x1f\n\x0f\n\
    \x07\x044\x03\0\x02\x01\x01\x12\x04\x95\x03\x20+\n\x0f\n\x07\x044\x03\0\
    \x02\x01\x03\x12\x04\x95\x03./\n\x0e\n\x06\x044\x03\0\x02\x02\x12\x04\
    \x96\x03\x107\n\x0f\n\x07\x044\x03\0\x02\x02\x04\x12\x04\x96\x03\x10\x18\
    \n\x0f\n\x07\x044\x03\0\x02\x02\x06\x12\x04\x96\x03\x19*\n\x0f\n\x07\x04\
    4\x03\0\x02\x02\x01\x12\x04\x96\x03+2\n\x0f\n\x07\x044\x03\0\x02\x02\x03\
    \x12\x04\x96\x0356\n\x0c\n\x04\x044\x02\0\x12\x04\x99\x03\x08C\n\r\n\x05\
    \x044\x02\0\x04\x12\x04\x99\x03\x08\x10\n\r\n\x05\x044\x02\0\x06\x12\x04\
    \x99\x03\x116\n\r\n\x05\x044\x02\0\x01\x12\x04\x99\x037>\n\r\n\x05\x044\
    \x02\0\x03\x12\x04\x99\x03AB\n\x0c\n\x02\x045\x12\x06\x9c\x03\0\xa3\x03\
    \x01\n\x0b\n\x03\x045\x01\x12\x04\x9c\x03\x08*\n\x0e\n\x04\x045\x03\0\
    \x12\x06\x9d\x03\x08\xa0\x03\t\n\r\n\x05\x045\x03\0\x01\x12\x04\x9d\x03\
    \x10\x15\n\x0e\n\x06\x045\x03\0\x02\0\x12\x04\x9e\x03\x10-\n\x0f\n\x07\
    \x045\x03\0\x02\0\x04\x12\x04\x9e\x03\x10\x18\n\x0f\n\x07\x045\x03\0\x02\
    \0\x05\x12\x04\x9e\x03\x19\x1f\n\x0f\n\x07\x045\x03\0\x02\0\x01\x12\x04\
    \x9e\x03\x20(\n\x0f\n\x07\x045\x03\0\x02\0\x03\x12\x04\x9e\x03+,\n\x0e\n\
    \x06\x045\x03\0\x02\x01\x12\x04\x9f\x03\x107\n\x0f\n\x07\x045\x03\0\x02\
    \x01\x04\x12\x04\x9f\x03\x10\x18\n\x0f\n\x07\x045\x03\0\x02\x01\x06\x12\
    \x04\x9f\x03\x19*\n\x0f\n\x07\x045\x03\0\x02\x01\x01\x12\x04\x9f\x03+2\n\
    \x0f\n\x07\x045\x03\0\x02\x01\x03\x12\x04\x9f\x0356\n\x0c\n\x04\x045\x02\
    \0\x12\x04\xa2\x03\x08F\n\r\n\x05\x045\x02\0\x04\x12\x04\xa2\x03\x08\x10\
    \n\r\n\x05\x045\x02\0\x06\x12\x04\xa2\x03\x119\n\r\n\x05\x045\x02\0\x01\
    \x12\x04\xa2\x03:A\n\r\n\x05\x045\x02\0\x03\x12\x04\xa2\x03DE\n\x0c\n\
    \x02\x046\x12\x06\xa5\x03\0\xa7\x03\x01\n\x0b\n\x03\x046\x01\x12\x04\xa5\
    \x03\x080\n\x0c\n\x04\x046\x02\0\x12\x04\xa6\x03\x08#\n\r\n\x05\x046\x02\
    \0\x04\x12\x04\xa6\x03\x08\x10\n\r\n\x05\x046\x02\0\x05\x12\x04\xa6\x03\
    \x11\x16\n\r\n\x05\x046\x02\0\x01\x12\x04\xa6\x03\x17\x1e\n\r\n\x05\x046\
    \x02\0\x03\x12\x04\xa6\x03!\"\n\x0c\n\x02\x047\x12\x06\xa9\x03\0\xab\x03\
    \x01\n\x0b\n\x03\x047\x01\x12\x04\xa9\x03\x083\n\x0c\n\x04\x047\x02\0\
    \x12\x04\xaa\x03\x08#\n\r\n\x05\x047\x02\0\x04\x12\x04\xaa\x03\x08\x10\n\
    \r\n\x05\x047\x02\0\x05\x12\x04\xaa\x03\x11\x16\n\r\n\x05\x047\x02\0\x01\
    \x12\x04\xaa\x03\x17\x1e\n\r\n\x05\x047\x02\0\x03\x12\x04\xaa\x03!\"\n\
    \x0c\n\x02\x048\x12\x06\xad\x03\0\xc2\x03\x01\n\x0b\n\x03\x048\x01\x12\
    \x04\xad\x03\x08\x1b\n\x0e\n\x04\x048\x03\0\x12\x06\xae\x03\x08\xb1\x03\
    \t\n\r\n\x05\x048\x03\0\x01\x12\x04\xae\x03\x10\x1c\n\x0e\n\x06\x048\x03\
    \0\x02\0\x12\x04\xaf\x03\x10(\n\x0f\n\x07\x048\x03\0\x02\0\x04\x12\x04\
    \xaf\x03\x10\x18\n\x0f\n\x07\x048\x03\0\x02\0\x05\x12\x04\xaf\x03\x19\
    \x1f\n\x0f\n\x07\x048\x03\0\x02\0\x01\x12\x04\xaf\x03\x20#\n\x0f\n\x07\
    \x048\x03\0\x02\0\x03\x12\x04\xaf\x03&'\n\x0e\n\x06\x048\x03\0\x02\x01\
    \x12\x04\xb0\x03\x10)\n\x0f\n\x07\x048\x03\0\x02\x01\x04\x12\x04\xb0\x03\
    \x10\x18\n\x0f\n\x07\x048\x03\0\x02\x01\x05\x12\x04\xb0\x03\x19\x1f\n\
    \x0f\n\x07\x048\x03\0\x02\x01\x01\x12\x04\xb0\x03\x20$\n\x0f\n\x07\x048\
    \x03\0\x02\x01\x03\x12\x04\xb0\x03'(\n\x0e\n\x04\x048\x04\0\x12\x06\xb3\
    \x03\x08\xb8\x03\t\n\r\n\x05\x048\x04\0\x01\x12\x04\xb3\x03\r\x13\n\x0e\
    \n\x06\x048\x04\0\x02\0\x12\x04\xb4\x03\x10)\n\x0f\n\x07\x048\x04\0\x02\
    \0\x01\x12\x04\xb4\x03\x10$\n\x0f\n\x07\x048\x04\0\x02\0\x02\x12\x04\xb4\
    \x03'(\n\x0e\n\x06\x048\x04\0\x02\x01\x12\x04\xb5\x03\x10+\n\x0f\n\x07\
    \x048\x04\0\x02\x01\x01\x12\x04\xb5\x03\x10&\n\x0f\n\x07\x048\x04\0\x02\
    \x01\x02\x12\x04\xb5\x03)*\n\x0e\n\x06\x048\x04\0\x02\x02\x12\x04\xb6\
    \x03\x10(\n\x0f\n\x07\x048\x04\0\x02\x02\x01\x12\x04\xb6\x03\x10#\n\x0f\
    \n\x07\x048\x04\0\x02\x02\x02\x12\x04\xb6\x03&'\n\x0e\n\x06\x048\x04\0\
    \x02\x03\x12\x04\xb7\x03\x10&\n\x0f\n\x07\x048\x04\0\x02\x03\x01\x12\x04\
    \xb7\x03\x10!\n\x0f\n\x07\x048\x04\0\x02\x03\x02\x12\x04\xb7\x03$%\n\x0e\
    \n\x04\x048\x04\x01\x12\x06\xba\x03\x08\xbd\x03\t\n\r\n\x05\x048\x04\x01\
    \x01\x12\x04\xba\x03\r\x19\n\x0e\n\x06\x048\x04\x01\x02\0\x12\x04\xbb\
    \x03\x10+\n\x0f\n\x07\x048\x04\x01\x02\0\x01\x12\x04\xbb\x03\x10&\n\x0f\
    \n\x07\x048\x04\x01\x02\0\x02\x12\x04\xbb\x03)*\n\x0e\n\x06\x048\x04\x01\
    \x02\x01\x12\x04\xbc\x03\x10+\n\x0f\n\x07\x048\x04\x01\x02\x01\x01\x12\
    \x04\xbc\x03\x10&\n\x0f\n\x07\x048\x04\x01\x02\x01\x02\x12\x04\xbc\x03)*\
    \n\x0c\n\x04\x048\x02\0\x12\x04\xbf\x03\x088\n\r\n\x05\x048\x02\0\x04\
    \x12\x04\xbf\x03\x08\x10\n\r\n\x05\x048\x02\0\x06\x12\x04\xbf\x03\x11+\n\
    \r\n\x05\x048\x02\0\x01\x12\x04\xbf\x03,3\n\r\n\x05\x048\x02\0\x03\x12\
    \x04\xbf\x0367\n\x0c\n\x04\x048\x02\x01\x12\x04\xc0\x03\x08H\n\r\n\x05\
    \x048\x02\x01\x04\x12\x04\xc0\x03\x08\x10\n\r\n\x05\x048\x02\x01\x06\x12\
    \x04\xc0\x03\x111\n\r\n\x05\x048\x02\x01\x01\x12\x04\xc0\x032C\n\r\n\x05\
    \x048\x02\x01\x03\x12\x04\xc0\x03FG\n\x0c\n\x04\x048\x02\x02\x12\x04\xc1\
    \x03\x08D\n\r\n\x05\x048\x02\x02\x04\x12\x04\xc1\x03\x08\x10\n\r\n\x05\
    \x048\x02\x02\x06\x12\x04\xc1\x03\x111\n\r\n\x05\x048\x02\x02\x01\x12\
    \x04\xc1\x032?\n\r\n\x05\x048\x02\x02\x03\x12\x04\xc1\x03BC\n\x0c\n\x02\
    \x049\x12\x06\xc4\x03\0\xd3\x03\x01\n\x0b\n\x03\x049\x01\x12\x04\xc4\x03\
    \x08\x1c\n\x0e\n\x04\x049\x03\0\x12\x06\xc5\x03\x08\xc8\x03\t\n\r\n\x05\
    \x049\x03\0\x01\x12\x04\xc5\x03\x10\x1a\n\x0e\n\x06\x049\x03\0\x02\0\x12\
    \x04\xc6\x03\x10)\n\x0f\n\x07\x049\x03\0\x02\0\x04\x12\x04\xc6\x03\x10\
    \x18\n\x0f\n\x07\x049\x03\0\x02\0\x05\x12\x04\xc6\x03\x19\x1f\n\x0f\n\
    \x07\x049\x03\0\x02\0\x01\x12\x04\xc6\x03\x20$\n\x0f\n\x07\x049\x03\0\
    \x02\0\x03\x12\x04\xc6\x03'(\n\x0e\n\x06\x049\x03\0\x02\x01\x12\x04\xc7\
    \x03\x10*\n\x0f\n\x07\x049\x03\0\x02\x01\x04\x12\x04\xc7\x03\x10\x18\n\
    \x0f\n\x07\x049\x03\0\x02\x01\x05\x12\x04\xc7\x03\x19\x1f\n\x0f\n\x07\
    \x049\x03\0\x02\x01\x01\x12\x04\xc7\x03\x20%\n\x0f\n\x07\x049\x03\0\x02\
    \x01\x03\x12\x04\xc7\x03()\n\x0c\n\x04\x049\x02\0\x12\x04\xca\x03\x08&\n\
    \r\n\x05\x049\x02\0\x04\x12\x04\xca\x03\x08\x10\n\r\n\x05\x049\x02\0\x05\
    \x12\x04\xca\x03\x11\x18\n\r\n\x05\x049\x02\0\x01\x12\x04\xca\x03\x19!\n\
    \r\n\x05\x049\x02\0\x03\x12\x04\xca\x03$%\n\x0c\n\x04\x049\x02\x01\x12\
    \x04\xcb\x03\x08#\n\r\n\x05\x049\x02\x01\x04\x12\x04\xcb\x03\x08\x10\n\r\
    \n\x05\x049\x02\x01\x05\x12\x04\xcb\x03\x11\x17\n\r\n\x05\x049\x02\x01\
    \x01\x12\x04\xcb\x03\x18\x1e\n\r\n\x05\x049\x02\x01\x03\x12\x04\xcb\x03!\
    \"\n\x0c\n\x04\x049\x02\x02\x12\x04\xcc\x03\x08!\n\r\n\x05\x049\x02\x02\
    \x04\x12\x04\xcc\x03\x08\x10\n\r\n\x05\x049\x02\x02\x05\x12\x04\xcc\x03\
    \x11\x15\n\r\n\x05\x049\x02\x02\x01\x12\x04\xcc\x03\x16\x1c\n\r\n\x05\
    \x049\x02\x02\x03\x12\x04\xcc\x03\x1f\x20\n\x0c\n\x04\x049\x02\x03\x12\
    \x04\xcd\x03\x08-\n\r\n\x05\x049\x02\x03\x04\x12\x04\xcd\x03\x08\x10\n\r\
    \n\x05\x049\x02\x03\x05\x12\x04\xcd\x03\x11\x18\n\r\n\x05\x049\x02\x03\
    \x01\x12\x04\xcd\x03\x19(\n\r\n\x05\x049\x02\x03\x03\x12\x04\xcd\x03+,\n\
    \x0c\n\x04\x049\x02\x04\x12\x04\xce\x03\x08(\n\r\n\x05\x049\x02\x04\x04\
    \x12\x04\xce\x03\x08\x10\n\r\n\x05\x049\x02\x04\x05\x12\x04\xce\x03\x11\
    \x17\n\r\n\x05\x049\x02\x04\x01\x12\x04\xce\x03\x18#\n\r\n\x05\x049\x02\
    \x04\x03\x12\x04\xce\x03&'\n\x0c\n\x04\x049\x02\x05\x12\x04\xcf\x03\x08(\
    \n\r\n\x05\x049\x02\x05\x04\x12\x04\xcf\x03\x08\x10\n\r\n\x05\x049\x02\
    \x05\x05\x12\x04\xcf\x03\x11\x17\n\r\n\x05\x049\x02\x05\x01\x12\x04\xcf\
    \x03\x18#\n\r\n\x05\x049\x02\x05\x03\x12\x04\xcf\x03&'\n\x0c\n\x04\x049\
    \x02\x06\x12\x04\xd0\x03\x08$\n\r\n\x05\x049\x02\x06\x04\x12\x04\xd0\x03\
    \x08\x10\n\r\n\x05\x049\x02\x06\x05\x12\x04\xd0\x03\x11\x17\n\r\n\x05\
    \x049\x02\x06\x01\x12\x04\xd0\x03\x18\x1f\n\r\n\x05\x049\x02\x06\x03\x12\
    \x04\xd0\x03\"#\n\x0c\n\x04\x049\x02\x07\x12\x04\xd1\x03\x08(\n\r\n\x05\
    \x049\x02\x07\x04\x12\x04\xd1\x03\x08\x10\n\r\n\x05\x049\x02\x07\x05\x12\
    \x04\xd1\x03\x11\x17\n\r\n\x05\x049\x02\x07\x01\x12\x04\xd1\x03\x18#\n\r\
    \n\x05\x049\x02\x07\x03\x12\x04\xd1\x03&'\n\x0c\n\x04\x049\x02\x08\x12\
    \x04\xd2\x03\x08B\n\r\n\x05\x049\x02\x08\x04\x12\x04\xd2\x03\x08\x10\n\r\
    \n\x05\x049\x02\x08\x06\x12\x04\xd2\x03\x110\n\r\n\x05\x049\x02\x08\x01\
    \x12\x04\xd2\x031=\n\r\n\x05\x049\x02\x08\x03\x12\x04\xd2\x03@A\n\x0c\n\
    \x02\x04:\x12\x06\xd5\x03\0\xde\x03\x01\n\x0b\n\x03\x04:\x01\x12\x04\xd5\
    \x03\x08,\n\x0e\n\x04\x04:\x03\0\x12\x06\xd6\x03\x08\xd9\x03\t\n\r\n\x05\
    \x04:\x03\0\x01\x12\x04\xd6\x03\x10%\n\x0e\n\x06\x04:\x03\0\x02\0\x12\
    \x04\xd7\x03\x107\n\x0f\n\x07\x04:\x03\0\x02\0\x04\x12\x04\xd7\x03\x10\
    \x18\n\x0f\n\x07\x04:\x03\0\x02\0\x05\x12\x04\xd7\x03\x19\x1f\n\x0f\n\
    \x07\x04:\x03\0\x02\0\x01\x12\x04\xd7\x03\x202\n\x0f\n\x07\x04:\x03\0\
    \x02\0\x03\x12\x04\xd7\x0356\n\x0e\n\x06\x04:\x03\0\x02\x01\x12\x04\xd8\
    \x03\x104\n\x0f\n\x07\x04:\x03\0\x02\x01\x04\x12\x04\xd8\x03\x10\x18\n\
    \x0f\n\x07\x04:\x03\0\x02\x01\x05\x12\x04\xd8\x03\x19\x20\n\x0f\n\x07\
    \x04:\x03\0\x02\x01\x01\x12\x04\xd8\x03!/\n\x0f\n\x07\x04:\x03\0\x02\x01\
    \x03\x12\x04\xd8\x0323\n\x0c\n\x04\x04:\x02\0\x12\x04\xdb\x03\x08%\n\r\n\
    \x05\x04:\x02\0\x04\x12\x04\xdb\x03\x08\x10\n\r\n\x05\x04:\x02\0\x05\x12\
    \x04\xdb\x03\x11\x18\n\r\n\x05\x04:\x02\0\x01\x12\x04\xdb\x03\x19\x20\n\
    \r\n\x05\x04:\x02\0\x03\x12\x04\xdb\x03#$\n\x0c\n\x04\x04:\x02\x01\x12\
    \x04\xdc\x03\x08\"\n\r\n\x05\x04:\x02\x01\x04\x12\x04\xdc\x03\x08\x10\n\
    \r\n\x05\x04:\x02\x01\x05\x12\x04\xdc\x03\x11\x17\n\r\n\x05\x04:\x02\x01\
    \x01\x12\x04\xdc\x03\x18\x1d\n\r\n\x05\x04:\x02\x01\x03\x12\x04\xdc\x03\
    \x20!\n\x0c\n\x04\x04:\x02\x02\x12\x04\xdd\x03\x08c\n\r\n\x05\x04:\x02\
    \x02\x04\x12\x04\xdd\x03\x08\x10\n\r\n\x05\x04:\x02\x02\x06\x12\x04\xdd\
    \x03\x11K\n\r\n\x05\x04:\x02\x02\x01\x12\x04\xdd\x03L^\n\r\n\x05\x04:\
    \x02\x02\x03\x12\x04\xdd\x03ab\n\x0c\n\x02\x04;\x12\x06\xe0\x03\0\x80\
    \x04\x01\n\x0b\n\x03\x04;\x01\x12\x04\xe0\x03\x08\x1e\n\x0e\n\x04\x04;\
    \x03\0\x12\x06\xe1\x03\x08\xf3\x03\t\n\r\n\x05\x04;\x03\0\x01\x12\x04\
    \xe1\x03\x10\x1f\n\x0e\n\x06\x04;\x03\0\x02\0\x12\x04\xe2\x03\x10.\n\x0f\
    \n\x07\x04;\x03\0\x02\0\x04\x12\x04\xe2\x03\x10\x18\n\x0f\n\x07\x04;\x03\
    \0\x02\0\x05\x12\x04\xe2\x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\0\x01\
    \x12\x04\xe2\x03\x20)\n\x0f\n\x07\x04;\x03\0\x02\0\x03\x12\x04\xe2\x03,-\
    \n\x0e\n\x06\x04;\x03\0\x02\x01\x12\x04\xe3\x03\x105\n\x0f\n\x07\x04;\
    \x03\0\x02\x01\x04\x12\x04\xe3\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\
    \x01\x05\x12\x04\xe3\x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\x01\x01\x12\
    \x04\xe3\x03\x200\n\x0f\n\x07\x04;\x03\0\x02\x01\x03\x12\x04\xe3\x0334\n\
    \x0e\n\x06\x04;\x03\0\x02\x02\x12\x04\xe4\x03\x10+\n\x0f\n\x07\x04;\x03\
    \0\x02\x02\x04\x12\x04\xe4\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\x02\
    \x05\x12\x04\xe4\x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\x02\x01\x12\x04\
    \xe4\x03\x20&\n\x0f\n\x07\x04;\x03\0\x02\x02\x03\x12\x04\xe4\x03)*\n\x0e\
    \n\x06\x04;\x03\0\x02\x03\x12\x04\xe5\x03\x10/\n\x0f\n\x07\x04;\x03\0\
    \x02\x03\x04\x12\x04\xe5\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\x03\x05\
    \x12\x04\xe5\x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\x03\x01\x12\x04\xe5\
    \x03\x20*\n\x0f\n\x07\x04;\x03\0\x02\x03\x03\x12\x04\xe5\x03-.\n\x0e\n\
    \x06\x04;\x03\0\x02\x04\x12\x04\xe6\x03\x10.\n\x0f\n\x07\x04;\x03\0\x02\
    \x04\x04\x12\x04\xe6\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\x04\x05\x12\
    \x04\xe6\x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\x04\x01\x12\x04\xe6\x03\
    \x20)\n\x0f\n\x07\x04;\x03\0\x02\x04\x03\x12\x04\xe6\x03,-\n\x0e\n\x06\
    \x04;\x03\0\x02\x05\x12\x04\xe7\x03\x10,\n\x0f\n\x07\x04;\x03\0\x02\x05\
    \x04\x12\x04\xe7\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\x05\x05\x12\x04\
    \xe7\x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\x05\x01\x12\x04\xe7\x03\x20'\
    \n\x0f\n\x07\x04;\x03\0\x02\x05\x03\x12\x04\xe7\x03*+\n\x0e\n\x06\x04;\
    \x03\0\x02\x06\x12\x04\xe8\x03\x10.\n\x0f\n\x07\x04;\x03\0\x02\x06\x04\
    \x12\x04\xe8\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\x06\x05\x12\x04\xe8\
    \x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\x06\x01\x12\x04\xe8\x03\x20)\n\
    \x0f\n\x07\x04;\x03\0\x02\x06\x03\x12\x04\xe8\x03,-\n\x0e\n\x06\x04;\x03\
    \0\x02\x07\x12\x04\xe9\x03\x10*\n\x0f\n\x07\x04;\x03\0\x02\x07\x04\x12\
    \x04\xe9\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\x07\x05\x12\x04\xe9\x03\
    \x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\x07\x01\x12\x04\xe9\x03\x20%\n\x0f\n\
    \x07\x04;\x03\0\x02\x07\x03\x12\x04\xe9\x03()\n\x0e\n\x06\x04;\x03\0\x02\
    \x08\x12\x04\xea\x03\x10(\n\x0f\n\x07\x04;\x03\0\x02\x08\x04\x12\x04\xea\
    \x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\x08\x05\x12\x04\xea\x03\x19\x1f\
    \n\x0f\n\x07\x04;\x03\0\x02\x08\x01\x12\x04\xea\x03\x20#\n\x0f\n\x07\x04\
    ;\x03\0\x02\x08\x03\x12\x04\xea\x03&'\n\x0e\n\x06\x04;\x03\0\x02\t\x12\
    \x04\xeb\x03\x10/\n\x0f\n\x07\x04;\x03\0\x02\t\x04\x12\x04\xeb\x03\x10\
    \x18\n\x0f\n\x07\x04;\x03\0\x02\t\x05\x12\x04\xeb\x03\x19\x1f\n\x0f\n\
    \x07\x04;\x03\0\x02\t\x01\x12\x04\xeb\x03\x20)\n\x0f\n\x07\x04;\x03\0\
    \x02\t\x03\x12\x04\xeb\x03,.\n\x0e\n\x06\x04;\x03\0\x02\n\x12\x04\xec\
    \x03\x10-\n\x0f\n\x07\x04;\x03\0\x02\n\x04\x12\x04\xec\x03\x10\x18\n\x0f\
    \n\x07\x04;\x03\0\x02\n\x05\x12\x04\xec\x03\x19\x1f\n\x0f\n\x07\x04;\x03\
    \0\x02\n\x01\x12\x04\xec\x03\x20'\n\x0f\n\x07\x04;\x03\0\x02\n\x03\x12\
    \x04\xec\x03*,\n\x0e\n\x06\x04;\x03\0\x02\x0b\x12\x04\xed\x03\x103\n\x0f\
    \n\x07\x04;\x03\0\x02\x0b\x04\x12\x04\xed\x03\x10\x18\n\x0f\n\x07\x04;\
    \x03\0\x02\x0b\x05\x12\x04\xed\x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\
    \x0b\x01\x12\x04\xed\x03\x20-\n\x0f\n\x07\x04;\x03\0\x02\x0b\x03\x12\x04\
    \xed\x0302\n\x0e\n\x06\x04;\x03\0\x02\x0c\x12\x04\xee\x03\x104\n\x0f\n\
    \x07\x04;\x03\0\x02\x0c\x04\x12\x04\xee\x03\x10\x18\n\x0f\n\x07\x04;\x03\
    \0\x02\x0c\x05\x12\x04\xee\x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\x0c\
    \x01\x12\x04\xee\x03\x20.\n\x0f\n\x07\x04;\x03\0\x02\x0c\x03\x12\x04\xee\
    \x0313\n\x0e\n\x06\x04;\x03\0\x02\r\x12\x04\xef\x03\x102\n\x0f\n\x07\x04\
    ;\x03\0\x02\r\x04\x12\x04\xef\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\r\
    \x05\x12\x04\xef\x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\r\x01\x12\x04\
    \xef\x03\x20,\n\x0f\n\x07\x04;\x03\0\x02\r\x03\x12\x04\xef\x03/1\n\x0e\n\
    \x06\x04;\x03\0\x02\x0e\x12\x04\xf0\x03\x101\n\x0f\n\x07\x04;\x03\0\x02\
    \x0e\x04\x12\x04\xf0\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\x0e\x05\x12\
    \x04\xf0\x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\x0e\x01\x12\x04\xf0\x03\
    \x20+\n\x0f\n\x07\x04;\x03\0\x02\x0e\x03\x12\x04\xf0\x03.0\n\x0e\n\x06\
    \x04;\x03\0\x02\x0f\x12\x04\xf1\x03\x10-\n\x0f\n\x07\x04;\x03\0\x02\x0f\
    \x04\x12\x04\xf1\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\x0f\x05\x12\x04\
    \xf1\x03\x19\x1e\n\x0f\n\x07\x04;\x03\0\x02\x0f\x01\x12\x04\xf1\x03\x1f'\
    \n\x0f\n\x07\x04;\x03\0\x02\x0f\x03\x12\x04\xf1\x03*,\n\x0e\n\x06\x04;\
    \x03\0\x02\x10\x12\x04\xf2\x03\x102\n\x0f\n\x07\x04;\x03\0\x02\x10\x04\
    \x12\x04\xf2\x03\x10\x18\n\x0f\n\x07\x04;\x03\0\x02\x10\x05\x12\x04\xf2\
    \x03\x19\x1f\n\x0f\n\x07\x04;\x03\0\x02\x10\x01\x12\x04\xf2\x03\x20,\n\
    \x0f\n\x07\x04;\x03\0\x02\x10\x03\x12\x04\xf2\x03/1\n\x0e\n\x04\x04;\x03\
    \x01\x12\x06\xf5\x03\x08\xfa\x03\t\n\r\n\x05\x04;\x03\x01\x01\x12\x04\
    \xf5\x03\x10\x1b\n\x0e\n\x06\x04;\x03\x01\x02\0\x12\x04\xf6\x03\x10/\n\
    \x0f\n\x07\x04;\x03\x01\x02\0\x04\x12\x04\xf6\x03\x10\x18\n\x0f\n\x07\
    \x04;\x03\x01\x02\0\x05\x12\x04\xf6\x03\x19\x1f\n\x0f\n\x07\x04;\x03\x01\
    \x02\0\x01\x12\x04\xf6\x03\x20*\n\x0f\n\x07\x04;\x03\x01\x02\0\x03\x12\
    \x04\xf6\x03-.\n\x0e\n\x06\x04;\x03\x01\x02\x01\x12\x04\xf7\x03\x101\n\
    \x0f\n\x07\x04;\x03\x01\x02\x01\x04\x12\x04\xf7\x03\x10\x18\n\x0f\n\x07\
    \x04;\x03\x01\x02\x01\x05\x12\x04\xf7\x03\x19\x1f\n\x0f\n\x07\x04;\x03\
    \x01\x02\x01\x01\x12\x04\xf7\x03\x20,\n\x0f\n\x07\x04;\x03\x01\x02\x01\
    \x03\x12\x04\xf7\x03/0\n\x0e\n\x06\x04;\x03\x01\x02\x02\x12\x04\xf8\x03\
    \x102\n\x0f\n\x07\x04;\x03\x01\x02\x02\x04\x12\x04\xf8\x03\x10\x18\n\x0f\
    \n\x07\x04;\x03\x01\x02\x02\x05\x12\x04\xf8\x03\x19\x1f\n\x0f\n\x07\x04;\
    \x03\x01\x02\x02\x01\x12\x04\xf8\x03\x20-\n\x0f\n\x07\x04;\x03\x01\x02\
    \x02\x03\x12\x04\xf8\x0301\n\x0e\n\x06\x04;\x03\x01\x02\x03\x12\x04\xf9\
    \x03\x102\n\x0f\n\x07\x04;\x03\x01\x02\x03\x04\x12\x04\xf9\x03\x10\x18\n\
    \x0f\n\x07\x04;\x03\x01\x02\x03\x05\x12\x04\xf9\x03\x19\x1f\n\x0f\n\x07\
    \x04;\x03\x01\x02\x03\x01\x12\x04\xf9\x03\x20-\n\x0f\n\x07\x04;\x03\x01\
    \x02\x03\x03\x12\x04\xf9\x0301\n\x0c\n\x04\x04;\x02\0\x12\x04\xfc\x03\
    \x08\"\n\r\n\x05\x04;\x02\0\x04\x12\x04\xfc\x03\x08\x10\n\r\n\x05\x04;\
    \x02\0\x05\x12\x04\xfc\x03\x11\x17\n\r\n\x05\x04;\x02\0\x01\x12\x04\xfc\
    \x03\x18\x1d\n\r\n\x05\x04;\x02\0\x03\x12\x04\xfc\x03\x20!\n\x0c\n\x04\
    \x04;\x02\x01\x12\x04\xfd\x03\x08$\n\r\n\x05\x04;\x02\x01\x04\x12\x04\
    \xfd\x03\x08\x10\n\r\n\x05\x04;\x02\x01\x05\x12\x04\xfd\x03\x11\x17\n\r\
    \n\x05\x04;\x02\x01\x01\x12\x04\xfd\x03\x18\x1f\n\r\n\x05\x04;\x02\x01\
    \x03\x12\x04\xfd\x03\"#\n\x0c\n\x04\x04;\x02\x02\x12\x04\xfe\x03\x08@\n\
    \r\n\x05\x04;\x02\x02\x04\x12\x04\xfe\x03\x08\x10\n\r\n\x05\x04;\x02\x02\
    \x06\x12\x04\xfe\x03\x113\n\r\n\x05\x04;\x02\x02\x01\x12\x04\xfe\x034;\n\
    \r\n\x05\x04;\x02\x02\x03\x12\x04\xfe\x03>?\n\x0c\n\x04\x04;\x02\x03\x12\
    \x04\xff\x03\x08I\n\r\n\x05\x04;\x02\x03\x04\x12\x04\xff\x03\x08\x10\n\r\
    \n\x05\x04;\x02\x03\x06\x12\x04\xff\x03\x117\n\r\n\x05\x04;\x02\x03\x01\
    \x12\x04\xff\x038D\n\r\n\x05\x04;\x02\x03\x03\x12\x04\xff\x03GH\n\x0c\n\
    \x02\x04<\x12\x06\x82\x04\0\x91\x04\x01\n\x0b\n\x03\x04<\x01\x12\x04\x82\
    \x04\x08&\n\x0e\n\x04\x04<\x04\0\x12\x06\x83\x04\x08\x8d\x04\t\n\r\n\x05\
    \x04<\x04\0\x01\x12\x04\x83\x04\r\x17\n\x0e\n\x06\x04<\x04\0\x02\0\x12\
    \x04\x84\x04\x10\x1f\n\x0f\n\x07\x04<\x04\0\x02\0\x01\x12\x04\x84\x04\
    \x10\x1a\n\x0f\n\x07\x04<\x04\0\x02\0\x02\x12\x04\x84\x04\x1d\x1e\n\x0e\
    \n\x06\x04<\x04\0\x02\x01\x12\x04\x85\x04\x10&\n\x0f\n\x07\x04<\x04\0\
    \x02\x01\x01\x12\x04\x85\x04\x10!\n\x0f\n\x07\x04<\x04\0\x02\x01\x02\x12\
    \x04\x85\x04$%\n\x0e\n\x06\x04<\x04\0\x02\x02\x12\x04\x86\x04\x10,\n\x0f\
    \n\x07\x04<\x04\0\x02\x02\x01\x12\x04\x86\x04\x10'\n\x0f\n\x07\x04<\x04\
    \0\x02\x02\x02\x12\x04\x86\x04*+\n\x0e\n\x06\x04<\x04\0\x02\x03\x12\x04\
    \x87\x04\x10(\n\x0f\n\x07\x04<\x04\0\x02\x03\x01\x12\x04\x87\x04\x10#\n\
    \x0f\n\x07\x04<\x04\0\x02\x03\x02\x12\x04\x87\x04&'\n\x0e\n\x06\x04<\x04\
    \0\x02\x04\x12\x04\x88\x04\x10$\n\x0f\n\x07\x04<\x04\0\x02\x04\x01\x12\
    \x04\x88\x04\x10\x1f\n\x0f\n\x07\x04<\x04\0\x02\x04\x02\x12\x04\x88\x04\
    \"#\n\x0e\n\x06\x04<\x04\0\x02\x05\x12\x04\x89\x04\x100\n\x0f\n\x07\x04<\
    \x04\0\x02\x05\x01\x12\x04\x89\x04\x10+\n\x0f\n\x07\x04<\x04\0\x02\x05\
    \x02\x12\x04\x89\x04./\n\x0e\n\x06\x04<\x04\0\x02\x06\x12\x04\x8a\x04\
    \x101\n\x0f\n\x07\x04<\x04\0\x02\x06\x01\x12\x04\x8a\x04\x10,\n\x0f\n\
    \x07\x04<\x04\0\x02\x06\x02\x12\x04\x8a\x04/0\n\x0e\n\x06\x04<\x04\0\x02\
    \x07\x12\x04\x8b\x04\x10(\n\x0f\n\x07\x04<\x04\0\x02\x07\x01\x12\x04\x8b\
    \x04\x10#\n\x0f\n\x07\x04<\x04\0\x02\x07\x02\x12\x04\x8b\x04&'\n\x0e\n\
    \x06\x04<\x04\0\x02\x08\x12\x04\x8c\x04\x100\n\x0f\n\x07\x04<\x04\0\x02\
    \x08\x01\x12\x04\x8c\x04\x10+\n\x0f\n\x07\x04<\x04\0\x02\x08\x02\x12\x04\
    \x8c\x04./\n\x0c\n\x04\x04<\x02\0\x12\x04\x8f\x04\x08$\n\r\n\x05\x04<\
    \x02\0\x04\x12\x04\x8f\x04\x08\x10\n\r\n\x05\x04<\x02\0\x05\x12\x04\x8f\
    \x04\x11\x17\n\r\n\x05\x04<\x02\0\x01\x12\x04\x8f\x04\x18\x1f\n\r\n\x05\
    \x04<\x02\0\x03\x12\x04\x8f\x04\"#\n\x0c\n\x04\x04<\x02\x01\x12\x04\x90\
    \x04\x08J\n\r\n\x05\x04<\x02\x01\x04\x12\x04\x90\x04\x08\x10\n\r\n\x05\
    \x04<\x02\x01\x06\x12\x04\x90\x04\x11:\n\r\n\x05\x04<\x02\x01\x01\x12\
    \x04\x90\x04;E\n\r\n\x05\x04<\x02\x01\x03\x12\x04\x90\x04HI\n\x0c\n\x02\
    \x04=\x12\x06\x93\x04\0\x97\x04\x01\n\x0b\n\x03\x04=\x01\x12\x04\x93\x04\
    \x08$\n\x0c\n\x04\x04=\x02\0\x12\x04\x94\x04\x08%\n\r\n\x05\x04=\x02\0\
    \x04\x12\x04\x94\x04\x08\x10\n\r\n\x05\x04=\x02\0\x05\x12\x04\x94\x04\
    \x11\x18\n\r\n\x05\x04=\x02\0\x01\x12\x04\x94\x04\x19\x20\n\r\n\x05\x04=\
    \x02\0\x03\x12\x04\x94\x04#$\n\x0c\n\x04\x04=\x02\x01\x12\x04\x95\x04\
    \x08\"\n\r\n\x05\x04=\x02\x01\x04\x12\x04\x95\x04\x08\x10\n\r\n\x05\x04=\
    \x02\x01\x05\x12\x04\x95\x04\x11\x17\n\r\n\x05\x04=\x02\x01\x01\x12\x04\
    \x95\x04\x18\x1d\n\r\n\x05\x04=\x02\x01\x03\x12\x04\x95\x04\x20!\n\x0c\n\
    \x04\x04=\x02\x02\x12\x04\x96\x04\x08&\n\r\n\x05\x04=\x02\x02\x04\x12\
    \x04\x96\x04\x08\x10\n\r\n\x05\x04=\x02\x02\x05\x12\x04\x96\x04\x11\x15\
    \n\r\n\x05\x04=\x02\x02\x01\x12\x04\x96\x04\x16!\n\r\n\x05\x04=\x02\x02\
    \x03\x12\x04\x96\x04$%\n\x0c\n\x02\x04>\x12\x06\x99\x04\0\x9d\x04\x01\n\
    \x0b\n\x03\x04>\x01\x12\x04\x99\x04\x08%\n\x0c\n\x04\x04>\x02\0\x12\x04\
    \x9a\x04\x08%\n\r\n\x05\x04>\x02\0\x04\x12\x04\x9a\x04\x08\x10\n\r\n\x05\
    \x04>\x02\0\x05\x12\x04\x9a\x04\x11\x18\n\r\n\x05\x04>\x02\0\x01\x12\x04\
    \x9a\x04\x19\x20\n\r\n\x05\x04>\x02\0\x03\x12\x04\x9a\x04#$\n\x0c\n\x04\
    \x04>\x02\x01\x12\x04\x9b\x04\x08\"\n\r\n\x05\x04>\x02\x01\x04\x12\x04\
    \x9b\x04\x08\x10\n\r\n\x05\x04>\x02\x01\x05\x12\x04\x9b\x04\x11\x17\n\r\
    \n\x05\x04>\x02\x01\x01\x12\x04\x9b\x04\x18\x1d\n\r\n\x05\x04>\x02\x01\
    \x03\x12\x04\x9b\x04\x20!\n\x0c\n\x04\x04>\x02\x02\x12\x04\x9c\x04\x08,\
    \n\r\n\x05\x04>\x02\x02\x04\x12\x04\x9c\x04\x08\x10\n\r\n\x05\x04>\x02\
    \x02\x05\x12\x04\x9c\x04\x11\x15\n\r\n\x05\x04>\x02\x02\x01\x12\x04\x9c\
    \x04\x16'\n\r\n\x05\x04>\x02\x02\x03\x12\x04\x9c\x04*+\n\x0c\n\x02\x04?\
    \x12\x06\x9f\x04\0\xa2\x04\x01\n\x0b\n\x03\x04?\x01\x12\x04\x9f\x04\x08!\
    \n\x0c\n\x04\x04?\x02\0\x12\x04\xa0\x04\x08%\n\r\n\x05\x04?\x02\0\x04\
    \x12\x04\xa0\x04\x08\x10\n\r\n\x05\x04?\x02\0\x05\x12\x04\xa0\x04\x11\
    \x18\n\r\n\x05\x04?\x02\0\x01\x12\x04\xa0\x04\x19\x20\n\r\n\x05\x04?\x02\
    \0\x03\x12\x04\xa0\x04#$\n\x0c\n\x04\x04?\x02\x01\x12\x04\xa1\x04\x08#\n\
    \r\n\x05\x04?\x02\x01\x04\x12\x04\xa1\x04\x08\x10\n\r\n\x05\x04?\x02\x01\
    \x05\x12\x04\xa1\x04\x11\x17\n\r\n\x05\x04?\x02\x01\x01\x12\x04\xa1\x04\
    \x18\x1e\n\r\n\x05\x04?\x02\x01\x03\x12\x04\xa1\x04!\"\n\x0c\n\x02\x04@\
    \x12\x06\xa4\x04\0\xa6\x04\x01\n\x0b\n\x03\x04@\x01\x12\x04\xa4\x04\x08*\
    \n\x0c\n\x04\x04@\x02\0\x12\x04\xa5\x04\x08#\n\r\n\x05\x04@\x02\0\x04\
    \x12\x04\xa5\x04\x08\x10\n\r\n\x05\x04@\x02\0\x05\x12\x04\xa5\x04\x11\
    \x15\n\r\n\x05\x04@\x02\0\x01\x12\x04\xa5\x04\x16\x1e\n\r\n\x05\x04@\x02\
    \0\x03\x12\x04\xa5\x04!\"\n\x0c\n\x02\x04A\x12\x06\xa8\x04\0\xb5\x04\x01\
    \n\x0b\n\x03\x04A\x01\x12\x04\xa8\x04\x08\x20\n\x0e\n\x04\x04A\x03\0\x12\
    \x06\xa9\x04\x08\xac\x04\t\n\r\n\x05\x04A\x03\0\x01\x12\x04\xa9\x04\x10\
    \x1f\n\x0e\n\x06\x04A\x03\0\x02\0\x12\x04\xaa\x04\x10/\n\x0f\n\x07\x04A\
    \x03\0\x02\0\x04\x12\x04\xaa\x04\x10\x18\n\x0f\n\x07\x04A\x03\0\x02\0\
    \x05\x12\x04\xaa\x04\x19\x1f\n\x0f\n\x07\x04A\x03\0\x02\0\x01\x12\x04\
    \xaa\x04\x20*\n\x0f\n\x07\x04A\x03\0\x02\0\x03\x12\x04\xaa\x04-.\n\x0e\n\
    \x06\x04A\x03\0\x02\x01\x12\x04\xab\x04\x101\n\x0f\n\x07\x04A\x03\0\x02\
    \x01\x04\x12\x04\xab\x04\x10\x18\n\x0f\n\x07\x04A\x03\0\x02\x01\x05\x12\
    \x04\xab\x04\x19\x1f\n\x0f\n\x07\x04A\x03\0\x02\x01\x01\x12\x04\xab\x04\
    \x20,\n\x0f\n\x07\x04A\x03\0\x02\x01\x03\x12\x04\xab\x04/0\n\x0e\n\x04\
    \x04A\x03\x01\x12\x06\xae\x04\x08\xb1\x04\t\n\r\n\x05\x04A\x03\x01\x01\
    \x12\x04\xae\x04\x10\x1b\n\x0e\n\x06\x04A\x03\x01\x02\0\x12\x04\xaf\x04\
    \x101\n\x0f\n\x07\x04A\x03\x01\x02\0\x04\x12\x04\xaf\x04\x10\x18\n\x0f\n\
    \x07\x04A\x03\x01\x02\0\x05\x12\x04\xaf\x04\x19\x1f\n\x0f\n\x07\x04A\x03\
    \x01\x02\0\x01\x12\x04\xaf\x04\x20,\n\x0f\n\x07\x04A\x03\x01\x02\0\x03\
    \x12\x04\xaf\x04/0\n\x0e\n\x06\x04A\x03\x01\x02\x01\x12\x04\xb0\x04\x10R\
    \n\x0f\n\x07\x04A\x03\x01\x02\x01\x04\x12\x04\xb0\x04\x10\x18\n\x0f\n\
    \x07\x04A\x03\x01\x02\x01\x06\x12\x04\xb0\x04\x19A\n\x0f\n\x07\x04A\x03\
    \x01\x02\x01\x01\x12\x04\xb0\x04BM\n\x0f\n\x07\x04A\x03\x01\x02\x01\x03\
    \x12\x04\xb0\x04PQ\n\x0c\n\x04\x04A\x02\0\x12\x04\xb3\x04\x08\"\n\r\n\
    \x05\x04A\x02\0\x04\x12\x04\xb3\x04\x08\x10\n\r\n\x05\x04A\x02\0\x05\x12\
    \x04\xb3\x04\x11\x17\n\r\n\x05\x04A\x02\0\x01\x12\x04\xb3\x04\x18\x1d\n\
    \r\n\x05\x04A\x02\0\x03\x12\x04\xb3\x04\x20!\n\x0c\n\x04\x04A\x02\x01\
    \x12\x04\xb4\x04\x08H\n\r\n\x05\x04A\x02\x01\x04\x12\x04\xb4\x04\x08\x10\
    \n\r\n\x05\x04A\x02\x01\x06\x12\x04\xb4\x04\x115\n\r\n\x05\x04A\x02\x01\
    \x01\x12\x04\xb4\x046C\n\r\n\x05\x04A\x02\x01\x03\x12\x04\xb4\x04FG\n\
    \x0c\n\x02\x04B\x12\x06\xb7\x04\0\xba\x04\x01\n\x0b\n\x03\x04B\x01\x12\
    \x04\xb7\x04\x08'\n\x0c\n\x04\x04B\x02\0\x12\x04\xb8\x04\x08\"\n\r\n\x05\
    \x04B\x02\0\x04\x12\x04\xb8\x04\x08\x10\n\r\n\x05\x04B\x02\0\x05\x12\x04\
    \xb8\x04\x11\x17\n\r\n\x05\x04B\x02\0\x01\x12\x04\xb8\x04\x18\x1d\n\r\n\
    \x05\x04B\x02\0\x03\x12\x04\xb8\x04\x20!\n\x0c\n\x04\x04B\x02\x01\x12\
    \x04\xb9\x04\x08)\n\r\n\x05\x04B\x02\x01\x04\x12\x04\xb9\x04\x08\x10\n\r\
    \n\x05\x04B\x02\x01\x05\x12\x04\xb9\x04\x11\x17\n\r\n\x05\x04B\x02\x01\
    \x01\x12\x04\xb9\x04\x18$\n\r\n\x05\x04B\x02\x01\x03\x12\x04\xb9\x04'(\n\
    \x0c\n\x02\x04C\x12\x06\xbc\x04\0\xc6\x04\x01\n\x0b\n\x03\x04C\x01\x12\
    \x04\xbc\x04\x08/\n\x0e\n\x04\x04C\x03\0\x12\x06\xbd\x04\x08\xc1\x04\t\n\
    \r\n\x05\x04C\x03\0\x01\x12\x04\xbd\x04\x10\x1b\n\x0e\n\x06\x04C\x03\0\
    \x02\0\x12\x04\xbe\x04\x108\n\x0f\n\x07\x04C\x03\0\x02\0\x04\x12\x04\xbe\
    \x04\x10\x18\n\x0f\n\x07\x04C\x03\0\x02\0\x05\x12\x04\xbe\x04\x19\x1f\n\
    \x0f\n\x07\x04C\x03\0\x02\0\x01\x12\x04\xbe\x04\x203\n\x0f\n\x07\x04C\
    \x03\0\x02\0\x03\x12\x04\xbe\x0467\n\x0e\n\x06\x04C\x03\0\x02\x01\x12\
    \x04\xbf\x04\x108\n\x0f\n\x07\x04C\x03\0\x02\x01\x04\x12\x04\xbf\x04\x10\
    \x18\n\x0f\n\x07\x04C\x03\0\x02\x01\x05\x12\x04\xbf\x04\x19\x1f\n\x0f\n\
    \x07\x04C\x03\0\x02\x01\x01\x12\x04\xbf\x04\x203\n\x0f\n\x07\x04C\x03\0\
    \x02\x01\x03\x12\x04\xbf\x0467\n\x0e\n\x06\x04C\x03\0\x02\x02\x12\x04\
    \xc0\x04\x100\n\x0f\n\x07\x04C\x03\0\x02\x02\x04\x12\x04\xc0\x04\x10\x18\
    \n\x0f\n\x07\x04C\x03\0\x02\x02\x05\x12\x04\xc0\x04\x19\x1f\n\x0f\n\x07\
    \x04C\x03\0\x02\x02\x01\x12\x04\xc0\x04\x20+\n\x0f\n\x07\x04C\x03\0\x02\
    \x02\x03\x12\x04\xc0\x04./\n\x0c\n\x04\x04C\x02\0\x12\x04\xc3\x04\x088\n\
    \r\n\x05\x04C\x02\0\x04\x12\x04\xc3\x04\x08\x10\n\r\n\x05\x04C\x02\0\x05\
    \x12\x04\xc3\x04\x11\x17\n\r\n\x05\x04C\x02\0\x01\x12\x04\xc3\x04\x183\n\
    \r\n\x05\x04C\x02\0\x03\x12\x04\xc3\x0467\n\x0c\n\x04\x04C\x02\x01\x12\
    \x04\xc4\x04\x08V\n\r\n\x05\x04C\x02\x01\x04\x12\x04\xc4\x04\x08\x10\n\r\
    \n\x05\x04C\x02\x01\x06\x12\x04\xc4\x04\x11D\n\r\n\x05\x04C\x02\x01\x01\
    \x12\x04\xc4\x04EQ\n\r\n\x05\x04C\x02\x01\x03\x12\x04\xc4\x04TU\n\x0c\n\
    \x04\x04C\x02\x02\x12\x04\xc5\x04\x08+\n\r\n\x05\x04C\x02\x02\x04\x12\
    \x04\xc5\x04\x08\x10\n\r\n\x05\x04C\x02\x02\x05\x12\x04\xc5\x04\x11\x17\
    \n\r\n\x05\x04C\x02\x02\x01\x12\x04\xc5\x04\x18&\n\r\n\x05\x04C\x02\x02\
    \x03\x12\x04\xc5\x04)*\n\x0c\n\x02\x04D\x12\x06\xc8\x04\0\xd6\x04\x01\n\
    \x0b\n\x03\x04D\x01\x12\x04\xc8\x04\x083\n\x0c\n\x04\x04D\x02\0\x12\x04\
    \xc9\x04\x08\"\n\r\n\x05\x04D\x02\0\x04\x12\x04\xc9\x04\x08\x10\n\r\n\
    \x05\x04D\x02\0\x05\x12\x04\xc9\x04\x11\x17\n\r\n\x05\x04D\x02\0\x01\x12\
    \x04\xc9\x04\x18\x1d\n\r\n\x05\x04D\x02\0\x03\x12\x04\xc9\x04\x20!\n\x0c\
    \n\x04\x04D\x02\x01\x12\x04\xca\x04\x08%\n\r\n\x05\x04D\x02\x01\x04\x12\
    \x04\xca\x04\x08\x10\n\r\n\x05\x04D\x02\x01\x05\x12\x04\xca\x04\x11\x18\
    \n\r\n\x05\x04D\x02\x01\x01\x12\x04\xca\x04\x19\x20\n\r\n\x05\x04D\x02\
    \x01\x03\x12\x04\xca\x04#$\n\x0c\n\x04\x04D\x02\x02\x12\x04\xcb\x04\x085\
    \n\r\n\x05\x04D\x02\x02\x04\x12\x04\xcb\x04\x08\x10\n\r\n\x05\x04D\x02\
    \x02\x06\x12\x04\xcb\x04\x11'\n\r\n\x05\x04D\x02\x02\x01\x12\x04\xcb\x04\
    (0\n\r\n\x05\x04D\x02\x02\x03\x12\x04\xcb\x0434\n\x0c\n\x04\x04D\x02\x03\
    \x12\x04\xcc\x04\x08$\n\r\n\x05\x04D\x02\x03\x04\x12\x04\xcc\x04\x08\x10\
    \n\r\n\x05\x04D\x02\x03\x05\x12\x04\xcc\x04\x11\x17\n\r\n\x05\x04D\x02\
    \x03\x01\x12\x04\xcc\x04\x18\x1f\n\r\n\x05\x04D\x02\x03\x03\x12\x04\xcc\
    \x04\"#\n\x0c\n\x04\x04D\x02\x04\x12\x04\xcd\x04\x08-\n\r\n\x05\x04D\x02\
    \x04\x04\x12\x04\xcd\x04\x08\x10\n\r\n\x05\x04D\x02\x04\x05\x12\x04\xcd\
    \x04\x11\x17\n\r\n\x05\x04D\x02\x04\x01\x12\x04\xcd\x04\x18(\n\r\n\x05\
    \x04D\x02\x04\x03\x12\x04\xcd\x04+,\n\x0c\n\x04\x04D\x02\x05\x12\x04\xce\
    \x04\x08\"\n\r\n\x05\x04D\x02\x05\x04\x12\x04\xce\x04\x08\x10\n\r\n\x05\
    \x04D\x02\x05\x05\x12\x04\xce\x04\x11\x16\n\r\n\x05\x04D\x02\x05\x01\x12\
    \x04\xce\x04\x17\x1d\n\r\n\x05\x04D\x02\x05\x03\x12\x04\xce\x04\x20!\n\
    \x0c\n\x04\x04D\x02\x06\x12\x04\xcf\x04\x08%\n\r\n\x05\x04D\x02\x06\x04\
    \x12\x04\xcf\x04\x08\x10\n\r\n\x05\x04D\x02\x06\x05\x12\x04\xcf\x04\x11\
    \x17\n\r\n\x05\x04D\x02\x06\x01\x12\x04\xcf\x04\x18\x20\n\r\n\x05\x04D\
    \x02\x06\x03\x12\x04\xcf\x04#$\n\x0c\n\x04\x04D\x02\x07\x12\x04\xd0\x04\
    \x08%\n\r\n\x05\x04D\x02\x07\x04\x12\x04\xd0\x04\x08\x10\n\r\n\x05\x04D\
    \x02\x07\x05\x12\x04\xd0\x04\x11\x17\n\r\n\x05\x04D\x02\x07\x01\x12\x04\
    \xd0\x04\x18\x20\n\r\n\x05\x04D\x02\x07\x03\x12\x04\xd0\x04#$\n\x0c\n\
    \x04\x04D\x02\x08\x12\x04\xd1\x04\x08#\n\r\n\x05\x04D\x02\x08\x04\x12\
    \x04\xd1\x04\x08\x10\n\r\n\x05\x04D\x02\x08\x05\x12\x04\xd1\x04\x11\x17\
    \n\r\n\x05\x04D\x02\x08\x01\x12\x04\xd1\x04\x18\x1e\n\r\n\x05\x04D\x02\
    \x08\x03\x12\x04\xd1\x04!\"\n\x0c\n\x04\x04D\x02\t\x12\x04\xd2\x04\x08.\
    \n\r\n\x05\x04D\x02\t\x04\x12\x04\xd2\x04\x08\x10\n\r\n\x05\x04D\x02\t\
    \x05\x12\x04\xd2\x04\x11\x17\n\r\n\x05\x04D\x02\t\x01\x12\x04\xd2\x04\
    \x18(\n\r\n\x05\x04D\x02\t\x03\x12\x04\xd2\x04+-\n\x0c\n\x04\x04D\x02\n\
    \x12\x04\xd3\x04\x08&\n\r\n\x05\x04D\x02\n\x04\x12\x04\xd3\x04\x08\x10\n\
    \r\n\x05\x04D\x02\n\x05\x12\x04\xd3\x04\x11\x17\n\r\n\x05\x04D\x02\n\x01\
    \x12\x04\xd3\x04\x18\x20\n\r\n\x05\x04D\x02\n\x03\x12\x04\xd3\x04#%\n\
    \x0c\n\x04\x04D\x02\x0b\x12\x04\xd4\x04\x08&\n\r\n\x05\x04D\x02\x0b\x04\
    \x12\x04\xd4\x04\x08\x10\n\r\n\x05\x04D\x02\x0b\x05\x12\x04\xd4\x04\x11\
    \x17\n\r\n\x05\x04D\x02\x0b\x01\x12\x04\xd4\x04\x18\x20\n\r\n\x05\x04D\
    \x02\x0b\x03\x12\x04\xd4\x04#%\n\x0c\n\x04\x04D\x02\x0c\x12\x04\xd5\x04\
    \x08*\n\r\n\x05\x04D\x02\x0c\x04\x12\x04\xd5\x04\x08\x10\n\r\n\x05\x04D\
    \x02\x0c\x05\x12\x04\xd5\x04\x11\x17\n\r\n\x05\x04D\x02\x0c\x01\x12\x04\
    \xd5\x04\x18$\n\r\n\x05\x04D\x02\x0c\x03\x12\x04\xd5\x04')\n\x0c\n\x02\
    \x04E\x12\x06\xd8\x04\0\xdb\x04\x01\n\x0b\n\x03\x04E\x01\x12\x04\xd8\x04\
    \x084\n\x0c\n\x04\x04E\x02\0\x12\x04\xd9\x04\x08%\n\r\n\x05\x04E\x02\0\
    \x04\x12\x04\xd9\x04\x08\x10\n\r\n\x05\x04E\x02\0\x05\x12\x04\xd9\x04\
    \x11\x18\n\r\n\x05\x04E\x02\0\x01\x12\x04\xd9\x04\x19\x20\n\r\n\x05\x04E\
    \x02\0\x03\x12\x04\xd9\x04#$\n\x0c\n\x04\x04E\x02\x01\x12\x04\xda\x04\
    \x08$\n\r\n\x05\x04E\x02\x01\x04\x12\x04\xda\x04\x08\x10\n\r\n\x05\x04E\
    \x02\x01\x05\x12\x04\xda\x04\x11\x17\n\r\n\x05\x04E\x02\x01\x01\x12\x04\
    \xda\x04\x18\x1f\n\r\n\x05\x04E\x02\x01\x03\x12\x04\xda\x04\"#\n\x0c\n\
    \x02\x04F\x12\x06\xdd\x04\0\xe3\x04\x01\n\x0b\n\x03\x04F\x01\x12\x04\xdd\
    \x04\x08+\n\x0c\n\x04\x04F\x02\0\x12\x04\xde\x04\x08\"\n\r\n\x05\x04F\
    \x02\0\x04\x12\x04\xde\x04\x08\x10\n\r\n\x05\x04F\x02\0\x05\x12\x04\xde\
    \x04\x11\x17\n\r\n\x05\x04F\x02\0\x01\x12\x04\xde\x04\x18\x1d\n\r\n\x05\
    \x04F\x02\0\x03\x12\x04\xde\x04\x20!\n\x0c\n\x04\x04F\x02\x01\x12\x04\
    \xdf\x04\x08'\n\r\n\x05\x04F\x02\x01\x04\x12\x04\xdf\x04\x08\x10\n\r\n\
    \x05\x04F\x02\x01\x05\x12\x04\xdf\x04\x11\x17\n\r\n\x05\x04F\x02\x01\x01\
    \x12\x04\xdf\x04\x18\"\n\r\n\x05\x04F\x02\x01\x03\x12\x04\xdf\x04%&\n\
    \x0c\n\x04\x04F\x02\x02\x12\x04\xe0\x04\x08!\n\r\n\x05\x04F\x02\x02\x04\
    \x12\x04\xe0\x04\x08\x10\n\r\n\x05\x04F\x02\x02\x05\x12\x04\xe0\x04\x11\
    \x17\n\r\n\x05\x04F\x02\x02\x01\x12\x04\xe0\x04\x18\x1c\n\r\n\x05\x04F\
    \x02\x02\x03\x12\x04\xe0\x04\x1f\x20\n\x0c\n\x04\x04F\x02\x03\x12\x04\
    \xe1\x04\x08+\n\r\n\x05\x04F\x02\x03\x04\x12\x04\xe1\x04\x08\x10\n\r\n\
    \x05\x04F\x02\x03\x05\x12\x04\xe1\x04\x11\x17\n\r\n\x05\x04F\x02\x03\x01\
    \x12\x04\xe1\x04\x18&\n\r\n\x05\x04F\x02\x03\x03\x12\x04\xe1\x04)*\n\x0c\
    \n\x04\x04F\x02\x04\x12\x04\xe2\x04\x08,\n\r\n\x05\x04F\x02\x04\x04\x12\
    \x04\xe2\x04\x08\x10\n\r\n\x05\x04F\x02\x04\x05\x12\x04\xe2\x04\x11\x17\
    \n\r\n\x05\x04F\x02\x04\x01\x12\x04\xe2\x04\x18'\n\r\n\x05\x04F\x02\x04\
    \x03\x12\x04\xe2\x04*+\n\x0c\n\x02\x04G\x12\x06\xe5\x04\0\xe6\x04\x01\n\
    \x0b\n\x03\x04G\x01\x12\x04\xe5\x04\x08,\n\x0c\n\x02\x04H\x12\x06\xe8\
    \x04\0\xec\x04\x01\n\x0b\n\x03\x04H\x01\x12\x04\xe8\x04\x08,\n\x0c\n\x04\
    \x04H\x02\0\x12\x04\xe9\x04\x08\"\n\r\n\x05\x04H\x02\0\x04\x12\x04\xe9\
    \x04\x08\x10\n\r\n\x05\x04H\x02\0\x05\x12\x04\xe9\x04\x11\x17\n\r\n\x05\
    \x04H\x02\0\x01\x12\x04\xe9\x04\x18\x1d\n\r\n\x05\x04H\x02\0\x03\x12\x04\
    \xe9\x04\x20!\n\x0c\n\x04\x04H\x02\x01\x12\x04\xea\x04\x08'\n\r\n\x05\
    \x04H\x02\x01\x04\x12\x04\xea\x04\x08\x10\n\r\n\x05\x04H\x02\x01\x05\x12\
    \x04\xea\x04\x11\x17\n\r\n\x05\x04H\x02\x01\x01\x12\x04\xea\x04\x18\"\n\
    \r\n\x05\x04H\x02\x01\x03\x12\x04\xea\x04%&\n\x0c\n\x04\x04H\x02\x02\x12\
    \x04\xeb\x04\x08!\n\r\n\x05\x04H\x02\x02\x04\x12\x04\xeb\x04\x08\x10\n\r\
    \n\x05\x04H\x02\x02\x05\x12\x04\xeb\x04\x11\x17\n\r\n\x05\x04H\x02\x02\
    \x01\x12\x04\xeb\x04\x18\x1c\n\r\n\x05\x04H\x02\x02\x03\x12\x04\xeb\x04\
    \x1f\x20\n\x0c\n\x02\x04I\x12\x06\xee\x04\0\xf8\x04\x01\n\x0b\n\x03\x04I\
    \x01\x12\x04\xee\x04\x08-\n\x0e\n\x04\x04I\x03\0\x12\x06\xef\x04\x08\xf5\
    \x04\t\n\r\n\x05\x04I\x03\0\x01\x12\x04\xef\x04\x10\x1e\n\x0e\n\x06\x04I\
    \x03\0\x02\0\x12\x04\xf0\x04\x10*\n\x0f\n\x07\x04I\x03\0\x02\0\x04\x12\
    \x04\xf0\x04\x10\x18\n\x0f\n\x07\x04I\x03\0\x02\0\x05\x12\x04\xf0\x04\
    \x19\x1f\n\x0f\n\x07\x04I\x03\0\x02\0\x01\x12\x04\xf0\x04\x20%\n\x0f\n\
    \x07\x04I\x03\0\x02\0\x03\x12\x04\xf0\x04()\n\x0e\n\x06\x04I\x03\0\x02\
    \x01\x12\x04\xf1\x04\x10/\n\x0f\n\x07\x04I\x03\0\x02\x01\x04\x12\x04\xf1\
    \x04\x10\x18\n\x0f\n\x07\x04I\x03\0\x02\x01\x05\x12\x04\xf1\x04\x19\x1f\
    \n\x0f\n\x07\x04I\x03\0\x02\x01\x01\x12\x04\xf1\x04\x20*\n\x0f\n\x07\x04\
    I\x03\0\x02\x01\x03\x12\x04\xf1\x04-.\n\x0e\n\x06\x04I\x03\0\x02\x02\x12\
    \x04\xf2\x04\x10)\n\x0f\n\x07\x04I\x03\0\x02\x02\x04\x12\x04\xf2\x04\x10\
    \x18\n\x0f\n\x07\x04I\x03\0\x02\x02\x05\x12\x04\xf2\x04\x19\x1f\n\x0f\n\
    \x07\x04I\x03\0\x02\x02\x01\x12\x04\xf2\x04\x20$\n\x0f\n\x07\x04I\x03\0\
    \x02\x02\x03\x12\x04\xf2\x04'(\n\x0e\n\x06\x04I\x03\0\x02\x03\x12\x04\
    \xf3\x04\x107\n\x0f\n\x07\x04I\x03\0\x02\x03\x04\x12\x04\xf3\x04\x10\x18\
    \n\x0f\n\x07\x04I\x03\0\x02\x03\x05\x12\x04\xf3\x04\x19\x1f\n\x0f\n\x07\
    \x04I\x03\0\x02\x03\x01\x12\x04\xf3\x04\x202\n\x0f\n\x07\x04I\x03\0\x02\
    \x03\x03\x12\x04\xf3\x0456\n\x0e\n\x06\x04I\x03\0\x02\x04\x12\x04\xf4\
    \x04\x108\n\x0f\n\x07\x04I\x03\0\x02\x04\x04\x12\x04\xf4\x04\x10\x18\n\
    \x0f\n\x07\x04I\x03\0\x02\x04\x05\x12\x04\xf4\x04\x19\x1f\n\x0f\n\x07\
    \x04I\x03\0\x02\x04\x01\x12\x04\xf4\x04\x203\n\x0f\n\x07\x04I\x03\0\x02\
    \x04\x03\x12\x04\xf4\x0467\n\x0c\n\x04\x04I\x02\0\x12\x04\xf7\x04\x08[\n\
    \r\n\x05\x04I\x02\0\x04\x12\x04\xf7\x04\x08\x10\n\r\n\x05\x04I\x02\0\x06\
    \x12\x04\xf7\x04\x11E\n\r\n\x05\x04I\x02\0\x01\x12\x04\xf7\x04FV\n\r\n\
    \x05\x04I\x02\0\x03\x12\x04\xf7\x04YZ\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(96);
            messages.push(CMsgWebAPIKey::generated_message_descriptor_data());
            messages.push(CMsgHttpRequest::generated_message_descriptor_data());
            messages.push(CMsgWebAPIRequest::generated_message_descriptor_data());
            messages.push(CMsgHttpResponse::generated_message_descriptor_data());
            messages.push(CMsgAMFindAccounts::generated_message_descriptor_data());
            messages.push(CMsgAMFindAccountsResponse::generated_message_descriptor_data());
            messages.push(CMsgNotifyWatchdog::generated_message_descriptor_data());
            messages.push(CMsgAMGetLicenses::generated_message_descriptor_data());
            messages.push(CMsgPackageLicense::generated_message_descriptor_data());
            messages.push(CMsgAMGetLicensesResponse::generated_message_descriptor_data());
            messages.push(CMsgAMGetUserGameStats::generated_message_descriptor_data());
            messages.push(CMsgAMGetUserGameStatsResponse::generated_message_descriptor_data());
            messages.push(CMsgGCGetCommandList::generated_message_descriptor_data());
            messages.push(CMsgGCGetCommandListResponse::generated_message_descriptor_data());
            messages.push(CGCMsgMemCachedGet::generated_message_descriptor_data());
            messages.push(CGCMsgMemCachedGetResponse::generated_message_descriptor_data());
            messages.push(CGCMsgMemCachedSet::generated_message_descriptor_data());
            messages.push(CGCMsgMemCachedDelete::generated_message_descriptor_data());
            messages.push(CGCMsgMemCachedStats::generated_message_descriptor_data());
            messages.push(CGCMsgMemCachedStatsResponse::generated_message_descriptor_data());
            messages.push(CGCMsgSQLStats::generated_message_descriptor_data());
            messages.push(CGCMsgSQLStatsResponse::generated_message_descriptor_data());
            messages.push(CMsgAMAddFreeLicense::generated_message_descriptor_data());
            messages.push(CMsgAMAddFreeLicenseResponse::generated_message_descriptor_data());
            messages.push(CGCMsgGetIPLocation::generated_message_descriptor_data());
            messages.push(CGCMsgGetIPASN::generated_message_descriptor_data());
            messages.push(CIPASNInfo::generated_message_descriptor_data());
            messages.push(CGCMsgGetIPASNResponse::generated_message_descriptor_data());
            messages.push(CGCMsgSystemStatsSchema::generated_message_descriptor_data());
            messages.push(CGCMsgGetSystemStats::generated_message_descriptor_data());
            messages.push(CGCMsgGetSystemStatsResponse::generated_message_descriptor_data());
            messages.push(CMsgAMSendEmail::generated_message_descriptor_data());
            messages.push(CMsgAMSendEmailResponse::generated_message_descriptor_data());
            messages.push(CMsgGCGetEmailTemplate::generated_message_descriptor_data());
            messages.push(CMsgGCGetEmailTemplateResponse::generated_message_descriptor_data());
            messages.push(CMsgAMGrantGuestPasses2::generated_message_descriptor_data());
            messages.push(CMsgAMGrantGuestPasses2Response::generated_message_descriptor_data());
            messages.push(CMsgGCGetPersonaNames::generated_message_descriptor_data());
            messages.push(CMsgGCGetPersonaNames_Response::generated_message_descriptor_data());
            messages.push(CMsgGCCheckFriendship::generated_message_descriptor_data());
            messages.push(CMsgGCCheckFriendship_Response::generated_message_descriptor_data());
            messages.push(CMsgGCGetAppFriendsList::generated_message_descriptor_data());
            messages.push(CMsgGCGetAppFriendsList_Response::generated_message_descriptor_data());
            messages.push(CMsgGCMsgMasterSetDirectory::generated_message_descriptor_data());
            messages.push(CMsgGCMsgMasterSetDirectory_Response::generated_message_descriptor_data());
            messages.push(CMsgGCMsgWebAPIJobRequestForwardResponse::generated_message_descriptor_data());
            messages.push(CGCSystemMsg_GetPurchaseTrust_Request::generated_message_descriptor_data());
            messages.push(CGCSystemMsg_GetPurchaseTrust_Response::generated_message_descriptor_data());
            messages.push(CMsgGCHAccountVacStatusChange::generated_message_descriptor_data());
            messages.push(CMsgGCGetPartnerAccountLink::generated_message_descriptor_data());
            messages.push(CMsgGCGetPartnerAccountLink_Response::generated_message_descriptor_data());
            messages.push(CMsgGCRoutingInfo::generated_message_descriptor_data());
            messages.push(CMsgGCMsgMasterSetWebAPIRouting::generated_message_descriptor_data());
            messages.push(CMsgGCMsgMasterSetClientMsgRouting::generated_message_descriptor_data());
            messages.push(CMsgGCMsgMasterSetWebAPIRouting_Response::generated_message_descriptor_data());
            messages.push(CMsgGCMsgMasterSetClientMsgRouting_Response::generated_message_descriptor_data());
            messages.push(CMsgGCMsgSetOptions::generated_message_descriptor_data());
            messages.push(CMsgGCHUpdateSession::generated_message_descriptor_data());
            messages.push(CMsgNotificationOfSuspiciousActivity::generated_message_descriptor_data());
            messages.push(CMsgDPPartnerMicroTxns::generated_message_descriptor_data());
            messages.push(CMsgDPPartnerMicroTxnsResponse::generated_message_descriptor_data());
            messages.push(CMsgGCHVacVerificationChange::generated_message_descriptor_data());
            messages.push(CMsgGCHAccountTwoFactorChange::generated_message_descriptor_data());
            messages.push(CMsgGCCheckClanMembership::generated_message_descriptor_data());
            messages.push(CMsgGCCheckClanMembership_Response::generated_message_descriptor_data());
            messages.push(CMsgGCHAppCheersReceived::generated_message_descriptor_data());
            messages.push(CMsgGCHAppCheersGetAllowedTypes::generated_message_descriptor_data());
            messages.push(CMsgGCHAppCheersGetAllowedTypesResponse::generated_message_descriptor_data());
            messages.push(CGCSystemMsg_ReportExternalPurchase_Request::generated_message_descriptor_data());
            messages.push(CGCSystemMsg_ReportExternalPurchase_Response::generated_message_descriptor_data());
            messages.push(CWorkshop_AddSpecialPayment_Request::generated_message_descriptor_data());
            messages.push(CWorkshop_AddSpecialPayment_Response::generated_message_descriptor_data());
            messages.push(CWorkshop_GetSpecialPayments_Request::generated_message_descriptor_data());
            messages.push(CWorkshop_GetSpecialPayments_Response::generated_message_descriptor_data());
            messages.push(cmsg_http_request::RequestHeader::generated_message_descriptor_data());
            messages.push(cmsg_http_request::QueryParam::generated_message_descriptor_data());
            messages.push(cmsg_http_response::ResponseHeader::generated_message_descriptor_data());
            messages.push(cmsg_amget_user_game_stats_response::Stats::generated_message_descriptor_data());
            messages.push(cmsg_amget_user_game_stats_response::Achievement_Blocks::generated_message_descriptor_data());
            messages.push(cgcmsg_mem_cached_get_response::ValueTag::generated_message_descriptor_data());
            messages.push(cgcmsg_mem_cached_set::KeyPair::generated_message_descriptor_data());
            messages.push(cmsg_amsend_email::ReplacementToken::generated_message_descriptor_data());
            messages.push(cmsg_amsend_email::PersonaNameReplacementToken::generated_message_descriptor_data());
            messages.push(cmsg_gcget_persona_names_response::PersonaName::generated_message_descriptor_data());
            messages.push(cmsg_gcmsg_master_set_directory::SubGC::generated_message_descriptor_data());
            messages.push(cmsg_gcmsg_master_set_web_apirouting::Entry::generated_message_descriptor_data());
            messages.push(cmsg_gcmsg_master_set_client_msg_routing::Entry::generated_message_descriptor_data());
            messages.push(cmsg_gcmsg_set_options::MessageRange::generated_message_descriptor_data());
            messages.push(cmsg_gchupdate_session::ExtraField::generated_message_descriptor_data());
            messages.push(cmsg_notification_of_suspicious_activity::MultipleGameInstances::generated_message_descriptor_data());
            messages.push(cmsg_dppartner_micro_txns::PartnerMicroTxn::generated_message_descriptor_data());
            messages.push(cmsg_dppartner_micro_txns::PartnerInfo::generated_message_descriptor_data());
            messages.push(cmsg_gchapp_cheers_received::CheerTypeAmount::generated_message_descriptor_data());
            messages.push(cmsg_gchapp_cheers_received::CheerTarget::generated_message_descriptor_data());
            messages.push(cmsg_gchapp_cheers_get_allowed_types_response::CheerRemaps::generated_message_descriptor_data());
            messages.push(cworkshop_get_special_payments_response::SpecialPayment::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(5);
            enums.push(EMobilePaymentProvider::generated_enum_descriptor_data());
            enums.push(cmsg_gcrouting_info::RoutingMethod::generated_enum_descriptor_data());
            enums.push(cmsg_gcmsg_set_options::Option::generated_enum_descriptor_data());
            enums.push(cmsg_gcmsg_set_options::GCSQLVersion::generated_enum_descriptor_data());
            enums.push(cmsg_dppartner_micro_txns_response::EErrorCode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
