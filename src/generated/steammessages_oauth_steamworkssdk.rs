// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_oauth.steamworkssdk.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.COAuthToken_ImplicitGrantNoPrompt_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct COAuthToken_ImplicitGrantNoPrompt_Request {
    // message fields
    // @@protoc_insertion_point(field:dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
    pub clientid: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.COAuthToken_ImplicitGrantNoPrompt_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a COAuthToken_ImplicitGrantNoPrompt_Request {
    fn default() -> &'a COAuthToken_ImplicitGrantNoPrompt_Request {
        <COAuthToken_ImplicitGrantNoPrompt_Request as ::protobuf::Message>::default_instance()
    }
}

impl COAuthToken_ImplicitGrantNoPrompt_Request {
    pub fn new() -> COAuthToken_ImplicitGrantNoPrompt_Request {
        ::std::default::Default::default()
    }

    // optional string clientid = 1;

    pub fn clientid(&self) -> &str {
        match self.clientid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_clientid(&mut self) {
        self.clientid = ::std::option::Option::None;
    }

    pub fn has_clientid(&self) -> bool {
        self.clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientid(&mut self, v: ::std::string::String) {
        self.clientid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientid(&mut self) -> &mut ::std::string::String {
        if self.clientid.is_none() {
            self.clientid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.clientid.as_mut().unwrap()
    }

    // Take field
    pub fn take_clientid(&mut self) -> ::std::string::String {
        self.clientid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "clientid",
            |m: &COAuthToken_ImplicitGrantNoPrompt_Request| { &m.clientid },
            |m: &mut COAuthToken_ImplicitGrantNoPrompt_Request| { &mut m.clientid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<COAuthToken_ImplicitGrantNoPrompt_Request>(
            "COAuthToken_ImplicitGrantNoPrompt_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for COAuthToken_ImplicitGrantNoPrompt_Request {
    const NAME: &'static str = "COAuthToken_ImplicitGrantNoPrompt_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.clientid = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.clientid.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.clientid.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> COAuthToken_ImplicitGrantNoPrompt_Request {
        COAuthToken_ImplicitGrantNoPrompt_Request::new()
    }

    fn clear(&mut self) {
        self.clientid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static COAuthToken_ImplicitGrantNoPrompt_Request {
        static instance: COAuthToken_ImplicitGrantNoPrompt_Request = COAuthToken_ImplicitGrantNoPrompt_Request {
            clientid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for COAuthToken_ImplicitGrantNoPrompt_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("COAuthToken_ImplicitGrantNoPrompt_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for COAuthToken_ImplicitGrantNoPrompt_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COAuthToken_ImplicitGrantNoPrompt_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.COAuthToken_ImplicitGrantNoPrompt_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct COAuthToken_ImplicitGrantNoPrompt_Response {
    // message fields
    // @@protoc_insertion_point(field:dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
    pub access_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
    pub redirect_uri: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.COAuthToken_ImplicitGrantNoPrompt_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a COAuthToken_ImplicitGrantNoPrompt_Response {
    fn default() -> &'a COAuthToken_ImplicitGrantNoPrompt_Response {
        <COAuthToken_ImplicitGrantNoPrompt_Response as ::protobuf::Message>::default_instance()
    }
}

impl COAuthToken_ImplicitGrantNoPrompt_Response {
    pub fn new() -> COAuthToken_ImplicitGrantNoPrompt_Response {
        ::std::default::Default::default()
    }

    // optional string access_token = 1;

    pub fn access_token(&self) -> &str {
        match self.access_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_access_token(&mut self) {
        self.access_token = ::std::option::Option::None;
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        if self.access_token.is_none() {
            self.access_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.access_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string redirect_uri = 2;

    pub fn redirect_uri(&self) -> &str {
        match self.redirect_uri.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_redirect_uri(&mut self) {
        self.redirect_uri = ::std::option::Option::None;
    }

    pub fn has_redirect_uri(&self) -> bool {
        self.redirect_uri.is_some()
    }

    // Param is passed by value, moved
    pub fn set_redirect_uri(&mut self, v: ::std::string::String) {
        self.redirect_uri = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redirect_uri(&mut self) -> &mut ::std::string::String {
        if self.redirect_uri.is_none() {
            self.redirect_uri = ::std::option::Option::Some(::std::string::String::new());
        }
        self.redirect_uri.as_mut().unwrap()
    }

    // Take field
    pub fn take_redirect_uri(&mut self) -> ::std::string::String {
        self.redirect_uri.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "access_token",
            |m: &COAuthToken_ImplicitGrantNoPrompt_Response| { &m.access_token },
            |m: &mut COAuthToken_ImplicitGrantNoPrompt_Response| { &mut m.access_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "redirect_uri",
            |m: &COAuthToken_ImplicitGrantNoPrompt_Response| { &m.redirect_uri },
            |m: &mut COAuthToken_ImplicitGrantNoPrompt_Response| { &mut m.redirect_uri },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<COAuthToken_ImplicitGrantNoPrompt_Response>(
            "COAuthToken_ImplicitGrantNoPrompt_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for COAuthToken_ImplicitGrantNoPrompt_Response {
    const NAME: &'static str = "COAuthToken_ImplicitGrantNoPrompt_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.access_token = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.redirect_uri = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.access_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.redirect_uri.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.access_token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.redirect_uri.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> COAuthToken_ImplicitGrantNoPrompt_Response {
        COAuthToken_ImplicitGrantNoPrompt_Response::new()
    }

    fn clear(&mut self) {
        self.access_token = ::std::option::Option::None;
        self.redirect_uri = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static COAuthToken_ImplicitGrantNoPrompt_Response {
        static instance: COAuthToken_ImplicitGrantNoPrompt_Response = COAuthToken_ImplicitGrantNoPrompt_Response {
            access_token: ::std::option::Option::None,
            redirect_uri: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for COAuthToken_ImplicitGrantNoPrompt_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("COAuthToken_ImplicitGrantNoPrompt_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for COAuthToken_ImplicitGrantNoPrompt_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COAuthToken_ImplicitGrantNoPrompt_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'steammessages_oauth.steamworkssdk.proto\x12\x04dota\x1a.steammessages\
    _unified_base.steamworkssdk.proto\"G\n)COAuthToken_ImplicitGrantNoPrompt\
    _Request\x12\x1a\n\x08clientid\x18\x01\x20\x01(\tR\x08clientid\"r\n*COAu\
    thToken_ImplicitGrantNoPrompt_Response\x12!\n\x0caccess_token\x18\x01\
    \x20\x01(\tR\x0baccessToken\x12!\n\x0credirect_uri\x18\x02\x20\x01(\tR\
    \x0bredirectUri2\xbb\x02\n\nOAuthToken\x12\xf5\x01\n\x15ImplicitGrantNoP\
    rompt\x12/.dota.COAuthToken_ImplicitGrantNoPrompt_Request\x1a0.dota.COAu\
    thToken_ImplicitGrantNoPrompt_Response\"y\x82\xb5\x18uGrants\x20an\x20im\
    plicit\x20OAuth\x20token\x20(grant\x20type\x20'token')\x20for\x20the\x20\
    specified\x20client\x20ID\x20on\x20behalf\x20of\x20a\x20user\x20without\
    \x20prompting\x1a5\x82\xb5\x181Service\x20containing\x20methods\x20to\
    \x20manage\x20OAuth\x20tokensB%Z#github.com/dotabuff/manta/dota;dotaJ\
    \xc7\x03\n\x06\x12\x04\0\0\x16\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x03\0:\n\t\n\x02\
    \x08\x0b\x12\x03\x03\0:\n\t\n\x02\x03\0\x12\x03\x05\x077\n\n\n\x02\x04\0\
    \x12\x04\x07\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x081\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x08\x08%\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x08\
    \x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x11\x17\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x08\x18\x20\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\
    #$\n\n\n\x02\x04\x01\x12\x04\x0b\0\x0e\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \x0b\x082\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0c\x08)\n\x0c\n\x05\x04\x01\
    \x02\0\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0c\
    \x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0c\x18$\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03\x0c'(\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\r\x08)\
    \n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\r\x08\x10\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\r\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\r\
    \x18$\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\r'(\n\n\n\x02\x06\0\x12\
    \x04\x10\0\x16\x01\n\n\n\x03\x06\0\x01\x12\x03\x10\x08\x12\n\n\n\x03\x06\
    \0\x03\x12\x03\x11\x08[\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\x03\x11\x08[\
    \n\x0c\n\x04\x06\0\x02\0\x12\x04\x13\0\x15\t\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x03\x13\x04\x19\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x13\x1bD\n\x0c\
    \n\x05\x06\0\x02\0\x03\x12\x03\x13Oy\n\r\n\x05\x06\0\x02\0\x04\x12\x04\
    \x14\x10\xa6\x01\n\x10\n\x08\x06\0\x02\0\x04\xd0\x86\x03\x12\x04\x14\x10\
    \xa6\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamworkssdk::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(COAuthToken_ImplicitGrantNoPrompt_Request::generated_message_descriptor_data());
            messages.push(COAuthToken_ImplicitGrantNoPrompt_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
