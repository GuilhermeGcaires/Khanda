// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_modifiers.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CDOTAModifierBuffTableEntry)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAModifierBuffTableEntry {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.entry_type)
    pub entry_type: ::std::option::Option<::protobuf::EnumOrUnknown<DOTA_MODIFIER_ENTRY_TYPE>>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.parent)
    pub parent: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.index)
    pub index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.serial_num)
    pub serial_num: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.modifier_class)
    pub modifier_class: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.ability_level)
    pub ability_level: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.stack_count)
    pub stack_count: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.creation_time)
    pub creation_time: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.duration)
    pub duration: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.caster)
    pub caster: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.ability)
    pub ability: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.armor)
    pub armor: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.fade_time)
    pub fade_time: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.subtle)
    pub subtle: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.channel_time)
    pub channel_time: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.v_start)
    pub v_start: ::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.v_end)
    pub v_end: ::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.portal_loop_appear)
    pub portal_loop_appear: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.portal_loop_disappear)
    pub portal_loop_disappear: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.hero_loop_appear)
    pub hero_loop_appear: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.hero_loop_disappear)
    pub hero_loop_disappear: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.movement_speed)
    pub movement_speed: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.aura)
    pub aura: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.activity)
    pub activity: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.damage)
    pub damage: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.range)
    pub range: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.dd_modifier_index)
    pub dd_modifier_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.dd_ability_id)
    pub dd_ability_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.illusion_label)
    pub illusion_label: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.active)
    pub active: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.player_ids)
    pub player_ids: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.lua_name)
    pub lua_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.attack_speed)
    pub attack_speed: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.aura_owner)
    pub aura_owner: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.bonus_all_stats)
    pub bonus_all_stats: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.bonus_health)
    pub bonus_health: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.bonus_mana)
    pub bonus_mana: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAModifierBuffTableEntry.custom_entity)
    pub custom_entity: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTAModifierBuffTableEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAModifierBuffTableEntry {
    fn default() -> &'a CDOTAModifierBuffTableEntry {
        <CDOTAModifierBuffTableEntry as ::protobuf::Message>::default_instance()
    }
}

impl CDOTAModifierBuffTableEntry {
    pub fn new() -> CDOTAModifierBuffTableEntry {
        ::std::default::Default::default()
    }

    // required .dota.DOTA_MODIFIER_ENTRY_TYPE entry_type = 1;

    pub fn entry_type(&self) -> DOTA_MODIFIER_ENTRY_TYPE {
        match self.entry_type {
            Some(e) => e.enum_value_or(DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_ACTIVE),
            None => DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_ACTIVE,
        }
    }

    pub fn clear_entry_type(&mut self) {
        self.entry_type = ::std::option::Option::None;
    }

    pub fn has_entry_type(&self) -> bool {
        self.entry_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entry_type(&mut self, v: DOTA_MODIFIER_ENTRY_TYPE) {
        self.entry_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // required uint32 parent = 2;

    pub fn parent(&self) -> u32 {
        self.parent.unwrap_or(0)
    }

    pub fn clear_parent(&mut self) {
        self.parent = ::std::option::Option::None;
    }

    pub fn has_parent(&self) -> bool {
        self.parent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: u32) {
        self.parent = ::std::option::Option::Some(v);
    }

    // required int32 index = 3;

    pub fn index(&self) -> i32 {
        self.index.unwrap_or(0)
    }

    pub fn clear_index(&mut self) {
        self.index = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        self.index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i32) {
        self.index = ::std::option::Option::Some(v);
    }

    // required int32 serial_num = 4;

    pub fn serial_num(&self) -> i32 {
        self.serial_num.unwrap_or(0)
    }

    pub fn clear_serial_num(&mut self) {
        self.serial_num = ::std::option::Option::None;
    }

    pub fn has_serial_num(&self) -> bool {
        self.serial_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_num(&mut self, v: i32) {
        self.serial_num = ::std::option::Option::Some(v);
    }

    // optional int32 modifier_class = 5;

    pub fn modifier_class(&self) -> i32 {
        self.modifier_class.unwrap_or(0)
    }

    pub fn clear_modifier_class(&mut self) {
        self.modifier_class = ::std::option::Option::None;
    }

    pub fn has_modifier_class(&self) -> bool {
        self.modifier_class.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modifier_class(&mut self, v: i32) {
        self.modifier_class = ::std::option::Option::Some(v);
    }

    // optional int32 ability_level = 6;

    pub fn ability_level(&self) -> i32 {
        self.ability_level.unwrap_or(0)
    }

    pub fn clear_ability_level(&mut self) {
        self.ability_level = ::std::option::Option::None;
    }

    pub fn has_ability_level(&self) -> bool {
        self.ability_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ability_level(&mut self, v: i32) {
        self.ability_level = ::std::option::Option::Some(v);
    }

    // optional int32 stack_count = 7;

    pub fn stack_count(&self) -> i32 {
        self.stack_count.unwrap_or(0)
    }

    pub fn clear_stack_count(&mut self) {
        self.stack_count = ::std::option::Option::None;
    }

    pub fn has_stack_count(&self) -> bool {
        self.stack_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stack_count(&mut self, v: i32) {
        self.stack_count = ::std::option::Option::Some(v);
    }

    // optional float creation_time = 8;

    pub fn creation_time(&self) -> f32 {
        self.creation_time.unwrap_or(0.)
    }

    pub fn clear_creation_time(&mut self) {
        self.creation_time = ::std::option::Option::None;
    }

    pub fn has_creation_time(&self) -> bool {
        self.creation_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_creation_time(&mut self, v: f32) {
        self.creation_time = ::std::option::Option::Some(v);
    }

    // optional float duration = 9;

    pub fn duration(&self) -> f32 {
        self.duration.unwrap_or(0.)
    }

    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: f32) {
        self.duration = ::std::option::Option::Some(v);
    }

    // optional uint32 caster = 10;

    pub fn caster(&self) -> u32 {
        self.caster.unwrap_or(0)
    }

    pub fn clear_caster(&mut self) {
        self.caster = ::std::option::Option::None;
    }

    pub fn has_caster(&self) -> bool {
        self.caster.is_some()
    }

    // Param is passed by value, moved
    pub fn set_caster(&mut self, v: u32) {
        self.caster = ::std::option::Option::Some(v);
    }

    // optional uint32 ability = 11;

    pub fn ability(&self) -> u32 {
        self.ability.unwrap_or(0)
    }

    pub fn clear_ability(&mut self) {
        self.ability = ::std::option::Option::None;
    }

    pub fn has_ability(&self) -> bool {
        self.ability.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ability(&mut self, v: u32) {
        self.ability = ::std::option::Option::Some(v);
    }

    // optional int32 armor = 12;

    pub fn armor(&self) -> i32 {
        self.armor.unwrap_or(0)
    }

    pub fn clear_armor(&mut self) {
        self.armor = ::std::option::Option::None;
    }

    pub fn has_armor(&self) -> bool {
        self.armor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_armor(&mut self, v: i32) {
        self.armor = ::std::option::Option::Some(v);
    }

    // optional float fade_time = 13;

    pub fn fade_time(&self) -> f32 {
        self.fade_time.unwrap_or(0.)
    }

    pub fn clear_fade_time(&mut self) {
        self.fade_time = ::std::option::Option::None;
    }

    pub fn has_fade_time(&self) -> bool {
        self.fade_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fade_time(&mut self, v: f32) {
        self.fade_time = ::std::option::Option::Some(v);
    }

    // optional bool subtle = 14;

    pub fn subtle(&self) -> bool {
        self.subtle.unwrap_or(false)
    }

    pub fn clear_subtle(&mut self) {
        self.subtle = ::std::option::Option::None;
    }

    pub fn has_subtle(&self) -> bool {
        self.subtle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subtle(&mut self, v: bool) {
        self.subtle = ::std::option::Option::Some(v);
    }

    // optional float channel_time = 15;

    pub fn channel_time(&self) -> f32 {
        self.channel_time.unwrap_or(0.)
    }

    pub fn clear_channel_time(&mut self) {
        self.channel_time = ::std::option::Option::None;
    }

    pub fn has_channel_time(&self) -> bool {
        self.channel_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_time(&mut self, v: f32) {
        self.channel_time = ::std::option::Option::Some(v);
    }

    // optional string portal_loop_appear = 18;

    pub fn portal_loop_appear(&self) -> &str {
        match self.portal_loop_appear.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_portal_loop_appear(&mut self) {
        self.portal_loop_appear = ::std::option::Option::None;
    }

    pub fn has_portal_loop_appear(&self) -> bool {
        self.portal_loop_appear.is_some()
    }

    // Param is passed by value, moved
    pub fn set_portal_loop_appear(&mut self, v: ::std::string::String) {
        self.portal_loop_appear = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portal_loop_appear(&mut self) -> &mut ::std::string::String {
        if self.portal_loop_appear.is_none() {
            self.portal_loop_appear = ::std::option::Option::Some(::std::string::String::new());
        }
        self.portal_loop_appear.as_mut().unwrap()
    }

    // Take field
    pub fn take_portal_loop_appear(&mut self) -> ::std::string::String {
        self.portal_loop_appear.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string portal_loop_disappear = 19;

    pub fn portal_loop_disappear(&self) -> &str {
        match self.portal_loop_disappear.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_portal_loop_disappear(&mut self) {
        self.portal_loop_disappear = ::std::option::Option::None;
    }

    pub fn has_portal_loop_disappear(&self) -> bool {
        self.portal_loop_disappear.is_some()
    }

    // Param is passed by value, moved
    pub fn set_portal_loop_disappear(&mut self, v: ::std::string::String) {
        self.portal_loop_disappear = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portal_loop_disappear(&mut self) -> &mut ::std::string::String {
        if self.portal_loop_disappear.is_none() {
            self.portal_loop_disappear = ::std::option::Option::Some(::std::string::String::new());
        }
        self.portal_loop_disappear.as_mut().unwrap()
    }

    // Take field
    pub fn take_portal_loop_disappear(&mut self) -> ::std::string::String {
        self.portal_loop_disappear.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string hero_loop_appear = 20;

    pub fn hero_loop_appear(&self) -> &str {
        match self.hero_loop_appear.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hero_loop_appear(&mut self) {
        self.hero_loop_appear = ::std::option::Option::None;
    }

    pub fn has_hero_loop_appear(&self) -> bool {
        self.hero_loop_appear.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hero_loop_appear(&mut self, v: ::std::string::String) {
        self.hero_loop_appear = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hero_loop_appear(&mut self) -> &mut ::std::string::String {
        if self.hero_loop_appear.is_none() {
            self.hero_loop_appear = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hero_loop_appear.as_mut().unwrap()
    }

    // Take field
    pub fn take_hero_loop_appear(&mut self) -> ::std::string::String {
        self.hero_loop_appear.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string hero_loop_disappear = 21;

    pub fn hero_loop_disappear(&self) -> &str {
        match self.hero_loop_disappear.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hero_loop_disappear(&mut self) {
        self.hero_loop_disappear = ::std::option::Option::None;
    }

    pub fn has_hero_loop_disappear(&self) -> bool {
        self.hero_loop_disappear.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hero_loop_disappear(&mut self, v: ::std::string::String) {
        self.hero_loop_disappear = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hero_loop_disappear(&mut self) -> &mut ::std::string::String {
        if self.hero_loop_disappear.is_none() {
            self.hero_loop_disappear = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hero_loop_disappear.as_mut().unwrap()
    }

    // Take field
    pub fn take_hero_loop_disappear(&mut self) -> ::std::string::String {
        self.hero_loop_disappear.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 movement_speed = 22;

    pub fn movement_speed(&self) -> i32 {
        self.movement_speed.unwrap_or(0)
    }

    pub fn clear_movement_speed(&mut self) {
        self.movement_speed = ::std::option::Option::None;
    }

    pub fn has_movement_speed(&self) -> bool {
        self.movement_speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_movement_speed(&mut self, v: i32) {
        self.movement_speed = ::std::option::Option::Some(v);
    }

    // optional bool aura = 23;

    pub fn aura(&self) -> bool {
        self.aura.unwrap_or(false)
    }

    pub fn clear_aura(&mut self) {
        self.aura = ::std::option::Option::None;
    }

    pub fn has_aura(&self) -> bool {
        self.aura.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aura(&mut self, v: bool) {
        self.aura = ::std::option::Option::Some(v);
    }

    // optional int32 activity = 24;

    pub fn activity(&self) -> i32 {
        self.activity.unwrap_or(0)
    }

    pub fn clear_activity(&mut self) {
        self.activity = ::std::option::Option::None;
    }

    pub fn has_activity(&self) -> bool {
        self.activity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_activity(&mut self, v: i32) {
        self.activity = ::std::option::Option::Some(v);
    }

    // optional int32 damage = 25;

    pub fn damage(&self) -> i32 {
        self.damage.unwrap_or(0)
    }

    pub fn clear_damage(&mut self) {
        self.damage = ::std::option::Option::None;
    }

    pub fn has_damage(&self) -> bool {
        self.damage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_damage(&mut self, v: i32) {
        self.damage = ::std::option::Option::Some(v);
    }

    // optional int32 range = 26;

    pub fn range(&self) -> i32 {
        self.range.unwrap_or(0)
    }

    pub fn clear_range(&mut self) {
        self.range = ::std::option::Option::None;
    }

    pub fn has_range(&self) -> bool {
        self.range.is_some()
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: i32) {
        self.range = ::std::option::Option::Some(v);
    }

    // optional int32 dd_modifier_index = 27;

    pub fn dd_modifier_index(&self) -> i32 {
        self.dd_modifier_index.unwrap_or(0)
    }

    pub fn clear_dd_modifier_index(&mut self) {
        self.dd_modifier_index = ::std::option::Option::None;
    }

    pub fn has_dd_modifier_index(&self) -> bool {
        self.dd_modifier_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dd_modifier_index(&mut self, v: i32) {
        self.dd_modifier_index = ::std::option::Option::Some(v);
    }

    // optional int32 dd_ability_id = 28;

    pub fn dd_ability_id(&self) -> i32 {
        self.dd_ability_id.unwrap_or(0)
    }

    pub fn clear_dd_ability_id(&mut self) {
        self.dd_ability_id = ::std::option::Option::None;
    }

    pub fn has_dd_ability_id(&self) -> bool {
        self.dd_ability_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dd_ability_id(&mut self, v: i32) {
        self.dd_ability_id = ::std::option::Option::Some(v);
    }

    // optional string illusion_label = 29;

    pub fn illusion_label(&self) -> &str {
        match self.illusion_label.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_illusion_label(&mut self) {
        self.illusion_label = ::std::option::Option::None;
    }

    pub fn has_illusion_label(&self) -> bool {
        self.illusion_label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_illusion_label(&mut self, v: ::std::string::String) {
        self.illusion_label = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_illusion_label(&mut self) -> &mut ::std::string::String {
        if self.illusion_label.is_none() {
            self.illusion_label = ::std::option::Option::Some(::std::string::String::new());
        }
        self.illusion_label.as_mut().unwrap()
    }

    // Take field
    pub fn take_illusion_label(&mut self) -> ::std::string::String {
        self.illusion_label.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool active = 30;

    pub fn active(&self) -> bool {
        self.active.unwrap_or(false)
    }

    pub fn clear_active(&mut self) {
        self.active = ::std::option::Option::None;
    }

    pub fn has_active(&self) -> bool {
        self.active.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active(&mut self, v: bool) {
        self.active = ::std::option::Option::Some(v);
    }

    // optional string player_ids = 31;

    pub fn player_ids(&self) -> &str {
        match self.player_ids.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_player_ids(&mut self) {
        self.player_ids = ::std::option::Option::None;
    }

    pub fn has_player_ids(&self) -> bool {
        self.player_ids.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_ids(&mut self, v: ::std::string::String) {
        self.player_ids = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player_ids(&mut self) -> &mut ::std::string::String {
        if self.player_ids.is_none() {
            self.player_ids = ::std::option::Option::Some(::std::string::String::new());
        }
        self.player_ids.as_mut().unwrap()
    }

    // Take field
    pub fn take_player_ids(&mut self) -> ::std::string::String {
        self.player_ids.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string lua_name = 32;

    pub fn lua_name(&self) -> &str {
        match self.lua_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_lua_name(&mut self) {
        self.lua_name = ::std::option::Option::None;
    }

    pub fn has_lua_name(&self) -> bool {
        self.lua_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lua_name(&mut self, v: ::std::string::String) {
        self.lua_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lua_name(&mut self) -> &mut ::std::string::String {
        if self.lua_name.is_none() {
            self.lua_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.lua_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_lua_name(&mut self) -> ::std::string::String {
        self.lua_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 attack_speed = 33;

    pub fn attack_speed(&self) -> i32 {
        self.attack_speed.unwrap_or(0)
    }

    pub fn clear_attack_speed(&mut self) {
        self.attack_speed = ::std::option::Option::None;
    }

    pub fn has_attack_speed(&self) -> bool {
        self.attack_speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attack_speed(&mut self, v: i32) {
        self.attack_speed = ::std::option::Option::Some(v);
    }

    // optional uint32 aura_owner = 34;

    pub fn aura_owner(&self) -> u32 {
        self.aura_owner.unwrap_or(0)
    }

    pub fn clear_aura_owner(&mut self) {
        self.aura_owner = ::std::option::Option::None;
    }

    pub fn has_aura_owner(&self) -> bool {
        self.aura_owner.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aura_owner(&mut self, v: u32) {
        self.aura_owner = ::std::option::Option::Some(v);
    }

    // optional int32 bonus_all_stats = 35;

    pub fn bonus_all_stats(&self) -> i32 {
        self.bonus_all_stats.unwrap_or(0)
    }

    pub fn clear_bonus_all_stats(&mut self) {
        self.bonus_all_stats = ::std::option::Option::None;
    }

    pub fn has_bonus_all_stats(&self) -> bool {
        self.bonus_all_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bonus_all_stats(&mut self, v: i32) {
        self.bonus_all_stats = ::std::option::Option::Some(v);
    }

    // optional int32 bonus_health = 36;

    pub fn bonus_health(&self) -> i32 {
        self.bonus_health.unwrap_or(0)
    }

    pub fn clear_bonus_health(&mut self) {
        self.bonus_health = ::std::option::Option::None;
    }

    pub fn has_bonus_health(&self) -> bool {
        self.bonus_health.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bonus_health(&mut self, v: i32) {
        self.bonus_health = ::std::option::Option::Some(v);
    }

    // optional int32 bonus_mana = 37;

    pub fn bonus_mana(&self) -> i32 {
        self.bonus_mana.unwrap_or(0)
    }

    pub fn clear_bonus_mana(&mut self) {
        self.bonus_mana = ::std::option::Option::None;
    }

    pub fn has_bonus_mana(&self) -> bool {
        self.bonus_mana.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bonus_mana(&mut self, v: i32) {
        self.bonus_mana = ::std::option::Option::Some(v);
    }

    // optional uint32 custom_entity = 38;

    pub fn custom_entity(&self) -> u32 {
        self.custom_entity.unwrap_or(0)
    }

    pub fn clear_custom_entity(&mut self) {
        self.custom_entity = ::std::option::Option::None;
    }

    pub fn has_custom_entity(&self) -> bool {
        self.custom_entity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_entity(&mut self, v: u32) {
        self.custom_entity = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(38);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "entry_type",
            |m: &CDOTAModifierBuffTableEntry| { &m.entry_type },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.entry_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "parent",
            |m: &CDOTAModifierBuffTableEntry| { &m.parent },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "index",
            |m: &CDOTAModifierBuffTableEntry| { &m.index },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_num",
            |m: &CDOTAModifierBuffTableEntry| { &m.serial_num },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.serial_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "modifier_class",
            |m: &CDOTAModifierBuffTableEntry| { &m.modifier_class },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.modifier_class },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ability_level",
            |m: &CDOTAModifierBuffTableEntry| { &m.ability_level },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.ability_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "stack_count",
            |m: &CDOTAModifierBuffTableEntry| { &m.stack_count },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.stack_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "creation_time",
            |m: &CDOTAModifierBuffTableEntry| { &m.creation_time },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.creation_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "duration",
            |m: &CDOTAModifierBuffTableEntry| { &m.duration },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "caster",
            |m: &CDOTAModifierBuffTableEntry| { &m.caster },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.caster },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ability",
            |m: &CDOTAModifierBuffTableEntry| { &m.ability },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.ability },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "armor",
            |m: &CDOTAModifierBuffTableEntry| { &m.armor },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.armor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fade_time",
            |m: &CDOTAModifierBuffTableEntry| { &m.fade_time },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.fade_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "subtle",
            |m: &CDOTAModifierBuffTableEntry| { &m.subtle },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.subtle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_time",
            |m: &CDOTAModifierBuffTableEntry| { &m.channel_time },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.channel_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::networkbasetypes::CMsgVector>(
            "v_start",
            |m: &CDOTAModifierBuffTableEntry| { &m.v_start },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.v_start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::networkbasetypes::CMsgVector>(
            "v_end",
            |m: &CDOTAModifierBuffTableEntry| { &m.v_end },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.v_end },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "portal_loop_appear",
            |m: &CDOTAModifierBuffTableEntry| { &m.portal_loop_appear },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.portal_loop_appear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "portal_loop_disappear",
            |m: &CDOTAModifierBuffTableEntry| { &m.portal_loop_disappear },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.portal_loop_disappear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hero_loop_appear",
            |m: &CDOTAModifierBuffTableEntry| { &m.hero_loop_appear },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.hero_loop_appear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hero_loop_disappear",
            |m: &CDOTAModifierBuffTableEntry| { &m.hero_loop_disappear },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.hero_loop_disappear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "movement_speed",
            |m: &CDOTAModifierBuffTableEntry| { &m.movement_speed },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.movement_speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "aura",
            |m: &CDOTAModifierBuffTableEntry| { &m.aura },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.aura },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "activity",
            |m: &CDOTAModifierBuffTableEntry| { &m.activity },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.activity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "damage",
            |m: &CDOTAModifierBuffTableEntry| { &m.damage },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "range",
            |m: &CDOTAModifierBuffTableEntry| { &m.range },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.range },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dd_modifier_index",
            |m: &CDOTAModifierBuffTableEntry| { &m.dd_modifier_index },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.dd_modifier_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dd_ability_id",
            |m: &CDOTAModifierBuffTableEntry| { &m.dd_ability_id },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.dd_ability_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "illusion_label",
            |m: &CDOTAModifierBuffTableEntry| { &m.illusion_label },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.illusion_label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "active",
            |m: &CDOTAModifierBuffTableEntry| { &m.active },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_ids",
            |m: &CDOTAModifierBuffTableEntry| { &m.player_ids },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.player_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lua_name",
            |m: &CDOTAModifierBuffTableEntry| { &m.lua_name },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.lua_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attack_speed",
            |m: &CDOTAModifierBuffTableEntry| { &m.attack_speed },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.attack_speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "aura_owner",
            |m: &CDOTAModifierBuffTableEntry| { &m.aura_owner },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.aura_owner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bonus_all_stats",
            |m: &CDOTAModifierBuffTableEntry| { &m.bonus_all_stats },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.bonus_all_stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bonus_health",
            |m: &CDOTAModifierBuffTableEntry| { &m.bonus_health },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.bonus_health },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bonus_mana",
            |m: &CDOTAModifierBuffTableEntry| { &m.bonus_mana },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.bonus_mana },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "custom_entity",
            |m: &CDOTAModifierBuffTableEntry| { &m.custom_entity },
            |m: &mut CDOTAModifierBuffTableEntry| { &mut m.custom_entity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTAModifierBuffTableEntry>(
            "CDOTAModifierBuffTableEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTAModifierBuffTableEntry {
    const NAME: &'static str = "CDOTAModifierBuffTableEntry";

    fn is_initialized(&self) -> bool {
        if self.entry_type.is_none() {
            return false;
        }
        if self.parent.is_none() {
            return false;
        }
        if self.index.is_none() {
            return false;
        }
        if self.serial_num.is_none() {
            return false;
        }
        for v in &self.v_start {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.v_end {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.entry_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.parent = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.index = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.serial_num = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.modifier_class = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.ability_level = ::std::option::Option::Some(is.read_int32()?);
                },
                56 => {
                    self.stack_count = ::std::option::Option::Some(is.read_int32()?);
                },
                69 => {
                    self.creation_time = ::std::option::Option::Some(is.read_float()?);
                },
                77 => {
                    self.duration = ::std::option::Option::Some(is.read_float()?);
                },
                80 => {
                    self.caster = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.ability = ::std::option::Option::Some(is.read_uint32()?);
                },
                96 => {
                    self.armor = ::std::option::Option::Some(is.read_int32()?);
                },
                109 => {
                    self.fade_time = ::std::option::Option::Some(is.read_float()?);
                },
                112 => {
                    self.subtle = ::std::option::Option::Some(is.read_bool()?);
                },
                125 => {
                    self.channel_time = ::std::option::Option::Some(is.read_float()?);
                },
                130 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.v_start)?;
                },
                138 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.v_end)?;
                },
                146 => {
                    self.portal_loop_appear = ::std::option::Option::Some(is.read_string()?);
                },
                154 => {
                    self.portal_loop_disappear = ::std::option::Option::Some(is.read_string()?);
                },
                162 => {
                    self.hero_loop_appear = ::std::option::Option::Some(is.read_string()?);
                },
                170 => {
                    self.hero_loop_disappear = ::std::option::Option::Some(is.read_string()?);
                },
                176 => {
                    self.movement_speed = ::std::option::Option::Some(is.read_int32()?);
                },
                184 => {
                    self.aura = ::std::option::Option::Some(is.read_bool()?);
                },
                192 => {
                    self.activity = ::std::option::Option::Some(is.read_int32()?);
                },
                200 => {
                    self.damage = ::std::option::Option::Some(is.read_int32()?);
                },
                208 => {
                    self.range = ::std::option::Option::Some(is.read_int32()?);
                },
                216 => {
                    self.dd_modifier_index = ::std::option::Option::Some(is.read_int32()?);
                },
                224 => {
                    self.dd_ability_id = ::std::option::Option::Some(is.read_int32()?);
                },
                234 => {
                    self.illusion_label = ::std::option::Option::Some(is.read_string()?);
                },
                240 => {
                    self.active = ::std::option::Option::Some(is.read_bool()?);
                },
                250 => {
                    self.player_ids = ::std::option::Option::Some(is.read_string()?);
                },
                258 => {
                    self.lua_name = ::std::option::Option::Some(is.read_string()?);
                },
                264 => {
                    self.attack_speed = ::std::option::Option::Some(is.read_int32()?);
                },
                272 => {
                    self.aura_owner = ::std::option::Option::Some(is.read_uint32()?);
                },
                280 => {
                    self.bonus_all_stats = ::std::option::Option::Some(is.read_int32()?);
                },
                288 => {
                    self.bonus_health = ::std::option::Option::Some(is.read_int32()?);
                },
                296 => {
                    self.bonus_mana = ::std::option::Option::Some(is.read_int32()?);
                },
                304 => {
                    self.custom_entity = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.entry_type {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.parent {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.index {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.serial_num {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.modifier_class {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.ability_level {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        if let Some(v) = self.stack_count {
            my_size += ::protobuf::rt::int32_size(7, v);
        }
        if let Some(v) = self.creation_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.duration {
            my_size += 1 + 4;
        }
        if let Some(v) = self.caster {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.ability {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.armor {
            my_size += ::protobuf::rt::int32_size(12, v);
        }
        if let Some(v) = self.fade_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.subtle {
            my_size += 1 + 1;
        }
        if let Some(v) = self.channel_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.v_start.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.v_end.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.portal_loop_appear.as_ref() {
            my_size += ::protobuf::rt::string_size(18, &v);
        }
        if let Some(v) = self.portal_loop_disappear.as_ref() {
            my_size += ::protobuf::rt::string_size(19, &v);
        }
        if let Some(v) = self.hero_loop_appear.as_ref() {
            my_size += ::protobuf::rt::string_size(20, &v);
        }
        if let Some(v) = self.hero_loop_disappear.as_ref() {
            my_size += ::protobuf::rt::string_size(21, &v);
        }
        if let Some(v) = self.movement_speed {
            my_size += ::protobuf::rt::int32_size(22, v);
        }
        if let Some(v) = self.aura {
            my_size += 2 + 1;
        }
        if let Some(v) = self.activity {
            my_size += ::protobuf::rt::int32_size(24, v);
        }
        if let Some(v) = self.damage {
            my_size += ::protobuf::rt::int32_size(25, v);
        }
        if let Some(v) = self.range {
            my_size += ::protobuf::rt::int32_size(26, v);
        }
        if let Some(v) = self.dd_modifier_index {
            my_size += ::protobuf::rt::int32_size(27, v);
        }
        if let Some(v) = self.dd_ability_id {
            my_size += ::protobuf::rt::int32_size(28, v);
        }
        if let Some(v) = self.illusion_label.as_ref() {
            my_size += ::protobuf::rt::string_size(29, &v);
        }
        if let Some(v) = self.active {
            my_size += 2 + 1;
        }
        if let Some(v) = self.player_ids.as_ref() {
            my_size += ::protobuf::rt::string_size(31, &v);
        }
        if let Some(v) = self.lua_name.as_ref() {
            my_size += ::protobuf::rt::string_size(32, &v);
        }
        if let Some(v) = self.attack_speed {
            my_size += ::protobuf::rt::int32_size(33, v);
        }
        if let Some(v) = self.aura_owner {
            my_size += ::protobuf::rt::uint32_size(34, v);
        }
        if let Some(v) = self.bonus_all_stats {
            my_size += ::protobuf::rt::int32_size(35, v);
        }
        if let Some(v) = self.bonus_health {
            my_size += ::protobuf::rt::int32_size(36, v);
        }
        if let Some(v) = self.bonus_mana {
            my_size += ::protobuf::rt::int32_size(37, v);
        }
        if let Some(v) = self.custom_entity {
            my_size += ::protobuf::rt::uint32_size(38, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.entry_type {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.parent {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.index {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.serial_num {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.modifier_class {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.ability_level {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.stack_count {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.creation_time {
            os.write_float(8, v)?;
        }
        if let Some(v) = self.duration {
            os.write_float(9, v)?;
        }
        if let Some(v) = self.caster {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.ability {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.armor {
            os.write_int32(12, v)?;
        }
        if let Some(v) = self.fade_time {
            os.write_float(13, v)?;
        }
        if let Some(v) = self.subtle {
            os.write_bool(14, v)?;
        }
        if let Some(v) = self.channel_time {
            os.write_float(15, v)?;
        }
        if let Some(v) = self.v_start.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        }
        if let Some(v) = self.v_end.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
        }
        if let Some(v) = self.portal_loop_appear.as_ref() {
            os.write_string(18, v)?;
        }
        if let Some(v) = self.portal_loop_disappear.as_ref() {
            os.write_string(19, v)?;
        }
        if let Some(v) = self.hero_loop_appear.as_ref() {
            os.write_string(20, v)?;
        }
        if let Some(v) = self.hero_loop_disappear.as_ref() {
            os.write_string(21, v)?;
        }
        if let Some(v) = self.movement_speed {
            os.write_int32(22, v)?;
        }
        if let Some(v) = self.aura {
            os.write_bool(23, v)?;
        }
        if let Some(v) = self.activity {
            os.write_int32(24, v)?;
        }
        if let Some(v) = self.damage {
            os.write_int32(25, v)?;
        }
        if let Some(v) = self.range {
            os.write_int32(26, v)?;
        }
        if let Some(v) = self.dd_modifier_index {
            os.write_int32(27, v)?;
        }
        if let Some(v) = self.dd_ability_id {
            os.write_int32(28, v)?;
        }
        if let Some(v) = self.illusion_label.as_ref() {
            os.write_string(29, v)?;
        }
        if let Some(v) = self.active {
            os.write_bool(30, v)?;
        }
        if let Some(v) = self.player_ids.as_ref() {
            os.write_string(31, v)?;
        }
        if let Some(v) = self.lua_name.as_ref() {
            os.write_string(32, v)?;
        }
        if let Some(v) = self.attack_speed {
            os.write_int32(33, v)?;
        }
        if let Some(v) = self.aura_owner {
            os.write_uint32(34, v)?;
        }
        if let Some(v) = self.bonus_all_stats {
            os.write_int32(35, v)?;
        }
        if let Some(v) = self.bonus_health {
            os.write_int32(36, v)?;
        }
        if let Some(v) = self.bonus_mana {
            os.write_int32(37, v)?;
        }
        if let Some(v) = self.custom_entity {
            os.write_uint32(38, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAModifierBuffTableEntry {
        CDOTAModifierBuffTableEntry::new()
    }

    fn clear(&mut self) {
        self.entry_type = ::std::option::Option::None;
        self.parent = ::std::option::Option::None;
        self.index = ::std::option::Option::None;
        self.serial_num = ::std::option::Option::None;
        self.modifier_class = ::std::option::Option::None;
        self.ability_level = ::std::option::Option::None;
        self.stack_count = ::std::option::Option::None;
        self.creation_time = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.caster = ::std::option::Option::None;
        self.ability = ::std::option::Option::None;
        self.armor = ::std::option::Option::None;
        self.fade_time = ::std::option::Option::None;
        self.subtle = ::std::option::Option::None;
        self.channel_time = ::std::option::Option::None;
        self.v_start.clear();
        self.v_end.clear();
        self.portal_loop_appear = ::std::option::Option::None;
        self.portal_loop_disappear = ::std::option::Option::None;
        self.hero_loop_appear = ::std::option::Option::None;
        self.hero_loop_disappear = ::std::option::Option::None;
        self.movement_speed = ::std::option::Option::None;
        self.aura = ::std::option::Option::None;
        self.activity = ::std::option::Option::None;
        self.damage = ::std::option::Option::None;
        self.range = ::std::option::Option::None;
        self.dd_modifier_index = ::std::option::Option::None;
        self.dd_ability_id = ::std::option::Option::None;
        self.illusion_label = ::std::option::Option::None;
        self.active = ::std::option::Option::None;
        self.player_ids = ::std::option::Option::None;
        self.lua_name = ::std::option::Option::None;
        self.attack_speed = ::std::option::Option::None;
        self.aura_owner = ::std::option::Option::None;
        self.bonus_all_stats = ::std::option::Option::None;
        self.bonus_health = ::std::option::Option::None;
        self.bonus_mana = ::std::option::Option::None;
        self.custom_entity = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAModifierBuffTableEntry {
        static instance: CDOTAModifierBuffTableEntry = CDOTAModifierBuffTableEntry {
            entry_type: ::std::option::Option::None,
            parent: ::std::option::Option::None,
            index: ::std::option::Option::None,
            serial_num: ::std::option::Option::None,
            modifier_class: ::std::option::Option::None,
            ability_level: ::std::option::Option::None,
            stack_count: ::std::option::Option::None,
            creation_time: ::std::option::Option::None,
            duration: ::std::option::Option::None,
            caster: ::std::option::Option::None,
            ability: ::std::option::Option::None,
            armor: ::std::option::Option::None,
            fade_time: ::std::option::Option::None,
            subtle: ::std::option::Option::None,
            channel_time: ::std::option::Option::None,
            v_start: ::protobuf::MessageField::none(),
            v_end: ::protobuf::MessageField::none(),
            portal_loop_appear: ::std::option::Option::None,
            portal_loop_disappear: ::std::option::Option::None,
            hero_loop_appear: ::std::option::Option::None,
            hero_loop_disappear: ::std::option::Option::None,
            movement_speed: ::std::option::Option::None,
            aura: ::std::option::Option::None,
            activity: ::std::option::Option::None,
            damage: ::std::option::Option::None,
            range: ::std::option::Option::None,
            dd_modifier_index: ::std::option::Option::None,
            dd_ability_id: ::std::option::Option::None,
            illusion_label: ::std::option::Option::None,
            active: ::std::option::Option::None,
            player_ids: ::std::option::Option::None,
            lua_name: ::std::option::Option::None,
            attack_speed: ::std::option::Option::None,
            aura_owner: ::std::option::Option::None,
            bonus_all_stats: ::std::option::Option::None,
            bonus_health: ::std::option::Option::None,
            bonus_mana: ::std::option::Option::None,
            custom_entity: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTAModifierBuffTableEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTAModifierBuffTableEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTAModifierBuffTableEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTAModifierBuffTableEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTALuaModifierEntry)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTALuaModifierEntry {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTALuaModifierEntry.modifier_type)
    pub modifier_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTALuaModifierEntry.modifier_filename)
    pub modifier_filename: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTALuaModifierEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTALuaModifierEntry {
    fn default() -> &'a CDOTALuaModifierEntry {
        <CDOTALuaModifierEntry as ::protobuf::Message>::default_instance()
    }
}

impl CDOTALuaModifierEntry {
    pub fn new() -> CDOTALuaModifierEntry {
        ::std::default::Default::default()
    }

    // required int32 modifier_type = 1;

    pub fn modifier_type(&self) -> i32 {
        self.modifier_type.unwrap_or(0)
    }

    pub fn clear_modifier_type(&mut self) {
        self.modifier_type = ::std::option::Option::None;
    }

    pub fn has_modifier_type(&self) -> bool {
        self.modifier_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modifier_type(&mut self, v: i32) {
        self.modifier_type = ::std::option::Option::Some(v);
    }

    // required string modifier_filename = 2;

    pub fn modifier_filename(&self) -> &str {
        match self.modifier_filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_modifier_filename(&mut self) {
        self.modifier_filename = ::std::option::Option::None;
    }

    pub fn has_modifier_filename(&self) -> bool {
        self.modifier_filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modifier_filename(&mut self, v: ::std::string::String) {
        self.modifier_filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modifier_filename(&mut self) -> &mut ::std::string::String {
        if self.modifier_filename.is_none() {
            self.modifier_filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.modifier_filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_modifier_filename(&mut self) -> ::std::string::String {
        self.modifier_filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "modifier_type",
            |m: &CDOTALuaModifierEntry| { &m.modifier_type },
            |m: &mut CDOTALuaModifierEntry| { &mut m.modifier_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "modifier_filename",
            |m: &CDOTALuaModifierEntry| { &m.modifier_filename },
            |m: &mut CDOTALuaModifierEntry| { &mut m.modifier_filename },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTALuaModifierEntry>(
            "CDOTALuaModifierEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTALuaModifierEntry {
    const NAME: &'static str = "CDOTALuaModifierEntry";

    fn is_initialized(&self) -> bool {
        if self.modifier_type.is_none() {
            return false;
        }
        if self.modifier_filename.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.modifier_type = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.modifier_filename = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.modifier_type {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.modifier_filename.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.modifier_type {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.modifier_filename.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTALuaModifierEntry {
        CDOTALuaModifierEntry::new()
    }

    fn clear(&mut self) {
        self.modifier_type = ::std::option::Option::None;
        self.modifier_filename = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTALuaModifierEntry {
        static instance: CDOTALuaModifierEntry = CDOTALuaModifierEntry {
            modifier_type: ::std::option::Option::None,
            modifier_filename: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTALuaModifierEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTALuaModifierEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTALuaModifierEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTALuaModifierEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.DOTA_MODIFIER_ENTRY_TYPE)
pub enum DOTA_MODIFIER_ENTRY_TYPE {
    // @@protoc_insertion_point(enum_value:dota.DOTA_MODIFIER_ENTRY_TYPE.DOTA_MODIFIER_ENTRY_TYPE_ACTIVE)
    DOTA_MODIFIER_ENTRY_TYPE_ACTIVE = 1,
    // @@protoc_insertion_point(enum_value:dota.DOTA_MODIFIER_ENTRY_TYPE.DOTA_MODIFIER_ENTRY_TYPE_REMOVED)
    DOTA_MODIFIER_ENTRY_TYPE_REMOVED = 2,
}

impl ::protobuf::Enum for DOTA_MODIFIER_ENTRY_TYPE {
    const NAME: &'static str = "DOTA_MODIFIER_ENTRY_TYPE";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DOTA_MODIFIER_ENTRY_TYPE> {
        match value {
            1 => ::std::option::Option::Some(DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_ACTIVE),
            2 => ::std::option::Option::Some(DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_REMOVED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<DOTA_MODIFIER_ENTRY_TYPE> {
        match str {
            "DOTA_MODIFIER_ENTRY_TYPE_ACTIVE" => ::std::option::Option::Some(DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_ACTIVE),
            "DOTA_MODIFIER_ENTRY_TYPE_REMOVED" => ::std::option::Option::Some(DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_REMOVED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DOTA_MODIFIER_ENTRY_TYPE] = &[
        DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_ACTIVE,
        DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_REMOVED,
    ];
}

impl ::protobuf::EnumFull for DOTA_MODIFIER_ENTRY_TYPE {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DOTA_MODIFIER_ENTRY_TYPE").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_ACTIVE => 0,
            DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_REMOVED => 1,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for DOTA_MODIFIER_ENTRY_TYPE {
    fn default() -> Self {
        DOTA_MODIFIER_ENTRY_TYPE::DOTA_MODIFIER_ENTRY_TYPE_ACTIVE
    }
}

impl DOTA_MODIFIER_ENTRY_TYPE {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DOTA_MODIFIER_ENTRY_TYPE>("DOTA_MODIFIER_ENTRY_TYPE")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14dota_modifiers.proto\x12\x04dota\x1a\x16networkbasetypes.proto\"\
    \xa4\n\n\x1bCDOTAModifierBuffTableEntry\x12=\n\nentry_type\x18\x01\x20\
    \x02(\x0e2\x1e.dota.DOTA_MODIFIER_ENTRY_TYPER\tentryType\x12\x16\n\x06pa\
    rent\x18\x02\x20\x02(\rR\x06parent\x12\x14\n\x05index\x18\x03\x20\x02(\
    \x05R\x05index\x12\x1d\n\nserial_num\x18\x04\x20\x02(\x05R\tserialNum\
    \x12%\n\x0emodifier_class\x18\x05\x20\x01(\x05R\rmodifierClass\x12#\n\ra\
    bility_level\x18\x06\x20\x01(\x05R\x0cabilityLevel\x12\x1f\n\x0bstack_co\
    unt\x18\x07\x20\x01(\x05R\nstackCount\x12#\n\rcreation_time\x18\x08\x20\
    \x01(\x02R\x0ccreationTime\x12\x1a\n\x08duration\x18\t\x20\x01(\x02R\x08\
    duration\x12\x16\n\x06caster\x18\n\x20\x01(\rR\x06caster\x12\x18\n\x07ab\
    ility\x18\x0b\x20\x01(\rR\x07ability\x12\x14\n\x05armor\x18\x0c\x20\x01(\
    \x05R\x05armor\x12\x1b\n\tfade_time\x18\r\x20\x01(\x02R\x08fadeTime\x12\
    \x16\n\x06subtle\x18\x0e\x20\x01(\x08R\x06subtle\x12!\n\x0cchannel_time\
    \x18\x0f\x20\x01(\x02R\x0bchannelTime\x12)\n\x07v_start\x18\x10\x20\x01(\
    \x0b2\x10.dota.CMsgVectorR\x06vStart\x12%\n\x05v_end\x18\x11\x20\x01(\
    \x0b2\x10.dota.CMsgVectorR\x04vEnd\x12,\n\x12portal_loop_appear\x18\x12\
    \x20\x01(\tR\x10portalLoopAppear\x122\n\x15portal_loop_disappear\x18\x13\
    \x20\x01(\tR\x13portalLoopDisappear\x12(\n\x10hero_loop_appear\x18\x14\
    \x20\x01(\tR\x0eheroLoopAppear\x12.\n\x13hero_loop_disappear\x18\x15\x20\
    \x01(\tR\x11heroLoopDisappear\x12%\n\x0emovement_speed\x18\x16\x20\x01(\
    \x05R\rmovementSpeed\x12\x12\n\x04aura\x18\x17\x20\x01(\x08R\x04aura\x12\
    \x1a\n\x08activity\x18\x18\x20\x01(\x05R\x08activity\x12\x16\n\x06damage\
    \x18\x19\x20\x01(\x05R\x06damage\x12\x14\n\x05range\x18\x1a\x20\x01(\x05\
    R\x05range\x12*\n\x11dd_modifier_index\x18\x1b\x20\x01(\x05R\x0fddModifi\
    erIndex\x12\"\n\rdd_ability_id\x18\x1c\x20\x01(\x05R\x0bddAbilityId\x12%\
    \n\x0eillusion_label\x18\x1d\x20\x01(\tR\rillusionLabel\x12\x16\n\x06act\
    ive\x18\x1e\x20\x01(\x08R\x06active\x12\x1d\n\nplayer_ids\x18\x1f\x20\
    \x01(\tR\tplayerIds\x12\x19\n\x08lua_name\x18\x20\x20\x01(\tR\x07luaName\
    \x12!\n\x0cattack_speed\x18!\x20\x01(\x05R\x0battackSpeed\x12\x1d\n\naur\
    a_owner\x18\"\x20\x01(\rR\tauraOwner\x12&\n\x0fbonus_all_stats\x18#\x20\
    \x01(\x05R\rbonusAllStats\x12!\n\x0cbonus_health\x18$\x20\x01(\x05R\x0bb\
    onusHealth\x12\x1d\n\nbonus_mana\x18%\x20\x01(\x05R\tbonusMana\x12#\n\rc\
    ustom_entity\x18&\x20\x01(\rR\x0ccustomEntity\"i\n\x15CDOTALuaModifierEn\
    try\x12#\n\rmodifier_type\x18\x01\x20\x02(\x05R\x0cmodifierType\x12+\n\
    \x11modifier_filename\x18\x02\x20\x02(\tR\x10modifierFilename*e\n\x18DOT\
    A_MODIFIER_ENTRY_TYPE\x12#\n\x1fDOTA_MODIFIER_ENTRY_TYPE_ACTIVE\x10\x01\
    \x12$\n\x20DOTA_MODIFIER_ENTRY_TYPE_REMOVED\x10\x02B%Z#github.com/dotabu\
    ff/manta/dota;dotaJ\x9e\x17\n\x06\x12\x04\0\08\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\
    \x03\0:\n\t\n\x02\x08\x0b\x12\x03\x03\0:\n\t\n\x02\x03\0\x12\x03\x05\x07\
    \x1f\n\n\n\x02\x05\0\x12\x04\x07\0\n\x01\n\n\n\x03\x05\0\x01\x12\x03\x07\
    \x05\x1d\n\x0b\n\x04\x05\0\x02\0\x12\x03\x08\x08,\n\x0c\n\x05\x05\0\x02\
    \0\x01\x12\x03\x08\x08'\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x08*+\n\x0b\
    \n\x04\x05\0\x02\x01\x12\x03\t\x08-\n\x0c\n\x05\x05\0\x02\x01\x01\x12\
    \x03\t\x08(\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\t+,\n\n\n\x02\x04\0\
    \x12\x04\x0c\03\x01\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08#\n\x0b\n\x04\x04\
    \0\x02\0\x12\x03\r\x089\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\r\x08\x10\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\r\x11)\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\r*4\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\r78\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x0e\x08#\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0e\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0e\x11\x17\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x0e\x18\x1e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x0e!\"\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0f\x08!\n\x0c\n\x05\x04\0\x02\
    \x02\x04\x12\x03\x0f\x08\x10\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0f\
    \x11\x16\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0f\x17\x1c\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x0f\x1f\x20\n\x0b\n\x04\x04\0\x02\x03\x12\x03\
    \x10\x08&\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x10\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\x10\x11\x16\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x10\x17!\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x10$%\n\x0b\n\x04\
    \x04\0\x02\x04\x12\x03\x11\x08*\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\
    \x11\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x11\x11\x16\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03\x11\x17%\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03\x11()\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x12\x08)\n\x0c\n\x05\
    \x04\0\x02\x05\x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\0\x02\x05\x05\x12\
    \x03\x12\x11\x16\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x12\x17$\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03\x12'(\n\x0b\n\x04\x04\0\x02\x06\x12\x03\
    \x13\x08'\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03\x13\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x06\x05\x12\x03\x13\x11\x16\n\x0c\n\x05\x04\0\x02\x06\x01\x12\
    \x03\x13\x17\"\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x13%&\n\x0b\n\x04\
    \x04\0\x02\x07\x12\x03\x14\x08)\n\x0c\n\x05\x04\0\x02\x07\x04\x12\x03\
    \x14\x08\x10\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x14\x11\x16\n\x0c\n\
    \x05\x04\0\x02\x07\x01\x12\x03\x14\x17$\n\x0c\n\x05\x04\0\x02\x07\x03\
    \x12\x03\x14'(\n\x0b\n\x04\x04\0\x02\x08\x12\x03\x15\x08$\n\x0c\n\x05\
    \x04\0\x02\x08\x04\x12\x03\x15\x08\x10\n\x0c\n\x05\x04\0\x02\x08\x05\x12\
    \x03\x15\x11\x16\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x15\x17\x1f\n\x0c\
    \n\x05\x04\0\x02\x08\x03\x12\x03\x15\"#\n\x0b\n\x04\x04\0\x02\t\x12\x03\
    \x16\x08$\n\x0c\n\x05\x04\0\x02\t\x04\x12\x03\x16\x08\x10\n\x0c\n\x05\
    \x04\0\x02\t\x05\x12\x03\x16\x11\x17\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\
    \x16\x18\x1e\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\x16!#\n\x0b\n\x04\x04\0\
    \x02\n\x12\x03\x17\x08%\n\x0c\n\x05\x04\0\x02\n\x04\x12\x03\x17\x08\x10\
    \n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\x17\x11\x17\n\x0c\n\x05\x04\0\x02\n\
    \x01\x12\x03\x17\x18\x1f\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\x17\"$\n\
    \x0b\n\x04\x04\0\x02\x0b\x12\x03\x18\x08\"\n\x0c\n\x05\x04\0\x02\x0b\x04\
    \x12\x03\x18\x08\x10\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03\x18\x11\x16\n\
    \x0c\n\x05\x04\0\x02\x0b\x01\x12\x03\x18\x17\x1c\n\x0c\n\x05\x04\0\x02\
    \x0b\x03\x12\x03\x18\x1f!\n\x0b\n\x04\x04\0\x02\x0c\x12\x03\x19\x08&\n\
    \x0c\n\x05\x04\0\x02\x0c\x04\x12\x03\x19\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x0c\x05\x12\x03\x19\x11\x16\n\x0c\n\x05\x04\0\x02\x0c\x01\x12\x03\x19\
    \x17\x20\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03\x19#%\n\x0b\n\x04\x04\0\
    \x02\r\x12\x03\x1a\x08\"\n\x0c\n\x05\x04\0\x02\r\x04\x12\x03\x1a\x08\x10\
    \n\x0c\n\x05\x04\0\x02\r\x05\x12\x03\x1a\x11\x15\n\x0c\n\x05\x04\0\x02\r\
    \x01\x12\x03\x1a\x16\x1c\n\x0c\n\x05\x04\0\x02\r\x03\x12\x03\x1a\x1f!\n\
    \x0b\n\x04\x04\0\x02\x0e\x12\x03\x1b\x08)\n\x0c\n\x05\x04\0\x02\x0e\x04\
    \x12\x03\x1b\x08\x10\n\x0c\n\x05\x04\0\x02\x0e\x05\x12\x03\x1b\x11\x16\n\
    \x0c\n\x05\x04\0\x02\x0e\x01\x12\x03\x1b\x17#\n\x0c\n\x05\x04\0\x02\x0e\
    \x03\x12\x03\x1b&(\n\x0b\n\x04\x04\0\x02\x0f\x12\x03\x1c\x08)\n\x0c\n\
    \x05\x04\0\x02\x0f\x04\x12\x03\x1c\x08\x10\n\x0c\n\x05\x04\0\x02\x0f\x06\
    \x12\x03\x1c\x11\x1b\n\x0c\n\x05\x04\0\x02\x0f\x01\x12\x03\x1c\x1c#\n\
    \x0c\n\x05\x04\0\x02\x0f\x03\x12\x03\x1c&(\n\x0b\n\x04\x04\0\x02\x10\x12\
    \x03\x1d\x08'\n\x0c\n\x05\x04\0\x02\x10\x04\x12\x03\x1d\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x10\x06\x12\x03\x1d\x11\x1b\n\x0c\n\x05\x04\0\x02\x10\x01\
    \x12\x03\x1d\x1c!\n\x0c\n\x05\x04\0\x02\x10\x03\x12\x03\x1d$&\n\x0b\n\
    \x04\x04\0\x02\x11\x12\x03\x1e\x080\n\x0c\n\x05\x04\0\x02\x11\x04\x12\
    \x03\x1e\x08\x10\n\x0c\n\x05\x04\0\x02\x11\x05\x12\x03\x1e\x11\x17\n\x0c\
    \n\x05\x04\0\x02\x11\x01\x12\x03\x1e\x18*\n\x0c\n\x05\x04\0\x02\x11\x03\
    \x12\x03\x1e-/\n\x0b\n\x04\x04\0\x02\x12\x12\x03\x1f\x083\n\x0c\n\x05\
    \x04\0\x02\x12\x04\x12\x03\x1f\x08\x10\n\x0c\n\x05\x04\0\x02\x12\x05\x12\
    \x03\x1f\x11\x17\n\x0c\n\x05\x04\0\x02\x12\x01\x12\x03\x1f\x18-\n\x0c\n\
    \x05\x04\0\x02\x12\x03\x12\x03\x1f02\n\x0b\n\x04\x04\0\x02\x13\x12\x03\
    \x20\x08.\n\x0c\n\x05\x04\0\x02\x13\x04\x12\x03\x20\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x13\x05\x12\x03\x20\x11\x17\n\x0c\n\x05\x04\0\x02\x13\x01\x12\
    \x03\x20\x18(\n\x0c\n\x05\x04\0\x02\x13\x03\x12\x03\x20+-\n\x0b\n\x04\
    \x04\0\x02\x14\x12\x03!\x081\n\x0c\n\x05\x04\0\x02\x14\x04\x12\x03!\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x14\x05\x12\x03!\x11\x17\n\x0c\n\x05\x04\0\
    \x02\x14\x01\x12\x03!\x18+\n\x0c\n\x05\x04\0\x02\x14\x03\x12\x03!.0\n\
    \x0b\n\x04\x04\0\x02\x15\x12\x03\"\x08+\n\x0c\n\x05\x04\0\x02\x15\x04\
    \x12\x03\"\x08\x10\n\x0c\n\x05\x04\0\x02\x15\x05\x12\x03\"\x11\x16\n\x0c\
    \n\x05\x04\0\x02\x15\x01\x12\x03\"\x17%\n\x0c\n\x05\x04\0\x02\x15\x03\
    \x12\x03\"(*\n\x0b\n\x04\x04\0\x02\x16\x12\x03#\x08\x20\n\x0c\n\x05\x04\
    \0\x02\x16\x04\x12\x03#\x08\x10\n\x0c\n\x05\x04\0\x02\x16\x05\x12\x03#\
    \x11\x15\n\x0c\n\x05\x04\0\x02\x16\x01\x12\x03#\x16\x1a\n\x0c\n\x05\x04\
    \0\x02\x16\x03\x12\x03#\x1d\x1f\n\x0b\n\x04\x04\0\x02\x17\x12\x03$\x08%\
    \n\x0c\n\x05\x04\0\x02\x17\x04\x12\x03$\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x17\x05\x12\x03$\x11\x16\n\x0c\n\x05\x04\0\x02\x17\x01\x12\x03$\x17\x1f\
    \n\x0c\n\x05\x04\0\x02\x17\x03\x12\x03$\"$\n\x0b\n\x04\x04\0\x02\x18\x12\
    \x03%\x08#\n\x0c\n\x05\x04\0\x02\x18\x04\x12\x03%\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x18\x05\x12\x03%\x11\x16\n\x0c\n\x05\x04\0\x02\x18\x01\x12\
    \x03%\x17\x1d\n\x0c\n\x05\x04\0\x02\x18\x03\x12\x03%\x20\"\n\x0b\n\x04\
    \x04\0\x02\x19\x12\x03&\x08\"\n\x0c\n\x05\x04\0\x02\x19\x04\x12\x03&\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x19\x05\x12\x03&\x11\x16\n\x0c\n\x05\x04\0\
    \x02\x19\x01\x12\x03&\x17\x1c\n\x0c\n\x05\x04\0\x02\x19\x03\x12\x03&\x1f\
    !\n\x0b\n\x04\x04\0\x02\x1a\x12\x03'\x08.\n\x0c\n\x05\x04\0\x02\x1a\x04\
    \x12\x03'\x08\x10\n\x0c\n\x05\x04\0\x02\x1a\x05\x12\x03'\x11\x16\n\x0c\n\
    \x05\x04\0\x02\x1a\x01\x12\x03'\x17(\n\x0c\n\x05\x04\0\x02\x1a\x03\x12\
    \x03'+-\n\x0b\n\x04\x04\0\x02\x1b\x12\x03(\x08*\n\x0c\n\x05\x04\0\x02\
    \x1b\x04\x12\x03(\x08\x10\n\x0c\n\x05\x04\0\x02\x1b\x05\x12\x03(\x11\x16\
    \n\x0c\n\x05\x04\0\x02\x1b\x01\x12\x03(\x17$\n\x0c\n\x05\x04\0\x02\x1b\
    \x03\x12\x03(')\n\x0b\n\x04\x04\0\x02\x1c\x12\x03)\x08,\n\x0c\n\x05\x04\
    \0\x02\x1c\x04\x12\x03)\x08\x10\n\x0c\n\x05\x04\0\x02\x1c\x05\x12\x03)\
    \x11\x17\n\x0c\n\x05\x04\0\x02\x1c\x01\x12\x03)\x18&\n\x0c\n\x05\x04\0\
    \x02\x1c\x03\x12\x03))+\n\x0b\n\x04\x04\0\x02\x1d\x12\x03*\x08\"\n\x0c\n\
    \x05\x04\0\x02\x1d\x04\x12\x03*\x08\x10\n\x0c\n\x05\x04\0\x02\x1d\x05\
    \x12\x03*\x11\x15\n\x0c\n\x05\x04\0\x02\x1d\x01\x12\x03*\x16\x1c\n\x0c\n\
    \x05\x04\0\x02\x1d\x03\x12\x03*\x1f!\n\x0b\n\x04\x04\0\x02\x1e\x12\x03+\
    \x08(\n\x0c\n\x05\x04\0\x02\x1e\x04\x12\x03+\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x1e\x05\x12\x03+\x11\x17\n\x0c\n\x05\x04\0\x02\x1e\x01\x12\x03+\x18\
    \"\n\x0c\n\x05\x04\0\x02\x1e\x03\x12\x03+%'\n\x0b\n\x04\x04\0\x02\x1f\
    \x12\x03,\x08&\n\x0c\n\x05\x04\0\x02\x1f\x04\x12\x03,\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x1f\x05\x12\x03,\x11\x17\n\x0c\n\x05\x04\0\x02\x1f\x01\
    \x12\x03,\x18\x20\n\x0c\n\x05\x04\0\x02\x1f\x03\x12\x03,#%\n\x0b\n\x04\
    \x04\0\x02\x20\x12\x03-\x08)\n\x0c\n\x05\x04\0\x02\x20\x04\x12\x03-\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x20\x05\x12\x03-\x11\x16\n\x0c\n\x05\x04\0\
    \x02\x20\x01\x12\x03-\x17#\n\x0c\n\x05\x04\0\x02\x20\x03\x12\x03-&(\n\
    \x0b\n\x04\x04\0\x02!\x12\x03.\x08(\n\x0c\n\x05\x04\0\x02!\x04\x12\x03.\
    \x08\x10\n\x0c\n\x05\x04\0\x02!\x05\x12\x03.\x11\x17\n\x0c\n\x05\x04\0\
    \x02!\x01\x12\x03.\x18\"\n\x0c\n\x05\x04\0\x02!\x03\x12\x03.%'\n\x0b\n\
    \x04\x04\0\x02\"\x12\x03/\x08,\n\x0c\n\x05\x04\0\x02\"\x04\x12\x03/\x08\
    \x10\n\x0c\n\x05\x04\0\x02\"\x05\x12\x03/\x11\x16\n\x0c\n\x05\x04\0\x02\
    \"\x01\x12\x03/\x17&\n\x0c\n\x05\x04\0\x02\"\x03\x12\x03/)+\n\x0b\n\x04\
    \x04\0\x02#\x12\x030\x08)\n\x0c\n\x05\x04\0\x02#\x04\x12\x030\x08\x10\n\
    \x0c\n\x05\x04\0\x02#\x05\x12\x030\x11\x16\n\x0c\n\x05\x04\0\x02#\x01\
    \x12\x030\x17#\n\x0c\n\x05\x04\0\x02#\x03\x12\x030&(\n\x0b\n\x04\x04\0\
    \x02$\x12\x031\x08'\n\x0c\n\x05\x04\0\x02$\x04\x12\x031\x08\x10\n\x0c\n\
    \x05\x04\0\x02$\x05\x12\x031\x11\x16\n\x0c\n\x05\x04\0\x02$\x01\x12\x031\
    \x17!\n\x0c\n\x05\x04\0\x02$\x03\x12\x031$&\n\x0b\n\x04\x04\0\x02%\x12\
    \x032\x08+\n\x0c\n\x05\x04\0\x02%\x04\x12\x032\x08\x10\n\x0c\n\x05\x04\0\
    \x02%\x05\x12\x032\x11\x17\n\x0c\n\x05\x04\0\x02%\x01\x12\x032\x18%\n\
    \x0c\n\x05\x04\0\x02%\x03\x12\x032(*\n\n\n\x02\x04\x01\x12\x045\08\x01\n\
    \n\n\x03\x04\x01\x01\x12\x035\x08\x1d\n\x0b\n\x04\x04\x01\x02\0\x12\x036\
    \x08)\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x036\x08\x10\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x036\x11\x16\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x036\x17$\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x036'(\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x037\x08.\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x037\x08\x10\n\x0c\n\
    \x05\x04\x01\x02\x01\x05\x12\x037\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x037\x18)\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x037,-\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::networkbasetypes::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(CDOTAModifierBuffTableEntry::generated_message_descriptor_data());
            messages.push(CDOTALuaModifierEntry::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(DOTA_MODIFIER_ENTRY_TYPE::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
