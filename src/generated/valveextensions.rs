// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `valveextensions.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

/// Extension fields
pub mod exts {

    pub const map_field: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(61000, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const map_key: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(61001, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const diff_encode_field: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, i32> = ::protobuf::ext::ExtFieldOptional::new(61002, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_INT32);

    pub const delta_ignore: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(61003, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const steamml_max_entries: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(61004, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const steamml_is_timestamp: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(61005, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const steamlearn_count: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(61006, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const schema_friendly_name: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(1000, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const schema_description: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(1001, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const schema_suppress_enumerator: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(1002, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15valveextensions.proto\x12\x04dota\x1a\x20google/protobuf/descripto\
    r.proto:<\n\tmap_field\x18\xc8\xdc\x03\x20\x01(\x08\x12\x1d.google.proto\
    buf.FieldOptionsR\x08mapField:8\n\x07map_key\x18\xc9\xdc\x03\x20\x01(\
    \x08\x12\x1d.google.protobuf.FieldOptionsR\x06mapKey:K\n\x11diff_encode_\
    field\x18\xca\xdc\x03\x20\x01(\x05\x12\x1d.google.protobuf.FieldOptionsR\
    \x0fdiffEncodeField:B\n\x0cdelta_ignore\x18\xcb\xdc\x03\x20\x01(\x08\x12\
    \x1d.google.protobuf.FieldOptionsR\x0bdeltaIgnore:O\n\x13steamml_max_ent\
    ries\x18\xcc\xdc\x03\x20\x01(\r\x12\x1d.google.protobuf.FieldOptionsR\
    \x11steammlMaxEntries:Q\n\x14steamml_is_timestamp\x18\xcd\xdc\x03\x20\
    \x01(\x08\x12\x1d.google.protobuf.FieldOptionsR\x12steammlIsTimestamp:J\
    \n\x10steamlearn_count\x18\xce\xdc\x03\x20\x01(\r\x12\x1d.google.protobu\
    f.FieldOptionsR\x0fsteamlearnCount:T\n\x14schema_friendly_name\x18\xe8\
    \x07\x20\x01(\t\x12!.google.protobuf.EnumValueOptionsR\x12schemaFriendly\
    Name:Q\n\x12schema_description\x18\xe9\x07\x20\x01(\t\x12!.google.protob\
    uf.EnumValueOptionsR\x11schemaDescription:`\n\x1aschema_suppress_enumera\
    tor\x18\xea\x07\x20\x01(\x08\x12!.google.protobuf.EnumValueOptionsR\x18s\
    chemaSuppressEnumeratorB%Z#github.com/dotabuff/manta/dota;dotaJ\x98\x06\
    \n\x06\x12\x04\0\0\x15\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x03\0:\n\t\n\x02\x08\
    \x0b\x12\x03\x03\0:\n\t\n\x02\x03\0\x12\x03\x05\x07)\n\t\n\x01\x07\x12\
    \x04\x07\0\x0f\x01\n\t\n\x02\x07\0\x12\x03\x08\x08(\n\n\n\x03\x07\0\x02\
    \x12\x03\x07\x07#\n\n\n\x03\x07\0\x04\x12\x03\x08\x08\x10\n\n\n\x03\x07\
    \0\x05\x12\x03\x08\x11\x15\n\n\n\x03\x07\0\x01\x12\x03\x08\x16\x1f\n\n\n\
    \x03\x07\0\x03\x12\x03\x08\"'\n\t\n\x02\x07\x01\x12\x03\t\x08&\n\n\n\x03\
    \x07\x01\x02\x12\x03\x07\x07#\n\n\n\x03\x07\x01\x04\x12\x03\t\x08\x10\n\
    \n\n\x03\x07\x01\x05\x12\x03\t\x11\x15\n\n\n\x03\x07\x01\x01\x12\x03\t\
    \x16\x1d\n\n\n\x03\x07\x01\x03\x12\x03\t\x20%\n\t\n\x02\x07\x02\x12\x03\
    \n\x081\n\n\n\x03\x07\x02\x02\x12\x03\x07\x07#\n\n\n\x03\x07\x02\x04\x12\
    \x03\n\x08\x10\n\n\n\x03\x07\x02\x05\x12\x03\n\x11\x16\n\n\n\x03\x07\x02\
    \x01\x12\x03\n\x17(\n\n\n\x03\x07\x02\x03\x12\x03\n+0\n\t\n\x02\x07\x03\
    \x12\x03\x0b\x08+\n\n\n\x03\x07\x03\x02\x12\x03\x07\x07#\n\n\n\x03\x07\
    \x03\x04\x12\x03\x0b\x08\x10\n\n\n\x03\x07\x03\x05\x12\x03\x0b\x11\x15\n\
    \n\n\x03\x07\x03\x01\x12\x03\x0b\x16\"\n\n\n\x03\x07\x03\x03\x12\x03\x0b\
    %*\n\t\n\x02\x07\x04\x12\x03\x0c\x084\n\n\n\x03\x07\x04\x02\x12\x03\x07\
    \x07#\n\n\n\x03\x07\x04\x04\x12\x03\x0c\x08\x10\n\n\n\x03\x07\x04\x05\
    \x12\x03\x0c\x11\x17\n\n\n\x03\x07\x04\x01\x12\x03\x0c\x18+\n\n\n\x03\
    \x07\x04\x03\x12\x03\x0c.3\n\t\n\x02\x07\x05\x12\x03\r\x083\n\n\n\x03\
    \x07\x05\x02\x12\x03\x07\x07#\n\n\n\x03\x07\x05\x04\x12\x03\r\x08\x10\n\
    \n\n\x03\x07\x05\x05\x12\x03\r\x11\x15\n\n\n\x03\x07\x05\x01\x12\x03\r\
    \x16*\n\n\n\x03\x07\x05\x03\x12\x03\r-2\n\t\n\x02\x07\x06\x12\x03\x0e\
    \x081\n\n\n\x03\x07\x06\x02\x12\x03\x07\x07#\n\n\n\x03\x07\x06\x04\x12\
    \x03\x0e\x08\x10\n\n\n\x03\x07\x06\x05\x12\x03\x0e\x11\x17\n\n\n\x03\x07\
    \x06\x01\x12\x03\x0e\x18(\n\n\n\x03\x07\x06\x03\x12\x03\x0e+0\n\t\n\x01\
    \x07\x12\x04\x11\0\x15\x01\n\t\n\x02\x07\x07\x12\x03\x12\x084\n\n\n\x03\
    \x07\x07\x02\x12\x03\x11\x07'\n\n\n\x03\x07\x07\x04\x12\x03\x12\x08\x10\
    \n\n\n\x03\x07\x07\x05\x12\x03\x12\x11\x17\n\n\n\x03\x07\x07\x01\x12\x03\
    \x12\x18,\n\n\n\x03\x07\x07\x03\x12\x03\x12/3\n\t\n\x02\x07\x08\x12\x03\
    \x13\x082\n\n\n\x03\x07\x08\x02\x12\x03\x11\x07'\n\n\n\x03\x07\x08\x04\
    \x12\x03\x13\x08\x10\n\n\n\x03\x07\x08\x05\x12\x03\x13\x11\x17\n\n\n\x03\
    \x07\x08\x01\x12\x03\x13\x18*\n\n\n\x03\x07\x08\x03\x12\x03\x13-1\n\t\n\
    \x02\x07\t\x12\x03\x14\x088\n\n\n\x03\x07\t\x02\x12\x03\x11\x07'\n\n\n\
    \x03\x07\t\x04\x12\x03\x14\x08\x10\n\n\n\x03\x07\t\x05\x12\x03\x14\x11\
    \x15\n\n\n\x03\x07\t\x01\x12\x03\x14\x160\n\n\n\x03\x07\t\x03\x12\x03\
    \x1437\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
