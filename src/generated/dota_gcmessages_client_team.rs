// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_team.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CMsgDOTATeamInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInfo {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.members)
    pub members: ::std::vec::Vec<cmsg_dotateam_info::Member>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.tag)
    pub tag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.pro)
    pub pro: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.pickup_team)
    pub pickup_team: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.ugc_logo)
    pub ugc_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.ugc_base_logo)
    pub ugc_base_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.ugc_banner_logo)
    pub ugc_banner_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.ugc_sponsor_logo)
    pub ugc_sponsor_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.country_code)
    pub country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.wins)
    pub wins: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.losses)
    pub losses: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.games_played_total)
    pub games_played_total: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.games_played_matchmaking)
    pub games_played_matchmaking: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.url_logo)
    pub url_logo: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.registered_member_account_ids)
    pub registered_member_account_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.coach_account_id)
    pub coach_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.audit_entries)
    pub audit_entries: ::std::vec::Vec<cmsg_dotateam_info::AuditEntry>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.region)
    pub region: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_shared_enums::ELeagueRegion>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.abbreviation)
    pub abbreviation: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.member_stats)
    pub member_stats: ::std::vec::Vec<cmsg_dotateam_info::MemberStats>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.team_stats)
    pub team_stats: ::protobuf::MessageField<cmsg_dotateam_info::TeamStats>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.dpc_results)
    pub dpc_results: ::std::vec::Vec<cmsg_dotateam_info::DPCResult>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.color_primary)
    pub color_primary: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.color_secondary)
    pub color_secondary: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.team_captain)
    pub team_captain: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInfo {
    fn default() -> &'a CMsgDOTATeamInfo {
        <CMsgDOTATeamInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInfo {
    pub fn new() -> CMsgDOTATeamInfo {
        ::std::default::Default::default()
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional string name = 3;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string tag = 4;

    pub fn tag(&self) -> &str {
        match self.tag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_tag(&mut self) {
        self.tag = ::std::option::Option::None;
    }

    pub fn has_tag(&self) -> bool {
        self.tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::std::string::String) {
        self.tag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag(&mut self) -> &mut ::std::string::String {
        if self.tag.is_none() {
            self.tag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_tag(&mut self) -> ::std::string::String {
        self.tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_created = 5;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional bool pro = 6;

    pub fn pro(&self) -> bool {
        self.pro.unwrap_or(false)
    }

    pub fn clear_pro(&mut self) {
        self.pro = ::std::option::Option::None;
    }

    pub fn has_pro(&self) -> bool {
        self.pro.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pro(&mut self, v: bool) {
        self.pro = ::std::option::Option::Some(v);
    }

    // optional bool pickup_team = 8;

    pub fn pickup_team(&self) -> bool {
        self.pickup_team.unwrap_or(false)
    }

    pub fn clear_pickup_team(&mut self) {
        self.pickup_team = ::std::option::Option::None;
    }

    pub fn has_pickup_team(&self) -> bool {
        self.pickup_team.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pickup_team(&mut self, v: bool) {
        self.pickup_team = ::std::option::Option::Some(v);
    }

    // optional uint64 ugc_logo = 9;

    pub fn ugc_logo(&self) -> u64 {
        self.ugc_logo.unwrap_or(0)
    }

    pub fn clear_ugc_logo(&mut self) {
        self.ugc_logo = ::std::option::Option::None;
    }

    pub fn has_ugc_logo(&self) -> bool {
        self.ugc_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ugc_logo(&mut self, v: u64) {
        self.ugc_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 ugc_base_logo = 10;

    pub fn ugc_base_logo(&self) -> u64 {
        self.ugc_base_logo.unwrap_or(0)
    }

    pub fn clear_ugc_base_logo(&mut self) {
        self.ugc_base_logo = ::std::option::Option::None;
    }

    pub fn has_ugc_base_logo(&self) -> bool {
        self.ugc_base_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ugc_base_logo(&mut self, v: u64) {
        self.ugc_base_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 ugc_banner_logo = 11;

    pub fn ugc_banner_logo(&self) -> u64 {
        self.ugc_banner_logo.unwrap_or(0)
    }

    pub fn clear_ugc_banner_logo(&mut self) {
        self.ugc_banner_logo = ::std::option::Option::None;
    }

    pub fn has_ugc_banner_logo(&self) -> bool {
        self.ugc_banner_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ugc_banner_logo(&mut self, v: u64) {
        self.ugc_banner_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 ugc_sponsor_logo = 12;

    pub fn ugc_sponsor_logo(&self) -> u64 {
        self.ugc_sponsor_logo.unwrap_or(0)
    }

    pub fn clear_ugc_sponsor_logo(&mut self) {
        self.ugc_sponsor_logo = ::std::option::Option::None;
    }

    pub fn has_ugc_sponsor_logo(&self) -> bool {
        self.ugc_sponsor_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ugc_sponsor_logo(&mut self, v: u64) {
        self.ugc_sponsor_logo = ::std::option::Option::Some(v);
    }

    // optional string country_code = 13;

    pub fn country_code(&self) -> &str {
        match self.country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country_code(&mut self) {
        self.country_code = ::std::option::Option::None;
    }

    pub fn has_country_code(&self) -> bool {
        self.country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        if self.country_code.is_none() {
            self.country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string url = 14;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 wins = 15;

    pub fn wins(&self) -> u32 {
        self.wins.unwrap_or(0)
    }

    pub fn clear_wins(&mut self) {
        self.wins = ::std::option::Option::None;
    }

    pub fn has_wins(&self) -> bool {
        self.wins.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wins(&mut self, v: u32) {
        self.wins = ::std::option::Option::Some(v);
    }

    // optional uint32 losses = 16;

    pub fn losses(&self) -> u32 {
        self.losses.unwrap_or(0)
    }

    pub fn clear_losses(&mut self) {
        self.losses = ::std::option::Option::None;
    }

    pub fn has_losses(&self) -> bool {
        self.losses.is_some()
    }

    // Param is passed by value, moved
    pub fn set_losses(&mut self, v: u32) {
        self.losses = ::std::option::Option::Some(v);
    }

    // optional uint32 games_played_total = 19;

    pub fn games_played_total(&self) -> u32 {
        self.games_played_total.unwrap_or(0)
    }

    pub fn clear_games_played_total(&mut self) {
        self.games_played_total = ::std::option::Option::None;
    }

    pub fn has_games_played_total(&self) -> bool {
        self.games_played_total.is_some()
    }

    // Param is passed by value, moved
    pub fn set_games_played_total(&mut self, v: u32) {
        self.games_played_total = ::std::option::Option::Some(v);
    }

    // optional uint32 games_played_matchmaking = 20;

    pub fn games_played_matchmaking(&self) -> u32 {
        self.games_played_matchmaking.unwrap_or(0)
    }

    pub fn clear_games_played_matchmaking(&mut self) {
        self.games_played_matchmaking = ::std::option::Option::None;
    }

    pub fn has_games_played_matchmaking(&self) -> bool {
        self.games_played_matchmaking.is_some()
    }

    // Param is passed by value, moved
    pub fn set_games_played_matchmaking(&mut self, v: u32) {
        self.games_played_matchmaking = ::std::option::Option::Some(v);
    }

    // optional string url_logo = 24;

    pub fn url_logo(&self) -> &str {
        match self.url_logo.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url_logo(&mut self) {
        self.url_logo = ::std::option::Option::None;
    }

    pub fn has_url_logo(&self) -> bool {
        self.url_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url_logo(&mut self, v: ::std::string::String) {
        self.url_logo = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url_logo(&mut self) -> &mut ::std::string::String {
        if self.url_logo.is_none() {
            self.url_logo = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url_logo.as_mut().unwrap()
    }

    // Take field
    pub fn take_url_logo(&mut self) -> ::std::string::String {
        self.url_logo.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 coach_account_id = 36;

    pub fn coach_account_id(&self) -> u32 {
        self.coach_account_id.unwrap_or(0)
    }

    pub fn clear_coach_account_id(&mut self) {
        self.coach_account_id = ::std::option::Option::None;
    }

    pub fn has_coach_account_id(&self) -> bool {
        self.coach_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coach_account_id(&mut self, v: u32) {
        self.coach_account_id = ::std::option::Option::Some(v);
    }

    // optional .dota.ELeagueRegion region = 29;

    pub fn region(&self) -> super::dota_shared_enums::ELeagueRegion {
        match self.region {
            Some(e) => e.enum_value_or(super::dota_shared_enums::ELeagueRegion::LEAGUE_REGION_UNSET),
            None => super::dota_shared_enums::ELeagueRegion::LEAGUE_REGION_UNSET,
        }
    }

    pub fn clear_region(&mut self) {
        self.region = ::std::option::Option::None;
    }

    pub fn has_region(&self) -> bool {
        self.region.is_some()
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: super::dota_shared_enums::ELeagueRegion) {
        self.region = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string abbreviation = 32;

    pub fn abbreviation(&self) -> &str {
        match self.abbreviation.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_abbreviation(&mut self) {
        self.abbreviation = ::std::option::Option::None;
    }

    pub fn has_abbreviation(&self) -> bool {
        self.abbreviation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_abbreviation(&mut self, v: ::std::string::String) {
        self.abbreviation = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abbreviation(&mut self) -> &mut ::std::string::String {
        if self.abbreviation.is_none() {
            self.abbreviation = ::std::option::Option::Some(::std::string::String::new());
        }
        self.abbreviation.as_mut().unwrap()
    }

    // Take field
    pub fn take_abbreviation(&mut self) -> ::std::string::String {
        self.abbreviation.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string color_primary = 37;

    pub fn color_primary(&self) -> &str {
        match self.color_primary.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_color_primary(&mut self) {
        self.color_primary = ::std::option::Option::None;
    }

    pub fn has_color_primary(&self) -> bool {
        self.color_primary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_color_primary(&mut self, v: ::std::string::String) {
        self.color_primary = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_color_primary(&mut self) -> &mut ::std::string::String {
        if self.color_primary.is_none() {
            self.color_primary = ::std::option::Option::Some(::std::string::String::new());
        }
        self.color_primary.as_mut().unwrap()
    }

    // Take field
    pub fn take_color_primary(&mut self) -> ::std::string::String {
        self.color_primary.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string color_secondary = 38;

    pub fn color_secondary(&self) -> &str {
        match self.color_secondary.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_color_secondary(&mut self) {
        self.color_secondary = ::std::option::Option::None;
    }

    pub fn has_color_secondary(&self) -> bool {
        self.color_secondary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_color_secondary(&mut self, v: ::std::string::String) {
        self.color_secondary = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_color_secondary(&mut self) -> &mut ::std::string::String {
        if self.color_secondary.is_none() {
            self.color_secondary = ::std::option::Option::Some(::std::string::String::new());
        }
        self.color_secondary.as_mut().unwrap()
    }

    // Take field
    pub fn take_color_secondary(&mut self) -> ::std::string::String {
        self.color_secondary.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 team_captain = 39;

    pub fn team_captain(&self) -> u32 {
        self.team_captain.unwrap_or(0)
    }

    pub fn clear_team_captain(&mut self) {
        self.team_captain = ::std::option::Option::None;
    }

    pub fn has_team_captain(&self) -> bool {
        self.team_captain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_captain(&mut self, v: u32) {
        self.team_captain = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(29);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "members",
            |m: &CMsgDOTATeamInfo| { &m.members },
            |m: &mut CMsgDOTATeamInfo| { &mut m.members },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CMsgDOTATeamInfo| { &m.team_id },
            |m: &mut CMsgDOTATeamInfo| { &mut m.team_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &CMsgDOTATeamInfo| { &m.name },
            |m: &mut CMsgDOTATeamInfo| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tag",
            |m: &CMsgDOTATeamInfo| { &m.tag },
            |m: &mut CMsgDOTATeamInfo| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_created",
            |m: &CMsgDOTATeamInfo| { &m.time_created },
            |m: &mut CMsgDOTATeamInfo| { &mut m.time_created },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pro",
            |m: &CMsgDOTATeamInfo| { &m.pro },
            |m: &mut CMsgDOTATeamInfo| { &mut m.pro },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pickup_team",
            |m: &CMsgDOTATeamInfo| { &m.pickup_team },
            |m: &mut CMsgDOTATeamInfo| { &mut m.pickup_team },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ugc_logo",
            |m: &CMsgDOTATeamInfo| { &m.ugc_logo },
            |m: &mut CMsgDOTATeamInfo| { &mut m.ugc_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ugc_base_logo",
            |m: &CMsgDOTATeamInfo| { &m.ugc_base_logo },
            |m: &mut CMsgDOTATeamInfo| { &mut m.ugc_base_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ugc_banner_logo",
            |m: &CMsgDOTATeamInfo| { &m.ugc_banner_logo },
            |m: &mut CMsgDOTATeamInfo| { &mut m.ugc_banner_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ugc_sponsor_logo",
            |m: &CMsgDOTATeamInfo| { &m.ugc_sponsor_logo },
            |m: &mut CMsgDOTATeamInfo| { &mut m.ugc_sponsor_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "country_code",
            |m: &CMsgDOTATeamInfo| { &m.country_code },
            |m: &mut CMsgDOTATeamInfo| { &mut m.country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "url",
            |m: &CMsgDOTATeamInfo| { &m.url },
            |m: &mut CMsgDOTATeamInfo| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "wins",
            |m: &CMsgDOTATeamInfo| { &m.wins },
            |m: &mut CMsgDOTATeamInfo| { &mut m.wins },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "losses",
            |m: &CMsgDOTATeamInfo| { &m.losses },
            |m: &mut CMsgDOTATeamInfo| { &mut m.losses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "games_played_total",
            |m: &CMsgDOTATeamInfo| { &m.games_played_total },
            |m: &mut CMsgDOTATeamInfo| { &mut m.games_played_total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "games_played_matchmaking",
            |m: &CMsgDOTATeamInfo| { &m.games_played_matchmaking },
            |m: &mut CMsgDOTATeamInfo| { &mut m.games_played_matchmaking },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "url_logo",
            |m: &CMsgDOTATeamInfo| { &m.url_logo },
            |m: &mut CMsgDOTATeamInfo| { &mut m.url_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "registered_member_account_ids",
            |m: &CMsgDOTATeamInfo| { &m.registered_member_account_ids },
            |m: &mut CMsgDOTATeamInfo| { &mut m.registered_member_account_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "coach_account_id",
            |m: &CMsgDOTATeamInfo| { &m.coach_account_id },
            |m: &mut CMsgDOTATeamInfo| { &mut m.coach_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audit_entries",
            |m: &CMsgDOTATeamInfo| { &m.audit_entries },
            |m: &mut CMsgDOTATeamInfo| { &mut m.audit_entries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "region",
            |m: &CMsgDOTATeamInfo| { &m.region },
            |m: &mut CMsgDOTATeamInfo| { &mut m.region },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "abbreviation",
            |m: &CMsgDOTATeamInfo| { &m.abbreviation },
            |m: &mut CMsgDOTATeamInfo| { &mut m.abbreviation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "member_stats",
            |m: &CMsgDOTATeamInfo| { &m.member_stats },
            |m: &mut CMsgDOTATeamInfo| { &mut m.member_stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_dotateam_info::TeamStats>(
            "team_stats",
            |m: &CMsgDOTATeamInfo| { &m.team_stats },
            |m: &mut CMsgDOTATeamInfo| { &mut m.team_stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dpc_results",
            |m: &CMsgDOTATeamInfo| { &m.dpc_results },
            |m: &mut CMsgDOTATeamInfo| { &mut m.dpc_results },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "color_primary",
            |m: &CMsgDOTATeamInfo| { &m.color_primary },
            |m: &mut CMsgDOTATeamInfo| { &mut m.color_primary },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "color_secondary",
            |m: &CMsgDOTATeamInfo| { &m.color_secondary },
            |m: &mut CMsgDOTATeamInfo| { &mut m.color_secondary },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_captain",
            |m: &CMsgDOTATeamInfo| { &m.team_captain },
            |m: &mut CMsgDOTATeamInfo| { &mut m.team_captain },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATeamInfo>(
            "CMsgDOTATeamInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATeamInfo {
    const NAME: &'static str = "CMsgDOTATeamInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.members.push(is.read_message()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.tag = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.pro = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.pickup_team = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.ugc_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.ugc_base_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                88 => {
                    self.ugc_banner_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                96 => {
                    self.ugc_sponsor_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                106 => {
                    self.country_code = ::std::option::Option::Some(is.read_string()?);
                },
                114 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                120 => {
                    self.wins = ::std::option::Option::Some(is.read_uint32()?);
                },
                128 => {
                    self.losses = ::std::option::Option::Some(is.read_uint32()?);
                },
                152 => {
                    self.games_played_total = ::std::option::Option::Some(is.read_uint32()?);
                },
                160 => {
                    self.games_played_matchmaking = ::std::option::Option::Some(is.read_uint32()?);
                },
                194 => {
                    self.url_logo = ::std::option::Option::Some(is.read_string()?);
                },
                242 => {
                    is.read_repeated_packed_uint32_into(&mut self.registered_member_account_ids)?;
                },
                240 => {
                    self.registered_member_account_ids.push(is.read_uint32()?);
                },
                288 => {
                    self.coach_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                250 => {
                    self.audit_entries.push(is.read_message()?);
                },
                232 => {
                    self.region = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                258 => {
                    self.abbreviation = ::std::option::Option::Some(is.read_string()?);
                },
                266 => {
                    self.member_stats.push(is.read_message()?);
                },
                274 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.team_stats)?;
                },
                282 => {
                    self.dpc_results.push(is.read_message()?);
                },
                298 => {
                    self.color_primary = ::std::option::Option::Some(is.read_string()?);
                },
                306 => {
                    self.color_secondary = ::std::option::Option::Some(is.read_string()?);
                },
                312 => {
                    self.team_captain = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.tag.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.time_created {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.pro {
            my_size += 1 + 1;
        }
        if let Some(v) = self.pickup_team {
            my_size += 1 + 1;
        }
        if let Some(v) = self.ugc_logo {
            my_size += ::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.ugc_base_logo {
            my_size += ::protobuf::rt::uint64_size(10, v);
        }
        if let Some(v) = self.ugc_banner_logo {
            my_size += ::protobuf::rt::uint64_size(11, v);
        }
        if let Some(v) = self.ugc_sponsor_logo {
            my_size += ::protobuf::rt::uint64_size(12, v);
        }
        if let Some(v) = self.country_code.as_ref() {
            my_size += ::protobuf::rt::string_size(13, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(14, &v);
        }
        if let Some(v) = self.wins {
            my_size += ::protobuf::rt::uint32_size(15, v);
        }
        if let Some(v) = self.losses {
            my_size += ::protobuf::rt::uint32_size(16, v);
        }
        if let Some(v) = self.games_played_total {
            my_size += ::protobuf::rt::uint32_size(19, v);
        }
        if let Some(v) = self.games_played_matchmaking {
            my_size += ::protobuf::rt::uint32_size(20, v);
        }
        if let Some(v) = self.url_logo.as_ref() {
            my_size += ::protobuf::rt::string_size(24, &v);
        }
        for value in &self.registered_member_account_ids {
            my_size += ::protobuf::rt::uint32_size(30, *value);
        };
        if let Some(v) = self.coach_account_id {
            my_size += ::protobuf::rt::uint32_size(36, v);
        }
        for value in &self.audit_entries {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.region {
            my_size += ::protobuf::rt::int32_size(29, v.value());
        }
        if let Some(v) = self.abbreviation.as_ref() {
            my_size += ::protobuf::rt::string_size(32, &v);
        }
        for value in &self.member_stats {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_stats.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.dpc_results {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.color_primary.as_ref() {
            my_size += ::protobuf::rt::string_size(37, &v);
        }
        if let Some(v) = self.color_secondary.as_ref() {
            my_size += ::protobuf::rt::string_size(38, &v);
        }
        if let Some(v) = self.team_captain {
            my_size += ::protobuf::rt::uint32_size(39, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.members {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.tag.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.pro {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.pickup_team {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.ugc_logo {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.ugc_base_logo {
            os.write_uint64(10, v)?;
        }
        if let Some(v) = self.ugc_banner_logo {
            os.write_uint64(11, v)?;
        }
        if let Some(v) = self.ugc_sponsor_logo {
            os.write_uint64(12, v)?;
        }
        if let Some(v) = self.country_code.as_ref() {
            os.write_string(13, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(14, v)?;
        }
        if let Some(v) = self.wins {
            os.write_uint32(15, v)?;
        }
        if let Some(v) = self.losses {
            os.write_uint32(16, v)?;
        }
        if let Some(v) = self.games_played_total {
            os.write_uint32(19, v)?;
        }
        if let Some(v) = self.games_played_matchmaking {
            os.write_uint32(20, v)?;
        }
        if let Some(v) = self.url_logo.as_ref() {
            os.write_string(24, v)?;
        }
        for v in &self.registered_member_account_ids {
            os.write_uint32(30, *v)?;
        };
        if let Some(v) = self.coach_account_id {
            os.write_uint32(36, v)?;
        }
        for v in &self.audit_entries {
            ::protobuf::rt::write_message_field_with_cached_size(31, v, os)?;
        };
        if let Some(v) = self.region {
            os.write_enum(29, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.abbreviation.as_ref() {
            os.write_string(32, v)?;
        }
        for v in &self.member_stats {
            ::protobuf::rt::write_message_field_with_cached_size(33, v, os)?;
        };
        if let Some(v) = self.team_stats.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(34, v, os)?;
        }
        for v in &self.dpc_results {
            ::protobuf::rt::write_message_field_with_cached_size(35, v, os)?;
        };
        if let Some(v) = self.color_primary.as_ref() {
            os.write_string(37, v)?;
        }
        if let Some(v) = self.color_secondary.as_ref() {
            os.write_string(38, v)?;
        }
        if let Some(v) = self.team_captain {
            os.write_uint32(39, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInfo {
        CMsgDOTATeamInfo::new()
    }

    fn clear(&mut self) {
        self.members.clear();
        self.team_id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.tag = ::std::option::Option::None;
        self.time_created = ::std::option::Option::None;
        self.pro = ::std::option::Option::None;
        self.pickup_team = ::std::option::Option::None;
        self.ugc_logo = ::std::option::Option::None;
        self.ugc_base_logo = ::std::option::Option::None;
        self.ugc_banner_logo = ::std::option::Option::None;
        self.ugc_sponsor_logo = ::std::option::Option::None;
        self.country_code = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.wins = ::std::option::Option::None;
        self.losses = ::std::option::Option::None;
        self.games_played_total = ::std::option::Option::None;
        self.games_played_matchmaking = ::std::option::Option::None;
        self.url_logo = ::std::option::Option::None;
        self.registered_member_account_ids.clear();
        self.coach_account_id = ::std::option::Option::None;
        self.audit_entries.clear();
        self.region = ::std::option::Option::None;
        self.abbreviation = ::std::option::Option::None;
        self.member_stats.clear();
        self.team_stats.clear();
        self.dpc_results.clear();
        self.color_primary = ::std::option::Option::None;
        self.color_secondary = ::std::option::Option::None;
        self.team_captain = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInfo {
        static instance: CMsgDOTATeamInfo = CMsgDOTATeamInfo {
            members: ::std::vec::Vec::new(),
            team_id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            tag: ::std::option::Option::None,
            time_created: ::std::option::Option::None,
            pro: ::std::option::Option::None,
            pickup_team: ::std::option::Option::None,
            ugc_logo: ::std::option::Option::None,
            ugc_base_logo: ::std::option::Option::None,
            ugc_banner_logo: ::std::option::Option::None,
            ugc_sponsor_logo: ::std::option::Option::None,
            country_code: ::std::option::Option::None,
            url: ::std::option::Option::None,
            wins: ::std::option::Option::None,
            losses: ::std::option::Option::None,
            games_played_total: ::std::option::Option::None,
            games_played_matchmaking: ::std::option::Option::None,
            url_logo: ::std::option::Option::None,
            registered_member_account_ids: ::std::vec::Vec::new(),
            coach_account_id: ::std::option::Option::None,
            audit_entries: ::std::vec::Vec::new(),
            region: ::std::option::Option::None,
            abbreviation: ::std::option::Option::None,
            member_stats: ::std::vec::Vec::new(),
            team_stats: ::protobuf::MessageField::none(),
            dpc_results: ::std::vec::Vec::new(),
            color_primary: ::std::option::Option::None,
            color_secondary: ::std::option::Option::None,
            team_captain: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATeamInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATeamInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATeamInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATeamInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTATeamInfo`
pub mod cmsg_dotateam_info {
    // @@protoc_insertion_point(message:dota.CMsgDOTATeamInfo.HeroStats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct HeroStats {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.HeroStats.hero_id)
        pub hero_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.HeroStats.picks)
        pub picks: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.HeroStats.wins)
        pub wins: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.HeroStats.bans)
        pub bans: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.HeroStats.avg_kills)
        pub avg_kills: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.HeroStats.avg_deaths)
        pub avg_deaths: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.HeroStats.avg_assists)
        pub avg_assists: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.HeroStats.avg_gpm)
        pub avg_gpm: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.HeroStats.avg_xpm)
        pub avg_xpm: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInfo.HeroStats.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a HeroStats {
        fn default() -> &'a HeroStats {
            <HeroStats as ::protobuf::Message>::default_instance()
        }
    }

    impl HeroStats {
        pub fn new() -> HeroStats {
            ::std::default::Default::default()
        }

        // optional uint32 hero_id = 1;

        pub fn hero_id(&self) -> u32 {
            self.hero_id.unwrap_or(0)
        }

        pub fn clear_hero_id(&mut self) {
            self.hero_id = ::std::option::Option::None;
        }

        pub fn has_hero_id(&self) -> bool {
            self.hero_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hero_id(&mut self, v: u32) {
            self.hero_id = ::std::option::Option::Some(v);
        }

        // optional uint32 picks = 2;

        pub fn picks(&self) -> u32 {
            self.picks.unwrap_or(0)
        }

        pub fn clear_picks(&mut self) {
            self.picks = ::std::option::Option::None;
        }

        pub fn has_picks(&self) -> bool {
            self.picks.is_some()
        }

        // Param is passed by value, moved
        pub fn set_picks(&mut self, v: u32) {
            self.picks = ::std::option::Option::Some(v);
        }

        // optional uint32 wins = 3;

        pub fn wins(&self) -> u32 {
            self.wins.unwrap_or(0)
        }

        pub fn clear_wins(&mut self) {
            self.wins = ::std::option::Option::None;
        }

        pub fn has_wins(&self) -> bool {
            self.wins.is_some()
        }

        // Param is passed by value, moved
        pub fn set_wins(&mut self, v: u32) {
            self.wins = ::std::option::Option::Some(v);
        }

        // optional uint32 bans = 4;

        pub fn bans(&self) -> u32 {
            self.bans.unwrap_or(0)
        }

        pub fn clear_bans(&mut self) {
            self.bans = ::std::option::Option::None;
        }

        pub fn has_bans(&self) -> bool {
            self.bans.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bans(&mut self, v: u32) {
            self.bans = ::std::option::Option::Some(v);
        }

        // optional float avg_kills = 5;

        pub fn avg_kills(&self) -> f32 {
            self.avg_kills.unwrap_or(0.)
        }

        pub fn clear_avg_kills(&mut self) {
            self.avg_kills = ::std::option::Option::None;
        }

        pub fn has_avg_kills(&self) -> bool {
            self.avg_kills.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_kills(&mut self, v: f32) {
            self.avg_kills = ::std::option::Option::Some(v);
        }

        // optional float avg_deaths = 6;

        pub fn avg_deaths(&self) -> f32 {
            self.avg_deaths.unwrap_or(0.)
        }

        pub fn clear_avg_deaths(&mut self) {
            self.avg_deaths = ::std::option::Option::None;
        }

        pub fn has_avg_deaths(&self) -> bool {
            self.avg_deaths.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_deaths(&mut self, v: f32) {
            self.avg_deaths = ::std::option::Option::Some(v);
        }

        // optional float avg_assists = 7;

        pub fn avg_assists(&self) -> f32 {
            self.avg_assists.unwrap_or(0.)
        }

        pub fn clear_avg_assists(&mut self) {
            self.avg_assists = ::std::option::Option::None;
        }

        pub fn has_avg_assists(&self) -> bool {
            self.avg_assists.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_assists(&mut self, v: f32) {
            self.avg_assists = ::std::option::Option::Some(v);
        }

        // optional float avg_gpm = 8;

        pub fn avg_gpm(&self) -> f32 {
            self.avg_gpm.unwrap_or(0.)
        }

        pub fn clear_avg_gpm(&mut self) {
            self.avg_gpm = ::std::option::Option::None;
        }

        pub fn has_avg_gpm(&self) -> bool {
            self.avg_gpm.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_gpm(&mut self, v: f32) {
            self.avg_gpm = ::std::option::Option::Some(v);
        }

        // optional float avg_xpm = 9;

        pub fn avg_xpm(&self) -> f32 {
            self.avg_xpm.unwrap_or(0.)
        }

        pub fn clear_avg_xpm(&mut self) {
            self.avg_xpm = ::std::option::Option::None;
        }

        pub fn has_avg_xpm(&self) -> bool {
            self.avg_xpm.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_xpm(&mut self, v: f32) {
            self.avg_xpm = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(9);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "hero_id",
                |m: &HeroStats| { &m.hero_id },
                |m: &mut HeroStats| { &mut m.hero_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "picks",
                |m: &HeroStats| { &m.picks },
                |m: &mut HeroStats| { &mut m.picks },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "wins",
                |m: &HeroStats| { &m.wins },
                |m: &mut HeroStats| { &mut m.wins },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "bans",
                |m: &HeroStats| { &m.bans },
                |m: &mut HeroStats| { &mut m.bans },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_kills",
                |m: &HeroStats| { &m.avg_kills },
                |m: &mut HeroStats| { &mut m.avg_kills },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_deaths",
                |m: &HeroStats| { &m.avg_deaths },
                |m: &mut HeroStats| { &mut m.avg_deaths },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_assists",
                |m: &HeroStats| { &m.avg_assists },
                |m: &mut HeroStats| { &mut m.avg_assists },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_gpm",
                |m: &HeroStats| { &m.avg_gpm },
                |m: &mut HeroStats| { &mut m.avg_gpm },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_xpm",
                |m: &HeroStats| { &m.avg_xpm },
                |m: &mut HeroStats| { &mut m.avg_xpm },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HeroStats>(
                "CMsgDOTATeamInfo.HeroStats",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for HeroStats {
        const NAME: &'static str = "HeroStats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.hero_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.picks = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.wins = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.bans = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    45 => {
                        self.avg_kills = ::std::option::Option::Some(is.read_float()?);
                    },
                    53 => {
                        self.avg_deaths = ::std::option::Option::Some(is.read_float()?);
                    },
                    61 => {
                        self.avg_assists = ::std::option::Option::Some(is.read_float()?);
                    },
                    69 => {
                        self.avg_gpm = ::std::option::Option::Some(is.read_float()?);
                    },
                    77 => {
                        self.avg_xpm = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.hero_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.picks {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.wins {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.bans {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.avg_kills {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_deaths {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_assists {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_gpm {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_xpm {
                my_size += 1 + 4;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.hero_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.picks {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.wins {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.bans {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.avg_kills {
                os.write_float(5, v)?;
            }
            if let Some(v) = self.avg_deaths {
                os.write_float(6, v)?;
            }
            if let Some(v) = self.avg_assists {
                os.write_float(7, v)?;
            }
            if let Some(v) = self.avg_gpm {
                os.write_float(8, v)?;
            }
            if let Some(v) = self.avg_xpm {
                os.write_float(9, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> HeroStats {
            HeroStats::new()
        }

        fn clear(&mut self) {
            self.hero_id = ::std::option::Option::None;
            self.picks = ::std::option::Option::None;
            self.wins = ::std::option::Option::None;
            self.bans = ::std::option::Option::None;
            self.avg_kills = ::std::option::Option::None;
            self.avg_deaths = ::std::option::Option::None;
            self.avg_assists = ::std::option::Option::None;
            self.avg_gpm = ::std::option::Option::None;
            self.avg_xpm = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static HeroStats {
            static instance: HeroStats = HeroStats {
                hero_id: ::std::option::Option::None,
                picks: ::std::option::Option::None,
                wins: ::std::option::Option::None,
                bans: ::std::option::Option::None,
                avg_kills: ::std::option::Option::None,
                avg_deaths: ::std::option::Option::None,
                avg_assists: ::std::option::Option::None,
                avg_gpm: ::std::option::Option::None,
                avg_xpm: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for HeroStats {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATeamInfo.HeroStats").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for HeroStats {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for HeroStats {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTATeamInfo.MemberStats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MemberStats {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.MemberStats.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.MemberStats.wins_with_team)
        pub wins_with_team: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.MemberStats.losses_with_team)
        pub losses_with_team: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.MemberStats.top_heroes)
        pub top_heroes: ::std::vec::Vec<HeroStats>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.MemberStats.avg_kills)
        pub avg_kills: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.MemberStats.avg_deaths)
        pub avg_deaths: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.MemberStats.avg_assists)
        pub avg_assists: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInfo.MemberStats.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MemberStats {
        fn default() -> &'a MemberStats {
            <MemberStats as ::protobuf::Message>::default_instance()
        }
    }

    impl MemberStats {
        pub fn new() -> MemberStats {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional uint32 wins_with_team = 2;

        pub fn wins_with_team(&self) -> u32 {
            self.wins_with_team.unwrap_or(0)
        }

        pub fn clear_wins_with_team(&mut self) {
            self.wins_with_team = ::std::option::Option::None;
        }

        pub fn has_wins_with_team(&self) -> bool {
            self.wins_with_team.is_some()
        }

        // Param is passed by value, moved
        pub fn set_wins_with_team(&mut self, v: u32) {
            self.wins_with_team = ::std::option::Option::Some(v);
        }

        // optional uint32 losses_with_team = 3;

        pub fn losses_with_team(&self) -> u32 {
            self.losses_with_team.unwrap_or(0)
        }

        pub fn clear_losses_with_team(&mut self) {
            self.losses_with_team = ::std::option::Option::None;
        }

        pub fn has_losses_with_team(&self) -> bool {
            self.losses_with_team.is_some()
        }

        // Param is passed by value, moved
        pub fn set_losses_with_team(&mut self, v: u32) {
            self.losses_with_team = ::std::option::Option::Some(v);
        }

        // optional float avg_kills = 5;

        pub fn avg_kills(&self) -> f32 {
            self.avg_kills.unwrap_or(0.)
        }

        pub fn clear_avg_kills(&mut self) {
            self.avg_kills = ::std::option::Option::None;
        }

        pub fn has_avg_kills(&self) -> bool {
            self.avg_kills.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_kills(&mut self, v: f32) {
            self.avg_kills = ::std::option::Option::Some(v);
        }

        // optional float avg_deaths = 6;

        pub fn avg_deaths(&self) -> f32 {
            self.avg_deaths.unwrap_or(0.)
        }

        pub fn clear_avg_deaths(&mut self) {
            self.avg_deaths = ::std::option::Option::None;
        }

        pub fn has_avg_deaths(&self) -> bool {
            self.avg_deaths.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_deaths(&mut self, v: f32) {
            self.avg_deaths = ::std::option::Option::Some(v);
        }

        // optional float avg_assists = 7;

        pub fn avg_assists(&self) -> f32 {
            self.avg_assists.unwrap_or(0.)
        }

        pub fn clear_avg_assists(&mut self) {
            self.avg_assists = ::std::option::Option::None;
        }

        pub fn has_avg_assists(&self) -> bool {
            self.avg_assists.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_assists(&mut self, v: f32) {
            self.avg_assists = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(7);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account_id",
                |m: &MemberStats| { &m.account_id },
                |m: &mut MemberStats| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "wins_with_team",
                |m: &MemberStats| { &m.wins_with_team },
                |m: &mut MemberStats| { &mut m.wins_with_team },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "losses_with_team",
                |m: &MemberStats| { &m.losses_with_team },
                |m: &mut MemberStats| { &mut m.losses_with_team },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "top_heroes",
                |m: &MemberStats| { &m.top_heroes },
                |m: &mut MemberStats| { &mut m.top_heroes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_kills",
                |m: &MemberStats| { &m.avg_kills },
                |m: &mut MemberStats| { &mut m.avg_kills },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_deaths",
                |m: &MemberStats| { &m.avg_deaths },
                |m: &mut MemberStats| { &mut m.avg_deaths },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_assists",
                |m: &MemberStats| { &m.avg_assists },
                |m: &mut MemberStats| { &mut m.avg_assists },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MemberStats>(
                "CMsgDOTATeamInfo.MemberStats",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for MemberStats {
        const NAME: &'static str = "MemberStats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.wins_with_team = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.losses_with_team = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    34 => {
                        self.top_heroes.push(is.read_message()?);
                    },
                    45 => {
                        self.avg_kills = ::std::option::Option::Some(is.read_float()?);
                    },
                    53 => {
                        self.avg_deaths = ::std::option::Option::Some(is.read_float()?);
                    },
                    61 => {
                        self.avg_assists = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.wins_with_team {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.losses_with_team {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            for value in &self.top_heroes {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if let Some(v) = self.avg_kills {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_deaths {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_assists {
                my_size += 1 + 4;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.wins_with_team {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.losses_with_team {
                os.write_uint32(3, v)?;
            }
            for v in &self.top_heroes {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            };
            if let Some(v) = self.avg_kills {
                os.write_float(5, v)?;
            }
            if let Some(v) = self.avg_deaths {
                os.write_float(6, v)?;
            }
            if let Some(v) = self.avg_assists {
                os.write_float(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MemberStats {
            MemberStats::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.wins_with_team = ::std::option::Option::None;
            self.losses_with_team = ::std::option::Option::None;
            self.top_heroes.clear();
            self.avg_kills = ::std::option::Option::None;
            self.avg_deaths = ::std::option::Option::None;
            self.avg_assists = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MemberStats {
            static instance: MemberStats = MemberStats {
                account_id: ::std::option::Option::None,
                wins_with_team: ::std::option::Option::None,
                losses_with_team: ::std::option::Option::None,
                top_heroes: ::std::vec::Vec::new(),
                avg_kills: ::std::option::Option::None,
                avg_deaths: ::std::option::Option::None,
                avg_assists: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for MemberStats {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATeamInfo.MemberStats").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for MemberStats {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for MemberStats {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTATeamInfo.TeamStats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TeamStats {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.TeamStats.played_heroes)
        pub played_heroes: ::std::vec::Vec<HeroStats>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.TeamStats.farming)
        pub farming: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.TeamStats.fighting)
        pub fighting: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.TeamStats.versatility)
        pub versatility: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.TeamStats.avg_kills)
        pub avg_kills: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.TeamStats.avg_deaths)
        pub avg_deaths: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.TeamStats.avg_duration)
        pub avg_duration: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInfo.TeamStats.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TeamStats {
        fn default() -> &'a TeamStats {
            <TeamStats as ::protobuf::Message>::default_instance()
        }
    }

    impl TeamStats {
        pub fn new() -> TeamStats {
            ::std::default::Default::default()
        }

        // optional float farming = 2;

        pub fn farming(&self) -> f32 {
            self.farming.unwrap_or(0.)
        }

        pub fn clear_farming(&mut self) {
            self.farming = ::std::option::Option::None;
        }

        pub fn has_farming(&self) -> bool {
            self.farming.is_some()
        }

        // Param is passed by value, moved
        pub fn set_farming(&mut self, v: f32) {
            self.farming = ::std::option::Option::Some(v);
        }

        // optional float fighting = 3;

        pub fn fighting(&self) -> f32 {
            self.fighting.unwrap_or(0.)
        }

        pub fn clear_fighting(&mut self) {
            self.fighting = ::std::option::Option::None;
        }

        pub fn has_fighting(&self) -> bool {
            self.fighting.is_some()
        }

        // Param is passed by value, moved
        pub fn set_fighting(&mut self, v: f32) {
            self.fighting = ::std::option::Option::Some(v);
        }

        // optional float versatility = 4;

        pub fn versatility(&self) -> f32 {
            self.versatility.unwrap_or(0.)
        }

        pub fn clear_versatility(&mut self) {
            self.versatility = ::std::option::Option::None;
        }

        pub fn has_versatility(&self) -> bool {
            self.versatility.is_some()
        }

        // Param is passed by value, moved
        pub fn set_versatility(&mut self, v: f32) {
            self.versatility = ::std::option::Option::Some(v);
        }

        // optional float avg_kills = 5;

        pub fn avg_kills(&self) -> f32 {
            self.avg_kills.unwrap_or(0.)
        }

        pub fn clear_avg_kills(&mut self) {
            self.avg_kills = ::std::option::Option::None;
        }

        pub fn has_avg_kills(&self) -> bool {
            self.avg_kills.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_kills(&mut self, v: f32) {
            self.avg_kills = ::std::option::Option::Some(v);
        }

        // optional float avg_deaths = 6;

        pub fn avg_deaths(&self) -> f32 {
            self.avg_deaths.unwrap_or(0.)
        }

        pub fn clear_avg_deaths(&mut self) {
            self.avg_deaths = ::std::option::Option::None;
        }

        pub fn has_avg_deaths(&self) -> bool {
            self.avg_deaths.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_deaths(&mut self, v: f32) {
            self.avg_deaths = ::std::option::Option::Some(v);
        }

        // optional float avg_duration = 7;

        pub fn avg_duration(&self) -> f32 {
            self.avg_duration.unwrap_or(0.)
        }

        pub fn clear_avg_duration(&mut self) {
            self.avg_duration = ::std::option::Option::None;
        }

        pub fn has_avg_duration(&self) -> bool {
            self.avg_duration.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_duration(&mut self, v: f32) {
            self.avg_duration = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(7);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "played_heroes",
                |m: &TeamStats| { &m.played_heroes },
                |m: &mut TeamStats| { &mut m.played_heroes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "farming",
                |m: &TeamStats| { &m.farming },
                |m: &mut TeamStats| { &mut m.farming },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "fighting",
                |m: &TeamStats| { &m.fighting },
                |m: &mut TeamStats| { &mut m.fighting },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "versatility",
                |m: &TeamStats| { &m.versatility },
                |m: &mut TeamStats| { &mut m.versatility },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_kills",
                |m: &TeamStats| { &m.avg_kills },
                |m: &mut TeamStats| { &mut m.avg_kills },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_deaths",
                |m: &TeamStats| { &m.avg_deaths },
                |m: &mut TeamStats| { &mut m.avg_deaths },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avg_duration",
                |m: &TeamStats| { &m.avg_duration },
                |m: &mut TeamStats| { &mut m.avg_duration },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TeamStats>(
                "CMsgDOTATeamInfo.TeamStats",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TeamStats {
        const NAME: &'static str = "TeamStats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.played_heroes.push(is.read_message()?);
                    },
                    21 => {
                        self.farming = ::std::option::Option::Some(is.read_float()?);
                    },
                    29 => {
                        self.fighting = ::std::option::Option::Some(is.read_float()?);
                    },
                    37 => {
                        self.versatility = ::std::option::Option::Some(is.read_float()?);
                    },
                    45 => {
                        self.avg_kills = ::std::option::Option::Some(is.read_float()?);
                    },
                    53 => {
                        self.avg_deaths = ::std::option::Option::Some(is.read_float()?);
                    },
                    61 => {
                        self.avg_duration = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.played_heroes {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if let Some(v) = self.farming {
                my_size += 1 + 4;
            }
            if let Some(v) = self.fighting {
                my_size += 1 + 4;
            }
            if let Some(v) = self.versatility {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_kills {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_deaths {
                my_size += 1 + 4;
            }
            if let Some(v) = self.avg_duration {
                my_size += 1 + 4;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.played_heroes {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            if let Some(v) = self.farming {
                os.write_float(2, v)?;
            }
            if let Some(v) = self.fighting {
                os.write_float(3, v)?;
            }
            if let Some(v) = self.versatility {
                os.write_float(4, v)?;
            }
            if let Some(v) = self.avg_kills {
                os.write_float(5, v)?;
            }
            if let Some(v) = self.avg_deaths {
                os.write_float(6, v)?;
            }
            if let Some(v) = self.avg_duration {
                os.write_float(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TeamStats {
            TeamStats::new()
        }

        fn clear(&mut self) {
            self.played_heroes.clear();
            self.farming = ::std::option::Option::None;
            self.fighting = ::std::option::Option::None;
            self.versatility = ::std::option::Option::None;
            self.avg_kills = ::std::option::Option::None;
            self.avg_deaths = ::std::option::Option::None;
            self.avg_duration = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TeamStats {
            static instance: TeamStats = TeamStats {
                played_heroes: ::std::vec::Vec::new(),
                farming: ::std::option::Option::None,
                fighting: ::std::option::Option::None,
                versatility: ::std::option::Option::None,
                avg_kills: ::std::option::Option::None,
                avg_deaths: ::std::option::Option::None,
                avg_duration: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TeamStats {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATeamInfo.TeamStats").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TeamStats {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TeamStats {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTATeamInfo.DPCResult)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DPCResult {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.DPCResult.league_id)
        pub league_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.DPCResult.standing)
        pub standing: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.DPCResult.points)
        pub points: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.DPCResult.earnings)
        pub earnings: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.DPCResult.timestamp)
        pub timestamp: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInfo.DPCResult.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DPCResult {
        fn default() -> &'a DPCResult {
            <DPCResult as ::protobuf::Message>::default_instance()
        }
    }

    impl DPCResult {
        pub fn new() -> DPCResult {
            ::std::default::Default::default()
        }

        // optional uint32 league_id = 1;

        pub fn league_id(&self) -> u32 {
            self.league_id.unwrap_or(0)
        }

        pub fn clear_league_id(&mut self) {
            self.league_id = ::std::option::Option::None;
        }

        pub fn has_league_id(&self) -> bool {
            self.league_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_id(&mut self, v: u32) {
            self.league_id = ::std::option::Option::Some(v);
        }

        // optional uint32 standing = 2;

        pub fn standing(&self) -> u32 {
            self.standing.unwrap_or(0)
        }

        pub fn clear_standing(&mut self) {
            self.standing = ::std::option::Option::None;
        }

        pub fn has_standing(&self) -> bool {
            self.standing.is_some()
        }

        // Param is passed by value, moved
        pub fn set_standing(&mut self, v: u32) {
            self.standing = ::std::option::Option::Some(v);
        }

        // optional uint32 points = 3;

        pub fn points(&self) -> u32 {
            self.points.unwrap_or(0)
        }

        pub fn clear_points(&mut self) {
            self.points = ::std::option::Option::None;
        }

        pub fn has_points(&self) -> bool {
            self.points.is_some()
        }

        // Param is passed by value, moved
        pub fn set_points(&mut self, v: u32) {
            self.points = ::std::option::Option::Some(v);
        }

        // optional uint32 earnings = 4;

        pub fn earnings(&self) -> u32 {
            self.earnings.unwrap_or(0)
        }

        pub fn clear_earnings(&mut self) {
            self.earnings = ::std::option::Option::None;
        }

        pub fn has_earnings(&self) -> bool {
            self.earnings.is_some()
        }

        // Param is passed by value, moved
        pub fn set_earnings(&mut self, v: u32) {
            self.earnings = ::std::option::Option::Some(v);
        }

        // optional uint32 timestamp = 5;

        pub fn timestamp(&self) -> u32 {
            self.timestamp.unwrap_or(0)
        }

        pub fn clear_timestamp(&mut self) {
            self.timestamp = ::std::option::Option::None;
        }

        pub fn has_timestamp(&self) -> bool {
            self.timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_timestamp(&mut self, v: u32) {
            self.timestamp = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "league_id",
                |m: &DPCResult| { &m.league_id },
                |m: &mut DPCResult| { &mut m.league_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "standing",
                |m: &DPCResult| { &m.standing },
                |m: &mut DPCResult| { &mut m.standing },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "points",
                |m: &DPCResult| { &m.points },
                |m: &mut DPCResult| { &mut m.points },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "earnings",
                |m: &DPCResult| { &m.earnings },
                |m: &mut DPCResult| { &mut m.earnings },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "timestamp",
                |m: &DPCResult| { &m.timestamp },
                |m: &mut DPCResult| { &mut m.timestamp },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DPCResult>(
                "CMsgDOTATeamInfo.DPCResult",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DPCResult {
        const NAME: &'static str = "DPCResult";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.standing = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.points = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.earnings = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.league_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.standing {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.points {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.earnings {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.timestamp {
                my_size += ::protobuf::rt::uint32_size(5, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.league_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.standing {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.points {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.earnings {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.timestamp {
                os.write_uint32(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DPCResult {
            DPCResult::new()
        }

        fn clear(&mut self) {
            self.league_id = ::std::option::Option::None;
            self.standing = ::std::option::Option::None;
            self.points = ::std::option::Option::None;
            self.earnings = ::std::option::Option::None;
            self.timestamp = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DPCResult {
            static instance: DPCResult = DPCResult {
                league_id: ::std::option::Option::None,
                standing: ::std::option::Option::None,
                points: ::std::option::Option::None,
                earnings: ::std::option::Option::None,
                timestamp: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DPCResult {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATeamInfo.DPCResult").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DPCResult {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DPCResult {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTATeamInfo.Member)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Member {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.Member.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.Member.time_joined)
        pub time_joined: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.Member.admin)
        pub admin: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.Member.pro_name)
        pub pro_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.Member.role)
        pub role: ::std::option::Option<::protobuf::EnumOrUnknown<super::super::dota_shared_enums::Fantasy_Roles>>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.Member.real_name)
        pub real_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInfo.Member.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Member {
        fn default() -> &'a Member {
            <Member as ::protobuf::Message>::default_instance()
        }
    }

    impl Member {
        pub fn new() -> Member {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional uint32 time_joined = 2;

        pub fn time_joined(&self) -> u32 {
            self.time_joined.unwrap_or(0)
        }

        pub fn clear_time_joined(&mut self) {
            self.time_joined = ::std::option::Option::None;
        }

        pub fn has_time_joined(&self) -> bool {
            self.time_joined.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_joined(&mut self, v: u32) {
            self.time_joined = ::std::option::Option::Some(v);
        }

        // optional bool admin = 3;

        pub fn admin(&self) -> bool {
            self.admin.unwrap_or(false)
        }

        pub fn clear_admin(&mut self) {
            self.admin = ::std::option::Option::None;
        }

        pub fn has_admin(&self) -> bool {
            self.admin.is_some()
        }

        // Param is passed by value, moved
        pub fn set_admin(&mut self, v: bool) {
            self.admin = ::std::option::Option::Some(v);
        }

        // optional string pro_name = 6;

        pub fn pro_name(&self) -> &str {
            match self.pro_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_pro_name(&mut self) {
            self.pro_name = ::std::option::Option::None;
        }

        pub fn has_pro_name(&self) -> bool {
            self.pro_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_pro_name(&mut self, v: ::std::string::String) {
            self.pro_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_pro_name(&mut self) -> &mut ::std::string::String {
            if self.pro_name.is_none() {
                self.pro_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.pro_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_pro_name(&mut self) -> ::std::string::String {
            self.pro_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional .dota.Fantasy_Roles role = 8;

        pub fn role(&self) -> super::super::dota_shared_enums::Fantasy_Roles {
            match self.role {
                Some(e) => e.enum_value_or(super::super::dota_shared_enums::Fantasy_Roles::FANTASY_ROLE_UNDEFINED),
                None => super::super::dota_shared_enums::Fantasy_Roles::FANTASY_ROLE_UNDEFINED,
            }
        }

        pub fn clear_role(&mut self) {
            self.role = ::std::option::Option::None;
        }

        pub fn has_role(&self) -> bool {
            self.role.is_some()
        }

        // Param is passed by value, moved
        pub fn set_role(&mut self, v: super::super::dota_shared_enums::Fantasy_Roles) {
            self.role = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        // optional string real_name = 9;

        pub fn real_name(&self) -> &str {
            match self.real_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_real_name(&mut self) {
            self.real_name = ::std::option::Option::None;
        }

        pub fn has_real_name(&self) -> bool {
            self.real_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_real_name(&mut self, v: ::std::string::String) {
            self.real_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_real_name(&mut self) -> &mut ::std::string::String {
            if self.real_name.is_none() {
                self.real_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.real_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_real_name(&mut self) -> ::std::string::String {
            self.real_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account_id",
                |m: &Member| { &m.account_id },
                |m: &mut Member| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_joined",
                |m: &Member| { &m.time_joined },
                |m: &mut Member| { &mut m.time_joined },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "admin",
                |m: &Member| { &m.admin },
                |m: &mut Member| { &mut m.admin },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "pro_name",
                |m: &Member| { &m.pro_name },
                |m: &mut Member| { &mut m.pro_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "role",
                |m: &Member| { &m.role },
                |m: &mut Member| { &mut m.role },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "real_name",
                |m: &Member| { &m.real_name },
                |m: &mut Member| { &mut m.real_name },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Member>(
                "CMsgDOTATeamInfo.Member",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Member {
        const NAME: &'static str = "Member";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.time_joined = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.admin = ::std::option::Option::Some(is.read_bool()?);
                    },
                    50 => {
                        self.pro_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    64 => {
                        self.role = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    74 => {
                        self.real_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.time_joined {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.admin {
                my_size += 1 + 1;
            }
            if let Some(v) = self.pro_name.as_ref() {
                my_size += ::protobuf::rt::string_size(6, &v);
            }
            if let Some(v) = self.role {
                my_size += ::protobuf::rt::int32_size(8, v.value());
            }
            if let Some(v) = self.real_name.as_ref() {
                my_size += ::protobuf::rt::string_size(9, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.time_joined {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.admin {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.pro_name.as_ref() {
                os.write_string(6, v)?;
            }
            if let Some(v) = self.role {
                os.write_enum(8, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.real_name.as_ref() {
                os.write_string(9, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Member {
            Member::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.time_joined = ::std::option::Option::None;
            self.admin = ::std::option::Option::None;
            self.pro_name = ::std::option::Option::None;
            self.role = ::std::option::Option::None;
            self.real_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Member {
            static instance: Member = Member {
                account_id: ::std::option::Option::None,
                time_joined: ::std::option::Option::None,
                admin: ::std::option::Option::None,
                pro_name: ::std::option::Option::None,
                role: ::std::option::Option::None,
                real_name: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Member {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATeamInfo.Member").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Member {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Member {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTATeamInfo.AuditEntry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AuditEntry {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.AuditEntry.audit_action)
        pub audit_action: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.AuditEntry.timestamp)
        pub timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfo.AuditEntry.account_id)
        pub account_id: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInfo.AuditEntry.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AuditEntry {
        fn default() -> &'a AuditEntry {
            <AuditEntry as ::protobuf::Message>::default_instance()
        }
    }

    impl AuditEntry {
        pub fn new() -> AuditEntry {
            ::std::default::Default::default()
        }

        // optional uint32 audit_action = 1;

        pub fn audit_action(&self) -> u32 {
            self.audit_action.unwrap_or(0)
        }

        pub fn clear_audit_action(&mut self) {
            self.audit_action = ::std::option::Option::None;
        }

        pub fn has_audit_action(&self) -> bool {
            self.audit_action.is_some()
        }

        // Param is passed by value, moved
        pub fn set_audit_action(&mut self, v: u32) {
            self.audit_action = ::std::option::Option::Some(v);
        }

        // optional uint32 timestamp = 2;

        pub fn timestamp(&self) -> u32 {
            self.timestamp.unwrap_or(0)
        }

        pub fn clear_timestamp(&mut self) {
            self.timestamp = ::std::option::Option::None;
        }

        pub fn has_timestamp(&self) -> bool {
            self.timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_timestamp(&mut self, v: u32) {
            self.timestamp = ::std::option::Option::Some(v);
        }

        // optional uint32 account_id = 3;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "audit_action",
                |m: &AuditEntry| { &m.audit_action },
                |m: &mut AuditEntry| { &mut m.audit_action },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "timestamp",
                |m: &AuditEntry| { &m.timestamp },
                |m: &mut AuditEntry| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account_id",
                |m: &AuditEntry| { &m.account_id },
                |m: &mut AuditEntry| { &mut m.account_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuditEntry>(
                "CMsgDOTATeamInfo.AuditEntry",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for AuditEntry {
        const NAME: &'static str = "AuditEntry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.audit_action = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.audit_action {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.timestamp {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.account_id {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.audit_action {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.timestamp {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.account_id {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AuditEntry {
            AuditEntry::new()
        }

        fn clear(&mut self) {
            self.audit_action = ::std::option::Option::None;
            self.timestamp = ::std::option::Option::None;
            self.account_id = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AuditEntry {
            static instance: AuditEntry = AuditEntry {
                audit_action: ::std::option::Option::None,
                timestamp: ::std::option::Option::None,
                account_id: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for AuditEntry {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATeamInfo.AuditEntry").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AuditEntry {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for AuditEntry {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTATeamsInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamsInfo {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamsInfo.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamsInfo.teams)
    pub teams: ::std::vec::Vec<CMsgDOTATeamInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamsInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamsInfo {
    fn default() -> &'a CMsgDOTATeamsInfo {
        <CMsgDOTATeamsInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamsInfo {
    pub fn new() -> CMsgDOTATeamsInfo {
        ::std::default::Default::default()
    }

    // optional uint32 league_id = 1;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "league_id",
            |m: &CMsgDOTATeamsInfo| { &m.league_id },
            |m: &mut CMsgDOTATeamsInfo| { &mut m.league_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "teams",
            |m: &CMsgDOTATeamsInfo| { &m.teams },
            |m: &mut CMsgDOTATeamsInfo| { &mut m.teams },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATeamsInfo>(
            "CMsgDOTATeamsInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATeamsInfo {
    const NAME: &'static str = "CMsgDOTATeamsInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.teams.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.league_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.league_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.teams {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamsInfo {
        CMsgDOTATeamsInfo::new()
    }

    fn clear(&mut self) {
        self.league_id = ::std::option::Option::None;
        self.teams.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamsInfo {
        static instance: CMsgDOTATeamsInfo = CMsgDOTATeamsInfo {
            league_id: ::std::option::Option::None,
            teams: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATeamsInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATeamsInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATeamsInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATeamsInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTATeamInfoList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInfoList {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInfoList.teams)
    pub teams: ::std::vec::Vec<CMsgDOTATeamInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInfoList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInfoList {
    fn default() -> &'a CMsgDOTATeamInfoList {
        <CMsgDOTATeamInfoList as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInfoList {
    pub fn new() -> CMsgDOTATeamInfoList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "teams",
            |m: &CMsgDOTATeamInfoList| { &m.teams },
            |m: &mut CMsgDOTATeamInfoList| { &mut m.teams },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATeamInfoList>(
            "CMsgDOTATeamInfoList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATeamInfoList {
    const NAME: &'static str = "CMsgDOTATeamInfoList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.teams.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.teams {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInfoList {
        CMsgDOTATeamInfoList::new()
    }

    fn clear(&mut self) {
        self.teams.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInfoList {
        static instance: CMsgDOTATeamInfoList = CMsgDOTATeamInfoList {
            teams: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATeamInfoList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATeamInfoList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATeamInfoList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATeamInfoList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAMyTeamInfoRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAMyTeamInfoRequest {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAMyTeamInfoRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAMyTeamInfoRequest {
    fn default() -> &'a CMsgDOTAMyTeamInfoRequest {
        <CMsgDOTAMyTeamInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAMyTeamInfoRequest {
    pub fn new() -> CMsgDOTAMyTeamInfoRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAMyTeamInfoRequest>(
            "CMsgDOTAMyTeamInfoRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAMyTeamInfoRequest {
    const NAME: &'static str = "CMsgDOTAMyTeamInfoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAMyTeamInfoRequest {
        CMsgDOTAMyTeamInfoRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAMyTeamInfoRequest {
        static instance: CMsgDOTAMyTeamInfoRequest = CMsgDOTAMyTeamInfoRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAMyTeamInfoRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAMyTeamInfoRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAMyTeamInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAMyTeamInfoRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTACreateTeam)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTACreateTeam {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeam.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeam.tag)
    pub tag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeam.logo)
    pub logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeam.base_logo)
    pub base_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeam.banner_logo)
    pub banner_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeam.sponsor_logo)
    pub sponsor_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeam.country_code)
    pub country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeam.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeam.pickup_team)
    pub pickup_team: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeam.abbreviation)
    pub abbreviation: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTACreateTeam.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTACreateTeam {
    fn default() -> &'a CMsgDOTACreateTeam {
        <CMsgDOTACreateTeam as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTACreateTeam {
    pub fn new() -> CMsgDOTACreateTeam {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string tag = 2;

    pub fn tag(&self) -> &str {
        match self.tag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_tag(&mut self) {
        self.tag = ::std::option::Option::None;
    }

    pub fn has_tag(&self) -> bool {
        self.tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::std::string::String) {
        self.tag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag(&mut self) -> &mut ::std::string::String {
        if self.tag.is_none() {
            self.tag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_tag(&mut self) -> ::std::string::String {
        self.tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 logo = 3;

    pub fn logo(&self) -> u64 {
        self.logo.unwrap_or(0)
    }

    pub fn clear_logo(&mut self) {
        self.logo = ::std::option::Option::None;
    }

    pub fn has_logo(&self) -> bool {
        self.logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: u64) {
        self.logo = ::std::option::Option::Some(v);
    }

    // optional uint64 base_logo = 4;

    pub fn base_logo(&self) -> u64 {
        self.base_logo.unwrap_or(0)
    }

    pub fn clear_base_logo(&mut self) {
        self.base_logo = ::std::option::Option::None;
    }

    pub fn has_base_logo(&self) -> bool {
        self.base_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_logo(&mut self, v: u64) {
        self.base_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 banner_logo = 5;

    pub fn banner_logo(&self) -> u64 {
        self.banner_logo.unwrap_or(0)
    }

    pub fn clear_banner_logo(&mut self) {
        self.banner_logo = ::std::option::Option::None;
    }

    pub fn has_banner_logo(&self) -> bool {
        self.banner_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_banner_logo(&mut self, v: u64) {
        self.banner_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 sponsor_logo = 6;

    pub fn sponsor_logo(&self) -> u64 {
        self.sponsor_logo.unwrap_or(0)
    }

    pub fn clear_sponsor_logo(&mut self) {
        self.sponsor_logo = ::std::option::Option::None;
    }

    pub fn has_sponsor_logo(&self) -> bool {
        self.sponsor_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sponsor_logo(&mut self, v: u64) {
        self.sponsor_logo = ::std::option::Option::Some(v);
    }

    // optional string country_code = 7;

    pub fn country_code(&self) -> &str {
        match self.country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country_code(&mut self) {
        self.country_code = ::std::option::Option::None;
    }

    pub fn has_country_code(&self) -> bool {
        self.country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        if self.country_code.is_none() {
            self.country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string url = 8;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool pickup_team = 9;

    pub fn pickup_team(&self) -> bool {
        self.pickup_team.unwrap_or(false)
    }

    pub fn clear_pickup_team(&mut self) {
        self.pickup_team = ::std::option::Option::None;
    }

    pub fn has_pickup_team(&self) -> bool {
        self.pickup_team.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pickup_team(&mut self, v: bool) {
        self.pickup_team = ::std::option::Option::Some(v);
    }

    // optional string abbreviation = 10;

    pub fn abbreviation(&self) -> &str {
        match self.abbreviation.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_abbreviation(&mut self) {
        self.abbreviation = ::std::option::Option::None;
    }

    pub fn has_abbreviation(&self) -> bool {
        self.abbreviation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_abbreviation(&mut self, v: ::std::string::String) {
        self.abbreviation = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abbreviation(&mut self) -> &mut ::std::string::String {
        if self.abbreviation.is_none() {
            self.abbreviation = ::std::option::Option::Some(::std::string::String::new());
        }
        self.abbreviation.as_mut().unwrap()
    }

    // Take field
    pub fn take_abbreviation(&mut self) -> ::std::string::String {
        self.abbreviation.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &CMsgDOTACreateTeam| { &m.name },
            |m: &mut CMsgDOTACreateTeam| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tag",
            |m: &CMsgDOTACreateTeam| { &m.tag },
            |m: &mut CMsgDOTACreateTeam| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "logo",
            |m: &CMsgDOTACreateTeam| { &m.logo },
            |m: &mut CMsgDOTACreateTeam| { &mut m.logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "base_logo",
            |m: &CMsgDOTACreateTeam| { &m.base_logo },
            |m: &mut CMsgDOTACreateTeam| { &mut m.base_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "banner_logo",
            |m: &CMsgDOTACreateTeam| { &m.banner_logo },
            |m: &mut CMsgDOTACreateTeam| { &mut m.banner_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sponsor_logo",
            |m: &CMsgDOTACreateTeam| { &m.sponsor_logo },
            |m: &mut CMsgDOTACreateTeam| { &mut m.sponsor_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "country_code",
            |m: &CMsgDOTACreateTeam| { &m.country_code },
            |m: &mut CMsgDOTACreateTeam| { &mut m.country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "url",
            |m: &CMsgDOTACreateTeam| { &m.url },
            |m: &mut CMsgDOTACreateTeam| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pickup_team",
            |m: &CMsgDOTACreateTeam| { &m.pickup_team },
            |m: &mut CMsgDOTACreateTeam| { &mut m.pickup_team },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "abbreviation",
            |m: &CMsgDOTACreateTeam| { &m.abbreviation },
            |m: &mut CMsgDOTACreateTeam| { &mut m.abbreviation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTACreateTeam>(
            "CMsgDOTACreateTeam",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTACreateTeam {
    const NAME: &'static str = "CMsgDOTACreateTeam";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.tag = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.base_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.banner_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.sponsor_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                58 => {
                    self.country_code = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                72 => {
                    self.pickup_team = ::std::option::Option::Some(is.read_bool()?);
                },
                82 => {
                    self.abbreviation = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.tag.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.logo {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.base_logo {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.banner_logo {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.sponsor_logo {
            my_size += ::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.country_code.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.pickup_team {
            my_size += 1 + 1;
        }
        if let Some(v) = self.abbreviation.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.tag.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.logo {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.base_logo {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.banner_logo {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.sponsor_logo {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.country_code.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.pickup_team {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.abbreviation.as_ref() {
            os.write_string(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTACreateTeam {
        CMsgDOTACreateTeam::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.tag = ::std::option::Option::None;
        self.logo = ::std::option::Option::None;
        self.base_logo = ::std::option::Option::None;
        self.banner_logo = ::std::option::Option::None;
        self.sponsor_logo = ::std::option::Option::None;
        self.country_code = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.pickup_team = ::std::option::Option::None;
        self.abbreviation = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTACreateTeam {
        static instance: CMsgDOTACreateTeam = CMsgDOTACreateTeam {
            name: ::std::option::Option::None,
            tag: ::std::option::Option::None,
            logo: ::std::option::Option::None,
            base_logo: ::std::option::Option::None,
            banner_logo: ::std::option::Option::None,
            sponsor_logo: ::std::option::Option::None,
            country_code: ::std::option::Option::None,
            url: ::std::option::Option::None,
            pickup_team: ::std::option::Option::None,
            abbreviation: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTACreateTeam {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTACreateTeam").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTACreateTeam {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTACreateTeam {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTACreateTeamResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTACreateTeamResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeamResponse.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_dotacreate_team_response::Result>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTACreateTeamResponse.team_id)
    pub team_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTACreateTeamResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTACreateTeamResponse {
    fn default() -> &'a CMsgDOTACreateTeamResponse {
        <CMsgDOTACreateTeamResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTACreateTeamResponse {
    pub fn new() -> CMsgDOTACreateTeamResponse {
        ::std::default::Default::default()
    }

    // optional .dota.CMsgDOTACreateTeamResponse.Result result = 1;

    pub fn result(&self) -> cmsg_dotacreate_team_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotacreate_team_response::Result::INVALID),
            None => cmsg_dotacreate_team_response::Result::INVALID,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotacreate_team_response::Result) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgDOTACreateTeamResponse| { &m.result },
            |m: &mut CMsgDOTACreateTeamResponse| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CMsgDOTACreateTeamResponse| { &m.team_id },
            |m: &mut CMsgDOTACreateTeamResponse| { &mut m.team_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTACreateTeamResponse>(
            "CMsgDOTACreateTeamResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTACreateTeamResponse {
    const NAME: &'static str = "CMsgDOTACreateTeamResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTACreateTeamResponse {
        CMsgDOTACreateTeamResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTACreateTeamResponse {
        static instance: CMsgDOTACreateTeamResponse = CMsgDOTACreateTeamResponse {
            result: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTACreateTeamResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTACreateTeamResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTACreateTeamResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTACreateTeamResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTACreateTeamResponse`
pub mod cmsg_dotacreate_team_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgDOTACreateTeamResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.INVALID)
        INVALID = -1,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.NAME_EMPTY)
        NAME_EMPTY = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.NAME_BAD_CHARACTERS)
        NAME_BAD_CHARACTERS = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.NAME_TAKEN)
        NAME_TAKEN = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.NAME_TOO_LONG)
        NAME_TOO_LONG = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.TAG_EMPTY)
        TAG_EMPTY = 5,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.TAG_BAD_CHARACTERS)
        TAG_BAD_CHARACTERS = 6,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.TAG_TAKEN)
        TAG_TAKEN = 7,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.TAG_TOO_LONG)
        TAG_TOO_LONG = 8,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.CREATOR_BUSY)
        CREATOR_BUSY = 9,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.UNSPECIFIED_ERROR)
        UNSPECIFIED_ERROR = 10,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.CREATOR_TEAM_LIMIT_REACHED)
        CREATOR_TEAM_LIMIT_REACHED = 11,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.NO_LOGO)
        NO_LOGO = 12,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.CREATOR_TEAM_CREATION_COOLDOWN)
        CREATOR_TEAM_CREATION_COOLDOWN = 13,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.LOGO_UPLOAD_FAILED)
        LOGO_UPLOAD_FAILED = 14,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.NAME_CHANGED_TOO_RECENTLY)
        NAME_CHANGED_TOO_RECENTLY = 15,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.CREATOR_INSUFFICIENT_LEVEL)
        CREATOR_INSUFFICIENT_LEVEL = 16,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTACreateTeamResponse.Result.INVALID_ACCOUNT_TYPE)
        INVALID_ACCOUNT_TYPE = 17,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                -1 => ::std::option::Option::Some(Result::INVALID),
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::NAME_EMPTY),
                2 => ::std::option::Option::Some(Result::NAME_BAD_CHARACTERS),
                3 => ::std::option::Option::Some(Result::NAME_TAKEN),
                4 => ::std::option::Option::Some(Result::NAME_TOO_LONG),
                5 => ::std::option::Option::Some(Result::TAG_EMPTY),
                6 => ::std::option::Option::Some(Result::TAG_BAD_CHARACTERS),
                7 => ::std::option::Option::Some(Result::TAG_TAKEN),
                8 => ::std::option::Option::Some(Result::TAG_TOO_LONG),
                9 => ::std::option::Option::Some(Result::CREATOR_BUSY),
                10 => ::std::option::Option::Some(Result::UNSPECIFIED_ERROR),
                11 => ::std::option::Option::Some(Result::CREATOR_TEAM_LIMIT_REACHED),
                12 => ::std::option::Option::Some(Result::NO_LOGO),
                13 => ::std::option::Option::Some(Result::CREATOR_TEAM_CREATION_COOLDOWN),
                14 => ::std::option::Option::Some(Result::LOGO_UPLOAD_FAILED),
                15 => ::std::option::Option::Some(Result::NAME_CHANGED_TOO_RECENTLY),
                16 => ::std::option::Option::Some(Result::CREATOR_INSUFFICIENT_LEVEL),
                17 => ::std::option::Option::Some(Result::INVALID_ACCOUNT_TYPE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "INVALID" => ::std::option::Option::Some(Result::INVALID),
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "NAME_EMPTY" => ::std::option::Option::Some(Result::NAME_EMPTY),
                "NAME_BAD_CHARACTERS" => ::std::option::Option::Some(Result::NAME_BAD_CHARACTERS),
                "NAME_TAKEN" => ::std::option::Option::Some(Result::NAME_TAKEN),
                "NAME_TOO_LONG" => ::std::option::Option::Some(Result::NAME_TOO_LONG),
                "TAG_EMPTY" => ::std::option::Option::Some(Result::TAG_EMPTY),
                "TAG_BAD_CHARACTERS" => ::std::option::Option::Some(Result::TAG_BAD_CHARACTERS),
                "TAG_TAKEN" => ::std::option::Option::Some(Result::TAG_TAKEN),
                "TAG_TOO_LONG" => ::std::option::Option::Some(Result::TAG_TOO_LONG),
                "CREATOR_BUSY" => ::std::option::Option::Some(Result::CREATOR_BUSY),
                "UNSPECIFIED_ERROR" => ::std::option::Option::Some(Result::UNSPECIFIED_ERROR),
                "CREATOR_TEAM_LIMIT_REACHED" => ::std::option::Option::Some(Result::CREATOR_TEAM_LIMIT_REACHED),
                "NO_LOGO" => ::std::option::Option::Some(Result::NO_LOGO),
                "CREATOR_TEAM_CREATION_COOLDOWN" => ::std::option::Option::Some(Result::CREATOR_TEAM_CREATION_COOLDOWN),
                "LOGO_UPLOAD_FAILED" => ::std::option::Option::Some(Result::LOGO_UPLOAD_FAILED),
                "NAME_CHANGED_TOO_RECENTLY" => ::std::option::Option::Some(Result::NAME_CHANGED_TOO_RECENTLY),
                "CREATOR_INSUFFICIENT_LEVEL" => ::std::option::Option::Some(Result::CREATOR_INSUFFICIENT_LEVEL),
                "INVALID_ACCOUNT_TYPE" => ::std::option::Option::Some(Result::INVALID_ACCOUNT_TYPE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::INVALID,
            Result::SUCCESS,
            Result::NAME_EMPTY,
            Result::NAME_BAD_CHARACTERS,
            Result::NAME_TAKEN,
            Result::NAME_TOO_LONG,
            Result::TAG_EMPTY,
            Result::TAG_BAD_CHARACTERS,
            Result::TAG_TAKEN,
            Result::TAG_TOO_LONG,
            Result::CREATOR_BUSY,
            Result::UNSPECIFIED_ERROR,
            Result::CREATOR_TEAM_LIMIT_REACHED,
            Result::NO_LOGO,
            Result::CREATOR_TEAM_CREATION_COOLDOWN,
            Result::LOGO_UPLOAD_FAILED,
            Result::NAME_CHANGED_TOO_RECENTLY,
            Result::CREATOR_INSUFFICIENT_LEVEL,
            Result::INVALID_ACCOUNT_TYPE,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgDOTACreateTeamResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Result::INVALID => 0,
                Result::SUCCESS => 1,
                Result::NAME_EMPTY => 2,
                Result::NAME_BAD_CHARACTERS => 3,
                Result::NAME_TAKEN => 4,
                Result::NAME_TOO_LONG => 5,
                Result::TAG_EMPTY => 6,
                Result::TAG_BAD_CHARACTERS => 7,
                Result::TAG_TAKEN => 8,
                Result::TAG_TOO_LONG => 9,
                Result::CREATOR_BUSY => 10,
                Result::UNSPECIFIED_ERROR => 11,
                Result::CREATOR_TEAM_LIMIT_REACHED => 12,
                Result::NO_LOGO => 13,
                Result::CREATOR_TEAM_CREATION_COOLDOWN => 14,
                Result::LOGO_UPLOAD_FAILED => 15,
                Result::NAME_CHANGED_TOO_RECENTLY => 16,
                Result::CREATOR_INSUFFICIENT_LEVEL => 17,
                Result::INVALID_ACCOUNT_TYPE => 18,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::INVALID
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("CMsgDOTACreateTeamResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAEditTeamDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAEditTeamDetails {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.tag)
    pub tag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.logo)
    pub logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.base_logo)
    pub base_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.banner_logo)
    pub banner_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.sponsor_logo)
    pub sponsor_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.country_code)
    pub country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.in_use_by_party)
    pub in_use_by_party: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetails.abbreviation)
    pub abbreviation: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAEditTeamDetails.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAEditTeamDetails {
    fn default() -> &'a CMsgDOTAEditTeamDetails {
        <CMsgDOTAEditTeamDetails as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAEditTeamDetails {
    pub fn new() -> CMsgDOTAEditTeamDetails {
        ::std::default::Default::default()
    }

    // optional uint32 team_id = 1;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string tag = 3;

    pub fn tag(&self) -> &str {
        match self.tag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_tag(&mut self) {
        self.tag = ::std::option::Option::None;
    }

    pub fn has_tag(&self) -> bool {
        self.tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::std::string::String) {
        self.tag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag(&mut self) -> &mut ::std::string::String {
        if self.tag.is_none() {
            self.tag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_tag(&mut self) -> ::std::string::String {
        self.tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 logo = 4;

    pub fn logo(&self) -> u64 {
        self.logo.unwrap_or(0)
    }

    pub fn clear_logo(&mut self) {
        self.logo = ::std::option::Option::None;
    }

    pub fn has_logo(&self) -> bool {
        self.logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: u64) {
        self.logo = ::std::option::Option::Some(v);
    }

    // optional uint64 base_logo = 5;

    pub fn base_logo(&self) -> u64 {
        self.base_logo.unwrap_or(0)
    }

    pub fn clear_base_logo(&mut self) {
        self.base_logo = ::std::option::Option::None;
    }

    pub fn has_base_logo(&self) -> bool {
        self.base_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_logo(&mut self, v: u64) {
        self.base_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 banner_logo = 6;

    pub fn banner_logo(&self) -> u64 {
        self.banner_logo.unwrap_or(0)
    }

    pub fn clear_banner_logo(&mut self) {
        self.banner_logo = ::std::option::Option::None;
    }

    pub fn has_banner_logo(&self) -> bool {
        self.banner_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_banner_logo(&mut self, v: u64) {
        self.banner_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 sponsor_logo = 7;

    pub fn sponsor_logo(&self) -> u64 {
        self.sponsor_logo.unwrap_or(0)
    }

    pub fn clear_sponsor_logo(&mut self) {
        self.sponsor_logo = ::std::option::Option::None;
    }

    pub fn has_sponsor_logo(&self) -> bool {
        self.sponsor_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sponsor_logo(&mut self, v: u64) {
        self.sponsor_logo = ::std::option::Option::Some(v);
    }

    // optional string country_code = 8;

    pub fn country_code(&self) -> &str {
        match self.country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country_code(&mut self) {
        self.country_code = ::std::option::Option::None;
    }

    pub fn has_country_code(&self) -> bool {
        self.country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        if self.country_code.is_none() {
            self.country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string url = 9;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool in_use_by_party = 10;

    pub fn in_use_by_party(&self) -> bool {
        self.in_use_by_party.unwrap_or(false)
    }

    pub fn clear_in_use_by_party(&mut self) {
        self.in_use_by_party = ::std::option::Option::None;
    }

    pub fn has_in_use_by_party(&self) -> bool {
        self.in_use_by_party.is_some()
    }

    // Param is passed by value, moved
    pub fn set_in_use_by_party(&mut self, v: bool) {
        self.in_use_by_party = ::std::option::Option::Some(v);
    }

    // optional string abbreviation = 11;

    pub fn abbreviation(&self) -> &str {
        match self.abbreviation.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_abbreviation(&mut self) {
        self.abbreviation = ::std::option::Option::None;
    }

    pub fn has_abbreviation(&self) -> bool {
        self.abbreviation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_abbreviation(&mut self, v: ::std::string::String) {
        self.abbreviation = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abbreviation(&mut self) -> &mut ::std::string::String {
        if self.abbreviation.is_none() {
            self.abbreviation = ::std::option::Option::Some(::std::string::String::new());
        }
        self.abbreviation.as_mut().unwrap()
    }

    // Take field
    pub fn take_abbreviation(&mut self) -> ::std::string::String {
        self.abbreviation.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CMsgDOTAEditTeamDetails| { &m.team_id },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.team_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &CMsgDOTAEditTeamDetails| { &m.name },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tag",
            |m: &CMsgDOTAEditTeamDetails| { &m.tag },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "logo",
            |m: &CMsgDOTAEditTeamDetails| { &m.logo },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "base_logo",
            |m: &CMsgDOTAEditTeamDetails| { &m.base_logo },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.base_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "banner_logo",
            |m: &CMsgDOTAEditTeamDetails| { &m.banner_logo },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.banner_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sponsor_logo",
            |m: &CMsgDOTAEditTeamDetails| { &m.sponsor_logo },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.sponsor_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "country_code",
            |m: &CMsgDOTAEditTeamDetails| { &m.country_code },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "url",
            |m: &CMsgDOTAEditTeamDetails| { &m.url },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "in_use_by_party",
            |m: &CMsgDOTAEditTeamDetails| { &m.in_use_by_party },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.in_use_by_party },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "abbreviation",
            |m: &CMsgDOTAEditTeamDetails| { &m.abbreviation },
            |m: &mut CMsgDOTAEditTeamDetails| { &mut m.abbreviation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAEditTeamDetails>(
            "CMsgDOTAEditTeamDetails",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAEditTeamDetails {
    const NAME: &'static str = "CMsgDOTAEditTeamDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.tag = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.base_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.banner_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.sponsor_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                66 => {
                    self.country_code = ::std::option::Option::Some(is.read_string()?);
                },
                74 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                80 => {
                    self.in_use_by_party = ::std::option::Option::Some(is.read_bool()?);
                },
                90 => {
                    self.abbreviation = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.tag.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.logo {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.base_logo {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.banner_logo {
            my_size += ::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.sponsor_logo {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        if let Some(v) = self.country_code.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.in_use_by_party {
            my_size += 1 + 1;
        }
        if let Some(v) = self.abbreviation.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.team_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.tag.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.logo {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.base_logo {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.banner_logo {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.sponsor_logo {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.country_code.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.in_use_by_party {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.abbreviation.as_ref() {
            os.write_string(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAEditTeamDetails {
        CMsgDOTAEditTeamDetails::new()
    }

    fn clear(&mut self) {
        self.team_id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.tag = ::std::option::Option::None;
        self.logo = ::std::option::Option::None;
        self.base_logo = ::std::option::Option::None;
        self.banner_logo = ::std::option::Option::None;
        self.sponsor_logo = ::std::option::Option::None;
        self.country_code = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.in_use_by_party = ::std::option::Option::None;
        self.abbreviation = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAEditTeamDetails {
        static instance: CMsgDOTAEditTeamDetails = CMsgDOTAEditTeamDetails {
            team_id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            tag: ::std::option::Option::None,
            logo: ::std::option::Option::None,
            base_logo: ::std::option::Option::None,
            banner_logo: ::std::option::Option::None,
            sponsor_logo: ::std::option::Option::None,
            country_code: ::std::option::Option::None,
            url: ::std::option::Option::None,
            in_use_by_party: ::std::option::Option::None,
            abbreviation: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAEditTeamDetails {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAEditTeamDetails").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAEditTeamDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAEditTeamDetails {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAEditTeamDetailsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAEditTeamDetailsResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAEditTeamDetailsResponse.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_dotaedit_team_details_response::Result>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAEditTeamDetailsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAEditTeamDetailsResponse {
    fn default() -> &'a CMsgDOTAEditTeamDetailsResponse {
        <CMsgDOTAEditTeamDetailsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAEditTeamDetailsResponse {
    pub fn new() -> CMsgDOTAEditTeamDetailsResponse {
        ::std::default::Default::default()
    }

    // optional .dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1;

    pub fn result(&self) -> cmsg_dotaedit_team_details_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotaedit_team_details_response::Result::SUCCESS),
            None => cmsg_dotaedit_team_details_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotaedit_team_details_response::Result) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgDOTAEditTeamDetailsResponse| { &m.result },
            |m: &mut CMsgDOTAEditTeamDetailsResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAEditTeamDetailsResponse>(
            "CMsgDOTAEditTeamDetailsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAEditTeamDetailsResponse {
    const NAME: &'static str = "CMsgDOTAEditTeamDetailsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAEditTeamDetailsResponse {
        CMsgDOTAEditTeamDetailsResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAEditTeamDetailsResponse {
        static instance: CMsgDOTAEditTeamDetailsResponse = CMsgDOTAEditTeamDetailsResponse {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAEditTeamDetailsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAEditTeamDetailsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAEditTeamDetailsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAEditTeamDetailsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTAEditTeamDetailsResponse`
pub mod cmsg_dotaedit_team_details_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgDOTAEditTeamDetailsResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAEditTeamDetailsResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAEditTeamDetailsResponse.Result.FAILURE_INVALID_ACCOUNT_TYPE)
        FAILURE_INVALID_ACCOUNT_TYPE = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAEditTeamDetailsResponse.Result.FAILURE_NOT_MEMBER)
        FAILURE_NOT_MEMBER = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAEditTeamDetailsResponse.Result.FAILURE_TEAM_LOCKED)
        FAILURE_TEAM_LOCKED = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAEditTeamDetailsResponse.Result.FAILURE_UNSPECIFIED_ERROR)
        FAILURE_UNSPECIFIED_ERROR = 4,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                2 => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                3 => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                4 => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "FAILURE_INVALID_ACCOUNT_TYPE" => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                "FAILURE_NOT_MEMBER" => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                "FAILURE_TEAM_LOCKED" => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                "FAILURE_UNSPECIFIED_ERROR" => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::FAILURE_INVALID_ACCOUNT_TYPE,
            Result::FAILURE_NOT_MEMBER,
            Result::FAILURE_TEAM_LOCKED,
            Result::FAILURE_UNSPECIFIED_ERROR,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgDOTAEditTeamDetailsResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("CMsgDOTAEditTeamDetailsResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTATeamInvite_InviterToGC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_InviterToGC {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_InviterToGC.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_InviterToGC.team_id)
    pub team_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInvite_InviterToGC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_InviterToGC {
    fn default() -> &'a CMsgDOTATeamInvite_InviterToGC {
        <CMsgDOTATeamInvite_InviterToGC as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_InviterToGC {
    pub fn new() -> CMsgDOTATeamInvite_InviterToGC {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CMsgDOTATeamInvite_InviterToGC| { &m.account_id },
            |m: &mut CMsgDOTATeamInvite_InviterToGC| { &mut m.account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CMsgDOTATeamInvite_InviterToGC| { &m.team_id },
            |m: &mut CMsgDOTATeamInvite_InviterToGC| { &mut m.team_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATeamInvite_InviterToGC>(
            "CMsgDOTATeamInvite_InviterToGC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATeamInvite_InviterToGC {
    const NAME: &'static str = "CMsgDOTATeamInvite_InviterToGC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_InviterToGC {
        CMsgDOTATeamInvite_InviterToGC::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_InviterToGC {
        static instance: CMsgDOTATeamInvite_InviterToGC = CMsgDOTATeamInvite_InviterToGC {
            account_id: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATeamInvite_InviterToGC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATeamInvite_InviterToGC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATeamInvite_InviterToGC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATeamInvite_InviterToGC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<ETeamInviteResult>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
    pub invitee_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.required_play_time)
    pub required_play_time: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    fn default() -> &'a CMsgDOTATeamInvite_GCImmediateResponseToInviter {
        <CMsgDOTATeamInvite_GCImmediateResponseToInviter as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    pub fn new() -> CMsgDOTATeamInvite_GCImmediateResponseToInviter {
        ::std::default::Default::default()
    }

    // optional .dota.ETeamInviteResult result = 1;

    pub fn result(&self) -> ETeamInviteResult {
        match self.result {
            Some(e) => e.enum_value_or(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            None => ETeamInviteResult::TEAM_INVITE_SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ETeamInviteResult) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string invitee_name = 2;

    pub fn invitee_name(&self) -> &str {
        match self.invitee_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitee_name(&mut self) {
        self.invitee_name = ::std::option::Option::None;
    }

    pub fn has_invitee_name(&self) -> bool {
        self.invitee_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitee_name(&mut self, v: ::std::string::String) {
        self.invitee_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitee_name(&mut self) -> &mut ::std::string::String {
        if self.invitee_name.is_none() {
            self.invitee_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitee_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitee_name(&mut self) -> ::std::string::String {
        self.invitee_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 required_play_time = 3;

    pub fn required_play_time(&self) -> u32 {
        self.required_play_time.unwrap_or(0)
    }

    pub fn clear_required_play_time(&mut self) {
        self.required_play_time = ::std::option::Option::None;
    }

    pub fn has_required_play_time(&self) -> bool {
        self.required_play_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required_play_time(&mut self, v: u32) {
        self.required_play_time = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgDOTATeamInvite_GCImmediateResponseToInviter| { &m.result },
            |m: &mut CMsgDOTATeamInvite_GCImmediateResponseToInviter| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "invitee_name",
            |m: &CMsgDOTATeamInvite_GCImmediateResponseToInviter| { &m.invitee_name },
            |m: &mut CMsgDOTATeamInvite_GCImmediateResponseToInviter| { &mut m.invitee_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "required_play_time",
            |m: &CMsgDOTATeamInvite_GCImmediateResponseToInviter| { &m.required_play_time },
            |m: &mut CMsgDOTATeamInvite_GCImmediateResponseToInviter| { &mut m.required_play_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATeamInvite_GCImmediateResponseToInviter>(
            "CMsgDOTATeamInvite_GCImmediateResponseToInviter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    const NAME: &'static str = "CMsgDOTATeamInvite_GCImmediateResponseToInviter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.invitee_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.required_play_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.invitee_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.required_play_time {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.invitee_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.required_play_time {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_GCImmediateResponseToInviter {
        CMsgDOTATeamInvite_GCImmediateResponseToInviter::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.invitee_name = ::std::option::Option::None;
        self.required_play_time = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_GCImmediateResponseToInviter {
        static instance: CMsgDOTATeamInvite_GCImmediateResponseToInviter = CMsgDOTATeamInvite_GCImmediateResponseToInviter {
            result: ::std::option::Option::None,
            invitee_name: ::std::option::Option::None,
            required_play_time: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATeamInvite_GCImmediateResponseToInviter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATeamInvite_GCImmediateResponseToInviter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTATeamInvite_GCRequestToInvitee)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_GCRequestToInvitee {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCRequestToInvitee.inviter_account_id)
    pub inviter_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
    pub team_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
    pub team_tag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCRequestToInvitee.logo)
    pub logo: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInvite_GCRequestToInvitee.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_GCRequestToInvitee {
    fn default() -> &'a CMsgDOTATeamInvite_GCRequestToInvitee {
        <CMsgDOTATeamInvite_GCRequestToInvitee as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_GCRequestToInvitee {
    pub fn new() -> CMsgDOTATeamInvite_GCRequestToInvitee {
        ::std::default::Default::default()
    }

    // optional uint32 inviter_account_id = 1;

    pub fn inviter_account_id(&self) -> u32 {
        self.inviter_account_id.unwrap_or(0)
    }

    pub fn clear_inviter_account_id(&mut self) {
        self.inviter_account_id = ::std::option::Option::None;
    }

    pub fn has_inviter_account_id(&self) -> bool {
        self.inviter_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inviter_account_id(&mut self, v: u32) {
        self.inviter_account_id = ::std::option::Option::Some(v);
    }

    // optional string team_name = 2;

    pub fn team_name(&self) -> &str {
        match self.team_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name(&mut self) {
        self.team_name = ::std::option::Option::None;
    }

    pub fn has_team_name(&self) -> bool {
        self.team_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name(&mut self, v: ::std::string::String) {
        self.team_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
        if self.team_name.is_none() {
            self.team_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name(&mut self) -> ::std::string::String {
        self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string team_tag = 3;

    pub fn team_tag(&self) -> &str {
        match self.team_tag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_tag(&mut self) {
        self.team_tag = ::std::option::Option::None;
    }

    pub fn has_team_tag(&self) -> bool {
        self.team_tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_tag(&mut self, v: ::std::string::String) {
        self.team_tag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_tag(&mut self) -> &mut ::std::string::String {
        if self.team_tag.is_none() {
            self.team_tag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_tag(&mut self) -> ::std::string::String {
        self.team_tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 logo = 4;

    pub fn logo(&self) -> u64 {
        self.logo.unwrap_or(0)
    }

    pub fn clear_logo(&mut self) {
        self.logo = ::std::option::Option::None;
    }

    pub fn has_logo(&self) -> bool {
        self.logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: u64) {
        self.logo = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "inviter_account_id",
            |m: &CMsgDOTATeamInvite_GCRequestToInvitee| { &m.inviter_account_id },
            |m: &mut CMsgDOTATeamInvite_GCRequestToInvitee| { &mut m.inviter_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_name",
            |m: &CMsgDOTATeamInvite_GCRequestToInvitee| { &m.team_name },
            |m: &mut CMsgDOTATeamInvite_GCRequestToInvitee| { &mut m.team_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_tag",
            |m: &CMsgDOTATeamInvite_GCRequestToInvitee| { &m.team_tag },
            |m: &mut CMsgDOTATeamInvite_GCRequestToInvitee| { &mut m.team_tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "logo",
            |m: &CMsgDOTATeamInvite_GCRequestToInvitee| { &m.logo },
            |m: &mut CMsgDOTATeamInvite_GCRequestToInvitee| { &mut m.logo },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATeamInvite_GCRequestToInvitee>(
            "CMsgDOTATeamInvite_GCRequestToInvitee",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATeamInvite_GCRequestToInvitee {
    const NAME: &'static str = "CMsgDOTATeamInvite_GCRequestToInvitee";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.inviter_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.team_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.team_tag = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.inviter_account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.team_tag.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.logo {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.inviter_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.team_tag.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.logo {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_GCRequestToInvitee {
        CMsgDOTATeamInvite_GCRequestToInvitee::new()
    }

    fn clear(&mut self) {
        self.inviter_account_id = ::std::option::Option::None;
        self.team_name = ::std::option::Option::None;
        self.team_tag = ::std::option::Option::None;
        self.logo = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_GCRequestToInvitee {
        static instance: CMsgDOTATeamInvite_GCRequestToInvitee = CMsgDOTATeamInvite_GCRequestToInvitee {
            inviter_account_id: ::std::option::Option::None,
            team_name: ::std::option::Option::None,
            team_tag: ::std::option::Option::None,
            logo: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATeamInvite_GCRequestToInvitee {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATeamInvite_GCRequestToInvitee").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATeamInvite_GCRequestToInvitee {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATeamInvite_GCRequestToInvitee {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTATeamInvite_InviteeResponseToGC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_InviteeResponseToGC {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_InviteeResponseToGC.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<ETeamInviteResult>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInvite_InviteeResponseToGC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_InviteeResponseToGC {
    fn default() -> &'a CMsgDOTATeamInvite_InviteeResponseToGC {
        <CMsgDOTATeamInvite_InviteeResponseToGC as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_InviteeResponseToGC {
    pub fn new() -> CMsgDOTATeamInvite_InviteeResponseToGC {
        ::std::default::Default::default()
    }

    // optional .dota.ETeamInviteResult result = 1;

    pub fn result(&self) -> ETeamInviteResult {
        match self.result {
            Some(e) => e.enum_value_or(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            None => ETeamInviteResult::TEAM_INVITE_SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ETeamInviteResult) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgDOTATeamInvite_InviteeResponseToGC| { &m.result },
            |m: &mut CMsgDOTATeamInvite_InviteeResponseToGC| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATeamInvite_InviteeResponseToGC>(
            "CMsgDOTATeamInvite_InviteeResponseToGC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATeamInvite_InviteeResponseToGC {
    const NAME: &'static str = "CMsgDOTATeamInvite_InviteeResponseToGC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_InviteeResponseToGC {
        CMsgDOTATeamInvite_InviteeResponseToGC::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_InviteeResponseToGC {
        static instance: CMsgDOTATeamInvite_InviteeResponseToGC = CMsgDOTATeamInvite_InviteeResponseToGC {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATeamInvite_InviteeResponseToGC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATeamInvite_InviteeResponseToGC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATeamInvite_InviteeResponseToGC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATeamInvite_InviteeResponseToGC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTATeamInvite_GCResponseToInviter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_GCResponseToInviter {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCResponseToInviter.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<ETeamInviteResult>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
    pub invitee_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInvite_GCResponseToInviter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_GCResponseToInviter {
    fn default() -> &'a CMsgDOTATeamInvite_GCResponseToInviter {
        <CMsgDOTATeamInvite_GCResponseToInviter as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_GCResponseToInviter {
    pub fn new() -> CMsgDOTATeamInvite_GCResponseToInviter {
        ::std::default::Default::default()
    }

    // optional .dota.ETeamInviteResult result = 1;

    pub fn result(&self) -> ETeamInviteResult {
        match self.result {
            Some(e) => e.enum_value_or(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            None => ETeamInviteResult::TEAM_INVITE_SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ETeamInviteResult) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string invitee_name = 2;

    pub fn invitee_name(&self) -> &str {
        match self.invitee_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitee_name(&mut self) {
        self.invitee_name = ::std::option::Option::None;
    }

    pub fn has_invitee_name(&self) -> bool {
        self.invitee_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitee_name(&mut self, v: ::std::string::String) {
        self.invitee_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitee_name(&mut self) -> &mut ::std::string::String {
        if self.invitee_name.is_none() {
            self.invitee_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitee_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitee_name(&mut self) -> ::std::string::String {
        self.invitee_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgDOTATeamInvite_GCResponseToInviter| { &m.result },
            |m: &mut CMsgDOTATeamInvite_GCResponseToInviter| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "invitee_name",
            |m: &CMsgDOTATeamInvite_GCResponseToInviter| { &m.invitee_name },
            |m: &mut CMsgDOTATeamInvite_GCResponseToInviter| { &mut m.invitee_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATeamInvite_GCResponseToInviter>(
            "CMsgDOTATeamInvite_GCResponseToInviter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATeamInvite_GCResponseToInviter {
    const NAME: &'static str = "CMsgDOTATeamInvite_GCResponseToInviter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.invitee_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.invitee_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.invitee_name.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_GCResponseToInviter {
        CMsgDOTATeamInvite_GCResponseToInviter::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.invitee_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_GCResponseToInviter {
        static instance: CMsgDOTATeamInvite_GCResponseToInviter = CMsgDOTATeamInvite_GCResponseToInviter {
            result: ::std::option::Option::None,
            invitee_name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATeamInvite_GCResponseToInviter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATeamInvite_GCResponseToInviter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATeamInvite_GCResponseToInviter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATeamInvite_GCResponseToInviter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTATeamInvite_GCResponseToInvitee)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamInvite_GCResponseToInvitee {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCResponseToInvitee.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<ETeamInviteResult>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
    pub team_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamInvite_GCResponseToInvitee.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamInvite_GCResponseToInvitee {
    fn default() -> &'a CMsgDOTATeamInvite_GCResponseToInvitee {
        <CMsgDOTATeamInvite_GCResponseToInvitee as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamInvite_GCResponseToInvitee {
    pub fn new() -> CMsgDOTATeamInvite_GCResponseToInvitee {
        ::std::default::Default::default()
    }

    // optional .dota.ETeamInviteResult result = 1;

    pub fn result(&self) -> ETeamInviteResult {
        match self.result {
            Some(e) => e.enum_value_or(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            None => ETeamInviteResult::TEAM_INVITE_SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ETeamInviteResult) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string team_name = 2;

    pub fn team_name(&self) -> &str {
        match self.team_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name(&mut self) {
        self.team_name = ::std::option::Option::None;
    }

    pub fn has_team_name(&self) -> bool {
        self.team_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name(&mut self, v: ::std::string::String) {
        self.team_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
        if self.team_name.is_none() {
            self.team_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name(&mut self) -> ::std::string::String {
        self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgDOTATeamInvite_GCResponseToInvitee| { &m.result },
            |m: &mut CMsgDOTATeamInvite_GCResponseToInvitee| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_name",
            |m: &CMsgDOTATeamInvite_GCResponseToInvitee| { &m.team_name },
            |m: &mut CMsgDOTATeamInvite_GCResponseToInvitee| { &mut m.team_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATeamInvite_GCResponseToInvitee>(
            "CMsgDOTATeamInvite_GCResponseToInvitee",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATeamInvite_GCResponseToInvitee {
    const NAME: &'static str = "CMsgDOTATeamInvite_GCResponseToInvitee";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.team_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.team_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.team_name.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamInvite_GCResponseToInvitee {
        CMsgDOTATeamInvite_GCResponseToInvitee::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.team_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamInvite_GCResponseToInvitee {
        static instance: CMsgDOTATeamInvite_GCResponseToInvitee = CMsgDOTATeamInvite_GCResponseToInvitee {
            result: ::std::option::Option::None,
            team_name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATeamInvite_GCResponseToInvitee {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATeamInvite_GCResponseToInvitee").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATeamInvite_GCResponseToInvitee {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATeamInvite_GCResponseToInvitee {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAKickTeamMember)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAKickTeamMember {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAKickTeamMember.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAKickTeamMember.team_id)
    pub team_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAKickTeamMember.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAKickTeamMember {
    fn default() -> &'a CMsgDOTAKickTeamMember {
        <CMsgDOTAKickTeamMember as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAKickTeamMember {
    pub fn new() -> CMsgDOTAKickTeamMember {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CMsgDOTAKickTeamMember| { &m.account_id },
            |m: &mut CMsgDOTAKickTeamMember| { &mut m.account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CMsgDOTAKickTeamMember| { &m.team_id },
            |m: &mut CMsgDOTAKickTeamMember| { &mut m.team_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAKickTeamMember>(
            "CMsgDOTAKickTeamMember",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAKickTeamMember {
    const NAME: &'static str = "CMsgDOTAKickTeamMember";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAKickTeamMember {
        CMsgDOTAKickTeamMember::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAKickTeamMember {
        static instance: CMsgDOTAKickTeamMember = CMsgDOTAKickTeamMember {
            account_id: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAKickTeamMember {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAKickTeamMember").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAKickTeamMember {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAKickTeamMember {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAKickTeamMemberResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAKickTeamMemberResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAKickTeamMemberResponse.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_dotakick_team_member_response::Result>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAKickTeamMemberResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAKickTeamMemberResponse {
    fn default() -> &'a CMsgDOTAKickTeamMemberResponse {
        <CMsgDOTAKickTeamMemberResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAKickTeamMemberResponse {
    pub fn new() -> CMsgDOTAKickTeamMemberResponse {
        ::std::default::Default::default()
    }

    // optional .dota.CMsgDOTAKickTeamMemberResponse.Result result = 1;

    pub fn result(&self) -> cmsg_dotakick_team_member_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotakick_team_member_response::Result::SUCCESS),
            None => cmsg_dotakick_team_member_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotakick_team_member_response::Result) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgDOTAKickTeamMemberResponse| { &m.result },
            |m: &mut CMsgDOTAKickTeamMemberResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAKickTeamMemberResponse>(
            "CMsgDOTAKickTeamMemberResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAKickTeamMemberResponse {
    const NAME: &'static str = "CMsgDOTAKickTeamMemberResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAKickTeamMemberResponse {
        CMsgDOTAKickTeamMemberResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAKickTeamMemberResponse {
        static instance: CMsgDOTAKickTeamMemberResponse = CMsgDOTAKickTeamMemberResponse {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAKickTeamMemberResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAKickTeamMemberResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAKickTeamMemberResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAKickTeamMemberResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTAKickTeamMemberResponse`
pub mod cmsg_dotakick_team_member_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgDOTAKickTeamMemberResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAKickTeamMemberResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAKickTeamMemberResponse.Result.FAILURE_INVALID_ACCOUNT_TYPE)
        FAILURE_INVALID_ACCOUNT_TYPE = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAKickTeamMemberResponse.Result.FAILURE_KICKER_NOT_ADMIN)
        FAILURE_KICKER_NOT_ADMIN = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAKickTeamMemberResponse.Result.FAILURE_KICKEE_NOT_MEMBER)
        FAILURE_KICKEE_NOT_MEMBER = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAKickTeamMemberResponse.Result.FAILURE_TEAM_LOCKED)
        FAILURE_TEAM_LOCKED = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAKickTeamMemberResponse.Result.FAILURE_UNSPECIFIED_ERROR)
        FAILURE_UNSPECIFIED_ERROR = 5,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                2 => ::std::option::Option::Some(Result::FAILURE_KICKER_NOT_ADMIN),
                3 => ::std::option::Option::Some(Result::FAILURE_KICKEE_NOT_MEMBER),
                4 => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                5 => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "FAILURE_INVALID_ACCOUNT_TYPE" => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                "FAILURE_KICKER_NOT_ADMIN" => ::std::option::Option::Some(Result::FAILURE_KICKER_NOT_ADMIN),
                "FAILURE_KICKEE_NOT_MEMBER" => ::std::option::Option::Some(Result::FAILURE_KICKEE_NOT_MEMBER),
                "FAILURE_TEAM_LOCKED" => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                "FAILURE_UNSPECIFIED_ERROR" => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::FAILURE_INVALID_ACCOUNT_TYPE,
            Result::FAILURE_KICKER_NOT_ADMIN,
            Result::FAILURE_KICKEE_NOT_MEMBER,
            Result::FAILURE_TEAM_LOCKED,
            Result::FAILURE_UNSPECIFIED_ERROR,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgDOTAKickTeamMemberResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("CMsgDOTAKickTeamMemberResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTATransferTeamAdmin)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATransferTeamAdmin {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATransferTeamAdmin.new_admin_account_id)
    pub new_admin_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATransferTeamAdmin.team_id)
    pub team_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATransferTeamAdmin.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATransferTeamAdmin {
    fn default() -> &'a CMsgDOTATransferTeamAdmin {
        <CMsgDOTATransferTeamAdmin as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATransferTeamAdmin {
    pub fn new() -> CMsgDOTATransferTeamAdmin {
        ::std::default::Default::default()
    }

    // optional uint32 new_admin_account_id = 1;

    pub fn new_admin_account_id(&self) -> u32 {
        self.new_admin_account_id.unwrap_or(0)
    }

    pub fn clear_new_admin_account_id(&mut self) {
        self.new_admin_account_id = ::std::option::Option::None;
    }

    pub fn has_new_admin_account_id(&self) -> bool {
        self.new_admin_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_admin_account_id(&mut self, v: u32) {
        self.new_admin_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_admin_account_id",
            |m: &CMsgDOTATransferTeamAdmin| { &m.new_admin_account_id },
            |m: &mut CMsgDOTATransferTeamAdmin| { &mut m.new_admin_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CMsgDOTATransferTeamAdmin| { &m.team_id },
            |m: &mut CMsgDOTATransferTeamAdmin| { &mut m.team_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATransferTeamAdmin>(
            "CMsgDOTATransferTeamAdmin",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATransferTeamAdmin {
    const NAME: &'static str = "CMsgDOTATransferTeamAdmin";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.new_admin_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.new_admin_account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.new_admin_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATransferTeamAdmin {
        CMsgDOTATransferTeamAdmin::new()
    }

    fn clear(&mut self) {
        self.new_admin_account_id = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATransferTeamAdmin {
        static instance: CMsgDOTATransferTeamAdmin = CMsgDOTATransferTeamAdmin {
            new_admin_account_id: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATransferTeamAdmin {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATransferTeamAdmin").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATransferTeamAdmin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATransferTeamAdmin {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTATransferTeamAdminResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATransferTeamAdminResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATransferTeamAdminResponse.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_dotatransfer_team_admin_response::Result>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATransferTeamAdminResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATransferTeamAdminResponse {
    fn default() -> &'a CMsgDOTATransferTeamAdminResponse {
        <CMsgDOTATransferTeamAdminResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATransferTeamAdminResponse {
    pub fn new() -> CMsgDOTATransferTeamAdminResponse {
        ::std::default::Default::default()
    }

    // optional .dota.CMsgDOTATransferTeamAdminResponse.Result result = 1;

    pub fn result(&self) -> cmsg_dotatransfer_team_admin_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotatransfer_team_admin_response::Result::SUCCESS),
            None => cmsg_dotatransfer_team_admin_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotatransfer_team_admin_response::Result) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgDOTATransferTeamAdminResponse| { &m.result },
            |m: &mut CMsgDOTATransferTeamAdminResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATransferTeamAdminResponse>(
            "CMsgDOTATransferTeamAdminResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATransferTeamAdminResponse {
    const NAME: &'static str = "CMsgDOTATransferTeamAdminResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATransferTeamAdminResponse {
        CMsgDOTATransferTeamAdminResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATransferTeamAdminResponse {
        static instance: CMsgDOTATransferTeamAdminResponse = CMsgDOTATransferTeamAdminResponse {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATransferTeamAdminResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATransferTeamAdminResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATransferTeamAdminResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATransferTeamAdminResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTATransferTeamAdminResponse`
pub mod cmsg_dotatransfer_team_admin_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgDOTATransferTeamAdminResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTATransferTeamAdminResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTATransferTeamAdminResponse.Result.FAILURE_INVALID_ACCOUNT_TYPE)
        FAILURE_INVALID_ACCOUNT_TYPE = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTATransferTeamAdminResponse.Result.FAILURE_NOT_ADMIN)
        FAILURE_NOT_ADMIN = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTATransferTeamAdminResponse.Result.FAILURE_SAME_ACCOUNT)
        FAILURE_SAME_ACCOUNT = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTATransferTeamAdminResponse.Result.FAILURE_NOT_MEMBER)
        FAILURE_NOT_MEMBER = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTATransferTeamAdminResponse.Result.FAILURE_UNSPECIFIED_ERROR)
        FAILURE_UNSPECIFIED_ERROR = 5,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                2 => ::std::option::Option::Some(Result::FAILURE_NOT_ADMIN),
                3 => ::std::option::Option::Some(Result::FAILURE_SAME_ACCOUNT),
                4 => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                5 => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "FAILURE_INVALID_ACCOUNT_TYPE" => ::std::option::Option::Some(Result::FAILURE_INVALID_ACCOUNT_TYPE),
                "FAILURE_NOT_ADMIN" => ::std::option::Option::Some(Result::FAILURE_NOT_ADMIN),
                "FAILURE_SAME_ACCOUNT" => ::std::option::Option::Some(Result::FAILURE_SAME_ACCOUNT),
                "FAILURE_NOT_MEMBER" => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                "FAILURE_UNSPECIFIED_ERROR" => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::FAILURE_INVALID_ACCOUNT_TYPE,
            Result::FAILURE_NOT_ADMIN,
            Result::FAILURE_SAME_ACCOUNT,
            Result::FAILURE_NOT_MEMBER,
            Result::FAILURE_UNSPECIFIED_ERROR,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgDOTATransferTeamAdminResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("CMsgDOTATransferTeamAdminResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTALeaveTeam)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTALeaveTeam {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTALeaveTeam.team_id)
    pub team_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTALeaveTeam.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTALeaveTeam {
    fn default() -> &'a CMsgDOTALeaveTeam {
        <CMsgDOTALeaveTeam as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTALeaveTeam {
    pub fn new() -> CMsgDOTALeaveTeam {
        ::std::default::Default::default()
    }

    // optional uint32 team_id = 1;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CMsgDOTALeaveTeam| { &m.team_id },
            |m: &mut CMsgDOTALeaveTeam| { &mut m.team_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTALeaveTeam>(
            "CMsgDOTALeaveTeam",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTALeaveTeam {
    const NAME: &'static str = "CMsgDOTALeaveTeam";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.team_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTALeaveTeam {
        CMsgDOTALeaveTeam::new()
    }

    fn clear(&mut self) {
        self.team_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTALeaveTeam {
        static instance: CMsgDOTALeaveTeam = CMsgDOTALeaveTeam {
            team_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTALeaveTeam {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTALeaveTeam").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTALeaveTeam {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTALeaveTeam {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTALeaveTeamResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTALeaveTeamResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTALeaveTeamResponse.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_dotaleave_team_response::Result>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTALeaveTeamResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTALeaveTeamResponse {
    fn default() -> &'a CMsgDOTALeaveTeamResponse {
        <CMsgDOTALeaveTeamResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTALeaveTeamResponse {
    pub fn new() -> CMsgDOTALeaveTeamResponse {
        ::std::default::Default::default()
    }

    // optional .dota.CMsgDOTALeaveTeamResponse.Result result = 1;

    pub fn result(&self) -> cmsg_dotaleave_team_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotaleave_team_response::Result::SUCCESS),
            None => cmsg_dotaleave_team_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotaleave_team_response::Result) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgDOTALeaveTeamResponse| { &m.result },
            |m: &mut CMsgDOTALeaveTeamResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTALeaveTeamResponse>(
            "CMsgDOTALeaveTeamResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTALeaveTeamResponse {
    const NAME: &'static str = "CMsgDOTALeaveTeamResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTALeaveTeamResponse {
        CMsgDOTALeaveTeamResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTALeaveTeamResponse {
        static instance: CMsgDOTALeaveTeamResponse = CMsgDOTALeaveTeamResponse {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTALeaveTeamResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTALeaveTeamResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTALeaveTeamResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTALeaveTeamResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTALeaveTeamResponse`
pub mod cmsg_dotaleave_team_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgDOTALeaveTeamResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTALeaveTeamResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTALeaveTeamResponse.Result.FAILURE_NOT_MEMBER)
        FAILURE_NOT_MEMBER = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTALeaveTeamResponse.Result.FAILURE_TEAM_LOCKED)
        FAILURE_TEAM_LOCKED = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTALeaveTeamResponse.Result.FAILURE_UNSPECIFIED_ERROR)
        FAILURE_UNSPECIFIED_ERROR = 3,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                2 => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                3 => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "FAILURE_NOT_MEMBER" => ::std::option::Option::Some(Result::FAILURE_NOT_MEMBER),
                "FAILURE_TEAM_LOCKED" => ::std::option::Option::Some(Result::FAILURE_TEAM_LOCKED),
                "FAILURE_UNSPECIFIED_ERROR" => ::std::option::Option::Some(Result::FAILURE_UNSPECIFIED_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::FAILURE_NOT_MEMBER,
            Result::FAILURE_TEAM_LOCKED,
            Result::FAILURE_UNSPECIFIED_ERROR,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgDOTALeaveTeamResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("CMsgDOTALeaveTeamResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTABetaParticipation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTABetaParticipation {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTABetaParticipation.access_rights)
    pub access_rights: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTABetaParticipation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTABetaParticipation {
    fn default() -> &'a CMsgDOTABetaParticipation {
        <CMsgDOTABetaParticipation as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTABetaParticipation {
    pub fn new() -> CMsgDOTABetaParticipation {
        ::std::default::Default::default()
    }

    // optional uint32 access_rights = 1;

    pub fn access_rights(&self) -> u32 {
        self.access_rights.unwrap_or(0)
    }

    pub fn clear_access_rights(&mut self) {
        self.access_rights = ::std::option::Option::None;
    }

    pub fn has_access_rights(&self) -> bool {
        self.access_rights.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_rights(&mut self, v: u32) {
        self.access_rights = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "access_rights",
            |m: &CMsgDOTABetaParticipation| { &m.access_rights },
            |m: &mut CMsgDOTABetaParticipation| { &mut m.access_rights },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTABetaParticipation>(
            "CMsgDOTABetaParticipation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTABetaParticipation {
    const NAME: &'static str = "CMsgDOTABetaParticipation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.access_rights = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.access_rights {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.access_rights {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTABetaParticipation {
        CMsgDOTABetaParticipation::new()
    }

    fn clear(&mut self) {
        self.access_rights = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTABetaParticipation {
        static instance: CMsgDOTABetaParticipation = CMsgDOTABetaParticipation {
            access_rights: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTABetaParticipation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTABetaParticipation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTABetaParticipation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTABetaParticipation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.ETeamInviteResult)
pub enum ETeamInviteResult {
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_SUCCESS)
    TEAM_INVITE_SUCCESS = 0,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_FAILURE_INVITE_REJECTED)
    TEAM_INVITE_FAILURE_INVITE_REJECTED = 1,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_FAILURE_INVITE_TIMEOUT)
    TEAM_INVITE_FAILURE_INVITE_TIMEOUT = 2,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT)
    TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT = 3,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_TEAM_LOCKED)
    TEAM_INVITE_ERROR_TEAM_LOCKED = 4,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE)
    TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE = 5,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_INVITEE_BUSY)
    TEAM_INVITE_ERROR_INVITEE_BUSY = 6,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER)
    TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER = 7,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT)
    TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT = 8,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME)
    TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME = 9,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE)
    TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE = 10,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_INVITER_NOT_ADMIN)
    TEAM_INVITE_ERROR_INVITER_NOT_ADMIN = 11,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED)
    TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED = 12,
    // @@protoc_insertion_point(enum_value:dota.ETeamInviteResult.TEAM_INVITE_ERROR_UNSPECIFIED)
    TEAM_INVITE_ERROR_UNSPECIFIED = 13,
}

impl ::protobuf::Enum for ETeamInviteResult {
    const NAME: &'static str = "ETeamInviteResult";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETeamInviteResult> {
        match value {
            0 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            1 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_REJECTED),
            2 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_TIMEOUT),
            3 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT),
            4 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_LOCKED),
            5 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE),
            6 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_BUSY),
            7 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER),
            8 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT),
            9 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME),
            10 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE),
            11 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_NOT_ADMIN),
            12 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED),
            13 => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_UNSPECIFIED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETeamInviteResult> {
        match str {
            "TEAM_INVITE_SUCCESS" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_SUCCESS),
            "TEAM_INVITE_FAILURE_INVITE_REJECTED" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_REJECTED),
            "TEAM_INVITE_FAILURE_INVITE_TIMEOUT" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_TIMEOUT),
            "TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT),
            "TEAM_INVITE_ERROR_TEAM_LOCKED" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_LOCKED),
            "TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE),
            "TEAM_INVITE_ERROR_INVITEE_BUSY" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_BUSY),
            "TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER),
            "TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT),
            "TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME),
            "TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE),
            "TEAM_INVITE_ERROR_INVITER_NOT_ADMIN" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_NOT_ADMIN),
            "TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED),
            "TEAM_INVITE_ERROR_UNSPECIFIED" => ::std::option::Option::Some(ETeamInviteResult::TEAM_INVITE_ERROR_UNSPECIFIED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETeamInviteResult] = &[
        ETeamInviteResult::TEAM_INVITE_SUCCESS,
        ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_REJECTED,
        ETeamInviteResult::TEAM_INVITE_FAILURE_INVITE_TIMEOUT,
        ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT,
        ETeamInviteResult::TEAM_INVITE_ERROR_TEAM_LOCKED,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_BUSY,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE,
        ETeamInviteResult::TEAM_INVITE_ERROR_INVITER_NOT_ADMIN,
        ETeamInviteResult::TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED,
        ETeamInviteResult::TEAM_INVITE_ERROR_UNSPECIFIED,
    ];
}

impl ::protobuf::EnumFull for ETeamInviteResult {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ETeamInviteResult").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ETeamInviteResult {
    fn default() -> Self {
        ETeamInviteResult::TEAM_INVITE_SUCCESS
    }
}

impl ETeamInviteResult {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ETeamInviteResult>("ETeamInviteResult")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!dota_gcmessages_client_team.proto\x12\x04dota\x1a\x17dota_shared_enum\
    s.proto\"\xfd\x12\n\x10CMsgDOTATeamInfo\x127\n\x07members\x18\x01\x20\
    \x03(\x0b2\x1d.dota.CMsgDOTATeamInfo.MemberR\x07members\x12\x17\n\x07tea\
    m_id\x18\x02\x20\x01(\rR\x06teamId\x12\x12\n\x04name\x18\x03\x20\x01(\tR\
    \x04name\x12\x10\n\x03tag\x18\x04\x20\x01(\tR\x03tag\x12!\n\x0ctime_crea\
    ted\x18\x05\x20\x01(\rR\x0btimeCreated\x12\x10\n\x03pro\x18\x06\x20\x01(\
    \x08R\x03pro\x12\x1f\n\x0bpickup_team\x18\x08\x20\x01(\x08R\npickupTeam\
    \x12\x19\n\x08ugc_logo\x18\t\x20\x01(\x04R\x07ugcLogo\x12\"\n\rugc_base_\
    logo\x18\n\x20\x01(\x04R\x0bugcBaseLogo\x12&\n\x0fugc_banner_logo\x18\
    \x0b\x20\x01(\x04R\rugcBannerLogo\x12(\n\x10ugc_sponsor_logo\x18\x0c\x20\
    \x01(\x04R\x0eugcSponsorLogo\x12!\n\x0ccountry_code\x18\r\x20\x01(\tR\
    \x0bcountryCode\x12\x10\n\x03url\x18\x0e\x20\x01(\tR\x03url\x12\x12\n\
    \x04wins\x18\x0f\x20\x01(\rR\x04wins\x12\x16\n\x06losses\x18\x10\x20\x01\
    (\rR\x06losses\x12,\n\x12games_played_total\x18\x13\x20\x01(\rR\x10games\
    PlayedTotal\x128\n\x18games_played_matchmaking\x18\x14\x20\x01(\rR\x16ga\
    mesPlayedMatchmaking\x12\x19\n\x08url_logo\x18\x18\x20\x01(\tR\x07urlLog\
    o\x12A\n\x1dregistered_member_account_ids\x18\x1e\x20\x03(\rR\x1aregiste\
    redMemberAccountIds\x12(\n\x10coach_account_id\x18$\x20\x01(\rR\x0ecoach\
    AccountId\x12F\n\raudit_entries\x18\x1f\x20\x03(\x0b2!.dota.CMsgDOTATeam\
    Info.AuditEntryR\x0cauditEntries\x12+\n\x06region\x18\x1d\x20\x01(\x0e2\
    \x13.dota.ELeagueRegionR\x06region\x12\"\n\x0cabbreviation\x18\x20\x20\
    \x01(\tR\x0cabbreviation\x12E\n\x0cmember_stats\x18!\x20\x03(\x0b2\".dot\
    a.CMsgDOTATeamInfo.MemberStatsR\x0bmemberStats\x12?\n\nteam_stats\x18\"\
    \x20\x01(\x0b2\x20.dota.CMsgDOTATeamInfo.TeamStatsR\tteamStats\x12A\n\
    \x0bdpc_results\x18#\x20\x03(\x0b2\x20.dota.CMsgDOTATeamInfo.DPCResultR\
    \ndpcResults\x12#\n\rcolor_primary\x18%\x20\x01(\tR\x0ccolorPrimary\x12'\
    \n\x0fcolor_secondary\x18&\x20\x01(\tR\x0ecolorSecondary\x12!\n\x0cteam_\
    captain\x18'\x20\x01(\rR\x0bteamCaptain\x1a\xf1\x01\n\tHeroStats\x12\x17\
    \n\x07hero_id\x18\x01\x20\x01(\rR\x06heroId\x12\x14\n\x05picks\x18\x02\
    \x20\x01(\rR\x05picks\x12\x12\n\x04wins\x18\x03\x20\x01(\rR\x04wins\x12\
    \x12\n\x04bans\x18\x04\x20\x01(\rR\x04bans\x12\x1b\n\tavg_kills\x18\x05\
    \x20\x01(\x02R\x08avgKills\x12\x1d\n\navg_deaths\x18\x06\x20\x01(\x02R\t\
    avgDeaths\x12\x1f\n\x0bavg_assists\x18\x07\x20\x01(\x02R\navgAssists\x12\
    \x17\n\x07avg_gpm\x18\x08\x20\x01(\x02R\x06avgGpm\x12\x17\n\x07avg_xpm\
    \x18\t\x20\x01(\x02R\x06avgXpm\x1a\x9a\x02\n\x0bMemberStats\x12\x1d\n\na\
    ccount_id\x18\x01\x20\x01(\rR\taccountId\x12$\n\x0ewins_with_team\x18\
    \x02\x20\x01(\rR\x0cwinsWithTeam\x12(\n\x10losses_with_team\x18\x03\x20\
    \x01(\rR\x0elossesWithTeam\x12?\n\ntop_heroes\x18\x04\x20\x03(\x0b2\x20.\
    dota.CMsgDOTATeamInfo.HeroStatsR\ttopHeroes\x12\x1b\n\tavg_kills\x18\x05\
    \x20\x01(\x02R\x08avgKills\x12\x1d\n\navg_deaths\x18\x06\x20\x01(\x02R\t\
    avgDeaths\x12\x1f\n\x0bavg_assists\x18\x07\x20\x01(\x02R\navgAssists\x1a\
    \x89\x02\n\tTeamStats\x12E\n\rplayed_heroes\x18\x01\x20\x03(\x0b2\x20.do\
    ta.CMsgDOTATeamInfo.HeroStatsR\x0cplayedHeroes\x12\x18\n\x07farming\x18\
    \x02\x20\x01(\x02R\x07farming\x12\x1a\n\x08fighting\x18\x03\x20\x01(\x02\
    R\x08fighting\x12\x20\n\x0bversatility\x18\x04\x20\x01(\x02R\x0bversatil\
    ity\x12\x1b\n\tavg_kills\x18\x05\x20\x01(\x02R\x08avgKills\x12\x1d\n\nav\
    g_deaths\x18\x06\x20\x01(\x02R\tavgDeaths\x12!\n\x0cavg_duration\x18\x07\
    \x20\x01(\x02R\x0bavgDuration\x1a\x96\x01\n\tDPCResult\x12\x1b\n\tleague\
    _id\x18\x01\x20\x01(\rR\x08leagueId\x12\x1a\n\x08standing\x18\x02\x20\
    \x01(\rR\x08standing\x12\x16\n\x06points\x18\x03\x20\x01(\rR\x06points\
    \x12\x1a\n\x08earnings\x18\x04\x20\x01(\rR\x08earnings\x12\x1c\n\ttimest\
    amp\x18\x05\x20\x01(\rR\ttimestamp\x1a\xbf\x01\n\x06Member\x12\x1d\n\nac\
    count_id\x18\x01\x20\x01(\rR\taccountId\x12\x1f\n\x0btime_joined\x18\x02\
    \x20\x01(\rR\ntimeJoined\x12\x14\n\x05admin\x18\x03\x20\x01(\x08R\x05adm\
    in\x12\x19\n\x08pro_name\x18\x06\x20\x01(\tR\x07proName\x12'\n\x04role\
    \x18\x08\x20\x01(\x0e2\x13.dota.Fantasy_RolesR\x04role\x12\x1b\n\treal_n\
    ame\x18\t\x20\x01(\tR\x08realName\x1al\n\nAuditEntry\x12!\n\x0caudit_act\
    ion\x18\x01\x20\x01(\rR\x0bauditAction\x12\x1c\n\ttimestamp\x18\x02\x20\
    \x01(\rR\ttimestamp\x12\x1d\n\naccount_id\x18\x03\x20\x01(\rR\taccountId\
    \"^\n\x11CMsgDOTATeamsInfo\x12\x1b\n\tleague_id\x18\x01\x20\x01(\rR\x08l\
    eagueId\x12,\n\x05teams\x18\x02\x20\x03(\x0b2\x16.dota.CMsgDOTATeamInfoR\
    \x05teams\"D\n\x14CMsgDOTATeamInfoList\x12,\n\x05teams\x18\x01\x20\x03(\
    \x0b2\x16.dota.CMsgDOTATeamInfoR\x05teams\"\x1b\n\x19CMsgDOTAMyTeamInfoR\
    equest\"\xa9\x02\n\x12CMsgDOTACreateTeam\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12\x10\n\x03tag\x18\x02\x20\x01(\tR\x03tag\x12\x12\n\
    \x04logo\x18\x03\x20\x01(\x04R\x04logo\x12\x1b\n\tbase_logo\x18\x04\x20\
    \x01(\x04R\x08baseLogo\x12\x1f\n\x0bbanner_logo\x18\x05\x20\x01(\x04R\nb\
    annerLogo\x12!\n\x0csponsor_logo\x18\x06\x20\x01(\x04R\x0bsponsorLogo\
    \x12!\n\x0ccountry_code\x18\x07\x20\x01(\tR\x0bcountryCode\x12\x10\n\x03\
    url\x18\x08\x20\x01(\tR\x03url\x12\x1f\n\x0bpickup_team\x18\t\x20\x01(\
    \x08R\npickupTeam\x12\"\n\x0cabbreviation\x18\n\x20\x01(\tR\x0cabbreviat\
    ion\"\xa3\x04\n\x1aCMsgDOTACreateTeamResponse\x12?\n\x06result\x18\x01\
    \x20\x01(\x0e2'.dota.CMsgDOTACreateTeamResponse.ResultR\x06result\x12\
    \x17\n\x07team_id\x18\x02\x20\x01(\rR\x06teamId\"\xaa\x03\n\x06Result\
    \x12\x14\n\x07INVALID\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\
    \x0b\n\x07SUCCESS\x10\0\x12\x0e\n\nNAME_EMPTY\x10\x01\x12\x17\n\x13NAME_\
    BAD_CHARACTERS\x10\x02\x12\x0e\n\nNAME_TAKEN\x10\x03\x12\x11\n\rNAME_TOO\
    _LONG\x10\x04\x12\r\n\tTAG_EMPTY\x10\x05\x12\x16\n\x12TAG_BAD_CHARACTERS\
    \x10\x06\x12\r\n\tTAG_TAKEN\x10\x07\x12\x10\n\x0cTAG_TOO_LONG\x10\x08\
    \x12\x10\n\x0cCREATOR_BUSY\x10\t\x12\x15\n\x11UNSPECIFIED_ERROR\x10\n\
    \x12\x1e\n\x1aCREATOR_TEAM_LIMIT_REACHED\x10\x0b\x12\x0b\n\x07NO_LOGO\
    \x10\x0c\x12\"\n\x1eCREATOR_TEAM_CREATION_COOLDOWN\x10\r\x12\x16\n\x12LO\
    GO_UPLOAD_FAILED\x10\x0e\x12\x1d\n\x19NAME_CHANGED_TOO_RECENTLY\x10\x0f\
    \x12\x1e\n\x1aCREATOR_INSUFFICIENT_LEVEL\x10\x10\x12\x18\n\x14INVALID_AC\
    COUNT_TYPE\x10\x11\"\xcd\x02\n\x17CMsgDOTAEditTeamDetails\x12\x17\n\x07t\
    eam_id\x18\x01\x20\x01(\rR\x06teamId\x12\x12\n\x04name\x18\x02\x20\x01(\
    \tR\x04name\x12\x10\n\x03tag\x18\x03\x20\x01(\tR\x03tag\x12\x12\n\x04log\
    o\x18\x04\x20\x01(\x04R\x04logo\x12\x1b\n\tbase_logo\x18\x05\x20\x01(\
    \x04R\x08baseLogo\x12\x1f\n\x0bbanner_logo\x18\x06\x20\x01(\x04R\nbanner\
    Logo\x12!\n\x0csponsor_logo\x18\x07\x20\x01(\x04R\x0bsponsorLogo\x12!\n\
    \x0ccountry_code\x18\x08\x20\x01(\tR\x0bcountryCode\x12\x10\n\x03url\x18\
    \t\x20\x01(\tR\x03url\x12%\n\x0fin_use_by_party\x18\n\x20\x01(\x08R\x0ci\
    nUseByParty\x12\"\n\x0cabbreviation\x18\x0b\x20\x01(\tR\x0cabbreviation\
    \"\xf1\x01\n\x1fCMsgDOTAEditTeamDetailsResponse\x12D\n\x06result\x18\x01\
    \x20\x01(\x0e2,.dota.CMsgDOTAEditTeamDetailsResponse.ResultR\x06result\"\
    \x87\x01\n\x06Result\x12\x0b\n\x07SUCCESS\x10\0\x12\x20\n\x1cFAILURE_INV\
    ALID_ACCOUNT_TYPE\x10\x01\x12\x16\n\x12FAILURE_NOT_MEMBER\x10\x02\x12\
    \x17\n\x13FAILURE_TEAM_LOCKED\x10\x03\x12\x1d\n\x19FAILURE_UNSPECIFIED_E\
    RROR\x10\x04\"X\n\x1eCMsgDOTATeamInvite_InviterToGC\x12\x1d\n\naccount_i\
    d\x18\x01\x20\x01(\rR\taccountId\x12\x17\n\x07team_id\x18\x02\x20\x01(\r\
    R\x06teamId\"\xb3\x01\n/CMsgDOTATeamInvite_GCImmediateResponseToInviter\
    \x12/\n\x06result\x18\x01\x20\x01(\x0e2\x17.dota.ETeamInviteResultR\x06r\
    esult\x12!\n\x0cinvitee_name\x18\x02\x20\x01(\tR\x0binviteeName\x12,\n\
    \x12required_play_time\x18\x03\x20\x01(\rR\x10requiredPlayTime\"\xa1\x01\
    \n%CMsgDOTATeamInvite_GCRequestToInvitee\x12,\n\x12inviter_account_id\
    \x18\x01\x20\x01(\rR\x10inviterAccountId\x12\x1b\n\tteam_name\x18\x02\
    \x20\x01(\tR\x08teamName\x12\x19\n\x08team_tag\x18\x03\x20\x01(\tR\x07te\
    amTag\x12\x12\n\x04logo\x18\x04\x20\x01(\x04R\x04logo\"Y\n&CMsgDOTATeamI\
    nvite_InviteeResponseToGC\x12/\n\x06result\x18\x01\x20\x01(\x0e2\x17.dot\
    a.ETeamInviteResultR\x06result\"|\n&CMsgDOTATeamInvite_GCResponseToInvit\
    er\x12/\n\x06result\x18\x01\x20\x01(\x0e2\x17.dota.ETeamInviteResultR\
    \x06result\x12!\n\x0cinvitee_name\x18\x02\x20\x01(\tR\x0binviteeName\"v\
    \n&CMsgDOTATeamInvite_GCResponseToInvitee\x12/\n\x06result\x18\x01\x20\
    \x01(\x0e2\x17.dota.ETeamInviteResultR\x06result\x12\x1b\n\tteam_name\
    \x18\x02\x20\x01(\tR\x08teamName\"P\n\x16CMsgDOTAKickTeamMember\x12\x1d\
    \n\naccount_id\x18\x01\x20\x01(\rR\taccountId\x12\x17\n\x07team_id\x18\
    \x02\x20\x01(\rR\x06teamId\"\x94\x02\n\x1eCMsgDOTAKickTeamMemberResponse\
    \x12C\n\x06result\x18\x01\x20\x01(\x0e2+.dota.CMsgDOTAKickTeamMemberResp\
    onse.ResultR\x06result\"\xac\x01\n\x06Result\x12\x0b\n\x07SUCCESS\x10\0\
    \x12\x20\n\x1cFAILURE_INVALID_ACCOUNT_TYPE\x10\x01\x12\x1c\n\x18FAILURE_\
    KICKER_NOT_ADMIN\x10\x02\x12\x1d\n\x19FAILURE_KICKEE_NOT_MEMBER\x10\x03\
    \x12\x17\n\x13FAILURE_TEAM_LOCKED\x10\x04\x12\x1d\n\x19FAILURE_UNSPECIFI\
    ED_ERROR\x10\x05\"e\n\x19CMsgDOTATransferTeamAdmin\x12/\n\x14new_admin_a\
    ccount_id\x18\x01\x20\x01(\rR\x11newAdminAccountId\x12\x17\n\x07team_id\
    \x18\x02\x20\x01(\rR\x06teamId\"\x8d\x02\n!CMsgDOTATransferTeamAdminResp\
    onse\x12F\n\x06result\x18\x01\x20\x01(\x0e2..dota.CMsgDOTATransferTeamAd\
    minResponse.ResultR\x06result\"\x9f\x01\n\x06Result\x12\x0b\n\x07SUCCESS\
    \x10\0\x12\x20\n\x1cFAILURE_INVALID_ACCOUNT_TYPE\x10\x01\x12\x15\n\x11FA\
    ILURE_NOT_ADMIN\x10\x02\x12\x18\n\x14FAILURE_SAME_ACCOUNT\x10\x03\x12\
    \x16\n\x12FAILURE_NOT_MEMBER\x10\x04\x12\x1d\n\x19FAILURE_UNSPECIFIED_ER\
    ROR\x10\x05\",\n\x11CMsgDOTALeaveTeam\x12\x17\n\x07team_id\x18\x01\x20\
    \x01(\rR\x06teamId\"\xc2\x01\n\x19CMsgDOTALeaveTeamResponse\x12>\n\x06re\
    sult\x18\x01\x20\x01(\x0e2&.dota.CMsgDOTALeaveTeamResponse.ResultR\x06re\
    sult\"e\n\x06Result\x12\x0b\n\x07SUCCESS\x10\0\x12\x16\n\x12FAILURE_NOT_\
    MEMBER\x10\x01\x12\x17\n\x13FAILURE_TEAM_LOCKED\x10\x02\x12\x1d\n\x19FAI\
    LURE_UNSPECIFIED_ERROR\x10\x03\"@\n\x19CMsgDOTABetaParticipation\x12#\n\
    \raccess_rights\x18\x01\x20\x01(\rR\x0caccessRights*\xde\x04\n\x11ETeamI\
    nviteResult\x12\x17\n\x13TEAM_INVITE_SUCCESS\x10\0\x12'\n#TEAM_INVITE_FA\
    ILURE_INVITE_REJECTED\x10\x01\x12&\n\"TEAM_INVITE_FAILURE_INVITE_TIMEOUT\
    \x10\x02\x12*\n&TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT\x10\x03\x12!\n\
    \x1dTEAM_INVITE_ERROR_TEAM_LOCKED\x10\x04\x12+\n'TEAM_INVITE_ERROR_INVIT\
    EE_NOT_AVAILABLE\x10\x05\x12\"\n\x1eTEAM_INVITE_ERROR_INVITEE_BUSY\x10\
    \x06\x12,\n(TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER\x10\x07\x12+\n'TEAM\
    _INVITE_ERROR_INVITEE_AT_TEAM_LIMIT\x10\x08\x124\n0TEAM_INVITE_ERROR_INV\
    ITEE_INSUFFICIENT_PLAY_TIME\x10\t\x122\n.TEAM_INVITE_ERROR_INVITER_INVAL\
    ID_ACCOUNT_TYPE\x10\n\x12'\n#TEAM_INVITE_ERROR_INVITER_NOT_ADMIN\x10\x0b\
    \x12.\n*TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED\x10\x0c\x12!\n\x1dTEA\
    M_INVITE_ERROR_UNSPECIFIED\x10\rB%Z#github.com/dotabuff/manta/dota;dotaJ\
    \xdc^\n\x07\x12\x05\0\0\x92\x02\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x03\0:\n\t\n\
    \x02\x08\x0b\x12\x03\x03\0:\n\t\n\x02\x03\0\x12\x03\x05\x07\x20\n\n\n\
    \x02\x05\0\x12\x04\x07\0\x16\x01\n\n\n\x03\x05\0\x01\x12\x03\x07\x05\x16\
    \n\x0b\n\x04\x05\0\x02\0\x12\x03\x08\x08\x20\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03\x08\x08\x1b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x08\x1e\x1f\n\
    \x0b\n\x04\x05\0\x02\x01\x12\x03\t\x080\n\x0c\n\x05\x05\0\x02\x01\x01\
    \x12\x03\t\x08+\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\t./\n\x0b\n\x04\
    \x05\0\x02\x02\x12\x03\n\x08/\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\n\
    \x08*\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\n-.\n\x0b\n\x04\x05\0\x02\
    \x03\x12\x03\x0b\x083\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x0b\x08.\n\
    \x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x0b12\n\x0b\n\x04\x05\0\x02\x04\x12\
    \x03\x0c\x08*\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x0c\x08%\n\x0c\n\x05\
    \x05\0\x02\x04\x02\x12\x03\x0c()\n\x0b\n\x04\x05\0\x02\x05\x12\x03\r\x08\
    4\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\r\x08/\n\x0c\n\x05\x05\0\x02\x05\
    \x02\x12\x03\r23\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x0e\x08+\n\x0c\n\x05\
    \x05\0\x02\x06\x01\x12\x03\x0e\x08&\n\x0c\n\x05\x05\0\x02\x06\x02\x12\
    \x03\x0e)*\n\x0b\n\x04\x05\0\x02\x07\x12\x03\x0f\x085\n\x0c\n\x05\x05\0\
    \x02\x07\x01\x12\x03\x0f\x080\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\x0f3\
    4\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x10\x084\n\x0c\n\x05\x05\0\x02\x08\
    \x01\x12\x03\x10\x08/\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\x1023\n\x0b\
    \n\x04\x05\0\x02\t\x12\x03\x11\x08=\n\x0c\n\x05\x05\0\x02\t\x01\x12\x03\
    \x11\x088\n\x0c\n\x05\x05\0\x02\t\x02\x12\x03\x11;<\n\x0b\n\x04\x05\0\
    \x02\n\x12\x03\x12\x08<\n\x0c\n\x05\x05\0\x02\n\x01\x12\x03\x12\x086\n\
    \x0c\n\x05\x05\0\x02\n\x02\x12\x03\x129;\n\x0b\n\x04\x05\0\x02\x0b\x12\
    \x03\x13\x081\n\x0c\n\x05\x05\0\x02\x0b\x01\x12\x03\x13\x08+\n\x0c\n\x05\
    \x05\0\x02\x0b\x02\x12\x03\x13.0\n\x0b\n\x04\x05\0\x02\x0c\x12\x03\x14\
    \x088\n\x0c\n\x05\x05\0\x02\x0c\x01\x12\x03\x14\x082\n\x0c\n\x05\x05\0\
    \x02\x0c\x02\x12\x03\x1457\n\x0b\n\x04\x05\0\x02\r\x12\x03\x15\x08+\n\
    \x0c\n\x05\x05\0\x02\r\x01\x12\x03\x15\x08%\n\x0c\n\x05\x05\0\x02\r\x02\
    \x12\x03\x15(*\n\n\n\x02\x04\0\x12\x04\x18\0m\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x18\x08\x18\n\x0c\n\x04\x04\0\x03\0\x12\x04\x19\x08#\t\n\x0c\n\
    \x05\x04\0\x03\0\x01\x12\x03\x19\x10\x19\n\r\n\x06\x04\0\x03\0\x02\0\x12\
    \x03\x1a\x10,\n\x0e\n\x07\x04\0\x03\0\x02\0\x04\x12\x03\x1a\x10\x18\n\
    \x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\x1a\x19\x1f\n\x0e\n\x07\x04\0\
    \x03\0\x02\0\x01\x12\x03\x1a\x20'\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\
    \x03\x1a*+\n\r\n\x06\x04\0\x03\0\x02\x01\x12\x03\x1b\x10*\n\x0e\n\x07\
    \x04\0\x03\0\x02\x01\x04\x12\x03\x1b\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\
    \x01\x05\x12\x03\x1b\x19\x1f\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\
    \x1b\x20%\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03\x1b()\n\r\n\x06\
    \x04\0\x03\0\x02\x02\x12\x03\x1c\x10)\n\x0e\n\x07\x04\0\x03\0\x02\x02\
    \x04\x12\x03\x1c\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\x12\x03\x1c\
    \x19\x1f\n\x0e\n\x07\x04\0\x03\0\x02\x02\x01\x12\x03\x1c\x20$\n\x0e\n\
    \x07\x04\0\x03\0\x02\x02\x03\x12\x03\x1c'(\n\r\n\x06\x04\0\x03\0\x02\x03\
    \x12\x03\x1d\x10)\n\x0e\n\x07\x04\0\x03\0\x02\x03\x04\x12\x03\x1d\x10\
    \x18\n\x0e\n\x07\x04\0\x03\0\x02\x03\x05\x12\x03\x1d\x19\x1f\n\x0e\n\x07\
    \x04\0\x03\0\x02\x03\x01\x12\x03\x1d\x20$\n\x0e\n\x07\x04\0\x03\0\x02\
    \x03\x03\x12\x03\x1d'(\n\r\n\x06\x04\0\x03\0\x02\x04\x12\x03\x1e\x10-\n\
    \x0e\n\x07\x04\0\x03\0\x02\x04\x04\x12\x03\x1e\x10\x18\n\x0e\n\x07\x04\0\
    \x03\0\x02\x04\x05\x12\x03\x1e\x19\x1e\n\x0e\n\x07\x04\0\x03\0\x02\x04\
    \x01\x12\x03\x1e\x1f(\n\x0e\n\x07\x04\0\x03\0\x02\x04\x03\x12\x03\x1e+,\
    \n\r\n\x06\x04\0\x03\0\x02\x05\x12\x03\x1f\x10.\n\x0e\n\x07\x04\0\x03\0\
    \x02\x05\x04\x12\x03\x1f\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\x05\x05\x12\
    \x03\x1f\x19\x1e\n\x0e\n\x07\x04\0\x03\0\x02\x05\x01\x12\x03\x1f\x1f)\n\
    \x0e\n\x07\x04\0\x03\0\x02\x05\x03\x12\x03\x1f,-\n\r\n\x06\x04\0\x03\0\
    \x02\x06\x12\x03\x20\x10/\n\x0e\n\x07\x04\0\x03\0\x02\x06\x04\x12\x03\
    \x20\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\x06\x05\x12\x03\x20\x19\x1e\n\
    \x0e\n\x07\x04\0\x03\0\x02\x06\x01\x12\x03\x20\x1f*\n\x0e\n\x07\x04\0\
    \x03\0\x02\x06\x03\x12\x03\x20-.\n\r\n\x06\x04\0\x03\0\x02\x07\x12\x03!\
    \x10+\n\x0e\n\x07\x04\0\x03\0\x02\x07\x04\x12\x03!\x10\x18\n\x0e\n\x07\
    \x04\0\x03\0\x02\x07\x05\x12\x03!\x19\x1e\n\x0e\n\x07\x04\0\x03\0\x02\
    \x07\x01\x12\x03!\x1f&\n\x0e\n\x07\x04\0\x03\0\x02\x07\x03\x12\x03!)*\n\
    \r\n\x06\x04\0\x03\0\x02\x08\x12\x03\"\x10+\n\x0e\n\x07\x04\0\x03\0\x02\
    \x08\x04\x12\x03\"\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\x08\x05\x12\x03\"\
    \x19\x1e\n\x0e\n\x07\x04\0\x03\0\x02\x08\x01\x12\x03\"\x1f&\n\x0e\n\x07\
    \x04\0\x03\0\x02\x08\x03\x12\x03\")*\n\x0c\n\x04\x04\0\x03\x01\x12\x04%\
    \x08-\t\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03%\x10\x1b\n\r\n\x06\x04\0\
    \x03\x01\x02\0\x12\x03&\x10/\n\x0e\n\x07\x04\0\x03\x01\x02\0\x04\x12\x03\
    &\x10\x18\n\x0e\n\x07\x04\0\x03\x01\x02\0\x05\x12\x03&\x19\x1f\n\x0e\n\
    \x07\x04\0\x03\x01\x02\0\x01\x12\x03&\x20*\n\x0e\n\x07\x04\0\x03\x01\x02\
    \0\x03\x12\x03&-.\n\r\n\x06\x04\0\x03\x01\x02\x01\x12\x03'\x103\n\x0e\n\
    \x07\x04\0\x03\x01\x02\x01\x04\x12\x03'\x10\x18\n\x0e\n\x07\x04\0\x03\
    \x01\x02\x01\x05\x12\x03'\x19\x1f\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x01\
    \x12\x03'\x20.\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03'12\n\r\n\
    \x06\x04\0\x03\x01\x02\x02\x12\x03(\x105\n\x0e\n\x07\x04\0\x03\x01\x02\
    \x02\x04\x12\x03(\x10\x18\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x05\x12\x03(\
    \x19\x1f\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x01\x12\x03(\x200\n\x0e\n\x07\
    \x04\0\x03\x01\x02\x02\x03\x12\x03(34\n\r\n\x06\x04\0\x03\x01\x02\x03\
    \x12\x03)\x10C\n\x0e\n\x07\x04\0\x03\x01\x02\x03\x04\x12\x03)\x10\x18\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x03\x06\x12\x03)\x193\n\x0e\n\x07\x04\0\x03\
    \x01\x02\x03\x01\x12\x03)4>\n\x0e\n\x07\x04\0\x03\x01\x02\x03\x03\x12\
    \x03)AB\n\r\n\x06\x04\0\x03\x01\x02\x04\x12\x03*\x10-\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x04\x04\x12\x03*\x10\x18\n\x0e\n\x07\x04\0\x03\x01\x02\x04\
    \x05\x12\x03*\x19\x1e\n\x0e\n\x07\x04\0\x03\x01\x02\x04\x01\x12\x03*\x1f\
    (\n\x0e\n\x07\x04\0\x03\x01\x02\x04\x03\x12\x03*+,\n\r\n\x06\x04\0\x03\
    \x01\x02\x05\x12\x03+\x10.\n\x0e\n\x07\x04\0\x03\x01\x02\x05\x04\x12\x03\
    +\x10\x18\n\x0e\n\x07\x04\0\x03\x01\x02\x05\x05\x12\x03+\x19\x1e\n\x0e\n\
    \x07\x04\0\x03\x01\x02\x05\x01\x12\x03+\x1f)\n\x0e\n\x07\x04\0\x03\x01\
    \x02\x05\x03\x12\x03+,-\n\r\n\x06\x04\0\x03\x01\x02\x06\x12\x03,\x10/\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x06\x04\x12\x03,\x10\x18\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x06\x05\x12\x03,\x19\x1e\n\x0e\n\x07\x04\0\x03\x01\x02\x06\
    \x01\x12\x03,\x1f*\n\x0e\n\x07\x04\0\x03\x01\x02\x06\x03\x12\x03,-.\n\
    \x0c\n\x04\x04\0\x03\x02\x12\x04/\x087\t\n\x0c\n\x05\x04\0\x03\x02\x01\
    \x12\x03/\x10\x19\n\r\n\x06\x04\0\x03\x02\x02\0\x12\x030\x10F\n\x0e\n\
    \x07\x04\0\x03\x02\x02\0\x04\x12\x030\x10\x18\n\x0e\n\x07\x04\0\x03\x02\
    \x02\0\x06\x12\x030\x193\n\x0e\n\x07\x04\0\x03\x02\x02\0\x01\x12\x0304A\
    \n\x0e\n\x07\x04\0\x03\x02\x02\0\x03\x12\x030DE\n\r\n\x06\x04\0\x03\x02\
    \x02\x01\x12\x031\x10+\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x04\x12\x031\
    \x10\x18\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x05\x12\x031\x19\x1e\n\x0e\n\
    \x07\x04\0\x03\x02\x02\x01\x01\x12\x031\x1f&\n\x0e\n\x07\x04\0\x03\x02\
    \x02\x01\x03\x12\x031)*\n\r\n\x06\x04\0\x03\x02\x02\x02\x12\x032\x10,\n\
    \x0e\n\x07\x04\0\x03\x02\x02\x02\x04\x12\x032\x10\x18\n\x0e\n\x07\x04\0\
    \x03\x02\x02\x02\x05\x12\x032\x19\x1e\n\x0e\n\x07\x04\0\x03\x02\x02\x02\
    \x01\x12\x032\x1f'\n\x0e\n\x07\x04\0\x03\x02\x02\x02\x03\x12\x032*+\n\r\
    \n\x06\x04\0\x03\x02\x02\x03\x12\x033\x10/\n\x0e\n\x07\x04\0\x03\x02\x02\
    \x03\x04\x12\x033\x10\x18\n\x0e\n\x07\x04\0\x03\x02\x02\x03\x05\x12\x033\
    \x19\x1e\n\x0e\n\x07\x04\0\x03\x02\x02\x03\x01\x12\x033\x1f*\n\x0e\n\x07\
    \x04\0\x03\x02\x02\x03\x03\x12\x033-.\n\r\n\x06\x04\0\x03\x02\x02\x04\
    \x12\x034\x10-\n\x0e\n\x07\x04\0\x03\x02\x02\x04\x04\x12\x034\x10\x18\n\
    \x0e\n\x07\x04\0\x03\x02\x02\x04\x05\x12\x034\x19\x1e\n\x0e\n\x07\x04\0\
    \x03\x02\x02\x04\x01\x12\x034\x1f(\n\x0e\n\x07\x04\0\x03\x02\x02\x04\x03\
    \x12\x034+,\n\r\n\x06\x04\0\x03\x02\x02\x05\x12\x035\x10.\n\x0e\n\x07\
    \x04\0\x03\x02\x02\x05\x04\x12\x035\x10\x18\n\x0e\n\x07\x04\0\x03\x02\
    \x02\x05\x05\x12\x035\x19\x1e\n\x0e\n\x07\x04\0\x03\x02\x02\x05\x01\x12\
    \x035\x1f)\n\x0e\n\x07\x04\0\x03\x02\x02\x05\x03\x12\x035,-\n\r\n\x06\
    \x04\0\x03\x02\x02\x06\x12\x036\x100\n\x0e\n\x07\x04\0\x03\x02\x02\x06\
    \x04\x12\x036\x10\x18\n\x0e\n\x07\x04\0\x03\x02\x02\x06\x05\x12\x036\x19\
    \x1e\n\x0e\n\x07\x04\0\x03\x02\x02\x06\x01\x12\x036\x1f+\n\x0e\n\x07\x04\
    \0\x03\x02\x02\x06\x03\x12\x036./\n\x0c\n\x04\x04\0\x03\x03\x12\x049\x08\
    ?\t\n\x0c\n\x05\x04\0\x03\x03\x01\x12\x039\x10\x19\n\r\n\x06\x04\0\x03\
    \x03\x02\0\x12\x03:\x10.\n\x0e\n\x07\x04\0\x03\x03\x02\0\x04\x12\x03:\
    \x10\x18\n\x0e\n\x07\x04\0\x03\x03\x02\0\x05\x12\x03:\x19\x1f\n\x0e\n\
    \x07\x04\0\x03\x03\x02\0\x01\x12\x03:\x20)\n\x0e\n\x07\x04\0\x03\x03\x02\
    \0\x03\x12\x03:,-\n\r\n\x06\x04\0\x03\x03\x02\x01\x12\x03;\x10-\n\x0e\n\
    \x07\x04\0\x03\x03\x02\x01\x04\x12\x03;\x10\x18\n\x0e\n\x07\x04\0\x03\
    \x03\x02\x01\x05\x12\x03;\x19\x1f\n\x0e\n\x07\x04\0\x03\x03\x02\x01\x01\
    \x12\x03;\x20(\n\x0e\n\x07\x04\0\x03\x03\x02\x01\x03\x12\x03;+,\n\r\n\
    \x06\x04\0\x03\x03\x02\x02\x12\x03<\x10+\n\x0e\n\x07\x04\0\x03\x03\x02\
    \x02\x04\x12\x03<\x10\x18\n\x0e\n\x07\x04\0\x03\x03\x02\x02\x05\x12\x03<\
    \x19\x1f\n\x0e\n\x07\x04\0\x03\x03\x02\x02\x01\x12\x03<\x20&\n\x0e\n\x07\
    \x04\0\x03\x03\x02\x02\x03\x12\x03<)*\n\r\n\x06\x04\0\x03\x03\x02\x03\
    \x12\x03=\x10-\n\x0e\n\x07\x04\0\x03\x03\x02\x03\x04\x12\x03=\x10\x18\n\
    \x0e\n\x07\x04\0\x03\x03\x02\x03\x05\x12\x03=\x19\x1f\n\x0e\n\x07\x04\0\
    \x03\x03\x02\x03\x01\x12\x03=\x20(\n\x0e\n\x07\x04\0\x03\x03\x02\x03\x03\
    \x12\x03=+,\n\r\n\x06\x04\0\x03\x03\x02\x04\x12\x03>\x10.\n\x0e\n\x07\
    \x04\0\x03\x03\x02\x04\x04\x12\x03>\x10\x18\n\x0e\n\x07\x04\0\x03\x03\
    \x02\x04\x05\x12\x03>\x19\x1f\n\x0e\n\x07\x04\0\x03\x03\x02\x04\x01\x12\
    \x03>\x20)\n\x0e\n\x07\x04\0\x03\x03\x02\x04\x03\x12\x03>,-\n\x0c\n\x04\
    \x04\0\x03\x04\x12\x04A\x08H\t\n\x0c\n\x05\x04\0\x03\x04\x01\x12\x03A\
    \x10\x16\n\r\n\x06\x04\0\x03\x04\x02\0\x12\x03B\x10/\n\x0e\n\x07\x04\0\
    \x03\x04\x02\0\x04\x12\x03B\x10\x18\n\x0e\n\x07\x04\0\x03\x04\x02\0\x05\
    \x12\x03B\x19\x1f\n\x0e\n\x07\x04\0\x03\x04\x02\0\x01\x12\x03B\x20*\n\
    \x0e\n\x07\x04\0\x03\x04\x02\0\x03\x12\x03B-.\n\r\n\x06\x04\0\x03\x04\
    \x02\x01\x12\x03C\x100\n\x0e\n\x07\x04\0\x03\x04\x02\x01\x04\x12\x03C\
    \x10\x18\n\x0e\n\x07\x04\0\x03\x04\x02\x01\x05\x12\x03C\x19\x1f\n\x0e\n\
    \x07\x04\0\x03\x04\x02\x01\x01\x12\x03C\x20+\n\x0e\n\x07\x04\0\x03\x04\
    \x02\x01\x03\x12\x03C./\n\r\n\x06\x04\0\x03\x04\x02\x02\x12\x03D\x10(\n\
    \x0e\n\x07\x04\0\x03\x04\x02\x02\x04\x12\x03D\x10\x18\n\x0e\n\x07\x04\0\
    \x03\x04\x02\x02\x05\x12\x03D\x19\x1d\n\x0e\n\x07\x04\0\x03\x04\x02\x02\
    \x01\x12\x03D\x1e#\n\x0e\n\x07\x04\0\x03\x04\x02\x02\x03\x12\x03D&'\n\r\
    \n\x06\x04\0\x03\x04\x02\x03\x12\x03E\x10-\n\x0e\n\x07\x04\0\x03\x04\x02\
    \x03\x04\x12\x03E\x10\x18\n\x0e\n\x07\x04\0\x03\x04\x02\x03\x05\x12\x03E\
    \x19\x1f\n\x0e\n\x07\x04\0\x03\x04\x02\x03\x01\x12\x03E\x20(\n\x0e\n\x07\
    \x04\0\x03\x04\x02\x03\x03\x12\x03E+,\n\r\n\x06\x04\0\x03\x04\x02\x04\
    \x12\x03F\x100\n\x0e\n\x07\x04\0\x03\x04\x02\x04\x04\x12\x03F\x10\x18\n\
    \x0e\n\x07\x04\0\x03\x04\x02\x04\x06\x12\x03F\x19&\n\x0e\n\x07\x04\0\x03\
    \x04\x02\x04\x01\x12\x03F'+\n\x0e\n\x07\x04\0\x03\x04\x02\x04\x03\x12\
    \x03F./\n\r\n\x06\x04\0\x03\x04\x02\x05\x12\x03G\x10.\n\x0e\n\x07\x04\0\
    \x03\x04\x02\x05\x04\x12\x03G\x10\x18\n\x0e\n\x07\x04\0\x03\x04\x02\x05\
    \x05\x12\x03G\x19\x1f\n\x0e\n\x07\x04\0\x03\x04\x02\x05\x01\x12\x03G\x20\
    )\n\x0e\n\x07\x04\0\x03\x04\x02\x05\x03\x12\x03G,-\n\x0c\n\x04\x04\0\x03\
    \x05\x12\x04J\x08N\t\n\x0c\n\x05\x04\0\x03\x05\x01\x12\x03J\x10\x1a\n\r\
    \n\x06\x04\0\x03\x05\x02\0\x12\x03K\x101\n\x0e\n\x07\x04\0\x03\x05\x02\0\
    \x04\x12\x03K\x10\x18\n\x0e\n\x07\x04\0\x03\x05\x02\0\x05\x12\x03K\x19\
    \x1f\n\x0e\n\x07\x04\0\x03\x05\x02\0\x01\x12\x03K\x20,\n\x0e\n\x07\x04\0\
    \x03\x05\x02\0\x03\x12\x03K/0\n\r\n\x06\x04\0\x03\x05\x02\x01\x12\x03L\
    \x10.\n\x0e\n\x07\x04\0\x03\x05\x02\x01\x04\x12\x03L\x10\x18\n\x0e\n\x07\
    \x04\0\x03\x05\x02\x01\x05\x12\x03L\x19\x1f\n\x0e\n\x07\x04\0\x03\x05\
    \x02\x01\x01\x12\x03L\x20)\n\x0e\n\x07\x04\0\x03\x05\x02\x01\x03\x12\x03\
    L,-\n\r\n\x06\x04\0\x03\x05\x02\x02\x12\x03M\x10/\n\x0e\n\x07\x04\0\x03\
    \x05\x02\x02\x04\x12\x03M\x10\x18\n\x0e\n\x07\x04\0\x03\x05\x02\x02\x05\
    \x12\x03M\x19\x1f\n\x0e\n\x07\x04\0\x03\x05\x02\x02\x01\x12\x03M\x20*\n\
    \x0e\n\x07\x04\0\x03\x05\x02\x02\x03\x12\x03M-.\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03P\x085\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03P\x08\x10\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03P\x11(\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03P)0\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03P34\n\x0b\n\x04\x04\0\x02\x01\x12\x03Q\
    \x08$\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03Q\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03Q\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03Q\x18\
    \x1f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03Q\"#\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03R\x08!\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03R\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03R\x11\x17\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03R\x18\x1c\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03R\x1f\x20\n\x0b\n\
    \x04\x04\0\x02\x03\x12\x03S\x08\x20\n\x0c\n\x05\x04\0\x02\x03\x04\x12\
    \x03S\x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03S\x11\x17\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03S\x18\x1b\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03S\x1e\x1f\n\x0b\n\x04\x04\0\x02\x04\x12\x03T\x08)\n\x0c\n\x05\x04\0\
    \x02\x04\x04\x12\x03T\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03T\x11\
    \x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03T\x18$\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03T'(\n\x0b\n\x04\x04\0\x02\x05\x12\x03U\x08\x1e\n\x0c\n\
    \x05\x04\0\x02\x05\x04\x12\x03U\x08\x10\n\x0c\n\x05\x04\0\x02\x05\x05\
    \x12\x03U\x11\x15\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03U\x16\x19\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03U\x1c\x1d\n\x0b\n\x04\x04\0\x02\x06\x12\
    \x03V\x08&\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03V\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x06\x05\x12\x03V\x11\x15\n\x0c\n\x05\x04\0\x02\x06\x01\x12\
    \x03V\x16!\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03V$%\n\x0b\n\x04\x04\0\
    \x02\x07\x12\x03W\x08%\n\x0c\n\x05\x04\0\x02\x07\x04\x12\x03W\x08\x10\n\
    \x0c\n\x05\x04\0\x02\x07\x05\x12\x03W\x11\x17\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03W\x18\x20\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03W#$\n\x0b\n\
    \x04\x04\0\x02\x08\x12\x03X\x08+\n\x0c\n\x05\x04\0\x02\x08\x04\x12\x03X\
    \x08\x10\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03X\x11\x17\n\x0c\n\x05\x04\
    \0\x02\x08\x01\x12\x03X\x18%\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03X(*\n\
    \x0b\n\x04\x04\0\x02\t\x12\x03Y\x08-\n\x0c\n\x05\x04\0\x02\t\x04\x12\x03\
    Y\x08\x10\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03Y\x11\x17\n\x0c\n\x05\x04\0\
    \x02\t\x01\x12\x03Y\x18'\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03Y*,\n\x0b\n\
    \x04\x04\0\x02\n\x12\x03Z\x08.\n\x0c\n\x05\x04\0\x02\n\x04\x12\x03Z\x08\
    \x10\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03Z\x11\x17\n\x0c\n\x05\x04\0\x02\
    \n\x01\x12\x03Z\x18(\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03Z+-\n\x0b\n\x04\
    \x04\0\x02\x0b\x12\x03[\x08*\n\x0c\n\x05\x04\0\x02\x0b\x04\x12\x03[\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03[\x11\x17\n\x0c\n\x05\x04\0\
    \x02\x0b\x01\x12\x03[\x18$\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03[')\n\
    \x0b\n\x04\x04\0\x02\x0c\x12\x03\\\x08!\n\x0c\n\x05\x04\0\x02\x0c\x04\
    \x12\x03\\\x08\x10\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03\\\x11\x17\n\x0c\
    \n\x05\x04\0\x02\x0c\x01\x12\x03\\\x18\x1b\n\x0c\n\x05\x04\0\x02\x0c\x03\
    \x12\x03\\\x1e\x20\n\x0b\n\x04\x04\0\x02\r\x12\x03]\x08\"\n\x0c\n\x05\
    \x04\0\x02\r\x04\x12\x03]\x08\x10\n\x0c\n\x05\x04\0\x02\r\x05\x12\x03]\
    \x11\x17\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03]\x18\x1c\n\x0c\n\x05\x04\0\
    \x02\r\x03\x12\x03]\x1f!\n\x0b\n\x04\x04\0\x02\x0e\x12\x03^\x08$\n\x0c\n\
    \x05\x04\0\x02\x0e\x04\x12\x03^\x08\x10\n\x0c\n\x05\x04\0\x02\x0e\x05\
    \x12\x03^\x11\x17\n\x0c\n\x05\x04\0\x02\x0e\x01\x12\x03^\x18\x1e\n\x0c\n\
    \x05\x04\0\x02\x0e\x03\x12\x03^!#\n\x0b\n\x04\x04\0\x02\x0f\x12\x03_\x08\
    0\n\x0c\n\x05\x04\0\x02\x0f\x04\x12\x03_\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x0f\x05\x12\x03_\x11\x17\n\x0c\n\x05\x04\0\x02\x0f\x01\x12\x03_\x18*\n\
    \x0c\n\x05\x04\0\x02\x0f\x03\x12\x03_-/\n\x0b\n\x04\x04\0\x02\x10\x12\
    \x03`\x086\n\x0c\n\x05\x04\0\x02\x10\x04\x12\x03`\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x10\x05\x12\x03`\x11\x17\n\x0c\n\x05\x04\0\x02\x10\x01\x12\
    \x03`\x180\n\x0c\n\x05\x04\0\x02\x10\x03\x12\x03`35\n\x0b\n\x04\x04\0\
    \x02\x11\x12\x03a\x08&\n\x0c\n\x05\x04\0\x02\x11\x04\x12\x03a\x08\x10\n\
    \x0c\n\x05\x04\0\x02\x11\x05\x12\x03a\x11\x17\n\x0c\n\x05\x04\0\x02\x11\
    \x01\x12\x03a\x18\x20\n\x0c\n\x05\x04\0\x02\x11\x03\x12\x03a#%\n\x0b\n\
    \x04\x04\0\x02\x12\x12\x03b\x08;\n\x0c\n\x05\x04\0\x02\x12\x04\x12\x03b\
    \x08\x10\n\x0c\n\x05\x04\0\x02\x12\x05\x12\x03b\x11\x17\n\x0c\n\x05\x04\
    \0\x02\x12\x01\x12\x03b\x185\n\x0c\n\x05\x04\0\x02\x12\x03\x12\x03b8:\n\
    \x0b\n\x04\x04\0\x02\x13\x12\x03c\x08.\n\x0c\n\x05\x04\0\x02\x13\x04\x12\
    \x03c\x08\x10\n\x0c\n\x05\x04\0\x02\x13\x05\x12\x03c\x11\x17\n\x0c\n\x05\
    \x04\0\x02\x13\x01\x12\x03c\x18(\n\x0c\n\x05\x04\0\x02\x13\x03\x12\x03c+\
    -\n\x0b\n\x04\x04\0\x02\x14\x12\x03d\x08@\n\x0c\n\x05\x04\0\x02\x14\x04\
    \x12\x03d\x08\x10\n\x0c\n\x05\x04\0\x02\x14\x06\x12\x03d\x11,\n\x0c\n\
    \x05\x04\0\x02\x14\x01\x12\x03d-:\n\x0c\n\x05\x04\0\x02\x14\x03\x12\x03d\
    =?\n\x0b\n\x04\x04\0\x02\x15\x12\x03e\x08+\n\x0c\n\x05\x04\0\x02\x15\x04\
    \x12\x03e\x08\x10\n\x0c\n\x05\x04\0\x02\x15\x06\x12\x03e\x11\x1e\n\x0c\n\
    \x05\x04\0\x02\x15\x01\x12\x03e\x1f%\n\x0c\n\x05\x04\0\x02\x15\x03\x12\
    \x03e(*\n\x0b\n\x04\x04\0\x02\x16\x12\x03f\x08*\n\x0c\n\x05\x04\0\x02\
    \x16\x04\x12\x03f\x08\x10\n\x0c\n\x05\x04\0\x02\x16\x05\x12\x03f\x11\x17\
    \n\x0c\n\x05\x04\0\x02\x16\x01\x12\x03f\x18$\n\x0c\n\x05\x04\0\x02\x16\
    \x03\x12\x03f')\n\x0b\n\x04\x04\0\x02\x17\x12\x03g\x08@\n\x0c\n\x05\x04\
    \0\x02\x17\x04\x12\x03g\x08\x10\n\x0c\n\x05\x04\0\x02\x17\x06\x12\x03g\
    \x11-\n\x0c\n\x05\x04\0\x02\x17\x01\x12\x03g.:\n\x0c\n\x05\x04\0\x02\x17\
    \x03\x12\x03g=?\n\x0b\n\x04\x04\0\x02\x18\x12\x03h\x08<\n\x0c\n\x05\x04\
    \0\x02\x18\x04\x12\x03h\x08\x10\n\x0c\n\x05\x04\0\x02\x18\x06\x12\x03h\
    \x11+\n\x0c\n\x05\x04\0\x02\x18\x01\x12\x03h,6\n\x0c\n\x05\x04\0\x02\x18\
    \x03\x12\x03h9;\n\x0b\n\x04\x04\0\x02\x19\x12\x03i\x08=\n\x0c\n\x05\x04\
    \0\x02\x19\x04\x12\x03i\x08\x10\n\x0c\n\x05\x04\0\x02\x19\x06\x12\x03i\
    \x11+\n\x0c\n\x05\x04\0\x02\x19\x01\x12\x03i,7\n\x0c\n\x05\x04\0\x02\x19\
    \x03\x12\x03i:<\n\x0b\n\x04\x04\0\x02\x1a\x12\x03j\x08+\n\x0c\n\x05\x04\
    \0\x02\x1a\x04\x12\x03j\x08\x10\n\x0c\n\x05\x04\0\x02\x1a\x05\x12\x03j\
    \x11\x17\n\x0c\n\x05\x04\0\x02\x1a\x01\x12\x03j\x18%\n\x0c\n\x05\x04\0\
    \x02\x1a\x03\x12\x03j(*\n\x0b\n\x04\x04\0\x02\x1b\x12\x03k\x08-\n\x0c\n\
    \x05\x04\0\x02\x1b\x04\x12\x03k\x08\x10\n\x0c\n\x05\x04\0\x02\x1b\x05\
    \x12\x03k\x11\x17\n\x0c\n\x05\x04\0\x02\x1b\x01\x12\x03k\x18'\n\x0c\n\
    \x05\x04\0\x02\x1b\x03\x12\x03k*,\n\x0b\n\x04\x04\0\x02\x1c\x12\x03l\x08\
    *\n\x0c\n\x05\x04\0\x02\x1c\x04\x12\x03l\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x1c\x05\x12\x03l\x11\x17\n\x0c\n\x05\x04\0\x02\x1c\x01\x12\x03l\x18$\n\
    \x0c\n\x05\x04\0\x02\x1c\x03\x12\x03l')\n\n\n\x02\x04\x01\x12\x04o\0r\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03o\x08\x19\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03p\x08&\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03p\x08\x10\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03p\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03p\x18!\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03p$%\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03q\x08,\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03q\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03q\x11!\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03q\"'\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03q*+\n\n\
    \n\x02\x04\x02\x12\x04t\0v\x01\n\n\n\x03\x04\x02\x01\x12\x03t\x08\x1c\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03u\x08,\n\x0c\n\x05\x04\x02\x02\0\x04\x12\
    \x03u\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03u\x11!\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03u\"'\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03u*+\
    \n\n\n\x02\x04\x03\x12\x04x\0y\x01\n\n\n\x03\x04\x03\x01\x12\x03x\x08!\n\
    \x0b\n\x02\x04\x04\x12\x05{\0\x86\x01\x01\n\n\n\x03\x04\x04\x01\x12\x03{\
    \x08\x1a\n\x0b\n\x04\x04\x04\x02\0\x12\x03|\x08!\n\x0c\n\x05\x04\x04\x02\
    \0\x04\x12\x03|\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03|\x11\x17\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03|\x18\x1c\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03|\x1f\x20\n\x0b\n\x04\x04\x04\x02\x01\x12\x03}\x08\x20\n\x0c\
    \n\x05\x04\x04\x02\x01\x04\x12\x03}\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03}\x11\x17\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03}\x18\x1b\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03}\x1e\x1f\n\x0b\n\x04\x04\x04\x02\
    \x02\x12\x03~\x08!\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03~\x08\x10\n\
    \x0c\n\x05\x04\x04\x02\x02\x05\x12\x03~\x11\x17\n\x0c\n\x05\x04\x04\x02\
    \x02\x01\x12\x03~\x18\x1c\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03~\x1f\
    \x20\n\x0b\n\x04\x04\x04\x02\x03\x12\x03\x7f\x08&\n\x0c\n\x05\x04\x04\
    \x02\x03\x04\x12\x03\x7f\x08\x10\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03\
    \x7f\x11\x17\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03\x7f\x18!\n\x0c\n\
    \x05\x04\x04\x02\x03\x03\x12\x03\x7f$%\n\x0c\n\x04\x04\x04\x02\x04\x12\
    \x04\x80\x01\x08(\n\r\n\x05\x04\x04\x02\x04\x04\x12\x04\x80\x01\x08\x10\
    \n\r\n\x05\x04\x04\x02\x04\x05\x12\x04\x80\x01\x11\x17\n\r\n\x05\x04\x04\
    \x02\x04\x01\x12\x04\x80\x01\x18#\n\r\n\x05\x04\x04\x02\x04\x03\x12\x04\
    \x80\x01&'\n\x0c\n\x04\x04\x04\x02\x05\x12\x04\x81\x01\x08)\n\r\n\x05\
    \x04\x04\x02\x05\x04\x12\x04\x81\x01\x08\x10\n\r\n\x05\x04\x04\x02\x05\
    \x05\x12\x04\x81\x01\x11\x17\n\r\n\x05\x04\x04\x02\x05\x01\x12\x04\x81\
    \x01\x18$\n\r\n\x05\x04\x04\x02\x05\x03\x12\x04\x81\x01'(\n\x0c\n\x04\
    \x04\x04\x02\x06\x12\x04\x82\x01\x08)\n\r\n\x05\x04\x04\x02\x06\x04\x12\
    \x04\x82\x01\x08\x10\n\r\n\x05\x04\x04\x02\x06\x05\x12\x04\x82\x01\x11\
    \x17\n\r\n\x05\x04\x04\x02\x06\x01\x12\x04\x82\x01\x18$\n\r\n\x05\x04\
    \x04\x02\x06\x03\x12\x04\x82\x01'(\n\x0c\n\x04\x04\x04\x02\x07\x12\x04\
    \x83\x01\x08\x20\n\r\n\x05\x04\x04\x02\x07\x04\x12\x04\x83\x01\x08\x10\n\
    \r\n\x05\x04\x04\x02\x07\x05\x12\x04\x83\x01\x11\x17\n\r\n\x05\x04\x04\
    \x02\x07\x01\x12\x04\x83\x01\x18\x1b\n\r\n\x05\x04\x04\x02\x07\x03\x12\
    \x04\x83\x01\x1e\x1f\n\x0c\n\x04\x04\x04\x02\x08\x12\x04\x84\x01\x08&\n\
    \r\n\x05\x04\x04\x02\x08\x04\x12\x04\x84\x01\x08\x10\n\r\n\x05\x04\x04\
    \x02\x08\x05\x12\x04\x84\x01\x11\x15\n\r\n\x05\x04\x04\x02\x08\x01\x12\
    \x04\x84\x01\x16!\n\r\n\x05\x04\x04\x02\x08\x03\x12\x04\x84\x01$%\n\x0c\
    \n\x04\x04\x04\x02\t\x12\x04\x85\x01\x08*\n\r\n\x05\x04\x04\x02\t\x04\
    \x12\x04\x85\x01\x08\x10\n\r\n\x05\x04\x04\x02\t\x05\x12\x04\x85\x01\x11\
    \x17\n\r\n\x05\x04\x04\x02\t\x01\x12\x04\x85\x01\x18$\n\r\n\x05\x04\x04\
    \x02\t\x03\x12\x04\x85\x01')\n\x0c\n\x02\x04\x05\x12\x06\x88\x01\0\xa1\
    \x01\x01\n\x0b\n\x03\x04\x05\x01\x12\x04\x88\x01\x08\"\n\x0e\n\x04\x04\
    \x05\x04\0\x12\x06\x89\x01\x08\x9d\x01\t\n\r\n\x05\x04\x05\x04\0\x01\x12\
    \x04\x89\x01\r\x13\n\x0e\n\x06\x04\x05\x04\0\x02\0\x12\x04\x8a\x01\x10\
    \x1d\n\x0f\n\x07\x04\x05\x04\0\x02\0\x01\x12\x04\x8a\x01\x10\x17\n\x0f\n\
    \x07\x04\x05\x04\0\x02\0\x02\x12\x04\x8a\x01\x1a\x1c\n\x0e\n\x06\x04\x05\
    \x04\0\x02\x01\x12\x04\x8b\x01\x10\x1c\n\x0f\n\x07\x04\x05\x04\0\x02\x01\
    \x01\x12\x04\x8b\x01\x10\x17\n\x0f\n\x07\x04\x05\x04\0\x02\x01\x02\x12\
    \x04\x8b\x01\x1a\x1b\n\x0e\n\x06\x04\x05\x04\0\x02\x02\x12\x04\x8c\x01\
    \x10\x1f\n\x0f\n\x07\x04\x05\x04\0\x02\x02\x01\x12\x04\x8c\x01\x10\x1a\n\
    \x0f\n\x07\x04\x05\x04\0\x02\x02\x02\x12\x04\x8c\x01\x1d\x1e\n\x0e\n\x06\
    \x04\x05\x04\0\x02\x03\x12\x04\x8d\x01\x10(\n\x0f\n\x07\x04\x05\x04\0\
    \x02\x03\x01\x12\x04\x8d\x01\x10#\n\x0f\n\x07\x04\x05\x04\0\x02\x03\x02\
    \x12\x04\x8d\x01&'\n\x0e\n\x06\x04\x05\x04\0\x02\x04\x12\x04\x8e\x01\x10\
    \x1f\n\x0f\n\x07\x04\x05\x04\0\x02\x04\x01\x12\x04\x8e\x01\x10\x1a\n\x0f\
    \n\x07\x04\x05\x04\0\x02\x04\x02\x12\x04\x8e\x01\x1d\x1e\n\x0e\n\x06\x04\
    \x05\x04\0\x02\x05\x12\x04\x8f\x01\x10\"\n\x0f\n\x07\x04\x05\x04\0\x02\
    \x05\x01\x12\x04\x8f\x01\x10\x1d\n\x0f\n\x07\x04\x05\x04\0\x02\x05\x02\
    \x12\x04\x8f\x01\x20!\n\x0e\n\x06\x04\x05\x04\0\x02\x06\x12\x04\x90\x01\
    \x10\x1e\n\x0f\n\x07\x04\x05\x04\0\x02\x06\x01\x12\x04\x90\x01\x10\x19\n\
    \x0f\n\x07\x04\x05\x04\0\x02\x06\x02\x12\x04\x90\x01\x1c\x1d\n\x0e\n\x06\
    \x04\x05\x04\0\x02\x07\x12\x04\x91\x01\x10'\n\x0f\n\x07\x04\x05\x04\0\
    \x02\x07\x01\x12\x04\x91\x01\x10\"\n\x0f\n\x07\x04\x05\x04\0\x02\x07\x02\
    \x12\x04\x91\x01%&\n\x0e\n\x06\x04\x05\x04\0\x02\x08\x12\x04\x92\x01\x10\
    \x1e\n\x0f\n\x07\x04\x05\x04\0\x02\x08\x01\x12\x04\x92\x01\x10\x19\n\x0f\
    \n\x07\x04\x05\x04\0\x02\x08\x02\x12\x04\x92\x01\x1c\x1d\n\x0e\n\x06\x04\
    \x05\x04\0\x02\t\x12\x04\x93\x01\x10!\n\x0f\n\x07\x04\x05\x04\0\x02\t\
    \x01\x12\x04\x93\x01\x10\x1c\n\x0f\n\x07\x04\x05\x04\0\x02\t\x02\x12\x04\
    \x93\x01\x1f\x20\n\x0e\n\x06\x04\x05\x04\0\x02\n\x12\x04\x94\x01\x10!\n\
    \x0f\n\x07\x04\x05\x04\0\x02\n\x01\x12\x04\x94\x01\x10\x1c\n\x0f\n\x07\
    \x04\x05\x04\0\x02\n\x02\x12\x04\x94\x01\x1f\x20\n\x0e\n\x06\x04\x05\x04\
    \0\x02\x0b\x12\x04\x95\x01\x10'\n\x0f\n\x07\x04\x05\x04\0\x02\x0b\x01\
    \x12\x04\x95\x01\x10!\n\x0f\n\x07\x04\x05\x04\0\x02\x0b\x02\x12\x04\x95\
    \x01$&\n\x0e\n\x06\x04\x05\x04\0\x02\x0c\x12\x04\x96\x01\x100\n\x0f\n\
    \x07\x04\x05\x04\0\x02\x0c\x01\x12\x04\x96\x01\x10*\n\x0f\n\x07\x04\x05\
    \x04\0\x02\x0c\x02\x12\x04\x96\x01-/\n\x0e\n\x06\x04\x05\x04\0\x02\r\x12\
    \x04\x97\x01\x10\x1d\n\x0f\n\x07\x04\x05\x04\0\x02\r\x01\x12\x04\x97\x01\
    \x10\x17\n\x0f\n\x07\x04\x05\x04\0\x02\r\x02\x12\x04\x97\x01\x1a\x1c\n\
    \x0e\n\x06\x04\x05\x04\0\x02\x0e\x12\x04\x98\x01\x104\n\x0f\n\x07\x04\
    \x05\x04\0\x02\x0e\x01\x12\x04\x98\x01\x10.\n\x0f\n\x07\x04\x05\x04\0\
    \x02\x0e\x02\x12\x04\x98\x0113\n\x0e\n\x06\x04\x05\x04\0\x02\x0f\x12\x04\
    \x99\x01\x10(\n\x0f\n\x07\x04\x05\x04\0\x02\x0f\x01\x12\x04\x99\x01\x10\
    \"\n\x0f\n\x07\x04\x05\x04\0\x02\x0f\x02\x12\x04\x99\x01%'\n\x0e\n\x06\
    \x04\x05\x04\0\x02\x10\x12\x04\x9a\x01\x10/\n\x0f\n\x07\x04\x05\x04\0\
    \x02\x10\x01\x12\x04\x9a\x01\x10)\n\x0f\n\x07\x04\x05\x04\0\x02\x10\x02\
    \x12\x04\x9a\x01,.\n\x0e\n\x06\x04\x05\x04\0\x02\x11\x12\x04\x9b\x01\x10\
    0\n\x0f\n\x07\x04\x05\x04\0\x02\x11\x01\x12\x04\x9b\x01\x10*\n\x0f\n\x07\
    \x04\x05\x04\0\x02\x11\x02\x12\x04\x9b\x01-/\n\x0e\n\x06\x04\x05\x04\0\
    \x02\x12\x12\x04\x9c\x01\x10*\n\x0f\n\x07\x04\x05\x04\0\x02\x12\x01\x12\
    \x04\x9c\x01\x10$\n\x0f\n\x07\x04\x05\x04\0\x02\x12\x02\x12\x04\x9c\x01'\
    )\n\x0c\n\x04\x04\x05\x02\0\x12\x04\x9f\x01\x08>\n\r\n\x05\x04\x05\x02\0\
    \x04\x12\x04\x9f\x01\x08\x10\n\r\n\x05\x04\x05\x02\0\x06\x12\x04\x9f\x01\
    \x112\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x9f\x0139\n\r\n\x05\x04\x05\
    \x02\0\x03\x12\x04\x9f\x01<=\n\x0c\n\x04\x04\x05\x02\x01\x12\x04\xa0\x01\
    \x08$\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04\xa0\x01\x08\x10\n\r\n\x05\
    \x04\x05\x02\x01\x05\x12\x04\xa0\x01\x11\x17\n\r\n\x05\x04\x05\x02\x01\
    \x01\x12\x04\xa0\x01\x18\x1f\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\xa0\
    \x01\"#\n\x0c\n\x02\x04\x06\x12\x06\xa3\x01\0\xaf\x01\x01\n\x0b\n\x03\
    \x04\x06\x01\x12\x04\xa3\x01\x08\x1f\n\x0c\n\x04\x04\x06\x02\0\x12\x04\
    \xa4\x01\x08$\n\r\n\x05\x04\x06\x02\0\x04\x12\x04\xa4\x01\x08\x10\n\r\n\
    \x05\x04\x06\x02\0\x05\x12\x04\xa4\x01\x11\x17\n\r\n\x05\x04\x06\x02\0\
    \x01\x12\x04\xa4\x01\x18\x1f\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xa4\x01\
    \"#\n\x0c\n\x04\x04\x06\x02\x01\x12\x04\xa5\x01\x08!\n\r\n\x05\x04\x06\
    \x02\x01\x04\x12\x04\xa5\x01\x08\x10\n\r\n\x05\x04\x06\x02\x01\x05\x12\
    \x04\xa5\x01\x11\x17\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xa5\x01\x18\
    \x1c\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\xa5\x01\x1f\x20\n\x0c\n\x04\
    \x04\x06\x02\x02\x12\x04\xa6\x01\x08\x20\n\r\n\x05\x04\x06\x02\x02\x04\
    \x12\x04\xa6\x01\x08\x10\n\r\n\x05\x04\x06\x02\x02\x05\x12\x04\xa6\x01\
    \x11\x17\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\xa6\x01\x18\x1b\n\r\n\x05\
    \x04\x06\x02\x02\x03\x12\x04\xa6\x01\x1e\x1f\n\x0c\n\x04\x04\x06\x02\x03\
    \x12\x04\xa7\x01\x08!\n\r\n\x05\x04\x06\x02\x03\x04\x12\x04\xa7\x01\x08\
    \x10\n\r\n\x05\x04\x06\x02\x03\x05\x12\x04\xa7\x01\x11\x17\n\r\n\x05\x04\
    \x06\x02\x03\x01\x12\x04\xa7\x01\x18\x1c\n\r\n\x05\x04\x06\x02\x03\x03\
    \x12\x04\xa7\x01\x1f\x20\n\x0c\n\x04\x04\x06\x02\x04\x12\x04\xa8\x01\x08\
    &\n\r\n\x05\x04\x06\x02\x04\x04\x12\x04\xa8\x01\x08\x10\n\r\n\x05\x04\
    \x06\x02\x04\x05\x12\x04\xa8\x01\x11\x17\n\r\n\x05\x04\x06\x02\x04\x01\
    \x12\x04\xa8\x01\x18!\n\r\n\x05\x04\x06\x02\x04\x03\x12\x04\xa8\x01$%\n\
    \x0c\n\x04\x04\x06\x02\x05\x12\x04\xa9\x01\x08(\n\r\n\x05\x04\x06\x02\
    \x05\x04\x12\x04\xa9\x01\x08\x10\n\r\n\x05\x04\x06\x02\x05\x05\x12\x04\
    \xa9\x01\x11\x17\n\r\n\x05\x04\x06\x02\x05\x01\x12\x04\xa9\x01\x18#\n\r\
    \n\x05\x04\x06\x02\x05\x03\x12\x04\xa9\x01&'\n\x0c\n\x04\x04\x06\x02\x06\
    \x12\x04\xaa\x01\x08)\n\r\n\x05\x04\x06\x02\x06\x04\x12\x04\xaa\x01\x08\
    \x10\n\r\n\x05\x04\x06\x02\x06\x05\x12\x04\xaa\x01\x11\x17\n\r\n\x05\x04\
    \x06\x02\x06\x01\x12\x04\xaa\x01\x18$\n\r\n\x05\x04\x06\x02\x06\x03\x12\
    \x04\xaa\x01'(\n\x0c\n\x04\x04\x06\x02\x07\x12\x04\xab\x01\x08)\n\r\n\
    \x05\x04\x06\x02\x07\x04\x12\x04\xab\x01\x08\x10\n\r\n\x05\x04\x06\x02\
    \x07\x05\x12\x04\xab\x01\x11\x17\n\r\n\x05\x04\x06\x02\x07\x01\x12\x04\
    \xab\x01\x18$\n\r\n\x05\x04\x06\x02\x07\x03\x12\x04\xab\x01'(\n\x0c\n\
    \x04\x04\x06\x02\x08\x12\x04\xac\x01\x08\x20\n\r\n\x05\x04\x06\x02\x08\
    \x04\x12\x04\xac\x01\x08\x10\n\r\n\x05\x04\x06\x02\x08\x05\x12\x04\xac\
    \x01\x11\x17\n\r\n\x05\x04\x06\x02\x08\x01\x12\x04\xac\x01\x18\x1b\n\r\n\
    \x05\x04\x06\x02\x08\x03\x12\x04\xac\x01\x1e\x1f\n\x0c\n\x04\x04\x06\x02\
    \t\x12\x04\xad\x01\x08+\n\r\n\x05\x04\x06\x02\t\x04\x12\x04\xad\x01\x08\
    \x10\n\r\n\x05\x04\x06\x02\t\x05\x12\x04\xad\x01\x11\x15\n\r\n\x05\x04\
    \x06\x02\t\x01\x12\x04\xad\x01\x16%\n\r\n\x05\x04\x06\x02\t\x03\x12\x04\
    \xad\x01(*\n\x0c\n\x04\x04\x06\x02\n\x12\x04\xae\x01\x08*\n\r\n\x05\x04\
    \x06\x02\n\x04\x12\x04\xae\x01\x08\x10\n\r\n\x05\x04\x06\x02\n\x05\x12\
    \x04\xae\x01\x11\x17\n\r\n\x05\x04\x06\x02\n\x01\x12\x04\xae\x01\x18$\n\
    \r\n\x05\x04\x06\x02\n\x03\x12\x04\xae\x01')\n\x0c\n\x02\x04\x07\x12\x06\
    \xb1\x01\0\xbb\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\x04\xb1\x01\x08'\n\
    \x0e\n\x04\x04\x07\x04\0\x12\x06\xb2\x01\x08\xb8\x01\t\n\r\n\x05\x04\x07\
    \x04\0\x01\x12\x04\xb2\x01\r\x13\n\x0e\n\x06\x04\x07\x04\0\x02\0\x12\x04\
    \xb3\x01\x10\x1c\n\x0f\n\x07\x04\x07\x04\0\x02\0\x01\x12\x04\xb3\x01\x10\
    \x17\n\x0f\n\x07\x04\x07\x04\0\x02\0\x02\x12\x04\xb3\x01\x1a\x1b\n\x0e\n\
    \x06\x04\x07\x04\0\x02\x01\x12\x04\xb4\x01\x101\n\x0f\n\x07\x04\x07\x04\
    \0\x02\x01\x01\x12\x04\xb4\x01\x10,\n\x0f\n\x07\x04\x07\x04\0\x02\x01\
    \x02\x12\x04\xb4\x01/0\n\x0e\n\x06\x04\x07\x04\0\x02\x02\x12\x04\xb5\x01\
    \x10'\n\x0f\n\x07\x04\x07\x04\0\x02\x02\x01\x12\x04\xb5\x01\x10\"\n\x0f\
    \n\x07\x04\x07\x04\0\x02\x02\x02\x12\x04\xb5\x01%&\n\x0e\n\x06\x04\x07\
    \x04\0\x02\x03\x12\x04\xb6\x01\x10(\n\x0f\n\x07\x04\x07\x04\0\x02\x03\
    \x01\x12\x04\xb6\x01\x10#\n\x0f\n\x07\x04\x07\x04\0\x02\x03\x02\x12\x04\
    \xb6\x01&'\n\x0e\n\x06\x04\x07\x04\0\x02\x04\x12\x04\xb7\x01\x10.\n\x0f\
    \n\x07\x04\x07\x04\0\x02\x04\x01\x12\x04\xb7\x01\x10)\n\x0f\n\x07\x04\
    \x07\x04\0\x02\x04\x02\x12\x04\xb7\x01,-\n\x0c\n\x04\x04\x07\x02\0\x12\
    \x04\xba\x01\x08C\n\r\n\x05\x04\x07\x02\0\x04\x12\x04\xba\x01\x08\x10\n\
    \r\n\x05\x04\x07\x02\0\x06\x12\x04\xba\x01\x117\n\r\n\x05\x04\x07\x02\0\
    \x01\x12\x04\xba\x018>\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xba\x01AB\n\
    \x0c\n\x02\x04\x08\x12\x06\xbd\x01\0\xc0\x01\x01\n\x0b\n\x03\x04\x08\x01\
    \x12\x04\xbd\x01\x08&\n\x0c\n\x04\x04\x08\x02\0\x12\x04\xbe\x01\x08'\n\r\
    \n\x05\x04\x08\x02\0\x04\x12\x04\xbe\x01\x08\x10\n\r\n\x05\x04\x08\x02\0\
    \x05\x12\x04\xbe\x01\x11\x17\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xbe\x01\
    \x18\"\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\xbe\x01%&\n\x0c\n\x04\x04\x08\
    \x02\x01\x12\x04\xbf\x01\x08$\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04\xbf\
    \x01\x08\x10\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\xbf\x01\x11\x17\n\r\n\
    \x05\x04\x08\x02\x01\x01\x12\x04\xbf\x01\x18\x1f\n\r\n\x05\x04\x08\x02\
    \x01\x03\x12\x04\xbf\x01\"#\n\x0c\n\x02\x04\t\x12\x06\xc2\x01\0\xc6\x01\
    \x01\n\x0b\n\x03\x04\t\x01\x12\x04\xc2\x01\x087\n\x0c\n\x04\x04\t\x02\0\
    \x12\x04\xc3\x01\x08.\n\r\n\x05\x04\t\x02\0\x04\x12\x04\xc3\x01\x08\x10\
    \n\r\n\x05\x04\t\x02\0\x06\x12\x04\xc3\x01\x11\"\n\r\n\x05\x04\t\x02\0\
    \x01\x12\x04\xc3\x01#)\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xc3\x01,-\n\x0c\
    \n\x04\x04\t\x02\x01\x12\x04\xc4\x01\x08)\n\r\n\x05\x04\t\x02\x01\x04\
    \x12\x04\xc4\x01\x08\x10\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\xc4\x01\x11\
    \x17\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xc4\x01\x18$\n\r\n\x05\x04\t\
    \x02\x01\x03\x12\x04\xc4\x01'(\n\x0c\n\x04\x04\t\x02\x02\x12\x04\xc5\x01\
    \x08/\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\xc5\x01\x08\x10\n\r\n\x05\x04\
    \t\x02\x02\x05\x12\x04\xc5\x01\x11\x17\n\r\n\x05\x04\t\x02\x02\x01\x12\
    \x04\xc5\x01\x18*\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\xc5\x01-.\n\x0c\n\
    \x02\x04\n\x12\x06\xc8\x01\0\xcd\x01\x01\n\x0b\n\x03\x04\n\x01\x12\x04\
    \xc8\x01\x08-\n\x0c\n\x04\x04\n\x02\0\x12\x04\xc9\x01\x08/\n\r\n\x05\x04\
    \n\x02\0\x04\x12\x04\xc9\x01\x08\x10\n\r\n\x05\x04\n\x02\0\x05\x12\x04\
    \xc9\x01\x11\x17\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xc9\x01\x18*\n\r\n\
    \x05\x04\n\x02\0\x03\x12\x04\xc9\x01-.\n\x0c\n\x04\x04\n\x02\x01\x12\x04\
    \xca\x01\x08&\n\r\n\x05\x04\n\x02\x01\x04\x12\x04\xca\x01\x08\x10\n\r\n\
    \x05\x04\n\x02\x01\x05\x12\x04\xca\x01\x11\x17\n\r\n\x05\x04\n\x02\x01\
    \x01\x12\x04\xca\x01\x18!\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xca\x01$%\
    \n\x0c\n\x04\x04\n\x02\x02\x12\x04\xcb\x01\x08%\n\r\n\x05\x04\n\x02\x02\
    \x04\x12\x04\xcb\x01\x08\x10\n\r\n\x05\x04\n\x02\x02\x05\x12\x04\xcb\x01\
    \x11\x17\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\xcb\x01\x18\x20\n\r\n\x05\
    \x04\n\x02\x02\x03\x12\x04\xcb\x01#$\n\x0c\n\x04\x04\n\x02\x03\x12\x04\
    \xcc\x01\x08!\n\r\n\x05\x04\n\x02\x03\x04\x12\x04\xcc\x01\x08\x10\n\r\n\
    \x05\x04\n\x02\x03\x05\x12\x04\xcc\x01\x11\x17\n\r\n\x05\x04\n\x02\x03\
    \x01\x12\x04\xcc\x01\x18\x1c\n\r\n\x05\x04\n\x02\x03\x03\x12\x04\xcc\x01\
    \x1f\x20\n\x0c\n\x02\x04\x0b\x12\x06\xcf\x01\0\xd1\x01\x01\n\x0b\n\x03\
    \x04\x0b\x01\x12\x04\xcf\x01\x08.\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\xd0\
    \x01\x08.\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04\xd0\x01\x08\x10\n\r\n\x05\
    \x04\x0b\x02\0\x06\x12\x04\xd0\x01\x11\"\n\r\n\x05\x04\x0b\x02\0\x01\x12\
    \x04\xd0\x01#)\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xd0\x01,-\n\x0c\n\x02\
    \x04\x0c\x12\x06\xd3\x01\0\xd6\x01\x01\n\x0b\n\x03\x04\x0c\x01\x12\x04\
    \xd3\x01\x08.\n\x0c\n\x04\x04\x0c\x02\0\x12\x04\xd4\x01\x08.\n\r\n\x05\
    \x04\x0c\x02\0\x04\x12\x04\xd4\x01\x08\x10\n\r\n\x05\x04\x0c\x02\0\x06\
    \x12\x04\xd4\x01\x11\"\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xd4\x01#)\n\r\
    \n\x05\x04\x0c\x02\0\x03\x12\x04\xd4\x01,-\n\x0c\n\x04\x04\x0c\x02\x01\
    \x12\x04\xd5\x01\x08)\n\r\n\x05\x04\x0c\x02\x01\x04\x12\x04\xd5\x01\x08\
    \x10\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xd5\x01\x11\x17\n\r\n\x05\x04\
    \x0c\x02\x01\x01\x12\x04\xd5\x01\x18$\n\r\n\x05\x04\x0c\x02\x01\x03\x12\
    \x04\xd5\x01'(\n\x0c\n\x02\x04\r\x12\x06\xd8\x01\0\xdb\x01\x01\n\x0b\n\
    \x03\x04\r\x01\x12\x04\xd8\x01\x08.\n\x0c\n\x04\x04\r\x02\0\x12\x04\xd9\
    \x01\x08.\n\r\n\x05\x04\r\x02\0\x04\x12\x04\xd9\x01\x08\x10\n\r\n\x05\
    \x04\r\x02\0\x06\x12\x04\xd9\x01\x11\"\n\r\n\x05\x04\r\x02\0\x01\x12\x04\
    \xd9\x01#)\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xd9\x01,-\n\x0c\n\x04\x04\r\
    \x02\x01\x12\x04\xda\x01\x08&\n\r\n\x05\x04\r\x02\x01\x04\x12\x04\xda\
    \x01\x08\x10\n\r\n\x05\x04\r\x02\x01\x05\x12\x04\xda\x01\x11\x17\n\r\n\
    \x05\x04\r\x02\x01\x01\x12\x04\xda\x01\x18!\n\r\n\x05\x04\r\x02\x01\x03\
    \x12\x04\xda\x01$%\n\x0c\n\x02\x04\x0e\x12\x06\xdd\x01\0\xe0\x01\x01\n\
    \x0b\n\x03\x04\x0e\x01\x12\x04\xdd\x01\x08\x1e\n\x0c\n\x04\x04\x0e\x02\0\
    \x12\x04\xde\x01\x08'\n\r\n\x05\x04\x0e\x02\0\x04\x12\x04\xde\x01\x08\
    \x10\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\xde\x01\x11\x17\n\r\n\x05\x04\
    \x0e\x02\0\x01\x12\x04\xde\x01\x18\"\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\
    \xde\x01%&\n\x0c\n\x04\x04\x0e\x02\x01\x12\x04\xdf\x01\x08$\n\r\n\x05\
    \x04\x0e\x02\x01\x04\x12\x04\xdf\x01\x08\x10\n\r\n\x05\x04\x0e\x02\x01\
    \x05\x12\x04\xdf\x01\x11\x17\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\xdf\
    \x01\x18\x1f\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\xdf\x01\"#\n\x0c\n\
    \x02\x04\x0f\x12\x06\xe2\x01\0\xed\x01\x01\n\x0b\n\x03\x04\x0f\x01\x12\
    \x04\xe2\x01\x08&\n\x0e\n\x04\x04\x0f\x04\0\x12\x06\xe3\x01\x08\xea\x01\
    \t\n\r\n\x05\x04\x0f\x04\0\x01\x12\x04\xe3\x01\r\x13\n\x0e\n\x06\x04\x0f\
    \x04\0\x02\0\x12\x04\xe4\x01\x10\x1c\n\x0f\n\x07\x04\x0f\x04\0\x02\0\x01\
    \x12\x04\xe4\x01\x10\x17\n\x0f\n\x07\x04\x0f\x04\0\x02\0\x02\x12\x04\xe4\
    \x01\x1a\x1b\n\x0e\n\x06\x04\x0f\x04\0\x02\x01\x12\x04\xe5\x01\x101\n\
    \x0f\n\x07\x04\x0f\x04\0\x02\x01\x01\x12\x04\xe5\x01\x10,\n\x0f\n\x07\
    \x04\x0f\x04\0\x02\x01\x02\x12\x04\xe5\x01/0\n\x0e\n\x06\x04\x0f\x04\0\
    \x02\x02\x12\x04\xe6\x01\x10-\n\x0f\n\x07\x04\x0f\x04\0\x02\x02\x01\x12\
    \x04\xe6\x01\x10(\n\x0f\n\x07\x04\x0f\x04\0\x02\x02\x02\x12\x04\xe6\x01+\
    ,\n\x0e\n\x06\x04\x0f\x04\0\x02\x03\x12\x04\xe7\x01\x10.\n\x0f\n\x07\x04\
    \x0f\x04\0\x02\x03\x01\x12\x04\xe7\x01\x10)\n\x0f\n\x07\x04\x0f\x04\0\
    \x02\x03\x02\x12\x04\xe7\x01,-\n\x0e\n\x06\x04\x0f\x04\0\x02\x04\x12\x04\
    \xe8\x01\x10(\n\x0f\n\x07\x04\x0f\x04\0\x02\x04\x01\x12\x04\xe8\x01\x10#\
    \n\x0f\n\x07\x04\x0f\x04\0\x02\x04\x02\x12\x04\xe8\x01&'\n\x0e\n\x06\x04\
    \x0f\x04\0\x02\x05\x12\x04\xe9\x01\x10.\n\x0f\n\x07\x04\x0f\x04\0\x02\
    \x05\x01\x12\x04\xe9\x01\x10)\n\x0f\n\x07\x04\x0f\x04\0\x02\x05\x02\x12\
    \x04\xe9\x01,-\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\xec\x01\x08B\n\r\n\x05\
    \x04\x0f\x02\0\x04\x12\x04\xec\x01\x08\x10\n\r\n\x05\x04\x0f\x02\0\x06\
    \x12\x04\xec\x01\x116\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\xec\x017=\n\r\
    \n\x05\x04\x0f\x02\0\x03\x12\x04\xec\x01@A\n\x0c\n\x02\x04\x10\x12\x06\
    \xef\x01\0\xf2\x01\x01\n\x0b\n\x03\x04\x10\x01\x12\x04\xef\x01\x08!\n\
    \x0c\n\x04\x04\x10\x02\0\x12\x04\xf0\x01\x081\n\r\n\x05\x04\x10\x02\0\
    \x04\x12\x04\xf0\x01\x08\x10\n\r\n\x05\x04\x10\x02\0\x05\x12\x04\xf0\x01\
    \x11\x17\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\xf0\x01\x18,\n\r\n\x05\x04\
    \x10\x02\0\x03\x12\x04\xf0\x01/0\n\x0c\n\x04\x04\x10\x02\x01\x12\x04\xf1\
    \x01\x08$\n\r\n\x05\x04\x10\x02\x01\x04\x12\x04\xf1\x01\x08\x10\n\r\n\
    \x05\x04\x10\x02\x01\x05\x12\x04\xf1\x01\x11\x17\n\r\n\x05\x04\x10\x02\
    \x01\x01\x12\x04\xf1\x01\x18\x1f\n\r\n\x05\x04\x10\x02\x01\x03\x12\x04\
    \xf1\x01\"#\n\x0c\n\x02\x04\x11\x12\x06\xf4\x01\0\xff\x01\x01\n\x0b\n\
    \x03\x04\x11\x01\x12\x04\xf4\x01\x08)\n\x0e\n\x04\x04\x11\x04\0\x12\x06\
    \xf5\x01\x08\xfc\x01\t\n\r\n\x05\x04\x11\x04\0\x01\x12\x04\xf5\x01\r\x13\
    \n\x0e\n\x06\x04\x11\x04\0\x02\0\x12\x04\xf6\x01\x10\x1c\n\x0f\n\x07\x04\
    \x11\x04\0\x02\0\x01\x12\x04\xf6\x01\x10\x17\n\x0f\n\x07\x04\x11\x04\0\
    \x02\0\x02\x12\x04\xf6\x01\x1a\x1b\n\x0e\n\x06\x04\x11\x04\0\x02\x01\x12\
    \x04\xf7\x01\x101\n\x0f\n\x07\x04\x11\x04\0\x02\x01\x01\x12\x04\xf7\x01\
    \x10,\n\x0f\n\x07\x04\x11\x04\0\x02\x01\x02\x12\x04\xf7\x01/0\n\x0e\n\
    \x06\x04\x11\x04\0\x02\x02\x12\x04\xf8\x01\x10&\n\x0f\n\x07\x04\x11\x04\
    \0\x02\x02\x01\x12\x04\xf8\x01\x10!\n\x0f\n\x07\x04\x11\x04\0\x02\x02\
    \x02\x12\x04\xf8\x01$%\n\x0e\n\x06\x04\x11\x04\0\x02\x03\x12\x04\xf9\x01\
    \x10)\n\x0f\n\x07\x04\x11\x04\0\x02\x03\x01\x12\x04\xf9\x01\x10$\n\x0f\n\
    \x07\x04\x11\x04\0\x02\x03\x02\x12\x04\xf9\x01'(\n\x0e\n\x06\x04\x11\x04\
    \0\x02\x04\x12\x04\xfa\x01\x10'\n\x0f\n\x07\x04\x11\x04\0\x02\x04\x01\
    \x12\x04\xfa\x01\x10\"\n\x0f\n\x07\x04\x11\x04\0\x02\x04\x02\x12\x04\xfa\
    \x01%&\n\x0e\n\x06\x04\x11\x04\0\x02\x05\x12\x04\xfb\x01\x10.\n\x0f\n\
    \x07\x04\x11\x04\0\x02\x05\x01\x12\x04\xfb\x01\x10)\n\x0f\n\x07\x04\x11\
    \x04\0\x02\x05\x02\x12\x04\xfb\x01,-\n\x0c\n\x04\x04\x11\x02\0\x12\x04\
    \xfe\x01\x08E\n\r\n\x05\x04\x11\x02\0\x04\x12\x04\xfe\x01\x08\x10\n\r\n\
    \x05\x04\x11\x02\0\x06\x12\x04\xfe\x01\x119\n\r\n\x05\x04\x11\x02\0\x01\
    \x12\x04\xfe\x01:@\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\xfe\x01CD\n\x0c\n\
    \x02\x04\x12\x12\x06\x81\x02\0\x83\x02\x01\n\x0b\n\x03\x04\x12\x01\x12\
    \x04\x81\x02\x08\x19\n\x0c\n\x04\x04\x12\x02\0\x12\x04\x82\x02\x08$\n\r\
    \n\x05\x04\x12\x02\0\x04\x12\x04\x82\x02\x08\x10\n\r\n\x05\x04\x12\x02\0\
    \x05\x12\x04\x82\x02\x11\x17\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\x82\x02\
    \x18\x1f\n\r\n\x05\x04\x12\x02\0\x03\x12\x04\x82\x02\"#\n\x0c\n\x02\x04\
    \x13\x12\x06\x85\x02\0\x8e\x02\x01\n\x0b\n\x03\x04\x13\x01\x12\x04\x85\
    \x02\x08!\n\x0e\n\x04\x04\x13\x04\0\x12\x06\x86\x02\x08\x8b\x02\t\n\r\n\
    \x05\x04\x13\x04\0\x01\x12\x04\x86\x02\r\x13\n\x0e\n\x06\x04\x13\x04\0\
    \x02\0\x12\x04\x87\x02\x10\x1c\n\x0f\n\x07\x04\x13\x04\0\x02\0\x01\x12\
    \x04\x87\x02\x10\x17\n\x0f\n\x07\x04\x13\x04\0\x02\0\x02\x12\x04\x87\x02\
    \x1a\x1b\n\x0e\n\x06\x04\x13\x04\0\x02\x01\x12\x04\x88\x02\x10'\n\x0f\n\
    \x07\x04\x13\x04\0\x02\x01\x01\x12\x04\x88\x02\x10\"\n\x0f\n\x07\x04\x13\
    \x04\0\x02\x01\x02\x12\x04\x88\x02%&\n\x0e\n\x06\x04\x13\x04\0\x02\x02\
    \x12\x04\x89\x02\x10(\n\x0f\n\x07\x04\x13\x04\0\x02\x02\x01\x12\x04\x89\
    \x02\x10#\n\x0f\n\x07\x04\x13\x04\0\x02\x02\x02\x12\x04\x89\x02&'\n\x0e\
    \n\x06\x04\x13\x04\0\x02\x03\x12\x04\x8a\x02\x10.\n\x0f\n\x07\x04\x13\
    \x04\0\x02\x03\x01\x12\x04\x8a\x02\x10)\n\x0f\n\x07\x04\x13\x04\0\x02\
    \x03\x02\x12\x04\x8a\x02,-\n\x0c\n\x04\x04\x13\x02\0\x12\x04\x8d\x02\x08\
    =\n\r\n\x05\x04\x13\x02\0\x04\x12\x04\x8d\x02\x08\x10\n\r\n\x05\x04\x13\
    \x02\0\x06\x12\x04\x8d\x02\x111\n\r\n\x05\x04\x13\x02\0\x01\x12\x04\x8d\
    \x0228\n\r\n\x05\x04\x13\x02\0\x03\x12\x04\x8d\x02;<\n\x0c\n\x02\x04\x14\
    \x12\x06\x90\x02\0\x92\x02\x01\n\x0b\n\x03\x04\x14\x01\x12\x04\x90\x02\
    \x08!\n\x0c\n\x04\x04\x14\x02\0\x12\x04\x91\x02\x08*\n\r\n\x05\x04\x14\
    \x02\0\x04\x12\x04\x91\x02\x08\x10\n\r\n\x05\x04\x14\x02\0\x05\x12\x04\
    \x91\x02\x11\x17\n\r\n\x05\x04\x14\x02\0\x01\x12\x04\x91\x02\x18%\n\r\n\
    \x05\x04\x14\x02\0\x03\x12\x04\x91\x02()\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::dota_shared_enums::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(27);
            messages.push(CMsgDOTATeamInfo::generated_message_descriptor_data());
            messages.push(CMsgDOTATeamsInfo::generated_message_descriptor_data());
            messages.push(CMsgDOTATeamInfoList::generated_message_descriptor_data());
            messages.push(CMsgDOTAMyTeamInfoRequest::generated_message_descriptor_data());
            messages.push(CMsgDOTACreateTeam::generated_message_descriptor_data());
            messages.push(CMsgDOTACreateTeamResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTAEditTeamDetails::generated_message_descriptor_data());
            messages.push(CMsgDOTAEditTeamDetailsResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTATeamInvite_InviterToGC::generated_message_descriptor_data());
            messages.push(CMsgDOTATeamInvite_GCImmediateResponseToInviter::generated_message_descriptor_data());
            messages.push(CMsgDOTATeamInvite_GCRequestToInvitee::generated_message_descriptor_data());
            messages.push(CMsgDOTATeamInvite_InviteeResponseToGC::generated_message_descriptor_data());
            messages.push(CMsgDOTATeamInvite_GCResponseToInviter::generated_message_descriptor_data());
            messages.push(CMsgDOTATeamInvite_GCResponseToInvitee::generated_message_descriptor_data());
            messages.push(CMsgDOTAKickTeamMember::generated_message_descriptor_data());
            messages.push(CMsgDOTAKickTeamMemberResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTATransferTeamAdmin::generated_message_descriptor_data());
            messages.push(CMsgDOTATransferTeamAdminResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTALeaveTeam::generated_message_descriptor_data());
            messages.push(CMsgDOTALeaveTeamResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTABetaParticipation::generated_message_descriptor_data());
            messages.push(cmsg_dotateam_info::HeroStats::generated_message_descriptor_data());
            messages.push(cmsg_dotateam_info::MemberStats::generated_message_descriptor_data());
            messages.push(cmsg_dotateam_info::TeamStats::generated_message_descriptor_data());
            messages.push(cmsg_dotateam_info::DPCResult::generated_message_descriptor_data());
            messages.push(cmsg_dotateam_info::Member::generated_message_descriptor_data());
            messages.push(cmsg_dotateam_info::AuditEntry::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(6);
            enums.push(ETeamInviteResult::generated_enum_descriptor_data());
            enums.push(cmsg_dotacreate_team_response::Result::generated_enum_descriptor_data());
            enums.push(cmsg_dotaedit_team_details_response::Result::generated_enum_descriptor_data());
            enums.push(cmsg_dotakick_team_member_response::Result::generated_enum_descriptor_data());
            enums.push(cmsg_dotatransfer_team_admin_response::Result::generated_enum_descriptor_data());
            enums.push(cmsg_dotaleave_team_response::Result::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
