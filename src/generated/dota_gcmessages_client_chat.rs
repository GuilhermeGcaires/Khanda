// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_chat.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CMsgClientToGCPrivateChatInvite)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCPrivateChatInvite {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
    pub private_chat_channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCPrivateChatInvite.invited_account_id)
    pub invited_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCPrivateChatInvite.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCPrivateChatInvite {
    fn default() -> &'a CMsgClientToGCPrivateChatInvite {
        <CMsgClientToGCPrivateChatInvite as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCPrivateChatInvite {
    pub fn new() -> CMsgClientToGCPrivateChatInvite {
        ::std::default::Default::default()
    }

    // optional string private_chat_channel_name = 1;

    pub fn private_chat_channel_name(&self) -> &str {
        match self.private_chat_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_private_chat_channel_name(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_name(&self) -> bool {
        self.private_chat_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_name(&mut self, v: ::std::string::String) {
        self.private_chat_channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_chat_channel_name(&mut self) -> &mut ::std::string::String {
        if self.private_chat_channel_name.is_none() {
            self.private_chat_channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.private_chat_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_chat_channel_name(&mut self) -> ::std::string::String {
        self.private_chat_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 invited_account_id = 2;

    pub fn invited_account_id(&self) -> u32 {
        self.invited_account_id.unwrap_or(0)
    }

    pub fn clear_invited_account_id(&mut self) {
        self.invited_account_id = ::std::option::Option::None;
    }

    pub fn has_invited_account_id(&self) -> bool {
        self.invited_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invited_account_id(&mut self, v: u32) {
        self.invited_account_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "private_chat_channel_name",
            |m: &CMsgClientToGCPrivateChatInvite| { &m.private_chat_channel_name },
            |m: &mut CMsgClientToGCPrivateChatInvite| { &mut m.private_chat_channel_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "invited_account_id",
            |m: &CMsgClientToGCPrivateChatInvite| { &m.invited_account_id },
            |m: &mut CMsgClientToGCPrivateChatInvite| { &mut m.invited_account_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCPrivateChatInvite>(
            "CMsgClientToGCPrivateChatInvite",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCPrivateChatInvite {
    const NAME: &'static str = "CMsgClientToGCPrivateChatInvite";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_chat_channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.invited_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.invited_account_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.invited_account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCPrivateChatInvite {
        CMsgClientToGCPrivateChatInvite::new()
    }

    fn clear(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
        self.invited_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCPrivateChatInvite {
        static instance: CMsgClientToGCPrivateChatInvite = CMsgClientToGCPrivateChatInvite {
            private_chat_channel_name: ::std::option::Option::None,
            invited_account_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCPrivateChatInvite {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCPrivateChatInvite").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCPrivateChatInvite {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCPrivateChatInvite {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCPrivateChatKick)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCPrivateChatKick {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
    pub private_chat_channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCPrivateChatKick.kick_account_id)
    pub kick_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCPrivateChatKick.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCPrivateChatKick {
    fn default() -> &'a CMsgClientToGCPrivateChatKick {
        <CMsgClientToGCPrivateChatKick as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCPrivateChatKick {
    pub fn new() -> CMsgClientToGCPrivateChatKick {
        ::std::default::Default::default()
    }

    // optional string private_chat_channel_name = 1;

    pub fn private_chat_channel_name(&self) -> &str {
        match self.private_chat_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_private_chat_channel_name(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_name(&self) -> bool {
        self.private_chat_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_name(&mut self, v: ::std::string::String) {
        self.private_chat_channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_chat_channel_name(&mut self) -> &mut ::std::string::String {
        if self.private_chat_channel_name.is_none() {
            self.private_chat_channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.private_chat_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_chat_channel_name(&mut self) -> ::std::string::String {
        self.private_chat_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 kick_account_id = 2;

    pub fn kick_account_id(&self) -> u32 {
        self.kick_account_id.unwrap_or(0)
    }

    pub fn clear_kick_account_id(&mut self) {
        self.kick_account_id = ::std::option::Option::None;
    }

    pub fn has_kick_account_id(&self) -> bool {
        self.kick_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kick_account_id(&mut self, v: u32) {
        self.kick_account_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "private_chat_channel_name",
            |m: &CMsgClientToGCPrivateChatKick| { &m.private_chat_channel_name },
            |m: &mut CMsgClientToGCPrivateChatKick| { &mut m.private_chat_channel_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "kick_account_id",
            |m: &CMsgClientToGCPrivateChatKick| { &m.kick_account_id },
            |m: &mut CMsgClientToGCPrivateChatKick| { &mut m.kick_account_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCPrivateChatKick>(
            "CMsgClientToGCPrivateChatKick",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCPrivateChatKick {
    const NAME: &'static str = "CMsgClientToGCPrivateChatKick";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_chat_channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.kick_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.kick_account_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.kick_account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCPrivateChatKick {
        CMsgClientToGCPrivateChatKick::new()
    }

    fn clear(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
        self.kick_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCPrivateChatKick {
        static instance: CMsgClientToGCPrivateChatKick = CMsgClientToGCPrivateChatKick {
            private_chat_channel_name: ::std::option::Option::None,
            kick_account_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCPrivateChatKick {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCPrivateChatKick").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCPrivateChatKick {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCPrivateChatKick {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCPrivateChatPromote)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCPrivateChatPromote {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
    pub private_chat_channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCPrivateChatPromote.promote_account_id)
    pub promote_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCPrivateChatPromote.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCPrivateChatPromote {
    fn default() -> &'a CMsgClientToGCPrivateChatPromote {
        <CMsgClientToGCPrivateChatPromote as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCPrivateChatPromote {
    pub fn new() -> CMsgClientToGCPrivateChatPromote {
        ::std::default::Default::default()
    }

    // optional string private_chat_channel_name = 1;

    pub fn private_chat_channel_name(&self) -> &str {
        match self.private_chat_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_private_chat_channel_name(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_name(&self) -> bool {
        self.private_chat_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_name(&mut self, v: ::std::string::String) {
        self.private_chat_channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_chat_channel_name(&mut self) -> &mut ::std::string::String {
        if self.private_chat_channel_name.is_none() {
            self.private_chat_channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.private_chat_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_chat_channel_name(&mut self) -> ::std::string::String {
        self.private_chat_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 promote_account_id = 2;

    pub fn promote_account_id(&self) -> u32 {
        self.promote_account_id.unwrap_or(0)
    }

    pub fn clear_promote_account_id(&mut self) {
        self.promote_account_id = ::std::option::Option::None;
    }

    pub fn has_promote_account_id(&self) -> bool {
        self.promote_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_promote_account_id(&mut self, v: u32) {
        self.promote_account_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "private_chat_channel_name",
            |m: &CMsgClientToGCPrivateChatPromote| { &m.private_chat_channel_name },
            |m: &mut CMsgClientToGCPrivateChatPromote| { &mut m.private_chat_channel_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "promote_account_id",
            |m: &CMsgClientToGCPrivateChatPromote| { &m.promote_account_id },
            |m: &mut CMsgClientToGCPrivateChatPromote| { &mut m.promote_account_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCPrivateChatPromote>(
            "CMsgClientToGCPrivateChatPromote",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCPrivateChatPromote {
    const NAME: &'static str = "CMsgClientToGCPrivateChatPromote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_chat_channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.promote_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.promote_account_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.promote_account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCPrivateChatPromote {
        CMsgClientToGCPrivateChatPromote::new()
    }

    fn clear(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
        self.promote_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCPrivateChatPromote {
        static instance: CMsgClientToGCPrivateChatPromote = CMsgClientToGCPrivateChatPromote {
            private_chat_channel_name: ::std::option::Option::None,
            promote_account_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCPrivateChatPromote {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCPrivateChatPromote").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCPrivateChatPromote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCPrivateChatPromote {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCPrivateChatDemote)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCPrivateChatDemote {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
    pub private_chat_channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCPrivateChatDemote.demote_account_id)
    pub demote_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCPrivateChatDemote.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCPrivateChatDemote {
    fn default() -> &'a CMsgClientToGCPrivateChatDemote {
        <CMsgClientToGCPrivateChatDemote as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCPrivateChatDemote {
    pub fn new() -> CMsgClientToGCPrivateChatDemote {
        ::std::default::Default::default()
    }

    // optional string private_chat_channel_name = 1;

    pub fn private_chat_channel_name(&self) -> &str {
        match self.private_chat_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_private_chat_channel_name(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_name(&self) -> bool {
        self.private_chat_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_name(&mut self, v: ::std::string::String) {
        self.private_chat_channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_chat_channel_name(&mut self) -> &mut ::std::string::String {
        if self.private_chat_channel_name.is_none() {
            self.private_chat_channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.private_chat_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_chat_channel_name(&mut self) -> ::std::string::String {
        self.private_chat_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 demote_account_id = 2;

    pub fn demote_account_id(&self) -> u32 {
        self.demote_account_id.unwrap_or(0)
    }

    pub fn clear_demote_account_id(&mut self) {
        self.demote_account_id = ::std::option::Option::None;
    }

    pub fn has_demote_account_id(&self) -> bool {
        self.demote_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_demote_account_id(&mut self, v: u32) {
        self.demote_account_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "private_chat_channel_name",
            |m: &CMsgClientToGCPrivateChatDemote| { &m.private_chat_channel_name },
            |m: &mut CMsgClientToGCPrivateChatDemote| { &mut m.private_chat_channel_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "demote_account_id",
            |m: &CMsgClientToGCPrivateChatDemote| { &m.demote_account_id },
            |m: &mut CMsgClientToGCPrivateChatDemote| { &mut m.demote_account_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCPrivateChatDemote>(
            "CMsgClientToGCPrivateChatDemote",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCPrivateChatDemote {
    const NAME: &'static str = "CMsgClientToGCPrivateChatDemote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_chat_channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.demote_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.demote_account_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.demote_account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCPrivateChatDemote {
        CMsgClientToGCPrivateChatDemote::new()
    }

    fn clear(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
        self.demote_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCPrivateChatDemote {
        static instance: CMsgClientToGCPrivateChatDemote = CMsgClientToGCPrivateChatDemote {
            private_chat_channel_name: ::std::option::Option::None,
            demote_account_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCPrivateChatDemote {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCPrivateChatDemote").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCPrivateChatDemote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCPrivateChatDemote {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCToClientPrivateChatResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientPrivateChatResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
    pub private_chat_channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgGCToClientPrivateChatResponse.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_gcto_client_private_chat_response::Result>>,
    // @@protoc_insertion_point(field:dota.CMsgGCToClientPrivateChatResponse.username)
    pub username: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCToClientPrivateChatResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientPrivateChatResponse {
    fn default() -> &'a CMsgGCToClientPrivateChatResponse {
        <CMsgGCToClientPrivateChatResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientPrivateChatResponse {
    pub fn new() -> CMsgGCToClientPrivateChatResponse {
        ::std::default::Default::default()
    }

    // optional string private_chat_channel_name = 1;

    pub fn private_chat_channel_name(&self) -> &str {
        match self.private_chat_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_private_chat_channel_name(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_name(&self) -> bool {
        self.private_chat_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_name(&mut self, v: ::std::string::String) {
        self.private_chat_channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_chat_channel_name(&mut self) -> &mut ::std::string::String {
        if self.private_chat_channel_name.is_none() {
            self.private_chat_channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.private_chat_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_chat_channel_name(&mut self) -> ::std::string::String {
        self.private_chat_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .dota.CMsgGCToClientPrivateChatResponse.Result result = 2;

    pub fn result(&self) -> cmsg_gcto_client_private_chat_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_gcto_client_private_chat_response::Result::SUCCESS),
            None => cmsg_gcto_client_private_chat_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_gcto_client_private_chat_response::Result) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string username = 3;

    pub fn username(&self) -> &str {
        match self.username.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_username(&mut self) {
        self.username = ::std::option::Option::None;
    }

    pub fn has_username(&self) -> bool {
        self.username.is_some()
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        if self.username.is_none() {
            self.username = ::std::option::Option::Some(::std::string::String::new());
        }
        self.username.as_mut().unwrap()
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        self.username.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "private_chat_channel_name",
            |m: &CMsgGCToClientPrivateChatResponse| { &m.private_chat_channel_name },
            |m: &mut CMsgGCToClientPrivateChatResponse| { &mut m.private_chat_channel_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgGCToClientPrivateChatResponse| { &m.result },
            |m: &mut CMsgGCToClientPrivateChatResponse| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "username",
            |m: &CMsgGCToClientPrivateChatResponse| { &m.username },
            |m: &mut CMsgGCToClientPrivateChatResponse| { &mut m.username },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCToClientPrivateChatResponse>(
            "CMsgGCToClientPrivateChatResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCToClientPrivateChatResponse {
    const NAME: &'static str = "CMsgGCToClientPrivateChatResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_chat_channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                26 => {
                    self.username = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.username.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.result {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.username.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientPrivateChatResponse {
        CMsgGCToClientPrivateChatResponse::new()
    }

    fn clear(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.username = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientPrivateChatResponse {
        static instance: CMsgGCToClientPrivateChatResponse = CMsgGCToClientPrivateChatResponse {
            private_chat_channel_name: ::std::option::Option::None,
            result: ::std::option::Option::None,
            username: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCToClientPrivateChatResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCToClientPrivateChatResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCToClientPrivateChatResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCToClientPrivateChatResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGCToClientPrivateChatResponse`
pub mod cmsg_gcto_client_private_chat_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgGCToClientPrivateChatResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_CREATION_LOCK)
        FAILURE_CREATION_LOCK = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_SQL_TRANSACTION)
        FAILURE_SQL_TRANSACTION = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_SDO_LOAD)
        FAILURE_SDO_LOAD = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_NO_PERMISSION)
        FAILURE_NO_PERMISSION = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_ALREADY_MEMBER)
        FAILURE_ALREADY_MEMBER = 5,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_NOT_A_MEMBER)
        FAILURE_NOT_A_MEMBER = 7,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_NO_REMAINING_ADMINS)
        FAILURE_NO_REMAINING_ADMINS = 8,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_NO_ROOM)
        FAILURE_NO_ROOM = 9,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_CREATION_RATE_LIMITED)
        FAILURE_CREATION_RATE_LIMITED = 10,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_UNKNOWN_CHANNEL_NAME)
        FAILURE_UNKNOWN_CHANNEL_NAME = 11,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_UNKNOWN_USER)
        FAILURE_UNKNOWN_USER = 12,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_UNKNOWN_ERROR)
        FAILURE_UNKNOWN_ERROR = 13,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_CANNOT_KICK_ADMIN)
        FAILURE_CANNOT_KICK_ADMIN = 14,
        // @@protoc_insertion_point(enum_value:dota.CMsgGCToClientPrivateChatResponse.Result.FAILURE_ALREADY_ADMIN)
        FAILURE_ALREADY_ADMIN = 15,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::FAILURE_CREATION_LOCK),
                2 => ::std::option::Option::Some(Result::FAILURE_SQL_TRANSACTION),
                3 => ::std::option::Option::Some(Result::FAILURE_SDO_LOAD),
                4 => ::std::option::Option::Some(Result::FAILURE_NO_PERMISSION),
                5 => ::std::option::Option::Some(Result::FAILURE_ALREADY_MEMBER),
                7 => ::std::option::Option::Some(Result::FAILURE_NOT_A_MEMBER),
                8 => ::std::option::Option::Some(Result::FAILURE_NO_REMAINING_ADMINS),
                9 => ::std::option::Option::Some(Result::FAILURE_NO_ROOM),
                10 => ::std::option::Option::Some(Result::FAILURE_CREATION_RATE_LIMITED),
                11 => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_CHANNEL_NAME),
                12 => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_USER),
                13 => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_ERROR),
                14 => ::std::option::Option::Some(Result::FAILURE_CANNOT_KICK_ADMIN),
                15 => ::std::option::Option::Some(Result::FAILURE_ALREADY_ADMIN),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "FAILURE_CREATION_LOCK" => ::std::option::Option::Some(Result::FAILURE_CREATION_LOCK),
                "FAILURE_SQL_TRANSACTION" => ::std::option::Option::Some(Result::FAILURE_SQL_TRANSACTION),
                "FAILURE_SDO_LOAD" => ::std::option::Option::Some(Result::FAILURE_SDO_LOAD),
                "FAILURE_NO_PERMISSION" => ::std::option::Option::Some(Result::FAILURE_NO_PERMISSION),
                "FAILURE_ALREADY_MEMBER" => ::std::option::Option::Some(Result::FAILURE_ALREADY_MEMBER),
                "FAILURE_NOT_A_MEMBER" => ::std::option::Option::Some(Result::FAILURE_NOT_A_MEMBER),
                "FAILURE_NO_REMAINING_ADMINS" => ::std::option::Option::Some(Result::FAILURE_NO_REMAINING_ADMINS),
                "FAILURE_NO_ROOM" => ::std::option::Option::Some(Result::FAILURE_NO_ROOM),
                "FAILURE_CREATION_RATE_LIMITED" => ::std::option::Option::Some(Result::FAILURE_CREATION_RATE_LIMITED),
                "FAILURE_UNKNOWN_CHANNEL_NAME" => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_CHANNEL_NAME),
                "FAILURE_UNKNOWN_USER" => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_USER),
                "FAILURE_UNKNOWN_ERROR" => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_ERROR),
                "FAILURE_CANNOT_KICK_ADMIN" => ::std::option::Option::Some(Result::FAILURE_CANNOT_KICK_ADMIN),
                "FAILURE_ALREADY_ADMIN" => ::std::option::Option::Some(Result::FAILURE_ALREADY_ADMIN),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::FAILURE_CREATION_LOCK,
            Result::FAILURE_SQL_TRANSACTION,
            Result::FAILURE_SDO_LOAD,
            Result::FAILURE_NO_PERMISSION,
            Result::FAILURE_ALREADY_MEMBER,
            Result::FAILURE_NOT_A_MEMBER,
            Result::FAILURE_NO_REMAINING_ADMINS,
            Result::FAILURE_NO_ROOM,
            Result::FAILURE_CREATION_RATE_LIMITED,
            Result::FAILURE_UNKNOWN_CHANNEL_NAME,
            Result::FAILURE_UNKNOWN_USER,
            Result::FAILURE_UNKNOWN_ERROR,
            Result::FAILURE_CANNOT_KICK_ADMIN,
            Result::FAILURE_ALREADY_ADMIN,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgGCToClientPrivateChatResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Result::SUCCESS => 0,
                Result::FAILURE_CREATION_LOCK => 1,
                Result::FAILURE_SQL_TRANSACTION => 2,
                Result::FAILURE_SDO_LOAD => 3,
                Result::FAILURE_NO_PERMISSION => 4,
                Result::FAILURE_ALREADY_MEMBER => 5,
                Result::FAILURE_NOT_A_MEMBER => 6,
                Result::FAILURE_NO_REMAINING_ADMINS => 7,
                Result::FAILURE_NO_ROOM => 8,
                Result::FAILURE_CREATION_RATE_LIMITED => 9,
                Result::FAILURE_UNKNOWN_CHANNEL_NAME => 10,
                Result::FAILURE_UNKNOWN_USER => 11,
                Result::FAILURE_UNKNOWN_ERROR => 12,
                Result::FAILURE_CANNOT_KICK_ADMIN => 13,
                Result::FAILURE_ALREADY_ADMIN => 14,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("CMsgGCToClientPrivateChatResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAJoinChatChannel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAJoinChatChannel {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannel.channel_name)
    pub channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannel.channel_type)
    pub channel_type: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_shared_enums::DOTAChatChannelType_t>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannel.silent_rejection)
    pub silent_rejection: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAJoinChatChannel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAJoinChatChannel {
    fn default() -> &'a CMsgDOTAJoinChatChannel {
        <CMsgDOTAJoinChatChannel as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAJoinChatChannel {
    pub fn new() -> CMsgDOTAJoinChatChannel {
        ::std::default::Default::default()
    }

    // optional string channel_name = 2;

    pub fn channel_name(&self) -> &str {
        match self.channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_channel_name(&mut self) {
        self.channel_name = ::std::option::Option::None;
    }

    pub fn has_channel_name(&self) -> bool {
        self.channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_name(&mut self, v: ::std::string::String) {
        self.channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_name(&mut self) -> &mut ::std::string::String {
        if self.channel_name.is_none() {
            self.channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_channel_name(&mut self) -> ::std::string::String {
        self.channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .dota.DOTAChatChannelType_t channel_type = 4;

    pub fn channel_type(&self) -> super::dota_shared_enums::DOTAChatChannelType_t {
        match self.channel_type {
            Some(e) => e.enum_value_or(super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional),
            None => super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional,
        }
    }

    pub fn clear_channel_type(&mut self) {
        self.channel_type = ::std::option::Option::None;
    }

    pub fn has_channel_type(&self) -> bool {
        self.channel_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_type(&mut self, v: super::dota_shared_enums::DOTAChatChannelType_t) {
        self.channel_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool silent_rejection = 5;

    pub fn silent_rejection(&self) -> bool {
        self.silent_rejection.unwrap_or(false)
    }

    pub fn clear_silent_rejection(&mut self) {
        self.silent_rejection = ::std::option::Option::None;
    }

    pub fn has_silent_rejection(&self) -> bool {
        self.silent_rejection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_silent_rejection(&mut self, v: bool) {
        self.silent_rejection = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_name",
            |m: &CMsgDOTAJoinChatChannel| { &m.channel_name },
            |m: &mut CMsgDOTAJoinChatChannel| { &mut m.channel_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_type",
            |m: &CMsgDOTAJoinChatChannel| { &m.channel_type },
            |m: &mut CMsgDOTAJoinChatChannel| { &mut m.channel_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "silent_rejection",
            |m: &CMsgDOTAJoinChatChannel| { &m.silent_rejection },
            |m: &mut CMsgDOTAJoinChatChannel| { &mut m.silent_rejection },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAJoinChatChannel>(
            "CMsgDOTAJoinChatChannel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAJoinChatChannel {
    const NAME: &'static str = "CMsgDOTAJoinChatChannel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.channel_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.silent_rejection = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.channel_type {
            my_size += ::protobuf::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.silent_rejection {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.channel_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.channel_type {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.silent_rejection {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAJoinChatChannel {
        CMsgDOTAJoinChatChannel::new()
    }

    fn clear(&mut self) {
        self.channel_name = ::std::option::Option::None;
        self.channel_type = ::std::option::Option::None;
        self.silent_rejection = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAJoinChatChannel {
        static instance: CMsgDOTAJoinChatChannel = CMsgDOTAJoinChatChannel {
            channel_name: ::std::option::Option::None,
            channel_type: ::std::option::Option::None,
            silent_rejection: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAJoinChatChannel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAJoinChatChannel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAJoinChatChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAJoinChatChannel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTALeaveChatChannel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTALeaveChatChannel {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTALeaveChatChannel.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTALeaveChatChannel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTALeaveChatChannel {
    fn default() -> &'a CMsgDOTALeaveChatChannel {
        <CMsgDOTALeaveChatChannel as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTALeaveChatChannel {
    pub fn new() -> CMsgDOTALeaveChatChannel {
        ::std::default::Default::default()
    }

    // optional uint64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_id",
            |m: &CMsgDOTALeaveChatChannel| { &m.channel_id },
            |m: &mut CMsgDOTALeaveChatChannel| { &mut m.channel_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTALeaveChatChannel>(
            "CMsgDOTALeaveChatChannel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTALeaveChatChannel {
    const NAME: &'static str = "CMsgDOTALeaveChatChannel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.channel_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTALeaveChatChannel {
        CMsgDOTALeaveChatChannel::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTALeaveChatChannel {
        static instance: CMsgDOTALeaveChatChannel = CMsgDOTALeaveChatChannel {
            channel_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTALeaveChatChannel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTALeaveChatChannel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTALeaveChatChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTALeaveChatChannel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgGCChatReportPublicSpam)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCChatReportPublicSpam {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGCChatReportPublicSpam.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgGCChatReportPublicSpam.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGCChatReportPublicSpam.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCChatReportPublicSpam {
    fn default() -> &'a CMsgGCChatReportPublicSpam {
        <CMsgGCChatReportPublicSpam as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCChatReportPublicSpam {
    pub fn new() -> CMsgGCChatReportPublicSpam {
        ::std::default::Default::default()
    }

    // optional uint64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional uint32 channel_user_id = 2;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_id",
            |m: &CMsgGCChatReportPublicSpam| { &m.channel_id },
            |m: &mut CMsgGCChatReportPublicSpam| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_user_id",
            |m: &CMsgGCChatReportPublicSpam| { &m.channel_user_id },
            |m: &mut CMsgGCChatReportPublicSpam| { &mut m.channel_user_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCChatReportPublicSpam>(
            "CMsgGCChatReportPublicSpam",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCChatReportPublicSpam {
    const NAME: &'static str = "CMsgGCChatReportPublicSpam";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.channel_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCChatReportPublicSpam {
        CMsgGCChatReportPublicSpam::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCChatReportPublicSpam {
        static instance: CMsgGCChatReportPublicSpam = CMsgGCChatReportPublicSpam {
            channel_id: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCChatReportPublicSpam {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCChatReportPublicSpam").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCChatReportPublicSpam {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCChatReportPublicSpam {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAChatModeratorBan)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatModeratorBan {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatModeratorBan.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatModeratorBan.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatModeratorBan.duration)
    pub duration: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatModeratorBan.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatModeratorBan {
    fn default() -> &'a CMsgDOTAChatModeratorBan {
        <CMsgDOTAChatModeratorBan as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatModeratorBan {
    pub fn new() -> CMsgDOTAChatModeratorBan {
        ::std::default::Default::default()
    }

    // optional uint64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional uint32 account_id = 2;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 duration = 3;

    pub fn duration(&self) -> u32 {
        self.duration.unwrap_or(0)
    }

    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u32) {
        self.duration = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_id",
            |m: &CMsgDOTAChatModeratorBan| { &m.channel_id },
            |m: &mut CMsgDOTAChatModeratorBan| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CMsgDOTAChatModeratorBan| { &m.account_id },
            |m: &mut CMsgDOTAChatModeratorBan| { &mut m.account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "duration",
            |m: &CMsgDOTAChatModeratorBan| { &m.duration },
            |m: &mut CMsgDOTAChatModeratorBan| { &mut m.duration },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAChatModeratorBan>(
            "CMsgDOTAChatModeratorBan",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAChatModeratorBan {
    const NAME: &'static str = "CMsgDOTAChatModeratorBan";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.channel_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.duration {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.account_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.duration {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatModeratorBan {
        CMsgDOTAChatModeratorBan::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.account_id = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatModeratorBan {
        static instance: CMsgDOTAChatModeratorBan = CMsgDOTAChatModeratorBan {
            channel_id: ::std::option::Option::None,
            account_id: ::std::option::Option::None,
            duration: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAChatModeratorBan {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAChatModeratorBan").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAChatModeratorBan {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAChatModeratorBan {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAChatMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatMessage {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.persona_name)
    pub persona_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.text)
    pub text: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.timestamp)
    pub timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.suggest_invite_account_id)
    pub suggest_invite_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.suggest_invite_name)
    pub suggest_invite_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.fantasy_draft_owner_account_id)
    pub fantasy_draft_owner_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.fantasy_draft_player_account_id)
    pub fantasy_draft_player_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.event_id)
    pub event_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.suggest_invite_to_lobby)
    pub suggest_invite_to_lobby: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.event_points)
    pub event_points: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.coin_flip)
    pub coin_flip: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.player_id)
    pub player_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.share_profile_account_id)
    pub share_profile_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.dice_roll)
    pub dice_roll: ::protobuf::MessageField<cmsg_dotachat_message::DiceRoll>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.share_party_id)
    pub share_party_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.share_lobby_id)
    pub share_lobby_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.share_lobby_custom_game_id)
    pub share_lobby_custom_game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.share_lobby_passkey)
    pub share_lobby_passkey: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.private_chat_channel_id)
    pub private_chat_channel_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.status)
    pub status: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.legacy_battle_cup_victory)
    pub legacy_battle_cup_victory: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.battle_cup_streak)
    pub battle_cup_streak: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.badge_level)
    pub badge_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.suggest_pick_hero_id)
    pub suggest_pick_hero_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
    pub suggest_pick_hero_role: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.suggest_ban_hero_id)
    pub suggest_ban_hero_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.trivia_answer)
    pub trivia_answer: ::protobuf::MessageField<cmsg_dotachat_message::TriviaAnswered>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.requested_ability_id)
    pub requested_ability_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.chat_flags)
    pub chat_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.started_finding_match)
    pub started_finding_match: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.ctrl_is_down)
    pub ctrl_is_down: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.favorite_team_id)
    pub favorite_team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.favorite_team_quality)
    pub favorite_team_quality: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.suggest_player_draft_pick)
    pub suggest_player_draft_pick: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.player_draft_pick)
    pub player_draft_pick: ::protobuf::MessageField<cmsg_dotachat_message::PlayerDraftPick>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatMessage {
    fn default() -> &'a CMsgDOTAChatMessage {
        <CMsgDOTAChatMessage as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatMessage {
    pub fn new() -> CMsgDOTAChatMessage {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint64 channel_id = 2;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional string persona_name = 3;

    pub fn persona_name(&self) -> &str {
        match self.persona_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_persona_name(&mut self) {
        self.persona_name = ::std::option::Option::None;
    }

    pub fn has_persona_name(&self) -> bool {
        self.persona_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persona_name(&mut self, v: ::std::string::String) {
        self.persona_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
        if self.persona_name.is_none() {
            self.persona_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.persona_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_persona_name(&mut self) -> ::std::string::String {
        self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string text = 4;

    pub fn text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 timestamp = 5;

    pub fn timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 suggest_invite_account_id = 6;

    pub fn suggest_invite_account_id(&self) -> u32 {
        self.suggest_invite_account_id.unwrap_or(0)
    }

    pub fn clear_suggest_invite_account_id(&mut self) {
        self.suggest_invite_account_id = ::std::option::Option::None;
    }

    pub fn has_suggest_invite_account_id(&self) -> bool {
        self.suggest_invite_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_invite_account_id(&mut self, v: u32) {
        self.suggest_invite_account_id = ::std::option::Option::Some(v);
    }

    // optional string suggest_invite_name = 7;

    pub fn suggest_invite_name(&self) -> &str {
        match self.suggest_invite_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_suggest_invite_name(&mut self) {
        self.suggest_invite_name = ::std::option::Option::None;
    }

    pub fn has_suggest_invite_name(&self) -> bool {
        self.suggest_invite_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_invite_name(&mut self, v: ::std::string::String) {
        self.suggest_invite_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suggest_invite_name(&mut self) -> &mut ::std::string::String {
        if self.suggest_invite_name.is_none() {
            self.suggest_invite_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.suggest_invite_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_suggest_invite_name(&mut self) -> ::std::string::String {
        self.suggest_invite_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 fantasy_draft_owner_account_id = 8;

    pub fn fantasy_draft_owner_account_id(&self) -> u32 {
        self.fantasy_draft_owner_account_id.unwrap_or(0)
    }

    pub fn clear_fantasy_draft_owner_account_id(&mut self) {
        self.fantasy_draft_owner_account_id = ::std::option::Option::None;
    }

    pub fn has_fantasy_draft_owner_account_id(&self) -> bool {
        self.fantasy_draft_owner_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_draft_owner_account_id(&mut self, v: u32) {
        self.fantasy_draft_owner_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 fantasy_draft_player_account_id = 9;

    pub fn fantasy_draft_player_account_id(&self) -> u32 {
        self.fantasy_draft_player_account_id.unwrap_or(0)
    }

    pub fn clear_fantasy_draft_player_account_id(&mut self) {
        self.fantasy_draft_player_account_id = ::std::option::Option::None;
    }

    pub fn has_fantasy_draft_player_account_id(&self) -> bool {
        self.fantasy_draft_player_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_draft_player_account_id(&mut self, v: u32) {
        self.fantasy_draft_player_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 event_id = 10;

    pub fn event_id(&self) -> u32 {
        self.event_id.unwrap_or(0)
    }

    pub fn clear_event_id(&mut self) {
        self.event_id = ::std::option::Option::None;
    }

    pub fn has_event_id(&self) -> bool {
        self.event_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_id(&mut self, v: u32) {
        self.event_id = ::std::option::Option::Some(v);
    }

    // optional bool suggest_invite_to_lobby = 11;

    pub fn suggest_invite_to_lobby(&self) -> bool {
        self.suggest_invite_to_lobby.unwrap_or(false)
    }

    pub fn clear_suggest_invite_to_lobby(&mut self) {
        self.suggest_invite_to_lobby = ::std::option::Option::None;
    }

    pub fn has_suggest_invite_to_lobby(&self) -> bool {
        self.suggest_invite_to_lobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_invite_to_lobby(&mut self, v: bool) {
        self.suggest_invite_to_lobby = ::std::option::Option::Some(v);
    }

    // optional uint32 event_points = 12;

    pub fn event_points(&self) -> u32 {
        self.event_points.unwrap_or(0)
    }

    pub fn clear_event_points(&mut self) {
        self.event_points = ::std::option::Option::None;
    }

    pub fn has_event_points(&self) -> bool {
        self.event_points.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_points(&mut self, v: u32) {
        self.event_points = ::std::option::Option::Some(v);
    }

    // optional bool coin_flip = 13;

    pub fn coin_flip(&self) -> bool {
        self.coin_flip.unwrap_or(false)
    }

    pub fn clear_coin_flip(&mut self) {
        self.coin_flip = ::std::option::Option::None;
    }

    pub fn has_coin_flip(&self) -> bool {
        self.coin_flip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coin_flip(&mut self, v: bool) {
        self.coin_flip = ::std::option::Option::Some(v);
    }

    // optional int32 player_id = 14;

    pub fn player_id(&self) -> i32 {
        self.player_id.unwrap_or(0)
    }

    pub fn clear_player_id(&mut self) {
        self.player_id = ::std::option::Option::None;
    }

    pub fn has_player_id(&self) -> bool {
        self.player_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_id(&mut self, v: i32) {
        self.player_id = ::std::option::Option::Some(v);
    }

    // optional uint32 share_profile_account_id = 15;

    pub fn share_profile_account_id(&self) -> u32 {
        self.share_profile_account_id.unwrap_or(0)
    }

    pub fn clear_share_profile_account_id(&mut self) {
        self.share_profile_account_id = ::std::option::Option::None;
    }

    pub fn has_share_profile_account_id(&self) -> bool {
        self.share_profile_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_share_profile_account_id(&mut self, v: u32) {
        self.share_profile_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 channel_user_id = 16;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }

    // optional uint64 share_party_id = 18;

    pub fn share_party_id(&self) -> u64 {
        self.share_party_id.unwrap_or(0)
    }

    pub fn clear_share_party_id(&mut self) {
        self.share_party_id = ::std::option::Option::None;
    }

    pub fn has_share_party_id(&self) -> bool {
        self.share_party_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_share_party_id(&mut self, v: u64) {
        self.share_party_id = ::std::option::Option::Some(v);
    }

    // optional uint64 share_lobby_id = 19;

    pub fn share_lobby_id(&self) -> u64 {
        self.share_lobby_id.unwrap_or(0)
    }

    pub fn clear_share_lobby_id(&mut self) {
        self.share_lobby_id = ::std::option::Option::None;
    }

    pub fn has_share_lobby_id(&self) -> bool {
        self.share_lobby_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_share_lobby_id(&mut self, v: u64) {
        self.share_lobby_id = ::std::option::Option::Some(v);
    }

    // optional uint64 share_lobby_custom_game_id = 20;

    pub fn share_lobby_custom_game_id(&self) -> u64 {
        self.share_lobby_custom_game_id.unwrap_or(0)
    }

    pub fn clear_share_lobby_custom_game_id(&mut self) {
        self.share_lobby_custom_game_id = ::std::option::Option::None;
    }

    pub fn has_share_lobby_custom_game_id(&self) -> bool {
        self.share_lobby_custom_game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_share_lobby_custom_game_id(&mut self, v: u64) {
        self.share_lobby_custom_game_id = ::std::option::Option::Some(v);
    }

    // optional string share_lobby_passkey = 21;

    pub fn share_lobby_passkey(&self) -> &str {
        match self.share_lobby_passkey.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_share_lobby_passkey(&mut self) {
        self.share_lobby_passkey = ::std::option::Option::None;
    }

    pub fn has_share_lobby_passkey(&self) -> bool {
        self.share_lobby_passkey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_share_lobby_passkey(&mut self, v: ::std::string::String) {
        self.share_lobby_passkey = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_share_lobby_passkey(&mut self) -> &mut ::std::string::String {
        if self.share_lobby_passkey.is_none() {
            self.share_lobby_passkey = ::std::option::Option::Some(::std::string::String::new());
        }
        self.share_lobby_passkey.as_mut().unwrap()
    }

    // Take field
    pub fn take_share_lobby_passkey(&mut self) -> ::std::string::String {
        self.share_lobby_passkey.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 private_chat_channel_id = 22;

    pub fn private_chat_channel_id(&self) -> u32 {
        self.private_chat_channel_id.unwrap_or(0)
    }

    pub fn clear_private_chat_channel_id(&mut self) {
        self.private_chat_channel_id = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_id(&self) -> bool {
        self.private_chat_channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_id(&mut self, v: u32) {
        self.private_chat_channel_id = ::std::option::Option::Some(v);
    }

    // optional uint32 status = 23;

    pub fn status(&self) -> u32 {
        self.status.unwrap_or(0)
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = ::std::option::Option::Some(v);
    }

    // optional bool legacy_battle_cup_victory = 24;

    pub fn legacy_battle_cup_victory(&self) -> bool {
        self.legacy_battle_cup_victory.unwrap_or(false)
    }

    pub fn clear_legacy_battle_cup_victory(&mut self) {
        self.legacy_battle_cup_victory = ::std::option::Option::None;
    }

    pub fn has_legacy_battle_cup_victory(&self) -> bool {
        self.legacy_battle_cup_victory.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_battle_cup_victory(&mut self, v: bool) {
        self.legacy_battle_cup_victory = ::std::option::Option::Some(v);
    }

    // optional uint32 battle_cup_streak = 29;

    pub fn battle_cup_streak(&self) -> u32 {
        self.battle_cup_streak.unwrap_or(0)
    }

    pub fn clear_battle_cup_streak(&mut self) {
        self.battle_cup_streak = ::std::option::Option::None;
    }

    pub fn has_battle_cup_streak(&self) -> bool {
        self.battle_cup_streak.is_some()
    }

    // Param is passed by value, moved
    pub fn set_battle_cup_streak(&mut self, v: u32) {
        self.battle_cup_streak = ::std::option::Option::Some(v);
    }

    // optional uint32 badge_level = 25;

    pub fn badge_level(&self) -> u32 {
        self.badge_level.unwrap_or(0)
    }

    pub fn clear_badge_level(&mut self) {
        self.badge_level = ::std::option::Option::None;
    }

    pub fn has_badge_level(&self) -> bool {
        self.badge_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_badge_level(&mut self, v: u32) {
        self.badge_level = ::std::option::Option::Some(v);
    }

    // optional uint32 suggest_pick_hero_id = 26;

    pub fn suggest_pick_hero_id(&self) -> u32 {
        self.suggest_pick_hero_id.unwrap_or(0)
    }

    pub fn clear_suggest_pick_hero_id(&mut self) {
        self.suggest_pick_hero_id = ::std::option::Option::None;
    }

    pub fn has_suggest_pick_hero_id(&self) -> bool {
        self.suggest_pick_hero_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_pick_hero_id(&mut self, v: u32) {
        self.suggest_pick_hero_id = ::std::option::Option::Some(v);
    }

    // optional string suggest_pick_hero_role = 27;

    pub fn suggest_pick_hero_role(&self) -> &str {
        match self.suggest_pick_hero_role.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_suggest_pick_hero_role(&mut self) {
        self.suggest_pick_hero_role = ::std::option::Option::None;
    }

    pub fn has_suggest_pick_hero_role(&self) -> bool {
        self.suggest_pick_hero_role.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_pick_hero_role(&mut self, v: ::std::string::String) {
        self.suggest_pick_hero_role = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suggest_pick_hero_role(&mut self) -> &mut ::std::string::String {
        if self.suggest_pick_hero_role.is_none() {
            self.suggest_pick_hero_role = ::std::option::Option::Some(::std::string::String::new());
        }
        self.suggest_pick_hero_role.as_mut().unwrap()
    }

    // Take field
    pub fn take_suggest_pick_hero_role(&mut self) -> ::std::string::String {
        self.suggest_pick_hero_role.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 suggest_ban_hero_id = 30;

    pub fn suggest_ban_hero_id(&self) -> u32 {
        self.suggest_ban_hero_id.unwrap_or(0)
    }

    pub fn clear_suggest_ban_hero_id(&mut self) {
        self.suggest_ban_hero_id = ::std::option::Option::None;
    }

    pub fn has_suggest_ban_hero_id(&self) -> bool {
        self.suggest_ban_hero_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_ban_hero_id(&mut self, v: u32) {
        self.suggest_ban_hero_id = ::std::option::Option::Some(v);
    }

    // optional int32 requested_ability_id = 33;

    pub fn requested_ability_id(&self) -> i32 {
        self.requested_ability_id.unwrap_or(0)
    }

    pub fn clear_requested_ability_id(&mut self) {
        self.requested_ability_id = ::std::option::Option::None;
    }

    pub fn has_requested_ability_id(&self) -> bool {
        self.requested_ability_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requested_ability_id(&mut self, v: i32) {
        self.requested_ability_id = ::std::option::Option::Some(v);
    }

    // optional uint32 chat_flags = 34;

    pub fn chat_flags(&self) -> u32 {
        self.chat_flags.unwrap_or(0)
    }

    pub fn clear_chat_flags(&mut self) {
        self.chat_flags = ::std::option::Option::None;
    }

    pub fn has_chat_flags(&self) -> bool {
        self.chat_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_flags(&mut self, v: u32) {
        self.chat_flags = ::std::option::Option::Some(v);
    }

    // optional bool started_finding_match = 35;

    pub fn started_finding_match(&self) -> bool {
        self.started_finding_match.unwrap_or(false)
    }

    pub fn clear_started_finding_match(&mut self) {
        self.started_finding_match = ::std::option::Option::None;
    }

    pub fn has_started_finding_match(&self) -> bool {
        self.started_finding_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_started_finding_match(&mut self, v: bool) {
        self.started_finding_match = ::std::option::Option::Some(v);
    }

    // optional bool ctrl_is_down = 36;

    pub fn ctrl_is_down(&self) -> bool {
        self.ctrl_is_down.unwrap_or(false)
    }

    pub fn clear_ctrl_is_down(&mut self) {
        self.ctrl_is_down = ::std::option::Option::None;
    }

    pub fn has_ctrl_is_down(&self) -> bool {
        self.ctrl_is_down.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ctrl_is_down(&mut self, v: bool) {
        self.ctrl_is_down = ::std::option::Option::Some(v);
    }

    // optional uint32 favorite_team_id = 37;

    pub fn favorite_team_id(&self) -> u32 {
        self.favorite_team_id.unwrap_or(0)
    }

    pub fn clear_favorite_team_id(&mut self) {
        self.favorite_team_id = ::std::option::Option::None;
    }

    pub fn has_favorite_team_id(&self) -> bool {
        self.favorite_team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_favorite_team_id(&mut self, v: u32) {
        self.favorite_team_id = ::std::option::Option::Some(v);
    }

    // optional uint32 favorite_team_quality = 38;

    pub fn favorite_team_quality(&self) -> u32 {
        self.favorite_team_quality.unwrap_or(0)
    }

    pub fn clear_favorite_team_quality(&mut self) {
        self.favorite_team_quality = ::std::option::Option::None;
    }

    pub fn has_favorite_team_quality(&self) -> bool {
        self.favorite_team_quality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_favorite_team_quality(&mut self, v: u32) {
        self.favorite_team_quality = ::std::option::Option::Some(v);
    }

    // optional int32 suggest_player_draft_pick = 39;

    pub fn suggest_player_draft_pick(&self) -> i32 {
        self.suggest_player_draft_pick.unwrap_or(0)
    }

    pub fn clear_suggest_player_draft_pick(&mut self) {
        self.suggest_player_draft_pick = ::std::option::Option::None;
    }

    pub fn has_suggest_player_draft_pick(&self) -> bool {
        self.suggest_player_draft_pick.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_player_draft_pick(&mut self, v: i32) {
        self.suggest_player_draft_pick = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(38);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CMsgDOTAChatMessage| { &m.account_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_id",
            |m: &CMsgDOTAChatMessage| { &m.channel_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "persona_name",
            |m: &CMsgDOTAChatMessage| { &m.persona_name },
            |m: &mut CMsgDOTAChatMessage| { &mut m.persona_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "text",
            |m: &CMsgDOTAChatMessage| { &m.text },
            |m: &mut CMsgDOTAChatMessage| { &mut m.text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp",
            |m: &CMsgDOTAChatMessage| { &m.timestamp },
            |m: &mut CMsgDOTAChatMessage| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suggest_invite_account_id",
            |m: &CMsgDOTAChatMessage| { &m.suggest_invite_account_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.suggest_invite_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suggest_invite_name",
            |m: &CMsgDOTAChatMessage| { &m.suggest_invite_name },
            |m: &mut CMsgDOTAChatMessage| { &mut m.suggest_invite_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fantasy_draft_owner_account_id",
            |m: &CMsgDOTAChatMessage| { &m.fantasy_draft_owner_account_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.fantasy_draft_owner_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fantasy_draft_player_account_id",
            |m: &CMsgDOTAChatMessage| { &m.fantasy_draft_player_account_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.fantasy_draft_player_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "event_id",
            |m: &CMsgDOTAChatMessage| { &m.event_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.event_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suggest_invite_to_lobby",
            |m: &CMsgDOTAChatMessage| { &m.suggest_invite_to_lobby },
            |m: &mut CMsgDOTAChatMessage| { &mut m.suggest_invite_to_lobby },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "event_points",
            |m: &CMsgDOTAChatMessage| { &m.event_points },
            |m: &mut CMsgDOTAChatMessage| { &mut m.event_points },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "coin_flip",
            |m: &CMsgDOTAChatMessage| { &m.coin_flip },
            |m: &mut CMsgDOTAChatMessage| { &mut m.coin_flip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_id",
            |m: &CMsgDOTAChatMessage| { &m.player_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.player_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "share_profile_account_id",
            |m: &CMsgDOTAChatMessage| { &m.share_profile_account_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.share_profile_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_user_id",
            |m: &CMsgDOTAChatMessage| { &m.channel_user_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.channel_user_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_dotachat_message::DiceRoll>(
            "dice_roll",
            |m: &CMsgDOTAChatMessage| { &m.dice_roll },
            |m: &mut CMsgDOTAChatMessage| { &mut m.dice_roll },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "share_party_id",
            |m: &CMsgDOTAChatMessage| { &m.share_party_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.share_party_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "share_lobby_id",
            |m: &CMsgDOTAChatMessage| { &m.share_lobby_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.share_lobby_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "share_lobby_custom_game_id",
            |m: &CMsgDOTAChatMessage| { &m.share_lobby_custom_game_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.share_lobby_custom_game_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "share_lobby_passkey",
            |m: &CMsgDOTAChatMessage| { &m.share_lobby_passkey },
            |m: &mut CMsgDOTAChatMessage| { &mut m.share_lobby_passkey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "private_chat_channel_id",
            |m: &CMsgDOTAChatMessage| { &m.private_chat_channel_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.private_chat_channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &CMsgDOTAChatMessage| { &m.status },
            |m: &mut CMsgDOTAChatMessage| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_battle_cup_victory",
            |m: &CMsgDOTAChatMessage| { &m.legacy_battle_cup_victory },
            |m: &mut CMsgDOTAChatMessage| { &mut m.legacy_battle_cup_victory },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "battle_cup_streak",
            |m: &CMsgDOTAChatMessage| { &m.battle_cup_streak },
            |m: &mut CMsgDOTAChatMessage| { &mut m.battle_cup_streak },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "badge_level",
            |m: &CMsgDOTAChatMessage| { &m.badge_level },
            |m: &mut CMsgDOTAChatMessage| { &mut m.badge_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suggest_pick_hero_id",
            |m: &CMsgDOTAChatMessage| { &m.suggest_pick_hero_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.suggest_pick_hero_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suggest_pick_hero_role",
            |m: &CMsgDOTAChatMessage| { &m.suggest_pick_hero_role },
            |m: &mut CMsgDOTAChatMessage| { &mut m.suggest_pick_hero_role },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suggest_ban_hero_id",
            |m: &CMsgDOTAChatMessage| { &m.suggest_ban_hero_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.suggest_ban_hero_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_dotachat_message::TriviaAnswered>(
            "trivia_answer",
            |m: &CMsgDOTAChatMessage| { &m.trivia_answer },
            |m: &mut CMsgDOTAChatMessage| { &mut m.trivia_answer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "requested_ability_id",
            |m: &CMsgDOTAChatMessage| { &m.requested_ability_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.requested_ability_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "chat_flags",
            |m: &CMsgDOTAChatMessage| { &m.chat_flags },
            |m: &mut CMsgDOTAChatMessage| { &mut m.chat_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "started_finding_match",
            |m: &CMsgDOTAChatMessage| { &m.started_finding_match },
            |m: &mut CMsgDOTAChatMessage| { &mut m.started_finding_match },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ctrl_is_down",
            |m: &CMsgDOTAChatMessage| { &m.ctrl_is_down },
            |m: &mut CMsgDOTAChatMessage| { &mut m.ctrl_is_down },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "favorite_team_id",
            |m: &CMsgDOTAChatMessage| { &m.favorite_team_id },
            |m: &mut CMsgDOTAChatMessage| { &mut m.favorite_team_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "favorite_team_quality",
            |m: &CMsgDOTAChatMessage| { &m.favorite_team_quality },
            |m: &mut CMsgDOTAChatMessage| { &mut m.favorite_team_quality },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suggest_player_draft_pick",
            |m: &CMsgDOTAChatMessage| { &m.suggest_player_draft_pick },
            |m: &mut CMsgDOTAChatMessage| { &mut m.suggest_player_draft_pick },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_dotachat_message::PlayerDraftPick>(
            "player_draft_pick",
            |m: &CMsgDOTAChatMessage| { &m.player_draft_pick },
            |m: &mut CMsgDOTAChatMessage| { &mut m.player_draft_pick },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAChatMessage>(
            "CMsgDOTAChatMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAChatMessage {
    const NAME: &'static str = "CMsgDOTAChatMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.channel_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.persona_name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.text = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.suggest_invite_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.suggest_invite_name = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.fantasy_draft_owner_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.fantasy_draft_player_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.event_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.suggest_invite_to_lobby = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.event_points = ::std::option::Option::Some(is.read_uint32()?);
                },
                104 => {
                    self.coin_flip = ::std::option::Option::Some(is.read_bool()?);
                },
                112 => {
                    self.player_id = ::std::option::Option::Some(is.read_int32()?);
                },
                120 => {
                    self.share_profile_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                128 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                138 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.dice_roll)?;
                },
                144 => {
                    self.share_party_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                152 => {
                    self.share_lobby_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                160 => {
                    self.share_lobby_custom_game_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                170 => {
                    self.share_lobby_passkey = ::std::option::Option::Some(is.read_string()?);
                },
                176 => {
                    self.private_chat_channel_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                184 => {
                    self.status = ::std::option::Option::Some(is.read_uint32()?);
                },
                192 => {
                    self.legacy_battle_cup_victory = ::std::option::Option::Some(is.read_bool()?);
                },
                232 => {
                    self.battle_cup_streak = ::std::option::Option::Some(is.read_uint32()?);
                },
                200 => {
                    self.badge_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                208 => {
                    self.suggest_pick_hero_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                218 => {
                    self.suggest_pick_hero_role = ::std::option::Option::Some(is.read_string()?);
                },
                240 => {
                    self.suggest_ban_hero_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                258 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.trivia_answer)?;
                },
                264 => {
                    self.requested_ability_id = ::std::option::Option::Some(is.read_int32()?);
                },
                272 => {
                    self.chat_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                280 => {
                    self.started_finding_match = ::std::option::Option::Some(is.read_bool()?);
                },
                288 => {
                    self.ctrl_is_down = ::std::option::Option::Some(is.read_bool()?);
                },
                296 => {
                    self.favorite_team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                304 => {
                    self.favorite_team_quality = ::std::option::Option::Some(is.read_uint32()?);
                },
                312 => {
                    self.suggest_player_draft_pick = ::std::option::Option::Some(is.read_int32()?);
                },
                322 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_draft_pick)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.channel_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.persona_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.suggest_invite_account_id {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.suggest_invite_name.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.fantasy_draft_owner_account_id {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.fantasy_draft_player_account_id {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.event_id {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.suggest_invite_to_lobby {
            my_size += 1 + 1;
        }
        if let Some(v) = self.event_points {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        if let Some(v) = self.coin_flip {
            my_size += 1 + 1;
        }
        if let Some(v) = self.player_id {
            my_size += ::protobuf::rt::int32_size(14, v);
        }
        if let Some(v) = self.share_profile_account_id {
            my_size += ::protobuf::rt::uint32_size(15, v);
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::protobuf::rt::uint32_size(16, v);
        }
        if let Some(v) = self.dice_roll.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.share_party_id {
            my_size += ::protobuf::rt::uint64_size(18, v);
        }
        if let Some(v) = self.share_lobby_id {
            my_size += ::protobuf::rt::uint64_size(19, v);
        }
        if let Some(v) = self.share_lobby_custom_game_id {
            my_size += ::protobuf::rt::uint64_size(20, v);
        }
        if let Some(v) = self.share_lobby_passkey.as_ref() {
            my_size += ::protobuf::rt::string_size(21, &v);
        }
        if let Some(v) = self.private_chat_channel_id {
            my_size += ::protobuf::rt::uint32_size(22, v);
        }
        if let Some(v) = self.status {
            my_size += ::protobuf::rt::uint32_size(23, v);
        }
        if let Some(v) = self.legacy_battle_cup_victory {
            my_size += 2 + 1;
        }
        if let Some(v) = self.battle_cup_streak {
            my_size += ::protobuf::rt::uint32_size(29, v);
        }
        if let Some(v) = self.badge_level {
            my_size += ::protobuf::rt::uint32_size(25, v);
        }
        if let Some(v) = self.suggest_pick_hero_id {
            my_size += ::protobuf::rt::uint32_size(26, v);
        }
        if let Some(v) = self.suggest_pick_hero_role.as_ref() {
            my_size += ::protobuf::rt::string_size(27, &v);
        }
        if let Some(v) = self.suggest_ban_hero_id {
            my_size += ::protobuf::rt::uint32_size(30, v);
        }
        if let Some(v) = self.trivia_answer.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.requested_ability_id {
            my_size += ::protobuf::rt::int32_size(33, v);
        }
        if let Some(v) = self.chat_flags {
            my_size += ::protobuf::rt::uint32_size(34, v);
        }
        if let Some(v) = self.started_finding_match {
            my_size += 2 + 1;
        }
        if let Some(v) = self.ctrl_is_down {
            my_size += 2 + 1;
        }
        if let Some(v) = self.favorite_team_id {
            my_size += ::protobuf::rt::uint32_size(37, v);
        }
        if let Some(v) = self.favorite_team_quality {
            my_size += ::protobuf::rt::uint32_size(38, v);
        }
        if let Some(v) = self.suggest_player_draft_pick {
            my_size += ::protobuf::rt::int32_size(39, v);
        }
        if let Some(v) = self.player_draft_pick.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.channel_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.persona_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.text.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.suggest_invite_account_id {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.suggest_invite_name.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.fantasy_draft_owner_account_id {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.fantasy_draft_player_account_id {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.event_id {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.suggest_invite_to_lobby {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.event_points {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.coin_flip {
            os.write_bool(13, v)?;
        }
        if let Some(v) = self.player_id {
            os.write_int32(14, v)?;
        }
        if let Some(v) = self.share_profile_account_id {
            os.write_uint32(15, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(16, v)?;
        }
        if let Some(v) = self.dice_roll.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
        }
        if let Some(v) = self.share_party_id {
            os.write_uint64(18, v)?;
        }
        if let Some(v) = self.share_lobby_id {
            os.write_uint64(19, v)?;
        }
        if let Some(v) = self.share_lobby_custom_game_id {
            os.write_uint64(20, v)?;
        }
        if let Some(v) = self.share_lobby_passkey.as_ref() {
            os.write_string(21, v)?;
        }
        if let Some(v) = self.private_chat_channel_id {
            os.write_uint32(22, v)?;
        }
        if let Some(v) = self.status {
            os.write_uint32(23, v)?;
        }
        if let Some(v) = self.legacy_battle_cup_victory {
            os.write_bool(24, v)?;
        }
        if let Some(v) = self.battle_cup_streak {
            os.write_uint32(29, v)?;
        }
        if let Some(v) = self.badge_level {
            os.write_uint32(25, v)?;
        }
        if let Some(v) = self.suggest_pick_hero_id {
            os.write_uint32(26, v)?;
        }
        if let Some(v) = self.suggest_pick_hero_role.as_ref() {
            os.write_string(27, v)?;
        }
        if let Some(v) = self.suggest_ban_hero_id {
            os.write_uint32(30, v)?;
        }
        if let Some(v) = self.trivia_answer.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(32, v, os)?;
        }
        if let Some(v) = self.requested_ability_id {
            os.write_int32(33, v)?;
        }
        if let Some(v) = self.chat_flags {
            os.write_uint32(34, v)?;
        }
        if let Some(v) = self.started_finding_match {
            os.write_bool(35, v)?;
        }
        if let Some(v) = self.ctrl_is_down {
            os.write_bool(36, v)?;
        }
        if let Some(v) = self.favorite_team_id {
            os.write_uint32(37, v)?;
        }
        if let Some(v) = self.favorite_team_quality {
            os.write_uint32(38, v)?;
        }
        if let Some(v) = self.suggest_player_draft_pick {
            os.write_int32(39, v)?;
        }
        if let Some(v) = self.player_draft_pick.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(40, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatMessage {
        CMsgDOTAChatMessage::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.channel_id = ::std::option::Option::None;
        self.persona_name = ::std::option::Option::None;
        self.text = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.suggest_invite_account_id = ::std::option::Option::None;
        self.suggest_invite_name = ::std::option::Option::None;
        self.fantasy_draft_owner_account_id = ::std::option::Option::None;
        self.fantasy_draft_player_account_id = ::std::option::Option::None;
        self.event_id = ::std::option::Option::None;
        self.suggest_invite_to_lobby = ::std::option::Option::None;
        self.event_points = ::std::option::Option::None;
        self.coin_flip = ::std::option::Option::None;
        self.player_id = ::std::option::Option::None;
        self.share_profile_account_id = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.dice_roll.clear();
        self.share_party_id = ::std::option::Option::None;
        self.share_lobby_id = ::std::option::Option::None;
        self.share_lobby_custom_game_id = ::std::option::Option::None;
        self.share_lobby_passkey = ::std::option::Option::None;
        self.private_chat_channel_id = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.legacy_battle_cup_victory = ::std::option::Option::None;
        self.battle_cup_streak = ::std::option::Option::None;
        self.badge_level = ::std::option::Option::None;
        self.suggest_pick_hero_id = ::std::option::Option::None;
        self.suggest_pick_hero_role = ::std::option::Option::None;
        self.suggest_ban_hero_id = ::std::option::Option::None;
        self.trivia_answer.clear();
        self.requested_ability_id = ::std::option::Option::None;
        self.chat_flags = ::std::option::Option::None;
        self.started_finding_match = ::std::option::Option::None;
        self.ctrl_is_down = ::std::option::Option::None;
        self.favorite_team_id = ::std::option::Option::None;
        self.favorite_team_quality = ::std::option::Option::None;
        self.suggest_player_draft_pick = ::std::option::Option::None;
        self.player_draft_pick.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatMessage {
        static instance: CMsgDOTAChatMessage = CMsgDOTAChatMessage {
            account_id: ::std::option::Option::None,
            channel_id: ::std::option::Option::None,
            persona_name: ::std::option::Option::None,
            text: ::std::option::Option::None,
            timestamp: ::std::option::Option::None,
            suggest_invite_account_id: ::std::option::Option::None,
            suggest_invite_name: ::std::option::Option::None,
            fantasy_draft_owner_account_id: ::std::option::Option::None,
            fantasy_draft_player_account_id: ::std::option::Option::None,
            event_id: ::std::option::Option::None,
            suggest_invite_to_lobby: ::std::option::Option::None,
            event_points: ::std::option::Option::None,
            coin_flip: ::std::option::Option::None,
            player_id: ::std::option::Option::None,
            share_profile_account_id: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            dice_roll: ::protobuf::MessageField::none(),
            share_party_id: ::std::option::Option::None,
            share_lobby_id: ::std::option::Option::None,
            share_lobby_custom_game_id: ::std::option::Option::None,
            share_lobby_passkey: ::std::option::Option::None,
            private_chat_channel_id: ::std::option::Option::None,
            status: ::std::option::Option::None,
            legacy_battle_cup_victory: ::std::option::Option::None,
            battle_cup_streak: ::std::option::Option::None,
            badge_level: ::std::option::Option::None,
            suggest_pick_hero_id: ::std::option::Option::None,
            suggest_pick_hero_role: ::std::option::Option::None,
            suggest_ban_hero_id: ::std::option::Option::None,
            trivia_answer: ::protobuf::MessageField::none(),
            requested_ability_id: ::std::option::Option::None,
            chat_flags: ::std::option::Option::None,
            started_finding_match: ::std::option::Option::None,
            ctrl_is_down: ::std::option::Option::None,
            favorite_team_id: ::std::option::Option::None,
            favorite_team_quality: ::std::option::Option::None,
            suggest_player_draft_pick: ::std::option::Option::None,
            player_draft_pick: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAChatMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAChatMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAChatMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAChatMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTAChatMessage`
pub mod cmsg_dotachat_message {
    // @@protoc_insertion_point(message:dota.CMsgDOTAChatMessage.DiceRoll)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DiceRoll {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.DiceRoll.roll_min)
        pub roll_min: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.DiceRoll.roll_max)
        pub roll_max: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.DiceRoll.result)
        pub result: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatMessage.DiceRoll.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DiceRoll {
        fn default() -> &'a DiceRoll {
            <DiceRoll as ::protobuf::Message>::default_instance()
        }
    }

    impl DiceRoll {
        pub fn new() -> DiceRoll {
            ::std::default::Default::default()
        }

        // optional int32 roll_min = 1;

        pub fn roll_min(&self) -> i32 {
            self.roll_min.unwrap_or(0)
        }

        pub fn clear_roll_min(&mut self) {
            self.roll_min = ::std::option::Option::None;
        }

        pub fn has_roll_min(&self) -> bool {
            self.roll_min.is_some()
        }

        // Param is passed by value, moved
        pub fn set_roll_min(&mut self, v: i32) {
            self.roll_min = ::std::option::Option::Some(v);
        }

        // optional int32 roll_max = 2;

        pub fn roll_max(&self) -> i32 {
            self.roll_max.unwrap_or(0)
        }

        pub fn clear_roll_max(&mut self) {
            self.roll_max = ::std::option::Option::None;
        }

        pub fn has_roll_max(&self) -> bool {
            self.roll_max.is_some()
        }

        // Param is passed by value, moved
        pub fn set_roll_max(&mut self, v: i32) {
            self.roll_max = ::std::option::Option::Some(v);
        }

        // optional int32 result = 3;

        pub fn result(&self) -> i32 {
            self.result.unwrap_or(0)
        }

        pub fn clear_result(&mut self) {
            self.result = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            self.result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: i32) {
            self.result = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "roll_min",
                |m: &DiceRoll| { &m.roll_min },
                |m: &mut DiceRoll| { &mut m.roll_min },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "roll_max",
                |m: &DiceRoll| { &m.roll_max },
                |m: &mut DiceRoll| { &mut m.roll_max },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "result",
                |m: &DiceRoll| { &m.result },
                |m: &mut DiceRoll| { &mut m.result },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DiceRoll>(
                "CMsgDOTAChatMessage.DiceRoll",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DiceRoll {
        const NAME: &'static str = "DiceRoll";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.roll_min = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.roll_max = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.result = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.roll_min {
                my_size += ::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.roll_max {
                my_size += ::protobuf::rt::int32_size(2, v);
            }
            if let Some(v) = self.result {
                my_size += ::protobuf::rt::int32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.roll_min {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.roll_max {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.result {
                os.write_int32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DiceRoll {
            DiceRoll::new()
        }

        fn clear(&mut self) {
            self.roll_min = ::std::option::Option::None;
            self.roll_max = ::std::option::Option::None;
            self.result = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DiceRoll {
            static instance: DiceRoll = DiceRoll {
                roll_min: ::std::option::Option::None,
                roll_max: ::std::option::Option::None,
                result: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DiceRoll {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAChatMessage.DiceRoll").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DiceRoll {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DiceRoll {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTAChatMessage.TriviaAnswered)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TriviaAnswered {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.TriviaAnswered.question_id)
        pub question_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.TriviaAnswered.answer_index)
        pub answer_index: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.TriviaAnswered.party_questions_correct)
        pub party_questions_correct: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.TriviaAnswered.party_questions_viewed)
        pub party_questions_viewed: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.TriviaAnswered.party_trivia_points)
        pub party_trivia_points: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatMessage.TriviaAnswered.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TriviaAnswered {
        fn default() -> &'a TriviaAnswered {
            <TriviaAnswered as ::protobuf::Message>::default_instance()
        }
    }

    impl TriviaAnswered {
        pub fn new() -> TriviaAnswered {
            ::std::default::Default::default()
        }

        // optional uint32 question_id = 1;

        pub fn question_id(&self) -> u32 {
            self.question_id.unwrap_or(0)
        }

        pub fn clear_question_id(&mut self) {
            self.question_id = ::std::option::Option::None;
        }

        pub fn has_question_id(&self) -> bool {
            self.question_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_question_id(&mut self, v: u32) {
            self.question_id = ::std::option::Option::Some(v);
        }

        // optional uint32 answer_index = 2;

        pub fn answer_index(&self) -> u32 {
            self.answer_index.unwrap_or(0)
        }

        pub fn clear_answer_index(&mut self) {
            self.answer_index = ::std::option::Option::None;
        }

        pub fn has_answer_index(&self) -> bool {
            self.answer_index.is_some()
        }

        // Param is passed by value, moved
        pub fn set_answer_index(&mut self, v: u32) {
            self.answer_index = ::std::option::Option::Some(v);
        }

        // optional uint32 party_questions_correct = 3;

        pub fn party_questions_correct(&self) -> u32 {
            self.party_questions_correct.unwrap_or(0)
        }

        pub fn clear_party_questions_correct(&mut self) {
            self.party_questions_correct = ::std::option::Option::None;
        }

        pub fn has_party_questions_correct(&self) -> bool {
            self.party_questions_correct.is_some()
        }

        // Param is passed by value, moved
        pub fn set_party_questions_correct(&mut self, v: u32) {
            self.party_questions_correct = ::std::option::Option::Some(v);
        }

        // optional uint32 party_questions_viewed = 4;

        pub fn party_questions_viewed(&self) -> u32 {
            self.party_questions_viewed.unwrap_or(0)
        }

        pub fn clear_party_questions_viewed(&mut self) {
            self.party_questions_viewed = ::std::option::Option::None;
        }

        pub fn has_party_questions_viewed(&self) -> bool {
            self.party_questions_viewed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_party_questions_viewed(&mut self, v: u32) {
            self.party_questions_viewed = ::std::option::Option::Some(v);
        }

        // optional uint32 party_trivia_points = 5;

        pub fn party_trivia_points(&self) -> u32 {
            self.party_trivia_points.unwrap_or(0)
        }

        pub fn clear_party_trivia_points(&mut self) {
            self.party_trivia_points = ::std::option::Option::None;
        }

        pub fn has_party_trivia_points(&self) -> bool {
            self.party_trivia_points.is_some()
        }

        // Param is passed by value, moved
        pub fn set_party_trivia_points(&mut self, v: u32) {
            self.party_trivia_points = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "question_id",
                |m: &TriviaAnswered| { &m.question_id },
                |m: &mut TriviaAnswered| { &mut m.question_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "answer_index",
                |m: &TriviaAnswered| { &m.answer_index },
                |m: &mut TriviaAnswered| { &mut m.answer_index },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "party_questions_correct",
                |m: &TriviaAnswered| { &m.party_questions_correct },
                |m: &mut TriviaAnswered| { &mut m.party_questions_correct },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "party_questions_viewed",
                |m: &TriviaAnswered| { &m.party_questions_viewed },
                |m: &mut TriviaAnswered| { &mut m.party_questions_viewed },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "party_trivia_points",
                |m: &TriviaAnswered| { &m.party_trivia_points },
                |m: &mut TriviaAnswered| { &mut m.party_trivia_points },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TriviaAnswered>(
                "CMsgDOTAChatMessage.TriviaAnswered",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TriviaAnswered {
        const NAME: &'static str = "TriviaAnswered";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.question_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.answer_index = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.party_questions_correct = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.party_questions_viewed = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.party_trivia_points = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.question_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.answer_index {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.party_questions_correct {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.party_questions_viewed {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.party_trivia_points {
                my_size += ::protobuf::rt::uint32_size(5, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.question_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.answer_index {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.party_questions_correct {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.party_questions_viewed {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.party_trivia_points {
                os.write_uint32(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TriviaAnswered {
            TriviaAnswered::new()
        }

        fn clear(&mut self) {
            self.question_id = ::std::option::Option::None;
            self.answer_index = ::std::option::Option::None;
            self.party_questions_correct = ::std::option::Option::None;
            self.party_questions_viewed = ::std::option::Option::None;
            self.party_trivia_points = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TriviaAnswered {
            static instance: TriviaAnswered = TriviaAnswered {
                question_id: ::std::option::Option::None,
                answer_index: ::std::option::Option::None,
                party_questions_correct: ::std::option::Option::None,
                party_questions_viewed: ::std::option::Option::None,
                party_trivia_points: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TriviaAnswered {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAChatMessage.TriviaAnswered").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TriviaAnswered {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TriviaAnswered {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTAChatMessage.PlayerDraftPick)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayerDraftPick {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.PlayerDraftPick.player_id)
        pub player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatMessage.PlayerDraftPick.team)
        pub team: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatMessage.PlayerDraftPick.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayerDraftPick {
        fn default() -> &'a PlayerDraftPick {
            <PlayerDraftPick as ::protobuf::Message>::default_instance()
        }
    }

    impl PlayerDraftPick {
        pub fn new() -> PlayerDraftPick {
            ::std::default::Default::default()
        }

        // optional int32 player_id = 1;

        pub fn player_id(&self) -> i32 {
            self.player_id.unwrap_or(0)
        }

        pub fn clear_player_id(&mut self) {
            self.player_id = ::std::option::Option::None;
        }

        pub fn has_player_id(&self) -> bool {
            self.player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_id(&mut self, v: i32) {
            self.player_id = ::std::option::Option::Some(v);
        }

        // optional int32 team = 2;

        pub fn team(&self) -> i32 {
            self.team.unwrap_or(0)
        }

        pub fn clear_team(&mut self) {
            self.team = ::std::option::Option::None;
        }

        pub fn has_team(&self) -> bool {
            self.team.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team(&mut self, v: i32) {
            self.team = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "player_id",
                |m: &PlayerDraftPick| { &m.player_id },
                |m: &mut PlayerDraftPick| { &mut m.player_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team",
                |m: &PlayerDraftPick| { &m.team },
                |m: &mut PlayerDraftPick| { &mut m.team },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerDraftPick>(
                "CMsgDOTAChatMessage.PlayerDraftPick",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PlayerDraftPick {
        const NAME: &'static str = "PlayerDraftPick";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.team = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.player_id {
                my_size += ::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.team {
                my_size += ::protobuf::rt::int32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.player_id {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.team {
                os.write_int32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayerDraftPick {
            PlayerDraftPick::new()
        }

        fn clear(&mut self) {
            self.player_id = ::std::option::Option::None;
            self.team = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayerDraftPick {
            static instance: PlayerDraftPick = PlayerDraftPick {
                player_id: ::std::option::Option::None,
                team: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PlayerDraftPick {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAChatMessage.PlayerDraftPick").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PlayerDraftPick {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PlayerDraftPick {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAChatMember)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatMember {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMember.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMember.persona_name)
    pub persona_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMember.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatMember.status)
    pub status: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatMember.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatMember {
    fn default() -> &'a CMsgDOTAChatMember {
        <CMsgDOTAChatMember as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatMember {
    pub fn new() -> CMsgDOTAChatMember {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional string persona_name = 2;

    pub fn persona_name(&self) -> &str {
        match self.persona_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_persona_name(&mut self) {
        self.persona_name = ::std::option::Option::None;
    }

    pub fn has_persona_name(&self) -> bool {
        self.persona_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persona_name(&mut self, v: ::std::string::String) {
        self.persona_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
        if self.persona_name.is_none() {
            self.persona_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.persona_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_persona_name(&mut self) -> ::std::string::String {
        self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 channel_user_id = 3;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }

    // optional uint32 status = 4;

    pub fn status(&self) -> u32 {
        self.status.unwrap_or(0)
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgDOTAChatMember| { &m.steam_id },
            |m: &mut CMsgDOTAChatMember| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "persona_name",
            |m: &CMsgDOTAChatMember| { &m.persona_name },
            |m: &mut CMsgDOTAChatMember| { &mut m.persona_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_user_id",
            |m: &CMsgDOTAChatMember| { &m.channel_user_id },
            |m: &mut CMsgDOTAChatMember| { &mut m.channel_user_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &CMsgDOTAChatMember| { &m.status },
            |m: &mut CMsgDOTAChatMember| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAChatMember>(
            "CMsgDOTAChatMember",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAChatMember {
    const NAME: &'static str = "CMsgDOTAChatMember";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.persona_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.status = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.persona_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.status {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.persona_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.status {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatMember {
        CMsgDOTAChatMember::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.persona_name = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatMember {
        static instance: CMsgDOTAChatMember = CMsgDOTAChatMember {
            steam_id: ::std::option::Option::None,
            persona_name: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            status: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAChatMember {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAChatMember").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAChatMember {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAChatMember {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAJoinChatChannelResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAJoinChatChannelResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.response)
    pub response: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.channel_name)
    pub channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.max_members)
    pub max_members: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.members)
    pub members: ::std::vec::Vec<CMsgDOTAChatMember>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.channel_type)
    pub channel_type: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_shared_enums::DOTAChatChannelType_t>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_dotajoin_chat_channel_response::Result>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.gc_initiated_join)
    pub gc_initiated_join: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
    pub welcome_message: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAJoinChatChannelResponse.special_privileges)
    pub special_privileges: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_shared_enums::EChatSpecialPrivileges>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAJoinChatChannelResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAJoinChatChannelResponse {
    fn default() -> &'a CMsgDOTAJoinChatChannelResponse {
        <CMsgDOTAJoinChatChannelResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAJoinChatChannelResponse {
    pub fn new() -> CMsgDOTAJoinChatChannelResponse {
        ::std::default::Default::default()
    }

    // optional uint32 response = 1;

    pub fn response(&self) -> u32 {
        self.response.unwrap_or(0)
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: u32) {
        self.response = ::std::option::Option::Some(v);
    }

    // optional string channel_name = 2;

    pub fn channel_name(&self) -> &str {
        match self.channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_channel_name(&mut self) {
        self.channel_name = ::std::option::Option::None;
    }

    pub fn has_channel_name(&self) -> bool {
        self.channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_name(&mut self, v: ::std::string::String) {
        self.channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_name(&mut self) -> &mut ::std::string::String {
        if self.channel_name.is_none() {
            self.channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_channel_name(&mut self) -> ::std::string::String {
        self.channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 channel_id = 3;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional uint32 max_members = 4;

    pub fn max_members(&self) -> u32 {
        self.max_members.unwrap_or(0)
    }

    pub fn clear_max_members(&mut self) {
        self.max_members = ::std::option::Option::None;
    }

    pub fn has_max_members(&self) -> bool {
        self.max_members.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_members(&mut self, v: u32) {
        self.max_members = ::std::option::Option::Some(v);
    }

    // optional .dota.DOTAChatChannelType_t channel_type = 6;

    pub fn channel_type(&self) -> super::dota_shared_enums::DOTAChatChannelType_t {
        match self.channel_type {
            Some(e) => e.enum_value_or(super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional),
            None => super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional,
        }
    }

    pub fn clear_channel_type(&mut self) {
        self.channel_type = ::std::option::Option::None;
    }

    pub fn has_channel_type(&self) -> bool {
        self.channel_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_type(&mut self, v: super::dota_shared_enums::DOTAChatChannelType_t) {
        self.channel_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional .dota.CMsgDOTAJoinChatChannelResponse.Result result = 7;

    pub fn result(&self) -> cmsg_dotajoin_chat_channel_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotajoin_chat_channel_response::Result::JOIN_SUCCESS),
            None => cmsg_dotajoin_chat_channel_response::Result::JOIN_SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotajoin_chat_channel_response::Result) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool gc_initiated_join = 8;

    pub fn gc_initiated_join(&self) -> bool {
        self.gc_initiated_join.unwrap_or(false)
    }

    pub fn clear_gc_initiated_join(&mut self) {
        self.gc_initiated_join = ::std::option::Option::None;
    }

    pub fn has_gc_initiated_join(&self) -> bool {
        self.gc_initiated_join.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_initiated_join(&mut self, v: bool) {
        self.gc_initiated_join = ::std::option::Option::Some(v);
    }

    // optional uint32 channel_user_id = 9;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }

    // optional string welcome_message = 10;

    pub fn welcome_message(&self) -> &str {
        match self.welcome_message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_welcome_message(&mut self) {
        self.welcome_message = ::std::option::Option::None;
    }

    pub fn has_welcome_message(&self) -> bool {
        self.welcome_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_welcome_message(&mut self, v: ::std::string::String) {
        self.welcome_message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_welcome_message(&mut self) -> &mut ::std::string::String {
        if self.welcome_message.is_none() {
            self.welcome_message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.welcome_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_welcome_message(&mut self) -> ::std::string::String {
        self.welcome_message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .dota.EChatSpecialPrivileges special_privileges = 11;

    pub fn special_privileges(&self) -> super::dota_shared_enums::EChatSpecialPrivileges {
        match self.special_privileges {
            Some(e) => e.enum_value_or(super::dota_shared_enums::EChatSpecialPrivileges::k_EChatSpecialPrivileges_None),
            None => super::dota_shared_enums::EChatSpecialPrivileges::k_EChatSpecialPrivileges_None,
        }
    }

    pub fn clear_special_privileges(&mut self) {
        self.special_privileges = ::std::option::Option::None;
    }

    pub fn has_special_privileges(&self) -> bool {
        self.special_privileges.is_some()
    }

    // Param is passed by value, moved
    pub fn set_special_privileges(&mut self, v: super::dota_shared_enums::EChatSpecialPrivileges) {
        self.special_privileges = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "response",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.response },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.response },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_name",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.channel_name },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.channel_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_id",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.channel_id },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_members",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.max_members },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.max_members },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "members",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.members },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.members },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_type",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.channel_type },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.channel_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.result },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gc_initiated_join",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.gc_initiated_join },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.gc_initiated_join },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_user_id",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.channel_user_id },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.channel_user_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "welcome_message",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.welcome_message },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.welcome_message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "special_privileges",
            |m: &CMsgDOTAJoinChatChannelResponse| { &m.special_privileges },
            |m: &mut CMsgDOTAJoinChatChannelResponse| { &mut m.special_privileges },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAJoinChatChannelResponse>(
            "CMsgDOTAJoinChatChannelResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAJoinChatChannelResponse {
    const NAME: &'static str = "CMsgDOTAJoinChatChannelResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                25 => {
                    self.channel_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.max_members = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.members.push(is.read_message()?);
                },
                48 => {
                    self.channel_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                56 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                64 => {
                    self.gc_initiated_join = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                82 => {
                    self.welcome_message = ::std::option::Option::Some(is.read_string()?);
                },
                88 => {
                    self.special_privileges = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.channel_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.channel_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.max_members {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.channel_type {
            my_size += ::protobuf::rt::int32_size(6, v.value());
        }
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(7, v.value());
        }
        if let Some(v) = self.gc_initiated_join {
            my_size += 1 + 1;
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.welcome_message.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.special_privileges {
            my_size += ::protobuf::rt::int32_size(11, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.channel_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.channel_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.max_members {
            os.write_uint32(4, v)?;
        }
        for v in &self.members {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.channel_type {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.result {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.gc_initiated_join {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.welcome_message.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.special_privileges {
            os.write_enum(11, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAJoinChatChannelResponse {
        CMsgDOTAJoinChatChannelResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.channel_name = ::std::option::Option::None;
        self.channel_id = ::std::option::Option::None;
        self.max_members = ::std::option::Option::None;
        self.members.clear();
        self.channel_type = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.gc_initiated_join = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.welcome_message = ::std::option::Option::None;
        self.special_privileges = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAJoinChatChannelResponse {
        static instance: CMsgDOTAJoinChatChannelResponse = CMsgDOTAJoinChatChannelResponse {
            response: ::std::option::Option::None,
            channel_name: ::std::option::Option::None,
            channel_id: ::std::option::Option::None,
            max_members: ::std::option::Option::None,
            members: ::std::vec::Vec::new(),
            channel_type: ::std::option::Option::None,
            result: ::std::option::Option::None,
            gc_initiated_join: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            welcome_message: ::std::option::Option::None,
            special_privileges: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAJoinChatChannelResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAJoinChatChannelResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAJoinChatChannelResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAJoinChatChannelResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTAJoinChatChannelResponse`
pub mod cmsg_dotajoin_chat_channel_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgDOTAJoinChatChannelResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.JOIN_SUCCESS)
        JOIN_SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.INVALID_CHANNEL_TYPE)
        INVALID_CHANNEL_TYPE = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.ACCOUNT_NOT_FOUND)
        ACCOUNT_NOT_FOUND = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.ACH_FAILED)
        ACH_FAILED = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.USER_IN_TOO_MANY_CHANNELS)
        USER_IN_TOO_MANY_CHANNELS = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.RATE_LIMIT_EXCEEDED)
        RATE_LIMIT_EXCEEDED = 5,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.CHANNEL_FULL)
        CHANNEL_FULL = 6,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.CHANNEL_FULL_OVERFLOWED)
        CHANNEL_FULL_OVERFLOWED = 7,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.FAILED_TO_ADD_USER)
        FAILED_TO_ADD_USER = 8,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.CHANNEL_TYPE_DISABLED)
        CHANNEL_TYPE_DISABLED = 9,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.PRIVATE_CHAT_CREATE_FAILED)
        PRIVATE_CHAT_CREATE_FAILED = 10,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.PRIVATE_CHAT_NO_PERMISSION)
        PRIVATE_CHAT_NO_PERMISSION = 11,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.PRIVATE_CHAT_CREATE_LOCK_FAILED)
        PRIVATE_CHAT_CREATE_LOCK_FAILED = 12,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.PRIVATE_CHAT_KICKED)
        PRIVATE_CHAT_KICKED = 13,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.USER_NOT_ALLOWED)
        USER_NOT_ALLOWED = 14,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.ENSURE_SPECIAL_PRIVILEGES_FAILED)
        ENSURE_SPECIAL_PRIVILEGES_FAILED = 15,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.NEW_PLAYER_USER_NOT_ELIGIBLE)
        NEW_PLAYER_USER_NOT_ELIGIBLE = 16,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.SILENT_ERROR)
        SILENT_ERROR = 17,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAJoinChatChannelResponse.Result.NEW_PLAYER_USER_BANNED)
        NEW_PLAYER_USER_BANNED = 18,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::JOIN_SUCCESS),
                1 => ::std::option::Option::Some(Result::INVALID_CHANNEL_TYPE),
                2 => ::std::option::Option::Some(Result::ACCOUNT_NOT_FOUND),
                3 => ::std::option::Option::Some(Result::ACH_FAILED),
                4 => ::std::option::Option::Some(Result::USER_IN_TOO_MANY_CHANNELS),
                5 => ::std::option::Option::Some(Result::RATE_LIMIT_EXCEEDED),
                6 => ::std::option::Option::Some(Result::CHANNEL_FULL),
                7 => ::std::option::Option::Some(Result::CHANNEL_FULL_OVERFLOWED),
                8 => ::std::option::Option::Some(Result::FAILED_TO_ADD_USER),
                9 => ::std::option::Option::Some(Result::CHANNEL_TYPE_DISABLED),
                10 => ::std::option::Option::Some(Result::PRIVATE_CHAT_CREATE_FAILED),
                11 => ::std::option::Option::Some(Result::PRIVATE_CHAT_NO_PERMISSION),
                12 => ::std::option::Option::Some(Result::PRIVATE_CHAT_CREATE_LOCK_FAILED),
                13 => ::std::option::Option::Some(Result::PRIVATE_CHAT_KICKED),
                14 => ::std::option::Option::Some(Result::USER_NOT_ALLOWED),
                15 => ::std::option::Option::Some(Result::ENSURE_SPECIAL_PRIVILEGES_FAILED),
                16 => ::std::option::Option::Some(Result::NEW_PLAYER_USER_NOT_ELIGIBLE),
                17 => ::std::option::Option::Some(Result::SILENT_ERROR),
                18 => ::std::option::Option::Some(Result::NEW_PLAYER_USER_BANNED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "JOIN_SUCCESS" => ::std::option::Option::Some(Result::JOIN_SUCCESS),
                "INVALID_CHANNEL_TYPE" => ::std::option::Option::Some(Result::INVALID_CHANNEL_TYPE),
                "ACCOUNT_NOT_FOUND" => ::std::option::Option::Some(Result::ACCOUNT_NOT_FOUND),
                "ACH_FAILED" => ::std::option::Option::Some(Result::ACH_FAILED),
                "USER_IN_TOO_MANY_CHANNELS" => ::std::option::Option::Some(Result::USER_IN_TOO_MANY_CHANNELS),
                "RATE_LIMIT_EXCEEDED" => ::std::option::Option::Some(Result::RATE_LIMIT_EXCEEDED),
                "CHANNEL_FULL" => ::std::option::Option::Some(Result::CHANNEL_FULL),
                "CHANNEL_FULL_OVERFLOWED" => ::std::option::Option::Some(Result::CHANNEL_FULL_OVERFLOWED),
                "FAILED_TO_ADD_USER" => ::std::option::Option::Some(Result::FAILED_TO_ADD_USER),
                "CHANNEL_TYPE_DISABLED" => ::std::option::Option::Some(Result::CHANNEL_TYPE_DISABLED),
                "PRIVATE_CHAT_CREATE_FAILED" => ::std::option::Option::Some(Result::PRIVATE_CHAT_CREATE_FAILED),
                "PRIVATE_CHAT_NO_PERMISSION" => ::std::option::Option::Some(Result::PRIVATE_CHAT_NO_PERMISSION),
                "PRIVATE_CHAT_CREATE_LOCK_FAILED" => ::std::option::Option::Some(Result::PRIVATE_CHAT_CREATE_LOCK_FAILED),
                "PRIVATE_CHAT_KICKED" => ::std::option::Option::Some(Result::PRIVATE_CHAT_KICKED),
                "USER_NOT_ALLOWED" => ::std::option::Option::Some(Result::USER_NOT_ALLOWED),
                "ENSURE_SPECIAL_PRIVILEGES_FAILED" => ::std::option::Option::Some(Result::ENSURE_SPECIAL_PRIVILEGES_FAILED),
                "NEW_PLAYER_USER_NOT_ELIGIBLE" => ::std::option::Option::Some(Result::NEW_PLAYER_USER_NOT_ELIGIBLE),
                "SILENT_ERROR" => ::std::option::Option::Some(Result::SILENT_ERROR),
                "NEW_PLAYER_USER_BANNED" => ::std::option::Option::Some(Result::NEW_PLAYER_USER_BANNED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::JOIN_SUCCESS,
            Result::INVALID_CHANNEL_TYPE,
            Result::ACCOUNT_NOT_FOUND,
            Result::ACH_FAILED,
            Result::USER_IN_TOO_MANY_CHANNELS,
            Result::RATE_LIMIT_EXCEEDED,
            Result::CHANNEL_FULL,
            Result::CHANNEL_FULL_OVERFLOWED,
            Result::FAILED_TO_ADD_USER,
            Result::CHANNEL_TYPE_DISABLED,
            Result::PRIVATE_CHAT_CREATE_FAILED,
            Result::PRIVATE_CHAT_NO_PERMISSION,
            Result::PRIVATE_CHAT_CREATE_LOCK_FAILED,
            Result::PRIVATE_CHAT_KICKED,
            Result::USER_NOT_ALLOWED,
            Result::ENSURE_SPECIAL_PRIVILEGES_FAILED,
            Result::NEW_PLAYER_USER_NOT_ELIGIBLE,
            Result::SILENT_ERROR,
            Result::NEW_PLAYER_USER_BANNED,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgDOTAJoinChatChannelResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::JOIN_SUCCESS
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("CMsgDOTAJoinChatChannelResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAOtherJoinedChatChannel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAOtherJoinedChatChannel {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAOtherJoinedChatChannel.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
    pub persona_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAOtherJoinedChatChannel.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAOtherJoinedChatChannel.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAOtherJoinedChatChannel.status)
    pub status: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAOtherJoinedChatChannel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAOtherJoinedChatChannel {
    fn default() -> &'a CMsgDOTAOtherJoinedChatChannel {
        <CMsgDOTAOtherJoinedChatChannel as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAOtherJoinedChatChannel {
    pub fn new() -> CMsgDOTAOtherJoinedChatChannel {
        ::std::default::Default::default()
    }

    // optional fixed64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional string persona_name = 2;

    pub fn persona_name(&self) -> &str {
        match self.persona_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_persona_name(&mut self) {
        self.persona_name = ::std::option::Option::None;
    }

    pub fn has_persona_name(&self) -> bool {
        self.persona_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persona_name(&mut self, v: ::std::string::String) {
        self.persona_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
        if self.persona_name.is_none() {
            self.persona_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.persona_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_persona_name(&mut self) -> ::std::string::String {
        self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steam_id = 3;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 channel_user_id = 4;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }

    // optional uint32 status = 5;

    pub fn status(&self) -> u32 {
        self.status.unwrap_or(0)
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_id",
            |m: &CMsgDOTAOtherJoinedChatChannel| { &m.channel_id },
            |m: &mut CMsgDOTAOtherJoinedChatChannel| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "persona_name",
            |m: &CMsgDOTAOtherJoinedChatChannel| { &m.persona_name },
            |m: &mut CMsgDOTAOtherJoinedChatChannel| { &mut m.persona_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgDOTAOtherJoinedChatChannel| { &m.steam_id },
            |m: &mut CMsgDOTAOtherJoinedChatChannel| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_user_id",
            |m: &CMsgDOTAOtherJoinedChatChannel| { &m.channel_user_id },
            |m: &mut CMsgDOTAOtherJoinedChatChannel| { &mut m.channel_user_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &CMsgDOTAOtherJoinedChatChannel| { &m.status },
            |m: &mut CMsgDOTAOtherJoinedChatChannel| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAOtherJoinedChatChannel>(
            "CMsgDOTAOtherJoinedChatChannel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAOtherJoinedChatChannel {
    const NAME: &'static str = "CMsgDOTAOtherJoinedChatChannel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.channel_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.persona_name = ::std::option::Option::Some(is.read_string()?);
                },
                25 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.status = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.persona_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.status {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.persona_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.steam_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.status {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAOtherJoinedChatChannel {
        CMsgDOTAOtherJoinedChatChannel::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.persona_name = ::std::option::Option::None;
        self.steam_id = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAOtherJoinedChatChannel {
        static instance: CMsgDOTAOtherJoinedChatChannel = CMsgDOTAOtherJoinedChatChannel {
            channel_id: ::std::option::Option::None,
            persona_name: ::std::option::Option::None,
            steam_id: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            status: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAOtherJoinedChatChannel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAOtherJoinedChatChannel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAOtherJoinedChatChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAOtherJoinedChatChannel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAOtherLeftChatChannel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAOtherLeftChatChannel {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAOtherLeftChatChannel.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAOtherLeftChatChannel.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAOtherLeftChatChannel.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAOtherLeftChatChannel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAOtherLeftChatChannel {
    fn default() -> &'a CMsgDOTAOtherLeftChatChannel {
        <CMsgDOTAOtherLeftChatChannel as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAOtherLeftChatChannel {
    pub fn new() -> CMsgDOTAOtherLeftChatChannel {
        ::std::default::Default::default()
    }

    // optional fixed64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steam_id = 2;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 channel_user_id = 3;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_id",
            |m: &CMsgDOTAOtherLeftChatChannel| { &m.channel_id },
            |m: &mut CMsgDOTAOtherLeftChatChannel| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgDOTAOtherLeftChatChannel| { &m.steam_id },
            |m: &mut CMsgDOTAOtherLeftChatChannel| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_user_id",
            |m: &CMsgDOTAOtherLeftChatChannel| { &m.channel_user_id },
            |m: &mut CMsgDOTAOtherLeftChatChannel| { &mut m.channel_user_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAOtherLeftChatChannel>(
            "CMsgDOTAOtherLeftChatChannel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAOtherLeftChatChannel {
    const NAME: &'static str = "CMsgDOTAOtherLeftChatChannel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.channel_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steam_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAOtherLeftChatChannel {
        CMsgDOTAOtherLeftChatChannel::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.steam_id = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAOtherLeftChatChannel {
        static instance: CMsgDOTAOtherLeftChatChannel = CMsgDOTAOtherLeftChatChannel {
            channel_id: ::std::option::Option::None,
            steam_id: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAOtherLeftChatChannel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAOtherLeftChatChannel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAOtherLeftChatChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAOtherLeftChatChannel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTARequestChatChannelList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTARequestChatChannelList {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTARequestChatChannelList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTARequestChatChannelList {
    fn default() -> &'a CMsgDOTARequestChatChannelList {
        <CMsgDOTARequestChatChannelList as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTARequestChatChannelList {
    pub fn new() -> CMsgDOTARequestChatChannelList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTARequestChatChannelList>(
            "CMsgDOTARequestChatChannelList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTARequestChatChannelList {
    const NAME: &'static str = "CMsgDOTARequestChatChannelList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTARequestChatChannelList {
        CMsgDOTARequestChatChannelList::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTARequestChatChannelList {
        static instance: CMsgDOTARequestChatChannelList = CMsgDOTARequestChatChannelList {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTARequestChatChannelList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTARequestChatChannelList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTARequestChatChannelList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTARequestChatChannelList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTARequestChatChannelListResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTARequestChatChannelListResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTARequestChatChannelListResponse.channels)
    pub channels: ::std::vec::Vec<cmsg_dotarequest_chat_channel_list_response::ChatChannel>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTARequestChatChannelListResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTARequestChatChannelListResponse {
    fn default() -> &'a CMsgDOTARequestChatChannelListResponse {
        <CMsgDOTARequestChatChannelListResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTARequestChatChannelListResponse {
    pub fn new() -> CMsgDOTARequestChatChannelListResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "channels",
            |m: &CMsgDOTARequestChatChannelListResponse| { &m.channels },
            |m: &mut CMsgDOTARequestChatChannelListResponse| { &mut m.channels },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTARequestChatChannelListResponse>(
            "CMsgDOTARequestChatChannelListResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTARequestChatChannelListResponse {
    const NAME: &'static str = "CMsgDOTARequestChatChannelListResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.channels.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.channels {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTARequestChatChannelListResponse {
        CMsgDOTARequestChatChannelListResponse::new()
    }

    fn clear(&mut self) {
        self.channels.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTARequestChatChannelListResponse {
        static instance: CMsgDOTARequestChatChannelListResponse = CMsgDOTARequestChatChannelListResponse {
            channels: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTARequestChatChannelListResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTARequestChatChannelListResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTARequestChatChannelListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTARequestChatChannelListResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTARequestChatChannelListResponse`
pub mod cmsg_dotarequest_chat_channel_list_response {
    // @@protoc_insertion_point(message:dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ChatChannel {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
        pub channel_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
        pub num_members: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
        pub channel_type: ::std::option::Option<::protobuf::EnumOrUnknown<super::super::dota_shared_enums::DOTAChatChannelType_t>>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ChatChannel {
        fn default() -> &'a ChatChannel {
            <ChatChannel as ::protobuf::Message>::default_instance()
        }
    }

    impl ChatChannel {
        pub fn new() -> ChatChannel {
            ::std::default::Default::default()
        }

        // optional string channel_name = 1;

        pub fn channel_name(&self) -> &str {
            match self.channel_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_channel_name(&mut self) {
            self.channel_name = ::std::option::Option::None;
        }

        pub fn has_channel_name(&self) -> bool {
            self.channel_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_channel_name(&mut self, v: ::std::string::String) {
            self.channel_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_channel_name(&mut self) -> &mut ::std::string::String {
            if self.channel_name.is_none() {
                self.channel_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.channel_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_channel_name(&mut self) -> ::std::string::String {
            self.channel_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 num_members = 2;

        pub fn num_members(&self) -> u32 {
            self.num_members.unwrap_or(0)
        }

        pub fn clear_num_members(&mut self) {
            self.num_members = ::std::option::Option::None;
        }

        pub fn has_num_members(&self) -> bool {
            self.num_members.is_some()
        }

        // Param is passed by value, moved
        pub fn set_num_members(&mut self, v: u32) {
            self.num_members = ::std::option::Option::Some(v);
        }

        // optional .dota.DOTAChatChannelType_t channel_type = 3;

        pub fn channel_type(&self) -> super::super::dota_shared_enums::DOTAChatChannelType_t {
            match self.channel_type {
                Some(e) => e.enum_value_or(super::super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional),
                None => super::super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional,
            }
        }

        pub fn clear_channel_type(&mut self) {
            self.channel_type = ::std::option::Option::None;
        }

        pub fn has_channel_type(&self) -> bool {
            self.channel_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_channel_type(&mut self, v: super::super::dota_shared_enums::DOTAChatChannelType_t) {
            self.channel_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "channel_name",
                |m: &ChatChannel| { &m.channel_name },
                |m: &mut ChatChannel| { &mut m.channel_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "num_members",
                |m: &ChatChannel| { &m.num_members },
                |m: &mut ChatChannel| { &mut m.num_members },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "channel_type",
                |m: &ChatChannel| { &m.channel_type },
                |m: &mut ChatChannel| { &mut m.channel_type },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChatChannel>(
                "CMsgDOTARequestChatChannelListResponse.ChatChannel",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ChatChannel {
        const NAME: &'static str = "ChatChannel";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.channel_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.num_members = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.channel_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.channel_name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.num_members {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.channel_type {
                my_size += ::protobuf::rt::int32_size(3, v.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.channel_name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.num_members {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.channel_type {
                os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ChatChannel {
            ChatChannel::new()
        }

        fn clear(&mut self) {
            self.channel_name = ::std::option::Option::None;
            self.num_members = ::std::option::Option::None;
            self.channel_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ChatChannel {
            static instance: ChatChannel = ChatChannel {
                channel_name: ::std::option::Option::None,
                num_members: ::std::option::Option::None,
                channel_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ChatChannel {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTARequestChatChannelListResponse.ChatChannel").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ChatChannel {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ChatChannel {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAChatGetUserListResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatGetUserListResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetUserListResponse.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetUserListResponse.members)
    pub members: ::std::vec::Vec<cmsg_dotachat_get_user_list_response::Member>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatGetUserListResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatGetUserListResponse {
    fn default() -> &'a CMsgDOTAChatGetUserListResponse {
        <CMsgDOTAChatGetUserListResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatGetUserListResponse {
    pub fn new() -> CMsgDOTAChatGetUserListResponse {
        ::std::default::Default::default()
    }

    // optional fixed64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_id",
            |m: &CMsgDOTAChatGetUserListResponse| { &m.channel_id },
            |m: &mut CMsgDOTAChatGetUserListResponse| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "members",
            |m: &CMsgDOTAChatGetUserListResponse| { &m.members },
            |m: &mut CMsgDOTAChatGetUserListResponse| { &mut m.members },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAChatGetUserListResponse>(
            "CMsgDOTAChatGetUserListResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAChatGetUserListResponse {
    const NAME: &'static str = "CMsgDOTAChatGetUserListResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.channel_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.members.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += 1 + 8;
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_fixed64(1, v)?;
        }
        for v in &self.members {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatGetUserListResponse {
        CMsgDOTAChatGetUserListResponse::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.members.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatGetUserListResponse {
        static instance: CMsgDOTAChatGetUserListResponse = CMsgDOTAChatGetUserListResponse {
            channel_id: ::std::option::Option::None,
            members: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAChatGetUserListResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAChatGetUserListResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAChatGetUserListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAChatGetUserListResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTAChatGetUserListResponse`
pub mod cmsg_dotachat_get_user_list_response {
    // @@protoc_insertion_point(message:dota.CMsgDOTAChatGetUserListResponse.Member)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Member {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetUserListResponse.Member.steam_id)
        pub steam_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
        pub persona_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetUserListResponse.Member.channel_user_id)
        pub channel_user_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetUserListResponse.Member.status)
        pub status: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatGetUserListResponse.Member.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Member {
        fn default() -> &'a Member {
            <Member as ::protobuf::Message>::default_instance()
        }
    }

    impl Member {
        pub fn new() -> Member {
            ::std::default::Default::default()
        }

        // optional fixed64 steam_id = 1;

        pub fn steam_id(&self) -> u64 {
            self.steam_id.unwrap_or(0)
        }

        pub fn clear_steam_id(&mut self) {
            self.steam_id = ::std::option::Option::None;
        }

        pub fn has_steam_id(&self) -> bool {
            self.steam_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steam_id(&mut self, v: u64) {
            self.steam_id = ::std::option::Option::Some(v);
        }

        // optional string persona_name = 2;

        pub fn persona_name(&self) -> &str {
            match self.persona_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_persona_name(&mut self) {
            self.persona_name = ::std::option::Option::None;
        }

        pub fn has_persona_name(&self) -> bool {
            self.persona_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_persona_name(&mut self, v: ::std::string::String) {
            self.persona_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
            if self.persona_name.is_none() {
                self.persona_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.persona_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_persona_name(&mut self) -> ::std::string::String {
            self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 channel_user_id = 3;

        pub fn channel_user_id(&self) -> u32 {
            self.channel_user_id.unwrap_or(0)
        }

        pub fn clear_channel_user_id(&mut self) {
            self.channel_user_id = ::std::option::Option::None;
        }

        pub fn has_channel_user_id(&self) -> bool {
            self.channel_user_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_channel_user_id(&mut self, v: u32) {
            self.channel_user_id = ::std::option::Option::Some(v);
        }

        // optional uint32 status = 4;

        pub fn status(&self) -> u32 {
            self.status.unwrap_or(0)
        }

        pub fn clear_status(&mut self) {
            self.status = ::std::option::Option::None;
        }

        pub fn has_status(&self) -> bool {
            self.status.is_some()
        }

        // Param is passed by value, moved
        pub fn set_status(&mut self, v: u32) {
            self.status = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "steam_id",
                |m: &Member| { &m.steam_id },
                |m: &mut Member| { &mut m.steam_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "persona_name",
                |m: &Member| { &m.persona_name },
                |m: &mut Member| { &mut m.persona_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "channel_user_id",
                |m: &Member| { &m.channel_user_id },
                |m: &mut Member| { &mut m.channel_user_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "status",
                |m: &Member| { &m.status },
                |m: &mut Member| { &mut m.status },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Member>(
                "CMsgDOTAChatGetUserListResponse.Member",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Member {
        const NAME: &'static str = "Member";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        self.persona_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.status = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steam_id {
                my_size += 1 + 8;
            }
            if let Some(v) = self.persona_name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.channel_user_id {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.status {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.steam_id {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.persona_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.channel_user_id {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.status {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Member {
            Member::new()
        }

        fn clear(&mut self) {
            self.steam_id = ::std::option::Option::None;
            self.persona_name = ::std::option::Option::None;
            self.channel_user_id = ::std::option::Option::None;
            self.status = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Member {
            static instance: Member = Member {
                steam_id: ::std::option::Option::None,
                persona_name: ::std::option::Option::None,
                channel_user_id: ::std::option::Option::None,
                status: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Member {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAChatGetUserListResponse.Member").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Member {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Member {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAChatGetMemberCount)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatGetMemberCount {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetMemberCount.channel_name)
    pub channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetMemberCount.channel_type)
    pub channel_type: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_shared_enums::DOTAChatChannelType_t>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatGetMemberCount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatGetMemberCount {
    fn default() -> &'a CMsgDOTAChatGetMemberCount {
        <CMsgDOTAChatGetMemberCount as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatGetMemberCount {
    pub fn new() -> CMsgDOTAChatGetMemberCount {
        ::std::default::Default::default()
    }

    // optional string channel_name = 1;

    pub fn channel_name(&self) -> &str {
        match self.channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_channel_name(&mut self) {
        self.channel_name = ::std::option::Option::None;
    }

    pub fn has_channel_name(&self) -> bool {
        self.channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_name(&mut self, v: ::std::string::String) {
        self.channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_name(&mut self) -> &mut ::std::string::String {
        if self.channel_name.is_none() {
            self.channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_channel_name(&mut self) -> ::std::string::String {
        self.channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .dota.DOTAChatChannelType_t channel_type = 2;

    pub fn channel_type(&self) -> super::dota_shared_enums::DOTAChatChannelType_t {
        match self.channel_type {
            Some(e) => e.enum_value_or(super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional),
            None => super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional,
        }
    }

    pub fn clear_channel_type(&mut self) {
        self.channel_type = ::std::option::Option::None;
    }

    pub fn has_channel_type(&self) -> bool {
        self.channel_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_type(&mut self, v: super::dota_shared_enums::DOTAChatChannelType_t) {
        self.channel_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_name",
            |m: &CMsgDOTAChatGetMemberCount| { &m.channel_name },
            |m: &mut CMsgDOTAChatGetMemberCount| { &mut m.channel_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_type",
            |m: &CMsgDOTAChatGetMemberCount| { &m.channel_type },
            |m: &mut CMsgDOTAChatGetMemberCount| { &mut m.channel_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAChatGetMemberCount>(
            "CMsgDOTAChatGetMemberCount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAChatGetMemberCount {
    const NAME: &'static str = "CMsgDOTAChatGetMemberCount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.channel_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.channel_type {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.channel_type {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatGetMemberCount {
        CMsgDOTAChatGetMemberCount::new()
    }

    fn clear(&mut self) {
        self.channel_name = ::std::option::Option::None;
        self.channel_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatGetMemberCount {
        static instance: CMsgDOTAChatGetMemberCount = CMsgDOTAChatGetMemberCount {
            channel_name: ::std::option::Option::None,
            channel_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAChatGetMemberCount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAChatGetMemberCount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAChatGetMemberCount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAChatGetMemberCount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAChatGetMemberCountResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatGetMemberCountResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
    pub channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetMemberCountResponse.channel_type)
    pub channel_type: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_shared_enums::DOTAChatChannelType_t>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatGetMemberCountResponse.member_count)
    pub member_count: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatGetMemberCountResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatGetMemberCountResponse {
    fn default() -> &'a CMsgDOTAChatGetMemberCountResponse {
        <CMsgDOTAChatGetMemberCountResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatGetMemberCountResponse {
    pub fn new() -> CMsgDOTAChatGetMemberCountResponse {
        ::std::default::Default::default()
    }

    // optional string channel_name = 1;

    pub fn channel_name(&self) -> &str {
        match self.channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_channel_name(&mut self) {
        self.channel_name = ::std::option::Option::None;
    }

    pub fn has_channel_name(&self) -> bool {
        self.channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_name(&mut self, v: ::std::string::String) {
        self.channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_name(&mut self) -> &mut ::std::string::String {
        if self.channel_name.is_none() {
            self.channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_channel_name(&mut self) -> ::std::string::String {
        self.channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .dota.DOTAChatChannelType_t channel_type = 2;

    pub fn channel_type(&self) -> super::dota_shared_enums::DOTAChatChannelType_t {
        match self.channel_type {
            Some(e) => e.enum_value_or(super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional),
            None => super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional,
        }
    }

    pub fn clear_channel_type(&mut self) {
        self.channel_type = ::std::option::Option::None;
    }

    pub fn has_channel_type(&self) -> bool {
        self.channel_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_type(&mut self, v: super::dota_shared_enums::DOTAChatChannelType_t) {
        self.channel_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 member_count = 3;

    pub fn member_count(&self) -> u32 {
        self.member_count.unwrap_or(0)
    }

    pub fn clear_member_count(&mut self) {
        self.member_count = ::std::option::Option::None;
    }

    pub fn has_member_count(&self) -> bool {
        self.member_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_member_count(&mut self, v: u32) {
        self.member_count = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_name",
            |m: &CMsgDOTAChatGetMemberCountResponse| { &m.channel_name },
            |m: &mut CMsgDOTAChatGetMemberCountResponse| { &mut m.channel_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel_type",
            |m: &CMsgDOTAChatGetMemberCountResponse| { &m.channel_type },
            |m: &mut CMsgDOTAChatGetMemberCountResponse| { &mut m.channel_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "member_count",
            |m: &CMsgDOTAChatGetMemberCountResponse| { &m.member_count },
            |m: &mut CMsgDOTAChatGetMemberCountResponse| { &mut m.member_count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAChatGetMemberCountResponse>(
            "CMsgDOTAChatGetMemberCountResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAChatGetMemberCountResponse {
    const NAME: &'static str = "CMsgDOTAChatGetMemberCountResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.channel_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.member_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.channel_type {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.member_count {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.channel_type {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.member_count {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatGetMemberCountResponse {
        CMsgDOTAChatGetMemberCountResponse::new()
    }

    fn clear(&mut self) {
        self.channel_name = ::std::option::Option::None;
        self.channel_type = ::std::option::Option::None;
        self.member_count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatGetMemberCountResponse {
        static instance: CMsgDOTAChatGetMemberCountResponse = CMsgDOTAChatGetMemberCountResponse {
            channel_name: ::std::option::Option::None,
            channel_type: ::std::option::Option::None,
            member_count: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAChatGetMemberCountResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAChatGetMemberCountResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAChatGetMemberCountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAChatGetMemberCountResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAChatRegionsEnabled)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatRegionsEnabled {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatRegionsEnabled.enable_all_regions)
    pub enable_all_regions: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
    pub enabled_regions: ::std::vec::Vec<cmsg_dotachat_regions_enabled::Region>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatRegionsEnabled.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatRegionsEnabled {
    fn default() -> &'a CMsgDOTAChatRegionsEnabled {
        <CMsgDOTAChatRegionsEnabled as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatRegionsEnabled {
    pub fn new() -> CMsgDOTAChatRegionsEnabled {
        ::std::default::Default::default()
    }

    // optional bool enable_all_regions = 1;

    pub fn enable_all_regions(&self) -> bool {
        self.enable_all_regions.unwrap_or(false)
    }

    pub fn clear_enable_all_regions(&mut self) {
        self.enable_all_regions = ::std::option::Option::None;
    }

    pub fn has_enable_all_regions(&self) -> bool {
        self.enable_all_regions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enable_all_regions(&mut self, v: bool) {
        self.enable_all_regions = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "enable_all_regions",
            |m: &CMsgDOTAChatRegionsEnabled| { &m.enable_all_regions },
            |m: &mut CMsgDOTAChatRegionsEnabled| { &mut m.enable_all_regions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "enabled_regions",
            |m: &CMsgDOTAChatRegionsEnabled| { &m.enabled_regions },
            |m: &mut CMsgDOTAChatRegionsEnabled| { &mut m.enabled_regions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAChatRegionsEnabled>(
            "CMsgDOTAChatRegionsEnabled",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAChatRegionsEnabled {
    const NAME: &'static str = "CMsgDOTAChatRegionsEnabled";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.enable_all_regions = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    self.enabled_regions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.enable_all_regions {
            my_size += 1 + 1;
        }
        for value in &self.enabled_regions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.enable_all_regions {
            os.write_bool(1, v)?;
        }
        for v in &self.enabled_regions {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatRegionsEnabled {
        CMsgDOTAChatRegionsEnabled::new()
    }

    fn clear(&mut self) {
        self.enable_all_regions = ::std::option::Option::None;
        self.enabled_regions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatRegionsEnabled {
        static instance: CMsgDOTAChatRegionsEnabled = CMsgDOTAChatRegionsEnabled {
            enable_all_regions: ::std::option::Option::None,
            enabled_regions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAChatRegionsEnabled {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAChatRegionsEnabled").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAChatRegionsEnabled {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAChatRegionsEnabled {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTAChatRegionsEnabled`
pub mod cmsg_dotachat_regions_enabled {
    // @@protoc_insertion_point(message:dota.CMsgDOTAChatRegionsEnabled.Region)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Region {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatRegionsEnabled.Region.min_latitude)
        pub min_latitude: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatRegionsEnabled.Region.max_latitude)
        pub max_latitude: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatRegionsEnabled.Region.min_longitude)
        pub min_longitude: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAChatRegionsEnabled.Region.max_longitude)
        pub max_longitude: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAChatRegionsEnabled.Region.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Region {
        fn default() -> &'a Region {
            <Region as ::protobuf::Message>::default_instance()
        }
    }

    impl Region {
        pub fn new() -> Region {
            ::std::default::Default::default()
        }

        // optional float min_latitude = 1;

        pub fn min_latitude(&self) -> f32 {
            self.min_latitude.unwrap_or(0.)
        }

        pub fn clear_min_latitude(&mut self) {
            self.min_latitude = ::std::option::Option::None;
        }

        pub fn has_min_latitude(&self) -> bool {
            self.min_latitude.is_some()
        }

        // Param is passed by value, moved
        pub fn set_min_latitude(&mut self, v: f32) {
            self.min_latitude = ::std::option::Option::Some(v);
        }

        // optional float max_latitude = 2;

        pub fn max_latitude(&self) -> f32 {
            self.max_latitude.unwrap_or(0.)
        }

        pub fn clear_max_latitude(&mut self) {
            self.max_latitude = ::std::option::Option::None;
        }

        pub fn has_max_latitude(&self) -> bool {
            self.max_latitude.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_latitude(&mut self, v: f32) {
            self.max_latitude = ::std::option::Option::Some(v);
        }

        // optional float min_longitude = 3;

        pub fn min_longitude(&self) -> f32 {
            self.min_longitude.unwrap_or(0.)
        }

        pub fn clear_min_longitude(&mut self) {
            self.min_longitude = ::std::option::Option::None;
        }

        pub fn has_min_longitude(&self) -> bool {
            self.min_longitude.is_some()
        }

        // Param is passed by value, moved
        pub fn set_min_longitude(&mut self, v: f32) {
            self.min_longitude = ::std::option::Option::Some(v);
        }

        // optional float max_longitude = 4;

        pub fn max_longitude(&self) -> f32 {
            self.max_longitude.unwrap_or(0.)
        }

        pub fn clear_max_longitude(&mut self) {
            self.max_longitude = ::std::option::Option::None;
        }

        pub fn has_max_longitude(&self) -> bool {
            self.max_longitude.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_longitude(&mut self, v: f32) {
            self.max_longitude = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "min_latitude",
                |m: &Region| { &m.min_latitude },
                |m: &mut Region| { &mut m.min_latitude },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "max_latitude",
                |m: &Region| { &m.max_latitude },
                |m: &mut Region| { &mut m.max_latitude },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "min_longitude",
                |m: &Region| { &m.min_longitude },
                |m: &mut Region| { &mut m.min_longitude },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "max_longitude",
                |m: &Region| { &m.max_longitude },
                |m: &mut Region| { &mut m.max_longitude },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Region>(
                "CMsgDOTAChatRegionsEnabled.Region",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Region {
        const NAME: &'static str = "Region";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.min_latitude = ::std::option::Option::Some(is.read_float()?);
                    },
                    21 => {
                        self.max_latitude = ::std::option::Option::Some(is.read_float()?);
                    },
                    29 => {
                        self.min_longitude = ::std::option::Option::Some(is.read_float()?);
                    },
                    37 => {
                        self.max_longitude = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.min_latitude {
                my_size += 1 + 4;
            }
            if let Some(v) = self.max_latitude {
                my_size += 1 + 4;
            }
            if let Some(v) = self.min_longitude {
                my_size += 1 + 4;
            }
            if let Some(v) = self.max_longitude {
                my_size += 1 + 4;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.min_latitude {
                os.write_float(1, v)?;
            }
            if let Some(v) = self.max_latitude {
                os.write_float(2, v)?;
            }
            if let Some(v) = self.min_longitude {
                os.write_float(3, v)?;
            }
            if let Some(v) = self.max_longitude {
                os.write_float(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Region {
            Region::new()
        }

        fn clear(&mut self) {
            self.min_latitude = ::std::option::Option::None;
            self.max_latitude = ::std::option::Option::None;
            self.min_longitude = ::std::option::Option::None;
            self.max_longitude = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Region {
            static instance: Region = Region {
                min_latitude: ::std::option::Option::None,
                max_latitude: ::std::option::Option::None,
                min_longitude: ::std::option::Option::None,
                max_longitude: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Region {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAChatRegionsEnabled.Region").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Region {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Region {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!dota_gcmessages_client_chat.proto\x12\x04dota\x1a\x17dota_shared_enum\
    s.proto\"\x8a\x01\n\x1fCMsgClientToGCPrivateChatInvite\x129\n\x19private\
    _chat_channel_name\x18\x01\x20\x01(\tR\x16privateChatChannelName\x12,\n\
    \x12invited_account_id\x18\x02\x20\x01(\rR\x10invitedAccountId\"\x82\x01\
    \n\x1dCMsgClientToGCPrivateChatKick\x129\n\x19private_chat_channel_name\
    \x18\x01\x20\x01(\tR\x16privateChatChannelName\x12&\n\x0fkick_account_id\
    \x18\x02\x20\x01(\rR\rkickAccountId\"\x8b\x01\n\x20CMsgClientToGCPrivate\
    ChatPromote\x129\n\x19private_chat_channel_name\x18\x01\x20\x01(\tR\x16p\
    rivateChatChannelName\x12,\n\x12promote_account_id\x18\x02\x20\x01(\rR\
    \x10promoteAccountId\"\x88\x01\n\x1fCMsgClientToGCPrivateChatDemote\x129\
    \n\x19private_chat_channel_name\x18\x01\x20\x01(\tR\x16privateChatChanne\
    lName\x12*\n\x11demote_account_id\x18\x02\x20\x01(\rR\x0fdemoteAccountId\
    \"\xe3\x04\n!CMsgGCToClientPrivateChatResponse\x129\n\x19private_chat_ch\
    annel_name\x18\x01\x20\x01(\tR\x16privateChatChannelName\x12F\n\x06resul\
    t\x18\x02\x20\x01(\x0e2..dota.CMsgGCToClientPrivateChatResponse.ResultR\
    \x06result\x12\x1a\n\x08username\x18\x03\x20\x01(\tR\x08username\"\x9e\
    \x03\n\x06Result\x12\x0b\n\x07SUCCESS\x10\0\x12\x19\n\x15FAILURE_CREATIO\
    N_LOCK\x10\x01\x12\x1b\n\x17FAILURE_SQL_TRANSACTION\x10\x02\x12\x14\n\
    \x10FAILURE_SDO_LOAD\x10\x03\x12\x19\n\x15FAILURE_NO_PERMISSION\x10\x04\
    \x12\x1a\n\x16FAILURE_ALREADY_MEMBER\x10\x05\x12\x18\n\x14FAILURE_NOT_A_\
    MEMBER\x10\x07\x12\x1f\n\x1bFAILURE_NO_REMAINING_ADMINS\x10\x08\x12\x13\
    \n\x0fFAILURE_NO_ROOM\x10\t\x12!\n\x1dFAILURE_CREATION_RATE_LIMITED\x10\
    \n\x12\x20\n\x1cFAILURE_UNKNOWN_CHANNEL_NAME\x10\x0b\x12\x18\n\x14FAILUR\
    E_UNKNOWN_USER\x10\x0c\x12\x19\n\x15FAILURE_UNKNOWN_ERROR\x10\r\x12\x1d\
    \n\x19FAILURE_CANNOT_KICK_ADMIN\x10\x0e\x12\x19\n\x15FAILURE_ALREADY_ADM\
    IN\x10\x0f\"\xa7\x01\n\x17CMsgDOTAJoinChatChannel\x12!\n\x0cchannel_name\
    \x18\x02\x20\x01(\tR\x0bchannelName\x12>\n\x0cchannel_type\x18\x04\x20\
    \x01(\x0e2\x1b.dota.DOTAChatChannelType_tR\x0bchannelType\x12)\n\x10sile\
    nt_rejection\x18\x05\x20\x01(\x08R\x0fsilentRejection\"9\n\x18CMsgDOTALe\
    aveChatChannel\x12\x1d\n\nchannel_id\x18\x01\x20\x01(\x04R\tchannelId\"c\
    \n\x1aCMsgGCChatReportPublicSpam\x12\x1d\n\nchannel_id\x18\x01\x20\x01(\
    \x04R\tchannelId\x12&\n\x0fchannel_user_id\x18\x02\x20\x01(\rR\rchannelU\
    serId\"t\n\x18CMsgDOTAChatModeratorBan\x12\x1d\n\nchannel_id\x18\x01\x20\
    \x01(\x04R\tchannelId\x12\x1d\n\naccount_id\x18\x02\x20\x01(\rR\taccount\
    Id\x12\x1a\n\x08duration\x18\x03\x20\x01(\rR\x08duration\"\x8b\x11\n\x13\
    CMsgDOTAChatMessage\x12\x1d\n\naccount_id\x18\x01\x20\x01(\rR\taccountId\
    \x12\x1d\n\nchannel_id\x18\x02\x20\x01(\x04R\tchannelId\x12!\n\x0cperson\
    a_name\x18\x03\x20\x01(\tR\x0bpersonaName\x12\x12\n\x04text\x18\x04\x20\
    \x01(\tR\x04text\x12\x1c\n\ttimestamp\x18\x05\x20\x01(\rR\ttimestamp\x12\
    9\n\x19suggest_invite_account_id\x18\x06\x20\x01(\rR\x16suggestInviteAcc\
    ountId\x12.\n\x13suggest_invite_name\x18\x07\x20\x01(\tR\x11suggestInvit\
    eName\x12B\n\x1efantasy_draft_owner_account_id\x18\x08\x20\x01(\rR\x1afa\
    ntasyDraftOwnerAccountId\x12D\n\x1ffantasy_draft_player_account_id\x18\t\
    \x20\x01(\rR\x1bfantasyDraftPlayerAccountId\x12\x19\n\x08event_id\x18\n\
    \x20\x01(\rR\x07eventId\x125\n\x17suggest_invite_to_lobby\x18\x0b\x20\
    \x01(\x08R\x14suggestInviteToLobby\x12!\n\x0cevent_points\x18\x0c\x20\
    \x01(\rR\x0beventPoints\x12\x1b\n\tcoin_flip\x18\r\x20\x01(\x08R\x08coin\
    Flip\x12\x1b\n\tplayer_id\x18\x0e\x20\x01(\x05R\x08playerId\x127\n\x18sh\
    are_profile_account_id\x18\x0f\x20\x01(\rR\x15shareProfileAccountId\x12&\
    \n\x0fchannel_user_id\x18\x10\x20\x01(\rR\rchannelUserId\x12?\n\tdice_ro\
    ll\x18\x11\x20\x01(\x0b2\".dota.CMsgDOTAChatMessage.DiceRollR\x08diceRol\
    l\x12$\n\x0eshare_party_id\x18\x12\x20\x01(\x04R\x0csharePartyId\x12$\n\
    \x0eshare_lobby_id\x18\x13\x20\x01(\x04R\x0cshareLobbyId\x12:\n\x1ashare\
    _lobby_custom_game_id\x18\x14\x20\x01(\x04R\x16shareLobbyCustomGameId\
    \x12.\n\x13share_lobby_passkey\x18\x15\x20\x01(\tR\x11shareLobbyPasskey\
    \x125\n\x17private_chat_channel_id\x18\x16\x20\x01(\rR\x14privateChatCha\
    nnelId\x12\x16\n\x06status\x18\x17\x20\x01(\rR\x06status\x129\n\x19legac\
    y_battle_cup_victory\x18\x18\x20\x01(\x08R\x16legacyBattleCupVictory\x12\
    *\n\x11battle_cup_streak\x18\x1d\x20\x01(\rR\x0fbattleCupStreak\x12\x1f\
    \n\x0bbadge_level\x18\x19\x20\x01(\rR\nbadgeLevel\x12/\n\x14suggest_pick\
    _hero_id\x18\x1a\x20\x01(\rR\x11suggestPickHeroId\x123\n\x16suggest_pick\
    _hero_role\x18\x1b\x20\x01(\tR\x13suggestPickHeroRole\x12-\n\x13suggest_\
    ban_hero_id\x18\x1e\x20\x01(\rR\x10suggestBanHeroId\x12M\n\rtrivia_answe\
    r\x18\x20\x20\x01(\x0b2(.dota.CMsgDOTAChatMessage.TriviaAnsweredR\x0ctri\
    viaAnswer\x120\n\x14requested_ability_id\x18!\x20\x01(\x05R\x12requested\
    AbilityId\x12\x1d\n\nchat_flags\x18\"\x20\x01(\rR\tchatFlags\x122\n\x15s\
    tarted_finding_match\x18#\x20\x01(\x08R\x13startedFindingMatch\x12\x20\n\
    \x0cctrl_is_down\x18$\x20\x01(\x08R\nctrlIsDown\x12(\n\x10favorite_team_\
    id\x18%\x20\x01(\rR\x0efavoriteTeamId\x122\n\x15favorite_team_quality\
    \x18&\x20\x01(\rR\x13favoriteTeamQuality\x129\n\x19suggest_player_draft_\
    pick\x18'\x20\x01(\x05R\x16suggestPlayerDraftPick\x12U\n\x11player_draft\
    _pick\x18(\x20\x01(\x0b2).dota.CMsgDOTAChatMessage.PlayerDraftPickR\x0fp\
    layerDraftPick\x1aX\n\x08DiceRoll\x12\x19\n\x08roll_min\x18\x01\x20\x01(\
    \x05R\x07rollMin\x12\x19\n\x08roll_max\x18\x02\x20\x01(\x05R\x07rollMax\
    \x12\x16\n\x06result\x18\x03\x20\x01(\x05R\x06result\x1a\xf2\x01\n\x0eTr\
    iviaAnswered\x12\x1f\n\x0bquestion_id\x18\x01\x20\x01(\rR\nquestionId\
    \x12!\n\x0canswer_index\x18\x02\x20\x01(\rR\x0banswerIndex\x126\n\x17par\
    ty_questions_correct\x18\x03\x20\x01(\rR\x15partyQuestionsCorrect\x124\n\
    \x16party_questions_viewed\x18\x04\x20\x01(\rR\x14partyQuestionsViewed\
    \x12.\n\x13party_trivia_points\x18\x05\x20\x01(\rR\x11partyTriviaPoints\
    \x1aB\n\x0fPlayerDraftPick\x12\x1b\n\tplayer_id\x18\x01\x20\x01(\x05R\
    \x08playerId\x12\x12\n\x04team\x18\x02\x20\x01(\x05R\x04team\"\x92\x01\n\
    \x12CMsgDOTAChatMember\x12\x19\n\x08steam_id\x18\x01\x20\x01(\x06R\x07st\
    eamId\x12!\n\x0cpersona_name\x18\x02\x20\x01(\tR\x0bpersonaName\x12&\n\
    \x0fchannel_user_id\x18\x03\x20\x01(\rR\rchannelUserId\x12\x16\n\x06stat\
    us\x18\x04\x20\x01(\rR\x06status\"\xa6\x08\n\x1fCMsgDOTAJoinChatChannelR\
    esponse\x12\x1a\n\x08response\x18\x01\x20\x01(\rR\x08response\x12!\n\x0c\
    channel_name\x18\x02\x20\x01(\tR\x0bchannelName\x12\x1d\n\nchannel_id\
    \x18\x03\x20\x01(\x06R\tchannelId\x12\x1f\n\x0bmax_members\x18\x04\x20\
    \x01(\rR\nmaxMembers\x122\n\x07members\x18\x05\x20\x03(\x0b2\x18.dota.CM\
    sgDOTAChatMemberR\x07members\x12>\n\x0cchannel_type\x18\x06\x20\x01(\x0e\
    2\x1b.dota.DOTAChatChannelType_tR\x0bchannelType\x12D\n\x06result\x18\
    \x07\x20\x01(\x0e2,.dota.CMsgDOTAJoinChatChannelResponse.ResultR\x06resu\
    lt\x12*\n\x11gc_initiated_join\x18\x08\x20\x01(\x08R\x0fgcInitiatedJoin\
    \x12&\n\x0fchannel_user_id\x18\t\x20\x01(\rR\rchannelUserId\x12'\n\x0fwe\
    lcome_message\x18\n\x20\x01(\tR\x0ewelcomeMessage\x12K\n\x12special_priv\
    ileges\x18\x0b\x20\x01(\x0e2\x1c.dota.EChatSpecialPrivilegesR\x11special\
    Privileges\"\xff\x03\n\x06Result\x12\x10\n\x0cJOIN_SUCCESS\x10\0\x12\x18\
    \n\x14INVALID_CHANNEL_TYPE\x10\x01\x12\x15\n\x11ACCOUNT_NOT_FOUND\x10\
    \x02\x12\x0e\n\nACH_FAILED\x10\x03\x12\x1d\n\x19USER_IN_TOO_MANY_CHANNEL\
    S\x10\x04\x12\x17\n\x13RATE_LIMIT_EXCEEDED\x10\x05\x12\x10\n\x0cCHANNEL_\
    FULL\x10\x06\x12\x1b\n\x17CHANNEL_FULL_OVERFLOWED\x10\x07\x12\x16\n\x12F\
    AILED_TO_ADD_USER\x10\x08\x12\x19\n\x15CHANNEL_TYPE_DISABLED\x10\t\x12\
    \x1e\n\x1aPRIVATE_CHAT_CREATE_FAILED\x10\n\x12\x1e\n\x1aPRIVATE_CHAT_NO_\
    PERMISSION\x10\x0b\x12#\n\x1fPRIVATE_CHAT_CREATE_LOCK_FAILED\x10\x0c\x12\
    \x17\n\x13PRIVATE_CHAT_KICKED\x10\r\x12\x14\n\x10USER_NOT_ALLOWED\x10\
    \x0e\x12$\n\x20ENSURE_SPECIAL_PRIVILEGES_FAILED\x10\x0f\x12\x20\n\x1cNEW\
    _PLAYER_USER_NOT_ELIGIBLE\x10\x10\x12\x10\n\x0cSILENT_ERROR\x10\x11\x12\
    \x1a\n\x16NEW_PLAYER_USER_BANNED\x10\x12\"\xbd\x01\n\x1eCMsgDOTAOtherJoi\
    nedChatChannel\x12\x1d\n\nchannel_id\x18\x01\x20\x01(\x06R\tchannelId\
    \x12!\n\x0cpersona_name\x18\x02\x20\x01(\tR\x0bpersonaName\x12\x19\n\x08\
    steam_id\x18\x03\x20\x01(\x06R\x07steamId\x12&\n\x0fchannel_user_id\x18\
    \x04\x20\x01(\rR\rchannelUserId\x12\x16\n\x06status\x18\x05\x20\x01(\rR\
    \x06status\"\x80\x01\n\x1cCMsgDOTAOtherLeftChatChannel\x12\x1d\n\nchanne\
    l_id\x18\x01\x20\x01(\x06R\tchannelId\x12\x19\n\x08steam_id\x18\x02\x20\
    \x01(\x06R\x07steamId\x12&\n\x0fchannel_user_id\x18\x03\x20\x01(\rR\rcha\
    nnelUserId\"\x20\n\x1eCMsgDOTARequestChatChannelList\"\x92\x02\n&CMsgDOT\
    ARequestChatChannelListResponse\x12T\n\x08channels\x18\x01\x20\x03(\x0b2\
    8.dota.CMsgDOTARequestChatChannelListResponse.ChatChannelR\x08channels\
    \x1a\x91\x01\n\x0bChatChannel\x12!\n\x0cchannel_name\x18\x01\x20\x01(\tR\
    \x0bchannelName\x12\x1f\n\x0bnum_members\x18\x02\x20\x01(\rR\nnumMembers\
    \x12>\n\x0cchannel_type\x18\x03\x20\x01(\x0e2\x1b.dota.DOTAChatChannelTy\
    pe_tR\x0bchannelType\"\x91\x02\n\x1fCMsgDOTAChatGetUserListResponse\x12\
    \x1d\n\nchannel_id\x18\x01\x20\x01(\x06R\tchannelId\x12F\n\x07members\
    \x18\x02\x20\x03(\x0b2,.dota.CMsgDOTAChatGetUserListResponse.MemberR\x07\
    members\x1a\x86\x01\n\x06Member\x12\x19\n\x08steam_id\x18\x01\x20\x01(\
    \x06R\x07steamId\x12!\n\x0cpersona_name\x18\x02\x20\x01(\tR\x0bpersonaNa\
    me\x12&\n\x0fchannel_user_id\x18\x03\x20\x01(\rR\rchannelUserId\x12\x16\
    \n\x06status\x18\x04\x20\x01(\rR\x06status\"\x7f\n\x1aCMsgDOTAChatGetMem\
    berCount\x12!\n\x0cchannel_name\x18\x01\x20\x01(\tR\x0bchannelName\x12>\
    \n\x0cchannel_type\x18\x02\x20\x01(\x0e2\x1b.dota.DOTAChatChannelType_tR\
    \x0bchannelType\"\xaa\x01\n\"CMsgDOTAChatGetMemberCountResponse\x12!\n\
    \x0cchannel_name\x18\x01\x20\x01(\tR\x0bchannelName\x12>\n\x0cchannel_ty\
    pe\x18\x02\x20\x01(\x0e2\x1b.dota.DOTAChatChannelType_tR\x0bchannelType\
    \x12!\n\x0cmember_count\x18\x03\x20\x01(\rR\x0bmemberCount\"\xb7\x02\n\
    \x1aCMsgDOTAChatRegionsEnabled\x12,\n\x12enable_all_regions\x18\x01\x20\
    \x01(\x08R\x10enableAllRegions\x12P\n\x0fenabled_regions\x18\x02\x20\x03\
    (\x0b2'.dota.CMsgDOTAChatRegionsEnabled.RegionR\x0eenabledRegions\x1a\
    \x98\x01\n\x06Region\x12!\n\x0cmin_latitude\x18\x01\x20\x01(\x02R\x0bmin\
    Latitude\x12!\n\x0cmax_latitude\x18\x02\x20\x01(\x02R\x0bmaxLatitude\x12\
    #\n\rmin_longitude\x18\x03\x20\x01(\x02R\x0cminLongitude\x12#\n\rmax_lon\
    gitude\x18\x04\x20\x01(\x02R\x0cmaxLongitudeB%Z#github.com/dotabuff/mant\
    a/dota;dotaJ\x87S\n\x07\x12\x05\0\0\xeb\x01\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x03\
    \0:\n\t\n\x02\x08\x0b\x12\x03\x03\0:\n\t\n\x02\x03\0\x12\x03\x05\x07\x20\
    \n\n\n\x02\x04\0\x12\x04\x07\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\
    '\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x086\n\x0c\n\x05\x04\0\x02\0\x04\
    \x12\x03\x08\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x11\x17\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\x181\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x0845\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x08/\n\x0c\n\x05\x04\
    \0\x02\x01\x04\x12\x03\t\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\
    \x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\x18*\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\t-.\n\n\n\x02\x04\x01\x12\x04\x0c\0\x0f\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x0c\x08%\n\x0b\n\x04\x04\x01\x02\0\x12\x03\r\
    \x086\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\r\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\r\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\r\
    \x181\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r45\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03\x0e\x08,\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x0e\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0e\x11\x17\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\x0e\x18'\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03\x0e*+\n\n\n\x02\x04\x02\x12\x04\x11\0\x14\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03\x11\x08(\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x12\x086\n\x0c\n\x05\
    \x04\x02\x02\0\x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03\x12\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x12\x181\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03\x1245\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    \x13\x08/\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x13\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03\x13\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x13\x18*\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x13-.\n\n\
    \n\x02\x04\x03\x12\x04\x16\0\x19\x01\n\n\n\x03\x04\x03\x01\x12\x03\x16\
    \x08'\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x17\x086\n\x0c\n\x05\x04\x03\x02\
    \0\x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x17\x11\
    \x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x17\x181\n\x0c\n\x05\x04\x03\
    \x02\0\x03\x12\x03\x1745\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x18\x08.\n\
    \x0c\n\x05\x04\x03\x02\x01\x04\x12\x03\x18\x08\x10\n\x0c\n\x05\x04\x03\
    \x02\x01\x05\x12\x03\x18\x11\x17\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\
    \x18\x18)\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x18,-\n\n\n\x02\x04\
    \x04\x12\x04\x1b\01\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1b\x08)\n\x0c\n\
    \x04\x04\x04\x04\0\x12\x04\x1c\x08,\t\n\x0c\n\x05\x04\x04\x04\0\x01\x12\
    \x03\x1c\r\x13\n\r\n\x06\x04\x04\x04\0\x02\0\x12\x03\x1d\x10\x1c\n\x0e\n\
    \x07\x04\x04\x04\0\x02\0\x01\x12\x03\x1d\x10\x17\n\x0e\n\x07\x04\x04\x04\
    \0\x02\0\x02\x12\x03\x1d\x1a\x1b\n\r\n\x06\x04\x04\x04\0\x02\x01\x12\x03\
    \x1e\x10*\n\x0e\n\x07\x04\x04\x04\0\x02\x01\x01\x12\x03\x1e\x10%\n\x0e\n\
    \x07\x04\x04\x04\0\x02\x01\x02\x12\x03\x1e()\n\r\n\x06\x04\x04\x04\0\x02\
    \x02\x12\x03\x1f\x10,\n\x0e\n\x07\x04\x04\x04\0\x02\x02\x01\x12\x03\x1f\
    \x10'\n\x0e\n\x07\x04\x04\x04\0\x02\x02\x02\x12\x03\x1f*+\n\r\n\x06\x04\
    \x04\x04\0\x02\x03\x12\x03\x20\x10%\n\x0e\n\x07\x04\x04\x04\0\x02\x03\
    \x01\x12\x03\x20\x10\x20\n\x0e\n\x07\x04\x04\x04\0\x02\x03\x02\x12\x03\
    \x20#$\n\r\n\x06\x04\x04\x04\0\x02\x04\x12\x03!\x10*\n\x0e\n\x07\x04\x04\
    \x04\0\x02\x04\x01\x12\x03!\x10%\n\x0e\n\x07\x04\x04\x04\0\x02\x04\x02\
    \x12\x03!()\n\r\n\x06\x04\x04\x04\0\x02\x05\x12\x03\"\x10+\n\x0e\n\x07\
    \x04\x04\x04\0\x02\x05\x01\x12\x03\"\x10&\n\x0e\n\x07\x04\x04\x04\0\x02\
    \x05\x02\x12\x03\")*\n\r\n\x06\x04\x04\x04\0\x02\x06\x12\x03#\x10)\n\x0e\
    \n\x07\x04\x04\x04\0\x02\x06\x01\x12\x03#\x10$\n\x0e\n\x07\x04\x04\x04\0\
    \x02\x06\x02\x12\x03#'(\n\r\n\x06\x04\x04\x04\0\x02\x07\x12\x03$\x100\n\
    \x0e\n\x07\x04\x04\x04\0\x02\x07\x01\x12\x03$\x10+\n\x0e\n\x07\x04\x04\
    \x04\0\x02\x07\x02\x12\x03$./\n\r\n\x06\x04\x04\x04\0\x02\x08\x12\x03%\
    \x10$\n\x0e\n\x07\x04\x04\x04\0\x02\x08\x01\x12\x03%\x10\x1f\n\x0e\n\x07\
    \x04\x04\x04\0\x02\x08\x02\x12\x03%\"#\n\r\n\x06\x04\x04\x04\0\x02\t\x12\
    \x03&\x103\n\x0e\n\x07\x04\x04\x04\0\x02\t\x01\x12\x03&\x10-\n\x0e\n\x07\
    \x04\x04\x04\0\x02\t\x02\x12\x03&02\n\r\n\x06\x04\x04\x04\0\x02\n\x12\
    \x03'\x102\n\x0e\n\x07\x04\x04\x04\0\x02\n\x01\x12\x03'\x10,\n\x0e\n\x07\
    \x04\x04\x04\0\x02\n\x02\x12\x03'/1\n\r\n\x06\x04\x04\x04\0\x02\x0b\x12\
    \x03(\x10*\n\x0e\n\x07\x04\x04\x04\0\x02\x0b\x01\x12\x03(\x10$\n\x0e\n\
    \x07\x04\x04\x04\0\x02\x0b\x02\x12\x03(')\n\r\n\x06\x04\x04\x04\0\x02\
    \x0c\x12\x03)\x10+\n\x0e\n\x07\x04\x04\x04\0\x02\x0c\x01\x12\x03)\x10%\n\
    \x0e\n\x07\x04\x04\x04\0\x02\x0c\x02\x12\x03)(*\n\r\n\x06\x04\x04\x04\0\
    \x02\r\x12\x03*\x10/\n\x0e\n\x07\x04\x04\x04\0\x02\r\x01\x12\x03*\x10)\n\
    \x0e\n\x07\x04\x04\x04\0\x02\r\x02\x12\x03*,.\n\r\n\x06\x04\x04\x04\0\
    \x02\x0e\x12\x03+\x10+\n\x0e\n\x07\x04\x04\x04\0\x02\x0e\x01\x12\x03+\
    \x10%\n\x0e\n\x07\x04\x04\x04\0\x02\x0e\x02\x12\x03+(*\n\x0b\n\x04\x04\
    \x04\x02\0\x12\x03.\x086\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03.\x08\x10\
    \n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03.\x11\x17\n\x0c\n\x05\x04\x04\x02\
    \0\x01\x12\x03.\x181\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03.45\n\x0b\n\
    \x04\x04\x04\x02\x01\x12\x03/\x08E\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\
    \x03/\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03/\x119\n\x0c\n\x05\
    \x04\x04\x02\x01\x01\x12\x03/:@\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03/\
    CD\n\x0b\n\x04\x04\x04\x02\x02\x12\x030\x08%\n\x0c\n\x05\x04\x04\x02\x02\
    \x04\x12\x030\x08\x10\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x030\x11\x17\n\
    \x0c\n\x05\x04\x04\x02\x02\x01\x12\x030\x18\x20\n\x0c\n\x05\x04\x04\x02\
    \x02\x03\x12\x030#$\n\n\n\x02\x04\x05\x12\x043\07\x01\n\n\n\x03\x04\x05\
    \x01\x12\x033\x08\x1f\n\x0b\n\x04\x04\x05\x02\0\x12\x034\x08)\n\x0c\n\
    \x05\x04\x05\x02\0\x04\x12\x034\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x05\
    \x12\x034\x11\x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x034\x18$\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x034'(\n\x0b\n\x04\x04\x05\x02\x01\x12\x035\
    \x088\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x035\x08\x10\n\x0c\n\x05\x04\
    \x05\x02\x01\x06\x12\x035\x11&\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x035'\
    3\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03567\n\x0b\n\x04\x04\x05\x02\x02\
    \x12\x036\x08+\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x036\x08\x10\n\x0c\n\
    \x05\x04\x05\x02\x02\x05\x12\x036\x11\x15\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x036\x16&\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x036)*\n\n\n\x02\
    \x04\x06\x12\x049\0;\x01\n\n\n\x03\x04\x06\x01\x12\x039\x08\x20\n\x0b\n\
    \x04\x04\x06\x02\0\x12\x03:\x08'\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03:\
    \x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03:\x11\x17\n\x0c\n\x05\x04\
    \x06\x02\0\x01\x12\x03:\x18\"\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03:%&\n\
    \n\n\x02\x04\x07\x12\x04=\0@\x01\n\n\n\x03\x04\x07\x01\x12\x03=\x08\"\n\
    \x0b\n\x04\x04\x07\x02\0\x12\x03>\x08'\n\x0c\n\x05\x04\x07\x02\0\x04\x12\
    \x03>\x08\x10\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03>\x11\x17\n\x0c\n\x05\
    \x04\x07\x02\0\x01\x12\x03>\x18\"\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03>\
    %&\n\x0b\n\x04\x04\x07\x02\x01\x12\x03?\x08,\n\x0c\n\x05\x04\x07\x02\x01\
    \x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03?\x11\x17\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x03?\x18'\n\x0c\n\x05\x04\x07\x02\x01\
    \x03\x12\x03?*+\n\n\n\x02\x04\x08\x12\x04B\0F\x01\n\n\n\x03\x04\x08\x01\
    \x12\x03B\x08\x20\n\x0b\n\x04\x04\x08\x02\0\x12\x03C\x08'\n\x0c\n\x05\
    \x04\x08\x02\0\x04\x12\x03C\x08\x10\n\x0c\n\x05\x04\x08\x02\0\x05\x12\
    \x03C\x11\x17\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03C\x18\"\n\x0c\n\x05\
    \x04\x08\x02\0\x03\x12\x03C%&\n\x0b\n\x04\x04\x08\x02\x01\x12\x03D\x08'\
    \n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x03D\x08\x10\n\x0c\n\x05\x04\x08\
    \x02\x01\x05\x12\x03D\x11\x17\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03D\
    \x18\"\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03D%&\n\x0b\n\x04\x04\x08\
    \x02\x02\x12\x03E\x08%\n\x0c\n\x05\x04\x08\x02\x02\x04\x12\x03E\x08\x10\
    \n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x03E\x11\x17\n\x0c\n\x05\x04\x08\
    \x02\x02\x01\x12\x03E\x18\x20\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03E#$\
    \n\x0b\n\x02\x04\t\x12\x05H\0\x82\x01\x01\n\n\n\x03\x04\t\x01\x12\x03H\
    \x08\x1b\n\x0c\n\x04\x04\t\x03\0\x12\x04I\x08M\t\n\x0c\n\x05\x04\t\x03\0\
    \x01\x12\x03I\x10\x18\n\r\n\x06\x04\t\x03\0\x02\0\x12\x03J\x10,\n\x0e\n\
    \x07\x04\t\x03\0\x02\0\x04\x12\x03J\x10\x18\n\x0e\n\x07\x04\t\x03\0\x02\
    \0\x05\x12\x03J\x19\x1e\n\x0e\n\x07\x04\t\x03\0\x02\0\x01\x12\x03J\x1f'\
    \n\x0e\n\x07\x04\t\x03\0\x02\0\x03\x12\x03J*+\n\r\n\x06\x04\t\x03\0\x02\
    \x01\x12\x03K\x10,\n\x0e\n\x07\x04\t\x03\0\x02\x01\x04\x12\x03K\x10\x18\
    \n\x0e\n\x07\x04\t\x03\0\x02\x01\x05\x12\x03K\x19\x1e\n\x0e\n\x07\x04\t\
    \x03\0\x02\x01\x01\x12\x03K\x1f'\n\x0e\n\x07\x04\t\x03\0\x02\x01\x03\x12\
    \x03K*+\n\r\n\x06\x04\t\x03\0\x02\x02\x12\x03L\x10*\n\x0e\n\x07\x04\t\
    \x03\0\x02\x02\x04\x12\x03L\x10\x18\n\x0e\n\x07\x04\t\x03\0\x02\x02\x05\
    \x12\x03L\x19\x1e\n\x0e\n\x07\x04\t\x03\0\x02\x02\x01\x12\x03L\x1f%\n\
    \x0e\n\x07\x04\t\x03\0\x02\x02\x03\x12\x03L()\n\x0c\n\x04\x04\t\x03\x01\
    \x12\x04O\x08U\t\n\x0c\n\x05\x04\t\x03\x01\x01\x12\x03O\x10\x1e\n\r\n\
    \x06\x04\t\x03\x01\x02\0\x12\x03P\x100\n\x0e\n\x07\x04\t\x03\x01\x02\0\
    \x04\x12\x03P\x10\x18\n\x0e\n\x07\x04\t\x03\x01\x02\0\x05\x12\x03P\x19\
    \x1f\n\x0e\n\x07\x04\t\x03\x01\x02\0\x01\x12\x03P\x20+\n\x0e\n\x07\x04\t\
    \x03\x01\x02\0\x03\x12\x03P./\n\r\n\x06\x04\t\x03\x01\x02\x01\x12\x03Q\
    \x101\n\x0e\n\x07\x04\t\x03\x01\x02\x01\x04\x12\x03Q\x10\x18\n\x0e\n\x07\
    \x04\t\x03\x01\x02\x01\x05\x12\x03Q\x19\x1f\n\x0e\n\x07\x04\t\x03\x01\
    \x02\x01\x01\x12\x03Q\x20,\n\x0e\n\x07\x04\t\x03\x01\x02\x01\x03\x12\x03\
    Q/0\n\r\n\x06\x04\t\x03\x01\x02\x02\x12\x03R\x10<\n\x0e\n\x07\x04\t\x03\
    \x01\x02\x02\x04\x12\x03R\x10\x18\n\x0e\n\x07\x04\t\x03\x01\x02\x02\x05\
    \x12\x03R\x19\x1f\n\x0e\n\x07\x04\t\x03\x01\x02\x02\x01\x12\x03R\x207\n\
    \x0e\n\x07\x04\t\x03\x01\x02\x02\x03\x12\x03R:;\n\r\n\x06\x04\t\x03\x01\
    \x02\x03\x12\x03S\x10;\n\x0e\n\x07\x04\t\x03\x01\x02\x03\x04\x12\x03S\
    \x10\x18\n\x0e\n\x07\x04\t\x03\x01\x02\x03\x05\x12\x03S\x19\x1f\n\x0e\n\
    \x07\x04\t\x03\x01\x02\x03\x01\x12\x03S\x206\n\x0e\n\x07\x04\t\x03\x01\
    \x02\x03\x03\x12\x03S9:\n\r\n\x06\x04\t\x03\x01\x02\x04\x12\x03T\x108\n\
    \x0e\n\x07\x04\t\x03\x01\x02\x04\x04\x12\x03T\x10\x18\n\x0e\n\x07\x04\t\
    \x03\x01\x02\x04\x05\x12\x03T\x19\x1f\n\x0e\n\x07\x04\t\x03\x01\x02\x04\
    \x01\x12\x03T\x203\n\x0e\n\x07\x04\t\x03\x01\x02\x04\x03\x12\x03T67\n\
    \x0c\n\x04\x04\t\x03\x02\x12\x04W\x08Z\t\n\x0c\n\x05\x04\t\x03\x02\x01\
    \x12\x03W\x10\x1f\n\r\n\x06\x04\t\x03\x02\x02\0\x12\x03X\x10-\n\x0e\n\
    \x07\x04\t\x03\x02\x02\0\x04\x12\x03X\x10\x18\n\x0e\n\x07\x04\t\x03\x02\
    \x02\0\x05\x12\x03X\x19\x1e\n\x0e\n\x07\x04\t\x03\x02\x02\0\x01\x12\x03X\
    \x1f(\n\x0e\n\x07\x04\t\x03\x02\x02\0\x03\x12\x03X+,\n\r\n\x06\x04\t\x03\
    \x02\x02\x01\x12\x03Y\x10(\n\x0e\n\x07\x04\t\x03\x02\x02\x01\x04\x12\x03\
    Y\x10\x18\n\x0e\n\x07\x04\t\x03\x02\x02\x01\x05\x12\x03Y\x19\x1e\n\x0e\n\
    \x07\x04\t\x03\x02\x02\x01\x01\x12\x03Y\x1f#\n\x0e\n\x07\x04\t\x03\x02\
    \x02\x01\x03\x12\x03Y&'\n\x0b\n\x04\x04\t\x02\0\x12\x03\\\x08'\n\x0c\n\
    \x05\x04\t\x02\0\x04\x12\x03\\\x08\x10\n\x0c\n\x05\x04\t\x02\0\x05\x12\
    \x03\\\x11\x17\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03\\\x18\"\n\x0c\n\x05\
    \x04\t\x02\0\x03\x12\x03\\%&\n\x0b\n\x04\x04\t\x02\x01\x12\x03]\x08'\n\
    \x0c\n\x05\x04\t\x02\x01\x04\x12\x03]\x08\x10\n\x0c\n\x05\x04\t\x02\x01\
    \x05\x12\x03]\x11\x17\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03]\x18\"\n\x0c\
    \n\x05\x04\t\x02\x01\x03\x12\x03]%&\n\x0b\n\x04\x04\t\x02\x02\x12\x03^\
    \x08)\n\x0c\n\x05\x04\t\x02\x02\x04\x12\x03^\x08\x10\n\x0c\n\x05\x04\t\
    \x02\x02\x05\x12\x03^\x11\x17\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x03^\x18\
    $\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03^'(\n\x0b\n\x04\x04\t\x02\x03\x12\
    \x03_\x08!\n\x0c\n\x05\x04\t\x02\x03\x04\x12\x03_\x08\x10\n\x0c\n\x05\
    \x04\t\x02\x03\x05\x12\x03_\x11\x17\n\x0c\n\x05\x04\t\x02\x03\x01\x12\
    \x03_\x18\x1c\n\x0c\n\x05\x04\t\x02\x03\x03\x12\x03_\x1f\x20\n\x0b\n\x04\
    \x04\t\x02\x04\x12\x03`\x08&\n\x0c\n\x05\x04\t\x02\x04\x04\x12\x03`\x08\
    \x10\n\x0c\n\x05\x04\t\x02\x04\x05\x12\x03`\x11\x17\n\x0c\n\x05\x04\t\
    \x02\x04\x01\x12\x03`\x18!\n\x0c\n\x05\x04\t\x02\x04\x03\x12\x03`$%\n\
    \x0b\n\x04\x04\t\x02\x05\x12\x03a\x086\n\x0c\n\x05\x04\t\x02\x05\x04\x12\
    \x03a\x08\x10\n\x0c\n\x05\x04\t\x02\x05\x05\x12\x03a\x11\x17\n\x0c\n\x05\
    \x04\t\x02\x05\x01\x12\x03a\x181\n\x0c\n\x05\x04\t\x02\x05\x03\x12\x03a4\
    5\n\x0b\n\x04\x04\t\x02\x06\x12\x03b\x080\n\x0c\n\x05\x04\t\x02\x06\x04\
    \x12\x03b\x08\x10\n\x0c\n\x05\x04\t\x02\x06\x05\x12\x03b\x11\x17\n\x0c\n\
    \x05\x04\t\x02\x06\x01\x12\x03b\x18+\n\x0c\n\x05\x04\t\x02\x06\x03\x12\
    \x03b./\n\x0b\n\x04\x04\t\x02\x07\x12\x03c\x08;\n\x0c\n\x05\x04\t\x02\
    \x07\x04\x12\x03c\x08\x10\n\x0c\n\x05\x04\t\x02\x07\x05\x12\x03c\x11\x17\
    \n\x0c\n\x05\x04\t\x02\x07\x01\x12\x03c\x186\n\x0c\n\x05\x04\t\x02\x07\
    \x03\x12\x03c9:\n\x0b\n\x04\x04\t\x02\x08\x12\x03d\x08<\n\x0c\n\x05\x04\
    \t\x02\x08\x04\x12\x03d\x08\x10\n\x0c\n\x05\x04\t\x02\x08\x05\x12\x03d\
    \x11\x17\n\x0c\n\x05\x04\t\x02\x08\x01\x12\x03d\x187\n\x0c\n\x05\x04\t\
    \x02\x08\x03\x12\x03d:;\n\x0b\n\x04\x04\t\x02\t\x12\x03e\x08&\n\x0c\n\
    \x05\x04\t\x02\t\x04\x12\x03e\x08\x10\n\x0c\n\x05\x04\t\x02\t\x05\x12\
    \x03e\x11\x17\n\x0c\n\x05\x04\t\x02\t\x01\x12\x03e\x18\x20\n\x0c\n\x05\
    \x04\t\x02\t\x03\x12\x03e#%\n\x0b\n\x04\x04\t\x02\n\x12\x03f\x083\n\x0c\
    \n\x05\x04\t\x02\n\x04\x12\x03f\x08\x10\n\x0c\n\x05\x04\t\x02\n\x05\x12\
    \x03f\x11\x15\n\x0c\n\x05\x04\t\x02\n\x01\x12\x03f\x16-\n\x0c\n\x05\x04\
    \t\x02\n\x03\x12\x03f02\n\x0b\n\x04\x04\t\x02\x0b\x12\x03g\x08*\n\x0c\n\
    \x05\x04\t\x02\x0b\x04\x12\x03g\x08\x10\n\x0c\n\x05\x04\t\x02\x0b\x05\
    \x12\x03g\x11\x17\n\x0c\n\x05\x04\t\x02\x0b\x01\x12\x03g\x18$\n\x0c\n\
    \x05\x04\t\x02\x0b\x03\x12\x03g')\n\x0b\n\x04\x04\t\x02\x0c\x12\x03h\x08\
    %\n\x0c\n\x05\x04\t\x02\x0c\x04\x12\x03h\x08\x10\n\x0c\n\x05\x04\t\x02\
    \x0c\x05\x12\x03h\x11\x15\n\x0c\n\x05\x04\t\x02\x0c\x01\x12\x03h\x16\x1f\
    \n\x0c\n\x05\x04\t\x02\x0c\x03\x12\x03h\"$\n\x0b\n\x04\x04\t\x02\r\x12\
    \x03i\x08&\n\x0c\n\x05\x04\t\x02\r\x04\x12\x03i\x08\x10\n\x0c\n\x05\x04\
    \t\x02\r\x05\x12\x03i\x11\x16\n\x0c\n\x05\x04\t\x02\r\x01\x12\x03i\x17\
    \x20\n\x0c\n\x05\x04\t\x02\r\x03\x12\x03i#%\n\x0b\n\x04\x04\t\x02\x0e\
    \x12\x03j\x086\n\x0c\n\x05\x04\t\x02\x0e\x04\x12\x03j\x08\x10\n\x0c\n\
    \x05\x04\t\x02\x0e\x05\x12\x03j\x11\x17\n\x0c\n\x05\x04\t\x02\x0e\x01\
    \x12\x03j\x180\n\x0c\n\x05\x04\t\x02\x0e\x03\x12\x03j35\n\x0b\n\x04\x04\
    \t\x02\x0f\x12\x03k\x08-\n\x0c\n\x05\x04\t\x02\x0f\x04\x12\x03k\x08\x10\
    \n\x0c\n\x05\x04\t\x02\x0f\x05\x12\x03k\x11\x17\n\x0c\n\x05\x04\t\x02\
    \x0f\x01\x12\x03k\x18'\n\x0c\n\x05\x04\t\x02\x0f\x03\x12\x03k*,\n\x0b\n\
    \x04\x04\t\x02\x10\x12\x03l\x08=\n\x0c\n\x05\x04\t\x02\x10\x04\x12\x03l\
    \x08\x10\n\x0c\n\x05\x04\t\x02\x10\x06\x12\x03l\x11-\n\x0c\n\x05\x04\t\
    \x02\x10\x01\x12\x03l.7\n\x0c\n\x05\x04\t\x02\x10\x03\x12\x03l:<\n\x0b\n\
    \x04\x04\t\x02\x11\x12\x03m\x08,\n\x0c\n\x05\x04\t\x02\x11\x04\x12\x03m\
    \x08\x10\n\x0c\n\x05\x04\t\x02\x11\x05\x12\x03m\x11\x17\n\x0c\n\x05\x04\
    \t\x02\x11\x01\x12\x03m\x18&\n\x0c\n\x05\x04\t\x02\x11\x03\x12\x03m)+\n\
    \x0b\n\x04\x04\t\x02\x12\x12\x03n\x08,\n\x0c\n\x05\x04\t\x02\x12\x04\x12\
    \x03n\x08\x10\n\x0c\n\x05\x04\t\x02\x12\x05\x12\x03n\x11\x17\n\x0c\n\x05\
    \x04\t\x02\x12\x01\x12\x03n\x18&\n\x0c\n\x05\x04\t\x02\x12\x03\x12\x03n)\
    +\n\x0b\n\x04\x04\t\x02\x13\x12\x03o\x088\n\x0c\n\x05\x04\t\x02\x13\x04\
    \x12\x03o\x08\x10\n\x0c\n\x05\x04\t\x02\x13\x05\x12\x03o\x11\x17\n\x0c\n\
    \x05\x04\t\x02\x13\x01\x12\x03o\x182\n\x0c\n\x05\x04\t\x02\x13\x03\x12\
    \x03o57\n\x0b\n\x04\x04\t\x02\x14\x12\x03p\x081\n\x0c\n\x05\x04\t\x02\
    \x14\x04\x12\x03p\x08\x10\n\x0c\n\x05\x04\t\x02\x14\x05\x12\x03p\x11\x17\
    \n\x0c\n\x05\x04\t\x02\x14\x01\x12\x03p\x18+\n\x0c\n\x05\x04\t\x02\x14\
    \x03\x12\x03p.0\n\x0b\n\x04\x04\t\x02\x15\x12\x03q\x085\n\x0c\n\x05\x04\
    \t\x02\x15\x04\x12\x03q\x08\x10\n\x0c\n\x05\x04\t\x02\x15\x05\x12\x03q\
    \x11\x17\n\x0c\n\x05\x04\t\x02\x15\x01\x12\x03q\x18/\n\x0c\n\x05\x04\t\
    \x02\x15\x03\x12\x03q24\n\x0b\n\x04\x04\t\x02\x16\x12\x03r\x08$\n\x0c\n\
    \x05\x04\t\x02\x16\x04\x12\x03r\x08\x10\n\x0c\n\x05\x04\t\x02\x16\x05\
    \x12\x03r\x11\x17\n\x0c\n\x05\x04\t\x02\x16\x01\x12\x03r\x18\x1e\n\x0c\n\
    \x05\x04\t\x02\x16\x03\x12\x03r!#\n\x0b\n\x04\x04\t\x02\x17\x12\x03s\x08\
    5\n\x0c\n\x05\x04\t\x02\x17\x04\x12\x03s\x08\x10\n\x0c\n\x05\x04\t\x02\
    \x17\x05\x12\x03s\x11\x15\n\x0c\n\x05\x04\t\x02\x17\x01\x12\x03s\x16/\n\
    \x0c\n\x05\x04\t\x02\x17\x03\x12\x03s24\n\x0b\n\x04\x04\t\x02\x18\x12\
    \x03t\x08/\n\x0c\n\x05\x04\t\x02\x18\x04\x12\x03t\x08\x10\n\x0c\n\x05\
    \x04\t\x02\x18\x05\x12\x03t\x11\x17\n\x0c\n\x05\x04\t\x02\x18\x01\x12\
    \x03t\x18)\n\x0c\n\x05\x04\t\x02\x18\x03\x12\x03t,.\n\x0b\n\x04\x04\t\
    \x02\x19\x12\x03u\x08)\n\x0c\n\x05\x04\t\x02\x19\x04\x12\x03u\x08\x10\n\
    \x0c\n\x05\x04\t\x02\x19\x05\x12\x03u\x11\x17\n\x0c\n\x05\x04\t\x02\x19\
    \x01\x12\x03u\x18#\n\x0c\n\x05\x04\t\x02\x19\x03\x12\x03u&(\n\x0b\n\x04\
    \x04\t\x02\x1a\x12\x03v\x082\n\x0c\n\x05\x04\t\x02\x1a\x04\x12\x03v\x08\
    \x10\n\x0c\n\x05\x04\t\x02\x1a\x05\x12\x03v\x11\x17\n\x0c\n\x05\x04\t\
    \x02\x1a\x01\x12\x03v\x18,\n\x0c\n\x05\x04\t\x02\x1a\x03\x12\x03v/1\n\
    \x0b\n\x04\x04\t\x02\x1b\x12\x03w\x084\n\x0c\n\x05\x04\t\x02\x1b\x04\x12\
    \x03w\x08\x10\n\x0c\n\x05\x04\t\x02\x1b\x05\x12\x03w\x11\x17\n\x0c\n\x05\
    \x04\t\x02\x1b\x01\x12\x03w\x18.\n\x0c\n\x05\x04\t\x02\x1b\x03\x12\x03w1\
    3\n\x0b\n\x04\x04\t\x02\x1c\x12\x03x\x081\n\x0c\n\x05\x04\t\x02\x1c\x04\
    \x12\x03x\x08\x10\n\x0c\n\x05\x04\t\x02\x1c\x05\x12\x03x\x11\x17\n\x0c\n\
    \x05\x04\t\x02\x1c\x01\x12\x03x\x18+\n\x0c\n\x05\x04\t\x02\x1c\x03\x12\
    \x03x.0\n\x0b\n\x04\x04\t\x02\x1d\x12\x03y\x08G\n\x0c\n\x05\x04\t\x02\
    \x1d\x04\x12\x03y\x08\x10\n\x0c\n\x05\x04\t\x02\x1d\x06\x12\x03y\x113\n\
    \x0c\n\x05\x04\t\x02\x1d\x01\x12\x03y4A\n\x0c\n\x05\x04\t\x02\x1d\x03\
    \x12\x03yDF\n\x0b\n\x04\x04\t\x02\x1e\x12\x03z\x081\n\x0c\n\x05\x04\t\
    \x02\x1e\x04\x12\x03z\x08\x10\n\x0c\n\x05\x04\t\x02\x1e\x05\x12\x03z\x11\
    \x16\n\x0c\n\x05\x04\t\x02\x1e\x01\x12\x03z\x17+\n\x0c\n\x05\x04\t\x02\
    \x1e\x03\x12\x03z.0\n\x0b\n\x04\x04\t\x02\x1f\x12\x03{\x08(\n\x0c\n\x05\
    \x04\t\x02\x1f\x04\x12\x03{\x08\x10\n\x0c\n\x05\x04\t\x02\x1f\x05\x12\
    \x03{\x11\x17\n\x0c\n\x05\x04\t\x02\x1f\x01\x12\x03{\x18\"\n\x0c\n\x05\
    \x04\t\x02\x1f\x03\x12\x03{%'\n\x0b\n\x04\x04\t\x02\x20\x12\x03|\x081\n\
    \x0c\n\x05\x04\t\x02\x20\x04\x12\x03|\x08\x10\n\x0c\n\x05\x04\t\x02\x20\
    \x05\x12\x03|\x11\x15\n\x0c\n\x05\x04\t\x02\x20\x01\x12\x03|\x16+\n\x0c\
    \n\x05\x04\t\x02\x20\x03\x12\x03|.0\n\x0b\n\x04\x04\t\x02!\x12\x03}\x08(\
    \n\x0c\n\x05\x04\t\x02!\x04\x12\x03}\x08\x10\n\x0c\n\x05\x04\t\x02!\x05\
    \x12\x03}\x11\x15\n\x0c\n\x05\x04\t\x02!\x01\x12\x03}\x16\"\n\x0c\n\x05\
    \x04\t\x02!\x03\x12\x03}%'\n\x0b\n\x04\x04\t\x02\"\x12\x03~\x08.\n\x0c\n\
    \x05\x04\t\x02\"\x04\x12\x03~\x08\x10\n\x0c\n\x05\x04\t\x02\"\x05\x12\
    \x03~\x11\x17\n\x0c\n\x05\x04\t\x02\"\x01\x12\x03~\x18(\n\x0c\n\x05\x04\
    \t\x02\"\x03\x12\x03~+-\n\x0b\n\x04\x04\t\x02#\x12\x03\x7f\x083\n\x0c\n\
    \x05\x04\t\x02#\x04\x12\x03\x7f\x08\x10\n\x0c\n\x05\x04\t\x02#\x05\x12\
    \x03\x7f\x11\x17\n\x0c\n\x05\x04\t\x02#\x01\x12\x03\x7f\x18-\n\x0c\n\x05\
    \x04\t\x02#\x03\x12\x03\x7f02\n\x0c\n\x04\x04\t\x02$\x12\x04\x80\x01\x08\
    6\n\r\n\x05\x04\t\x02$\x04\x12\x04\x80\x01\x08\x10\n\r\n\x05\x04\t\x02$\
    \x05\x12\x04\x80\x01\x11\x16\n\r\n\x05\x04\t\x02$\x01\x12\x04\x80\x01\
    \x170\n\r\n\x05\x04\t\x02$\x03\x12\x04\x80\x0135\n\x0c\n\x04\x04\t\x02%\
    \x12\x04\x81\x01\x08L\n\r\n\x05\x04\t\x02%\x04\x12\x04\x81\x01\x08\x10\n\
    \r\n\x05\x04\t\x02%\x06\x12\x04\x81\x01\x114\n\r\n\x05\x04\t\x02%\x01\
    \x12\x04\x81\x015F\n\r\n\x05\x04\t\x02%\x03\x12\x04\x81\x01IK\n\x0c\n\
    \x02\x04\n\x12\x06\x84\x01\0\x89\x01\x01\n\x0b\n\x03\x04\n\x01\x12\x04\
    \x84\x01\x08\x1a\n\x0c\n\x04\x04\n\x02\0\x12\x04\x85\x01\x08&\n\r\n\x05\
    \x04\n\x02\0\x04\x12\x04\x85\x01\x08\x10\n\r\n\x05\x04\n\x02\0\x05\x12\
    \x04\x85\x01\x11\x18\n\r\n\x05\x04\n\x02\0\x01\x12\x04\x85\x01\x19!\n\r\
    \n\x05\x04\n\x02\0\x03\x12\x04\x85\x01$%\n\x0c\n\x04\x04\n\x02\x01\x12\
    \x04\x86\x01\x08)\n\r\n\x05\x04\n\x02\x01\x04\x12\x04\x86\x01\x08\x10\n\
    \r\n\x05\x04\n\x02\x01\x05\x12\x04\x86\x01\x11\x17\n\r\n\x05\x04\n\x02\
    \x01\x01\x12\x04\x86\x01\x18$\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\x86\
    \x01'(\n\x0c\n\x04\x04\n\x02\x02\x12\x04\x87\x01\x08,\n\r\n\x05\x04\n\
    \x02\x02\x04\x12\x04\x87\x01\x08\x10\n\r\n\x05\x04\n\x02\x02\x05\x12\x04\
    \x87\x01\x11\x17\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\x87\x01\x18'\n\r\n\
    \x05\x04\n\x02\x02\x03\x12\x04\x87\x01*+\n\x0c\n\x04\x04\n\x02\x03\x12\
    \x04\x88\x01\x08#\n\r\n\x05\x04\n\x02\x03\x04\x12\x04\x88\x01\x08\x10\n\
    \r\n\x05\x04\n\x02\x03\x05\x12\x04\x88\x01\x11\x17\n\r\n\x05\x04\n\x02\
    \x03\x01\x12\x04\x88\x01\x18\x1e\n\r\n\x05\x04\n\x02\x03\x03\x12\x04\x88\
    \x01!\"\n\x0c\n\x02\x04\x0b\x12\x06\x8b\x01\0\xad\x01\x01\n\x0b\n\x03\
    \x04\x0b\x01\x12\x04\x8b\x01\x08'\n\x0e\n\x04\x04\x0b\x04\0\x12\x06\x8c\
    \x01\x08\xa0\x01\t\n\r\n\x05\x04\x0b\x04\0\x01\x12\x04\x8c\x01\r\x13\n\
    \x0e\n\x06\x04\x0b\x04\0\x02\0\x12\x04\x8d\x01\x10!\n\x0f\n\x07\x04\x0b\
    \x04\0\x02\0\x01\x12\x04\x8d\x01\x10\x1c\n\x0f\n\x07\x04\x0b\x04\0\x02\0\
    \x02\x12\x04\x8d\x01\x1f\x20\n\x0e\n\x06\x04\x0b\x04\0\x02\x01\x12\x04\
    \x8e\x01\x10)\n\x0f\n\x07\x04\x0b\x04\0\x02\x01\x01\x12\x04\x8e\x01\x10$\
    \n\x0f\n\x07\x04\x0b\x04\0\x02\x01\x02\x12\x04\x8e\x01'(\n\x0e\n\x06\x04\
    \x0b\x04\0\x02\x02\x12\x04\x8f\x01\x10&\n\x0f\n\x07\x04\x0b\x04\0\x02\
    \x02\x01\x12\x04\x8f\x01\x10!\n\x0f\n\x07\x04\x0b\x04\0\x02\x02\x02\x12\
    \x04\x8f\x01$%\n\x0e\n\x06\x04\x0b\x04\0\x02\x03\x12\x04\x90\x01\x10\x1f\
    \n\x0f\n\x07\x04\x0b\x04\0\x02\x03\x01\x12\x04\x90\x01\x10\x1a\n\x0f\n\
    \x07\x04\x0b\x04\0\x02\x03\x02\x12\x04\x90\x01\x1d\x1e\n\x0e\n\x06\x04\
    \x0b\x04\0\x02\x04\x12\x04\x91\x01\x10.\n\x0f\n\x07\x04\x0b\x04\0\x02\
    \x04\x01\x12\x04\x91\x01\x10)\n\x0f\n\x07\x04\x0b\x04\0\x02\x04\x02\x12\
    \x04\x91\x01,-\n\x0e\n\x06\x04\x0b\x04\0\x02\x05\x12\x04\x92\x01\x10(\n\
    \x0f\n\x07\x04\x0b\x04\0\x02\x05\x01\x12\x04\x92\x01\x10#\n\x0f\n\x07\
    \x04\x0b\x04\0\x02\x05\x02\x12\x04\x92\x01&'\n\x0e\n\x06\x04\x0b\x04\0\
    \x02\x06\x12\x04\x93\x01\x10!\n\x0f\n\x07\x04\x0b\x04\0\x02\x06\x01\x12\
    \x04\x93\x01\x10\x1c\n\x0f\n\x07\x04\x0b\x04\0\x02\x06\x02\x12\x04\x93\
    \x01\x1f\x20\n\x0e\n\x06\x04\x0b\x04\0\x02\x07\x12\x04\x94\x01\x10,\n\
    \x0f\n\x07\x04\x0b\x04\0\x02\x07\x01\x12\x04\x94\x01\x10'\n\x0f\n\x07\
    \x04\x0b\x04\0\x02\x07\x02\x12\x04\x94\x01*+\n\x0e\n\x06\x04\x0b\x04\0\
    \x02\x08\x12\x04\x95\x01\x10'\n\x0f\n\x07\x04\x0b\x04\0\x02\x08\x01\x12\
    \x04\x95\x01\x10\"\n\x0f\n\x07\x04\x0b\x04\0\x02\x08\x02\x12\x04\x95\x01\
    %&\n\x0e\n\x06\x04\x0b\x04\0\x02\t\x12\x04\x96\x01\x10*\n\x0f\n\x07\x04\
    \x0b\x04\0\x02\t\x01\x12\x04\x96\x01\x10%\n\x0f\n\x07\x04\x0b\x04\0\x02\
    \t\x02\x12\x04\x96\x01()\n\x0e\n\x06\x04\x0b\x04\0\x02\n\x12\x04\x97\x01\
    \x100\n\x0f\n\x07\x04\x0b\x04\0\x02\n\x01\x12\x04\x97\x01\x10*\n\x0f\n\
    \x07\x04\x0b\x04\0\x02\n\x02\x12\x04\x97\x01-/\n\x0e\n\x06\x04\x0b\x04\0\
    \x02\x0b\x12\x04\x98\x01\x100\n\x0f\n\x07\x04\x0b\x04\0\x02\x0b\x01\x12\
    \x04\x98\x01\x10*\n\x0f\n\x07\x04\x0b\x04\0\x02\x0b\x02\x12\x04\x98\x01-\
    /\n\x0e\n\x06\x04\x0b\x04\0\x02\x0c\x12\x04\x99\x01\x105\n\x0f\n\x07\x04\
    \x0b\x04\0\x02\x0c\x01\x12\x04\x99\x01\x10/\n\x0f\n\x07\x04\x0b\x04\0\
    \x02\x0c\x02\x12\x04\x99\x0124\n\x0e\n\x06\x04\x0b\x04\0\x02\r\x12\x04\
    \x9a\x01\x10)\n\x0f\n\x07\x04\x0b\x04\0\x02\r\x01\x12\x04\x9a\x01\x10#\n\
    \x0f\n\x07\x04\x0b\x04\0\x02\r\x02\x12\x04\x9a\x01&(\n\x0e\n\x06\x04\x0b\
    \x04\0\x02\x0e\x12\x04\x9b\x01\x10&\n\x0f\n\x07\x04\x0b\x04\0\x02\x0e\
    \x01\x12\x04\x9b\x01\x10\x20\n\x0f\n\x07\x04\x0b\x04\0\x02\x0e\x02\x12\
    \x04\x9b\x01#%\n\x0e\n\x06\x04\x0b\x04\0\x02\x0f\x12\x04\x9c\x01\x106\n\
    \x0f\n\x07\x04\x0b\x04\0\x02\x0f\x01\x12\x04\x9c\x01\x100\n\x0f\n\x07\
    \x04\x0b\x04\0\x02\x0f\x02\x12\x04\x9c\x0135\n\x0e\n\x06\x04\x0b\x04\0\
    \x02\x10\x12\x04\x9d\x01\x102\n\x0f\n\x07\x04\x0b\x04\0\x02\x10\x01\x12\
    \x04\x9d\x01\x10,\n\x0f\n\x07\x04\x0b\x04\0\x02\x10\x02\x12\x04\x9d\x01/\
    1\n\x0e\n\x06\x04\x0b\x04\0\x02\x11\x12\x04\x9e\x01\x10\"\n\x0f\n\x07\
    \x04\x0b\x04\0\x02\x11\x01\x12\x04\x9e\x01\x10\x1c\n\x0f\n\x07\x04\x0b\
    \x04\0\x02\x11\x02\x12\x04\x9e\x01\x1f!\n\x0e\n\x06\x04\x0b\x04\0\x02\
    \x12\x12\x04\x9f\x01\x10,\n\x0f\n\x07\x04\x0b\x04\0\x02\x12\x01\x12\x04\
    \x9f\x01\x10&\n\x0f\n\x07\x04\x0b\x04\0\x02\x12\x02\x12\x04\x9f\x01)+\n\
    \x0c\n\x04\x04\x0b\x02\0\x12\x04\xa2\x01\x08%\n\r\n\x05\x04\x0b\x02\0\
    \x04\x12\x04\xa2\x01\x08\x10\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\xa2\x01\
    \x11\x17\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xa2\x01\x18\x20\n\r\n\x05\
    \x04\x0b\x02\0\x03\x12\x04\xa2\x01#$\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\
    \xa3\x01\x08)\n\r\n\x05\x04\x0b\x02\x01\x04\x12\x04\xa3\x01\x08\x10\n\r\
    \n\x05\x04\x0b\x02\x01\x05\x12\x04\xa3\x01\x11\x17\n\r\n\x05\x04\x0b\x02\
    \x01\x01\x12\x04\xa3\x01\x18$\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\xa3\
    \x01'(\n\x0c\n\x04\x04\x0b\x02\x02\x12\x04\xa4\x01\x08(\n\r\n\x05\x04\
    \x0b\x02\x02\x04\x12\x04\xa4\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x02\x05\
    \x12\x04\xa4\x01\x11\x18\n\r\n\x05\x04\x0b\x02\x02\x01\x12\x04\xa4\x01\
    \x19#\n\r\n\x05\x04\x0b\x02\x02\x03\x12\x04\xa4\x01&'\n\x0c\n\x04\x04\
    \x0b\x02\x03\x12\x04\xa5\x01\x08(\n\r\n\x05\x04\x0b\x02\x03\x04\x12\x04\
    \xa5\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x03\x05\x12\x04\xa5\x01\x11\x17\n\
    \r\n\x05\x04\x0b\x02\x03\x01\x12\x04\xa5\x01\x18#\n\r\n\x05\x04\x0b\x02\
    \x03\x03\x12\x04\xa5\x01&'\n\x0c\n\x04\x04\x0b\x02\x04\x12\x04\xa6\x01\
    \x080\n\r\n\x05\x04\x0b\x02\x04\x04\x12\x04\xa6\x01\x08\x10\n\r\n\x05\
    \x04\x0b\x02\x04\x06\x12\x04\xa6\x01\x11#\n\r\n\x05\x04\x0b\x02\x04\x01\
    \x12\x04\xa6\x01$+\n\r\n\x05\x04\x0b\x02\x04\x03\x12\x04\xa6\x01./\n\x0c\
    \n\x04\x04\x0b\x02\x05\x12\x04\xa7\x01\x088\n\r\n\x05\x04\x0b\x02\x05\
    \x04\x12\x04\xa7\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x05\x06\x12\x04\xa7\
    \x01\x11&\n\r\n\x05\x04\x0b\x02\x05\x01\x12\x04\xa7\x01'3\n\r\n\x05\x04\
    \x0b\x02\x05\x03\x12\x04\xa7\x0167\n\x0c\n\x04\x04\x0b\x02\x06\x12\x04\
    \xa8\x01\x08C\n\r\n\x05\x04\x0b\x02\x06\x04\x12\x04\xa8\x01\x08\x10\n\r\
    \n\x05\x04\x0b\x02\x06\x06\x12\x04\xa8\x01\x117\n\r\n\x05\x04\x0b\x02\
    \x06\x01\x12\x04\xa8\x018>\n\r\n\x05\x04\x0b\x02\x06\x03\x12\x04\xa8\x01\
    AB\n\x0c\n\x04\x04\x0b\x02\x07\x12\x04\xa9\x01\x08,\n\r\n\x05\x04\x0b\
    \x02\x07\x04\x12\x04\xa9\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x07\x05\x12\
    \x04\xa9\x01\x11\x15\n\r\n\x05\x04\x0b\x02\x07\x01\x12\x04\xa9\x01\x16'\
    \n\r\n\x05\x04\x0b\x02\x07\x03\x12\x04\xa9\x01*+\n\x0c\n\x04\x04\x0b\x02\
    \x08\x12\x04\xaa\x01\x08,\n\r\n\x05\x04\x0b\x02\x08\x04\x12\x04\xaa\x01\
    \x08\x10\n\r\n\x05\x04\x0b\x02\x08\x05\x12\x04\xaa\x01\x11\x17\n\r\n\x05\
    \x04\x0b\x02\x08\x01\x12\x04\xaa\x01\x18'\n\r\n\x05\x04\x0b\x02\x08\x03\
    \x12\x04\xaa\x01*+\n\x0c\n\x04\x04\x0b\x02\t\x12\x04\xab\x01\x08-\n\r\n\
    \x05\x04\x0b\x02\t\x04\x12\x04\xab\x01\x08\x10\n\r\n\x05\x04\x0b\x02\t\
    \x05\x12\x04\xab\x01\x11\x17\n\r\n\x05\x04\x0b\x02\t\x01\x12\x04\xab\x01\
    \x18'\n\r\n\x05\x04\x0b\x02\t\x03\x12\x04\xab\x01*,\n\x0c\n\x04\x04\x0b\
    \x02\n\x12\x04\xac\x01\x08@\n\r\n\x05\x04\x0b\x02\n\x04\x12\x04\xac\x01\
    \x08\x10\n\r\n\x05\x04\x0b\x02\n\x06\x12\x04\xac\x01\x11'\n\r\n\x05\x04\
    \x0b\x02\n\x01\x12\x04\xac\x01(:\n\r\n\x05\x04\x0b\x02\n\x03\x12\x04\xac\
    \x01=?\n\x0c\n\x02\x04\x0c\x12\x06\xaf\x01\0\xb5\x01\x01\n\x0b\n\x03\x04\
    \x0c\x01\x12\x04\xaf\x01\x08&\n\x0c\n\x04\x04\x0c\x02\0\x12\x04\xb0\x01\
    \x08(\n\r\n\x05\x04\x0c\x02\0\x04\x12\x04\xb0\x01\x08\x10\n\r\n\x05\x04\
    \x0c\x02\0\x05\x12\x04\xb0\x01\x11\x18\n\r\n\x05\x04\x0c\x02\0\x01\x12\
    \x04\xb0\x01\x19#\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xb0\x01&'\n\x0c\n\
    \x04\x04\x0c\x02\x01\x12\x04\xb1\x01\x08)\n\r\n\x05\x04\x0c\x02\x01\x04\
    \x12\x04\xb1\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xb1\x01\
    \x11\x17\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\xb1\x01\x18$\n\r\n\x05\
    \x04\x0c\x02\x01\x03\x12\x04\xb1\x01'(\n\x0c\n\x04\x04\x0c\x02\x02\x12\
    \x04\xb2\x01\x08&\n\r\n\x05\x04\x0c\x02\x02\x04\x12\x04\xb2\x01\x08\x10\
    \n\r\n\x05\x04\x0c\x02\x02\x05\x12\x04\xb2\x01\x11\x18\n\r\n\x05\x04\x0c\
    \x02\x02\x01\x12\x04\xb2\x01\x19!\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\
    \xb2\x01$%\n\x0c\n\x04\x04\x0c\x02\x03\x12\x04\xb3\x01\x08,\n\r\n\x05\
    \x04\x0c\x02\x03\x04\x12\x04\xb3\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x03\
    \x05\x12\x04\xb3\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x03\x01\x12\x04\xb3\
    \x01\x18'\n\r\n\x05\x04\x0c\x02\x03\x03\x12\x04\xb3\x01*+\n\x0c\n\x04\
    \x04\x0c\x02\x04\x12\x04\xb4\x01\x08#\n\r\n\x05\x04\x0c\x02\x04\x04\x12\
    \x04\xb4\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x04\x05\x12\x04\xb4\x01\x11\
    \x17\n\r\n\x05\x04\x0c\x02\x04\x01\x12\x04\xb4\x01\x18\x1e\n\r\n\x05\x04\
    \x0c\x02\x04\x03\x12\x04\xb4\x01!\"\n\x0c\n\x02\x04\r\x12\x06\xb7\x01\0\
    \xbb\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\xb7\x01\x08$\n\x0c\n\x04\x04\
    \r\x02\0\x12\x04\xb8\x01\x08(\n\r\n\x05\x04\r\x02\0\x04\x12\x04\xb8\x01\
    \x08\x10\n\r\n\x05\x04\r\x02\0\x05\x12\x04\xb8\x01\x11\x18\n\r\n\x05\x04\
    \r\x02\0\x01\x12\x04\xb8\x01\x19#\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xb8\
    \x01&'\n\x0c\n\x04\x04\r\x02\x01\x12\x04\xb9\x01\x08&\n\r\n\x05\x04\r\
    \x02\x01\x04\x12\x04\xb9\x01\x08\x10\n\r\n\x05\x04\r\x02\x01\x05\x12\x04\
    \xb9\x01\x11\x18\n\r\n\x05\x04\r\x02\x01\x01\x12\x04\xb9\x01\x19!\n\r\n\
    \x05\x04\r\x02\x01\x03\x12\x04\xb9\x01$%\n\x0c\n\x04\x04\r\x02\x02\x12\
    \x04\xba\x01\x08,\n\r\n\x05\x04\r\x02\x02\x04\x12\x04\xba\x01\x08\x10\n\
    \r\n\x05\x04\r\x02\x02\x05\x12\x04\xba\x01\x11\x17\n\r\n\x05\x04\r\x02\
    \x02\x01\x12\x04\xba\x01\x18'\n\r\n\x05\x04\r\x02\x02\x03\x12\x04\xba\
    \x01*+\n\x0c\n\x02\x04\x0e\x12\x06\xbd\x01\0\xbe\x01\x01\n\x0b\n\x03\x04\
    \x0e\x01\x12\x04\xbd\x01\x08&\n\x0c\n\x02\x04\x0f\x12\x06\xc0\x01\0\xc8\
    \x01\x01\n\x0b\n\x03\x04\x0f\x01\x12\x04\xc0\x01\x08.\n\x0e\n\x04\x04\
    \x0f\x03\0\x12\x06\xc1\x01\x08\xc5\x01\t\n\r\n\x05\x04\x0f\x03\0\x01\x12\
    \x04\xc1\x01\x10\x1b\n\x0e\n\x06\x04\x0f\x03\0\x02\0\x12\x04\xc2\x01\x10\
    1\n\x0f\n\x07\x04\x0f\x03\0\x02\0\x04\x12\x04\xc2\x01\x10\x18\n\x0f\n\
    \x07\x04\x0f\x03\0\x02\0\x05\x12\x04\xc2\x01\x19\x1f\n\x0f\n\x07\x04\x0f\
    \x03\0\x02\0\x01\x12\x04\xc2\x01\x20,\n\x0f\n\x07\x04\x0f\x03\0\x02\0\
    \x03\x12\x04\xc2\x01/0\n\x0e\n\x06\x04\x0f\x03\0\x02\x01\x12\x04\xc3\x01\
    \x100\n\x0f\n\x07\x04\x0f\x03\0\x02\x01\x04\x12\x04\xc3\x01\x10\x18\n\
    \x0f\n\x07\x04\x0f\x03\0\x02\x01\x05\x12\x04\xc3\x01\x19\x1f\n\x0f\n\x07\
    \x04\x0f\x03\0\x02\x01\x01\x12\x04\xc3\x01\x20+\n\x0f\n\x07\x04\x0f\x03\
    \0\x02\x01\x03\x12\x04\xc3\x01./\n\x0e\n\x06\x04\x0f\x03\0\x02\x02\x12\
    \x04\xc4\x01\x10@\n\x0f\n\x07\x04\x0f\x03\0\x02\x02\x04\x12\x04\xc4\x01\
    \x10\x18\n\x0f\n\x07\x04\x0f\x03\0\x02\x02\x06\x12\x04\xc4\x01\x19.\n\
    \x0f\n\x07\x04\x0f\x03\0\x02\x02\x01\x12\x04\xc4\x01/;\n\x0f\n\x07\x04\
    \x0f\x03\0\x02\x02\x03\x12\x04\xc4\x01>?\n\x0c\n\x04\x04\x0f\x02\0\x12\
    \x04\xc7\x01\x08Q\n\r\n\x05\x04\x0f\x02\0\x04\x12\x04\xc7\x01\x08\x10\n\
    \r\n\x05\x04\x0f\x02\0\x06\x12\x04\xc7\x01\x11C\n\r\n\x05\x04\x0f\x02\0\
    \x01\x12\x04\xc7\x01DL\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xc7\x01OP\n\
    \x0c\n\x02\x04\x10\x12\x06\xca\x01\0\xd4\x01\x01\n\x0b\n\x03\x04\x10\x01\
    \x12\x04\xca\x01\x08'\n\x0e\n\x04\x04\x10\x03\0\x12\x06\xcb\x01\x08\xd0\
    \x01\t\n\r\n\x05\x04\x10\x03\0\x01\x12\x04\xcb\x01\x10\x16\n\x0e\n\x06\
    \x04\x10\x03\0\x02\0\x12\x04\xcc\x01\x10.\n\x0f\n\x07\x04\x10\x03\0\x02\
    \0\x04\x12\x04\xcc\x01\x10\x18\n\x0f\n\x07\x04\x10\x03\0\x02\0\x05\x12\
    \x04\xcc\x01\x19\x20\n\x0f\n\x07\x04\x10\x03\0\x02\0\x01\x12\x04\xcc\x01\
    !)\n\x0f\n\x07\x04\x10\x03\0\x02\0\x03\x12\x04\xcc\x01,-\n\x0e\n\x06\x04\
    \x10\x03\0\x02\x01\x12\x04\xcd\x01\x101\n\x0f\n\x07\x04\x10\x03\0\x02\
    \x01\x04\x12\x04\xcd\x01\x10\x18\n\x0f\n\x07\x04\x10\x03\0\x02\x01\x05\
    \x12\x04\xcd\x01\x19\x1f\n\x0f\n\x07\x04\x10\x03\0\x02\x01\x01\x12\x04\
    \xcd\x01\x20,\n\x0f\n\x07\x04\x10\x03\0\x02\x01\x03\x12\x04\xcd\x01/0\n\
    \x0e\n\x06\x04\x10\x03\0\x02\x02\x12\x04\xce\x01\x104\n\x0f\n\x07\x04\
    \x10\x03\0\x02\x02\x04\x12\x04\xce\x01\x10\x18\n\x0f\n\x07\x04\x10\x03\0\
    \x02\x02\x05\x12\x04\xce\x01\x19\x1f\n\x0f\n\x07\x04\x10\x03\0\x02\x02\
    \x01\x12\x04\xce\x01\x20/\n\x0f\n\x07\x04\x10\x03\0\x02\x02\x03\x12\x04\
    \xce\x0123\n\x0e\n\x06\x04\x10\x03\0\x02\x03\x12\x04\xcf\x01\x10+\n\x0f\
    \n\x07\x04\x10\x03\0\x02\x03\x04\x12\x04\xcf\x01\x10\x18\n\x0f\n\x07\x04\
    \x10\x03\0\x02\x03\x05\x12\x04\xcf\x01\x19\x1f\n\x0f\n\x07\x04\x10\x03\0\
    \x02\x03\x01\x12\x04\xcf\x01\x20&\n\x0f\n\x07\x04\x10\x03\0\x02\x03\x03\
    \x12\x04\xcf\x01)*\n\x0c\n\x04\x04\x10\x02\0\x12\x04\xd2\x01\x08(\n\r\n\
    \x05\x04\x10\x02\0\x04\x12\x04\xd2\x01\x08\x10\n\r\n\x05\x04\x10\x02\0\
    \x05\x12\x04\xd2\x01\x11\x18\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\xd2\x01\
    \x19#\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\xd2\x01&'\n\x0c\n\x04\x04\x10\
    \x02\x01\x12\x04\xd3\x01\x08D\n\r\n\x05\x04\x10\x02\x01\x04\x12\x04\xd3\
    \x01\x08\x10\n\r\n\x05\x04\x10\x02\x01\x06\x12\x04\xd3\x01\x117\n\r\n\
    \x05\x04\x10\x02\x01\x01\x12\x04\xd3\x018?\n\r\n\x05\x04\x10\x02\x01\x03\
    \x12\x04\xd3\x01BC\n\x0c\n\x02\x04\x11\x12\x06\xd6\x01\0\xd9\x01\x01\n\
    \x0b\n\x03\x04\x11\x01\x12\x04\xd6\x01\x08\"\n\x0c\n\x04\x04\x11\x02\0\
    \x12\x04\xd7\x01\x08)\n\r\n\x05\x04\x11\x02\0\x04\x12\x04\xd7\x01\x08\
    \x10\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\xd7\x01\x11\x17\n\r\n\x05\x04\
    \x11\x02\0\x01\x12\x04\xd7\x01\x18$\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\
    \xd7\x01'(\n\x0c\n\x04\x04\x11\x02\x01\x12\x04\xd8\x01\x088\n\r\n\x05\
    \x04\x11\x02\x01\x04\x12\x04\xd8\x01\x08\x10\n\r\n\x05\x04\x11\x02\x01\
    \x06\x12\x04\xd8\x01\x11&\n\r\n\x05\x04\x11\x02\x01\x01\x12\x04\xd8\x01'\
    3\n\r\n\x05\x04\x11\x02\x01\x03\x12\x04\xd8\x0167\n\x0c\n\x02\x04\x12\
    \x12\x06\xdb\x01\0\xdf\x01\x01\n\x0b\n\x03\x04\x12\x01\x12\x04\xdb\x01\
    \x08*\n\x0c\n\x04\x04\x12\x02\0\x12\x04\xdc\x01\x08)\n\r\n\x05\x04\x12\
    \x02\0\x04\x12\x04\xdc\x01\x08\x10\n\r\n\x05\x04\x12\x02\0\x05\x12\x04\
    \xdc\x01\x11\x17\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\xdc\x01\x18$\n\r\n\
    \x05\x04\x12\x02\0\x03\x12\x04\xdc\x01'(\n\x0c\n\x04\x04\x12\x02\x01\x12\
    \x04\xdd\x01\x088\n\r\n\x05\x04\x12\x02\x01\x04\x12\x04\xdd\x01\x08\x10\
    \n\r\n\x05\x04\x12\x02\x01\x06\x12\x04\xdd\x01\x11&\n\r\n\x05\x04\x12\
    \x02\x01\x01\x12\x04\xdd\x01'3\n\r\n\x05\x04\x12\x02\x01\x03\x12\x04\xdd\
    \x0167\n\x0c\n\x04\x04\x12\x02\x02\x12\x04\xde\x01\x08)\n\r\n\x05\x04\
    \x12\x02\x02\x04\x12\x04\xde\x01\x08\x10\n\r\n\x05\x04\x12\x02\x02\x05\
    \x12\x04\xde\x01\x11\x17\n\r\n\x05\x04\x12\x02\x02\x01\x12\x04\xde\x01\
    \x18$\n\r\n\x05\x04\x12\x02\x02\x03\x12\x04\xde\x01'(\n\x0c\n\x02\x04\
    \x13\x12\x06\xe1\x01\0\xeb\x01\x01\n\x0b\n\x03\x04\x13\x01\x12\x04\xe1\
    \x01\x08\"\n\x0e\n\x04\x04\x13\x03\0\x12\x06\xe2\x01\x08\xe7\x01\t\n\r\n\
    \x05\x04\x13\x03\0\x01\x12\x04\xe2\x01\x10\x16\n\x0e\n\x06\x04\x13\x03\0\
    \x02\0\x12\x04\xe3\x01\x100\n\x0f\n\x07\x04\x13\x03\0\x02\0\x04\x12\x04\
    \xe3\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\0\x02\0\x05\x12\x04\xe3\x01\x19\
    \x1e\n\x0f\n\x07\x04\x13\x03\0\x02\0\x01\x12\x04\xe3\x01\x1f+\n\x0f\n\
    \x07\x04\x13\x03\0\x02\0\x03\x12\x04\xe3\x01./\n\x0e\n\x06\x04\x13\x03\0\
    \x02\x01\x12\x04\xe4\x01\x100\n\x0f\n\x07\x04\x13\x03\0\x02\x01\x04\x12\
    \x04\xe4\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\0\x02\x01\x05\x12\x04\xe4\
    \x01\x19\x1e\n\x0f\n\x07\x04\x13\x03\0\x02\x01\x01\x12\x04\xe4\x01\x1f+\
    \n\x0f\n\x07\x04\x13\x03\0\x02\x01\x03\x12\x04\xe4\x01./\n\x0e\n\x06\x04\
    \x13\x03\0\x02\x02\x12\x04\xe5\x01\x101\n\x0f\n\x07\x04\x13\x03\0\x02\
    \x02\x04\x12\x04\xe5\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\0\x02\x02\x05\
    \x12\x04\xe5\x01\x19\x1e\n\x0f\n\x07\x04\x13\x03\0\x02\x02\x01\x12\x04\
    \xe5\x01\x1f,\n\x0f\n\x07\x04\x13\x03\0\x02\x02\x03\x12\x04\xe5\x01/0\n\
    \x0e\n\x06\x04\x13\x03\0\x02\x03\x12\x04\xe6\x01\x101\n\x0f\n\x07\x04\
    \x13\x03\0\x02\x03\x04\x12\x04\xe6\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\0\
    \x02\x03\x05\x12\x04\xe6\x01\x19\x1e\n\x0f\n\x07\x04\x13\x03\0\x02\x03\
    \x01\x12\x04\xe6\x01\x1f,\n\x0f\n\x07\x04\x13\x03\0\x02\x03\x03\x12\x04\
    \xe6\x01/0\n\x0c\n\x04\x04\x13\x02\0\x12\x04\xe9\x01\x08-\n\r\n\x05\x04\
    \x13\x02\0\x04\x12\x04\xe9\x01\x08\x10\n\r\n\x05\x04\x13\x02\0\x05\x12\
    \x04\xe9\x01\x11\x15\n\r\n\x05\x04\x13\x02\0\x01\x12\x04\xe9\x01\x16(\n\
    \r\n\x05\x04\x13\x02\0\x03\x12\x04\xe9\x01+,\n\x0c\n\x04\x04\x13\x02\x01\
    \x12\x04\xea\x01\x08G\n\r\n\x05\x04\x13\x02\x01\x04\x12\x04\xea\x01\x08\
    \x10\n\r\n\x05\x04\x13\x02\x01\x06\x12\x04\xea\x01\x112\n\r\n\x05\x04\
    \x13\x02\x01\x01\x12\x04\xea\x013B\n\r\n\x05\x04\x13\x02\x01\x03\x12\x04\
    \xea\x01EF\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::dota_shared_enums::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(26);
            messages.push(CMsgClientToGCPrivateChatInvite::generated_message_descriptor_data());
            messages.push(CMsgClientToGCPrivateChatKick::generated_message_descriptor_data());
            messages.push(CMsgClientToGCPrivateChatPromote::generated_message_descriptor_data());
            messages.push(CMsgClientToGCPrivateChatDemote::generated_message_descriptor_data());
            messages.push(CMsgGCToClientPrivateChatResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTAJoinChatChannel::generated_message_descriptor_data());
            messages.push(CMsgDOTALeaveChatChannel::generated_message_descriptor_data());
            messages.push(CMsgGCChatReportPublicSpam::generated_message_descriptor_data());
            messages.push(CMsgDOTAChatModeratorBan::generated_message_descriptor_data());
            messages.push(CMsgDOTAChatMessage::generated_message_descriptor_data());
            messages.push(CMsgDOTAChatMember::generated_message_descriptor_data());
            messages.push(CMsgDOTAJoinChatChannelResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTAOtherJoinedChatChannel::generated_message_descriptor_data());
            messages.push(CMsgDOTAOtherLeftChatChannel::generated_message_descriptor_data());
            messages.push(CMsgDOTARequestChatChannelList::generated_message_descriptor_data());
            messages.push(CMsgDOTARequestChatChannelListResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTAChatGetUserListResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTAChatGetMemberCount::generated_message_descriptor_data());
            messages.push(CMsgDOTAChatGetMemberCountResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTAChatRegionsEnabled::generated_message_descriptor_data());
            messages.push(cmsg_dotachat_message::DiceRoll::generated_message_descriptor_data());
            messages.push(cmsg_dotachat_message::TriviaAnswered::generated_message_descriptor_data());
            messages.push(cmsg_dotachat_message::PlayerDraftPick::generated_message_descriptor_data());
            messages.push(cmsg_dotarequest_chat_channel_list_response::ChatChannel::generated_message_descriptor_data());
            messages.push(cmsg_dotachat_get_user_list_response::Member::generated_message_descriptor_data());
            messages.push(cmsg_dotachat_regions_enabled::Region::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(cmsg_gcto_client_private_chat_response::Result::generated_enum_descriptor_data());
            enums.push(cmsg_dotajoin_chat_channel_response::Result::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
