// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_commonmessages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CDOTAMsg_LocationPing)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAMsg_LocationPing {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTAMsg_LocationPing.x)
    pub x: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_LocationPing.y)
    pub y: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_LocationPing.target)
    pub target: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_LocationPing.direct_ping)
    pub direct_ping: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_LocationPing.type)
    pub type_: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_LocationPing.ping_source)
    pub ping_source: ::std::option::Option<::protobuf::EnumOrUnknown<EPingSource>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTAMsg_LocationPing.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAMsg_LocationPing {
    fn default() -> &'a CDOTAMsg_LocationPing {
        <CDOTAMsg_LocationPing as ::protobuf::Message>::default_instance()
    }
}

impl CDOTAMsg_LocationPing {
    pub fn new() -> CDOTAMsg_LocationPing {
        ::std::default::Default::default()
    }

    // optional int32 x = 1;

    pub fn x(&self) -> i32 {
        self.x.unwrap_or(0)
    }

    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = ::std::option::Option::Some(v);
    }

    // optional int32 y = 2;

    pub fn y(&self) -> i32 {
        self.y.unwrap_or(0)
    }

    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional int32 target = 3;

    pub fn target(&self) -> i32 {
        self.target.unwrap_or(0)
    }

    pub fn clear_target(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_target(&self) -> bool {
        self.target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: i32) {
        self.target = ::std::option::Option::Some(v);
    }

    // optional bool direct_ping = 4;

    pub fn direct_ping(&self) -> bool {
        self.direct_ping.unwrap_or(false)
    }

    pub fn clear_direct_ping(&mut self) {
        self.direct_ping = ::std::option::Option::None;
    }

    pub fn has_direct_ping(&self) -> bool {
        self.direct_ping.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direct_ping(&mut self, v: bool) {
        self.direct_ping = ::std::option::Option::Some(v);
    }

    // optional uint32 type = 5;

    pub fn type_(&self) -> u32 {
        self.type_.unwrap_or(0)
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: u32) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // optional .dota.EPingSource ping_source = 6;

    pub fn ping_source(&self) -> EPingSource {
        match self.ping_source {
            Some(e) => e.enum_value_or(EPingSource::k_ePingSource_Default),
            None => EPingSource::k_ePingSource_Default,
        }
    }

    pub fn clear_ping_source(&mut self) {
        self.ping_source = ::std::option::Option::None;
    }

    pub fn has_ping_source(&self) -> bool {
        self.ping_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_source(&mut self, v: EPingSource) {
        self.ping_source = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "x",
            |m: &CDOTAMsg_LocationPing| { &m.x },
            |m: &mut CDOTAMsg_LocationPing| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "y",
            |m: &CDOTAMsg_LocationPing| { &m.y },
            |m: &mut CDOTAMsg_LocationPing| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "target",
            |m: &CDOTAMsg_LocationPing| { &m.target },
            |m: &mut CDOTAMsg_LocationPing| { &mut m.target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "direct_ping",
            |m: &CDOTAMsg_LocationPing| { &m.direct_ping },
            |m: &mut CDOTAMsg_LocationPing| { &mut m.direct_ping },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CDOTAMsg_LocationPing| { &m.type_ },
            |m: &mut CDOTAMsg_LocationPing| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_source",
            |m: &CDOTAMsg_LocationPing| { &m.ping_source },
            |m: &mut CDOTAMsg_LocationPing| { &mut m.ping_source },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTAMsg_LocationPing>(
            "CDOTAMsg_LocationPing",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTAMsg_LocationPing {
    const NAME: &'static str = "CDOTAMsg_LocationPing";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.x = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.y = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.target = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.direct_ping = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.type_ = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.ping_source = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.y {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.target {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.direct_ping {
            my_size += 1 + 1;
        }
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.ping_source {
            my_size += ::protobuf::rt::int32_size(6, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.x {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.target {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.direct_ping {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.type_ {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.ping_source {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAMsg_LocationPing {
        CDOTAMsg_LocationPing::new()
    }

    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.direct_ping = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.ping_source = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAMsg_LocationPing {
        static instance: CDOTAMsg_LocationPing = CDOTAMsg_LocationPing {
            x: ::std::option::Option::None,
            y: ::std::option::Option::None,
            target: ::std::option::Option::None,
            direct_ping: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            ping_source: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTAMsg_LocationPing {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTAMsg_LocationPing").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTAMsg_LocationPing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTAMsg_LocationPing {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTAMsg_ItemAlert)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAMsg_ItemAlert {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTAMsg_ItemAlert.x)
    pub x: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_ItemAlert.y)
    pub y: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_ItemAlert.item_ability_id)
    pub item_ability_id: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTAMsg_ItemAlert.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAMsg_ItemAlert {
    fn default() -> &'a CDOTAMsg_ItemAlert {
        <CDOTAMsg_ItemAlert as ::protobuf::Message>::default_instance()
    }
}

impl CDOTAMsg_ItemAlert {
    pub fn new() -> CDOTAMsg_ItemAlert {
        ::std::default::Default::default()
    }

    // optional int32 x = 1;

    pub fn x(&self) -> i32 {
        self.x.unwrap_or(0)
    }

    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = ::std::option::Option::Some(v);
    }

    // optional int32 y = 2;

    pub fn y(&self) -> i32 {
        self.y.unwrap_or(0)
    }

    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional int32 item_ability_id = 3;

    pub fn item_ability_id(&self) -> i32 {
        self.item_ability_id.unwrap_or(0)
    }

    pub fn clear_item_ability_id(&mut self) {
        self.item_ability_id = ::std::option::Option::None;
    }

    pub fn has_item_ability_id(&self) -> bool {
        self.item_ability_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_ability_id(&mut self, v: i32) {
        self.item_ability_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "x",
            |m: &CDOTAMsg_ItemAlert| { &m.x },
            |m: &mut CDOTAMsg_ItemAlert| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "y",
            |m: &CDOTAMsg_ItemAlert| { &m.y },
            |m: &mut CDOTAMsg_ItemAlert| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_ability_id",
            |m: &CDOTAMsg_ItemAlert| { &m.item_ability_id },
            |m: &mut CDOTAMsg_ItemAlert| { &mut m.item_ability_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTAMsg_ItemAlert>(
            "CDOTAMsg_ItemAlert",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTAMsg_ItemAlert {
    const NAME: &'static str = "CDOTAMsg_ItemAlert";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.x = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.y = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.item_ability_id = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.y {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.item_ability_id {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.x {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.item_ability_id {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAMsg_ItemAlert {
        CDOTAMsg_ItemAlert::new()
    }

    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.item_ability_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAMsg_ItemAlert {
        static instance: CDOTAMsg_ItemAlert = CDOTAMsg_ItemAlert {
            x: ::std::option::Option::None,
            y: ::std::option::Option::None,
            item_ability_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTAMsg_ItemAlert {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTAMsg_ItemAlert").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTAMsg_ItemAlert {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTAMsg_ItemAlert {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTAMsg_MapLine)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAMsg_MapLine {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTAMsg_MapLine.x)
    pub x: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_MapLine.y)
    pub y: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_MapLine.initial)
    pub initial: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTAMsg_MapLine.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAMsg_MapLine {
    fn default() -> &'a CDOTAMsg_MapLine {
        <CDOTAMsg_MapLine as ::protobuf::Message>::default_instance()
    }
}

impl CDOTAMsg_MapLine {
    pub fn new() -> CDOTAMsg_MapLine {
        ::std::default::Default::default()
    }

    // optional int32 x = 1;

    pub fn x(&self) -> i32 {
        self.x.unwrap_or(0)
    }

    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = ::std::option::Option::Some(v);
    }

    // optional int32 y = 2;

    pub fn y(&self) -> i32 {
        self.y.unwrap_or(0)
    }

    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional bool initial = 3;

    pub fn initial(&self) -> bool {
        self.initial.unwrap_or(false)
    }

    pub fn clear_initial(&mut self) {
        self.initial = ::std::option::Option::None;
    }

    pub fn has_initial(&self) -> bool {
        self.initial.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial(&mut self, v: bool) {
        self.initial = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "x",
            |m: &CDOTAMsg_MapLine| { &m.x },
            |m: &mut CDOTAMsg_MapLine| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "y",
            |m: &CDOTAMsg_MapLine| { &m.y },
            |m: &mut CDOTAMsg_MapLine| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "initial",
            |m: &CDOTAMsg_MapLine| { &m.initial },
            |m: &mut CDOTAMsg_MapLine| { &mut m.initial },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTAMsg_MapLine>(
            "CDOTAMsg_MapLine",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTAMsg_MapLine {
    const NAME: &'static str = "CDOTAMsg_MapLine";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.x = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.y = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.initial = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.y {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.initial {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.x {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.initial {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAMsg_MapLine {
        CDOTAMsg_MapLine::new()
    }

    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.initial = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAMsg_MapLine {
        static instance: CDOTAMsg_MapLine = CDOTAMsg_MapLine {
            x: ::std::option::Option::None,
            y: ::std::option::Option::None,
            initial: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTAMsg_MapLine {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTAMsg_MapLine").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTAMsg_MapLine {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTAMsg_MapLine {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTAMsg_WorldLine)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAMsg_WorldLine {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTAMsg_WorldLine.x)
    pub x: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_WorldLine.y)
    pub y: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_WorldLine.z)
    pub z: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_WorldLine.initial)
    pub initial: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_WorldLine.end)
    pub end: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTAMsg_WorldLine.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAMsg_WorldLine {
    fn default() -> &'a CDOTAMsg_WorldLine {
        <CDOTAMsg_WorldLine as ::protobuf::Message>::default_instance()
    }
}

impl CDOTAMsg_WorldLine {
    pub fn new() -> CDOTAMsg_WorldLine {
        ::std::default::Default::default()
    }

    // optional int32 x = 1;

    pub fn x(&self) -> i32 {
        self.x.unwrap_or(0)
    }

    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = ::std::option::Option::Some(v);
    }

    // optional int32 y = 2;

    pub fn y(&self) -> i32 {
        self.y.unwrap_or(0)
    }

    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional int32 z = 3;

    pub fn z(&self) -> i32 {
        self.z.unwrap_or(0)
    }

    pub fn clear_z(&mut self) {
        self.z = ::std::option::Option::None;
    }

    pub fn has_z(&self) -> bool {
        self.z.is_some()
    }

    // Param is passed by value, moved
    pub fn set_z(&mut self, v: i32) {
        self.z = ::std::option::Option::Some(v);
    }

    // optional bool initial = 4;

    pub fn initial(&self) -> bool {
        self.initial.unwrap_or(false)
    }

    pub fn clear_initial(&mut self) {
        self.initial = ::std::option::Option::None;
    }

    pub fn has_initial(&self) -> bool {
        self.initial.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial(&mut self, v: bool) {
        self.initial = ::std::option::Option::Some(v);
    }

    // optional bool end = 5;

    pub fn end(&self) -> bool {
        self.end.unwrap_or(false)
    }

    pub fn clear_end(&mut self) {
        self.end = ::std::option::Option::None;
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: bool) {
        self.end = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "x",
            |m: &CDOTAMsg_WorldLine| { &m.x },
            |m: &mut CDOTAMsg_WorldLine| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "y",
            |m: &CDOTAMsg_WorldLine| { &m.y },
            |m: &mut CDOTAMsg_WorldLine| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "z",
            |m: &CDOTAMsg_WorldLine| { &m.z },
            |m: &mut CDOTAMsg_WorldLine| { &mut m.z },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "initial",
            |m: &CDOTAMsg_WorldLine| { &m.initial },
            |m: &mut CDOTAMsg_WorldLine| { &mut m.initial },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "end",
            |m: &CDOTAMsg_WorldLine| { &m.end },
            |m: &mut CDOTAMsg_WorldLine| { &mut m.end },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTAMsg_WorldLine>(
            "CDOTAMsg_WorldLine",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTAMsg_WorldLine {
    const NAME: &'static str = "CDOTAMsg_WorldLine";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.x = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.y = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.z = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.initial = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.end = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.y {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.z {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.initial {
            my_size += 1 + 1;
        }
        if let Some(v) = self.end {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.x {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.z {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.initial {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.end {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAMsg_WorldLine {
        CDOTAMsg_WorldLine::new()
    }

    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.z = ::std::option::Option::None;
        self.initial = ::std::option::Option::None;
        self.end = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAMsg_WorldLine {
        static instance: CDOTAMsg_WorldLine = CDOTAMsg_WorldLine {
            x: ::std::option::Option::None,
            y: ::std::option::Option::None,
            z: ::std::option::Option::None,
            initial: ::std::option::Option::None,
            end: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTAMsg_WorldLine {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTAMsg_WorldLine").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTAMsg_WorldLine {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTAMsg_WorldLine {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTAMsg_SendStatPopup)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAMsg_SendStatPopup {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTAMsg_SendStatPopup.style)
    pub style: ::std::option::Option<::protobuf::EnumOrUnknown<EDOTAStatPopupTypes>>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_SendStatPopup.stat_strings)
    pub stat_strings: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_SendStatPopup.stat_images)
    pub stat_images: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_SendStatPopup.stat_image_types)
    pub stat_image_types: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_SendStatPopup.duration)
    pub duration: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_SendStatPopup.use_html)
    pub use_html: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_SendStatPopup.movie_name)
    pub movie_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTAMsg_SendStatPopup.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAMsg_SendStatPopup {
    fn default() -> &'a CDOTAMsg_SendStatPopup {
        <CDOTAMsg_SendStatPopup as ::protobuf::Message>::default_instance()
    }
}

impl CDOTAMsg_SendStatPopup {
    pub fn new() -> CDOTAMsg_SendStatPopup {
        ::std::default::Default::default()
    }

    // optional .dota.EDOTAStatPopupTypes style = 1;

    pub fn style(&self) -> EDOTAStatPopupTypes {
        match self.style {
            Some(e) => e.enum_value_or(EDOTAStatPopupTypes::k_EDOTA_SPT_Textline),
            None => EDOTAStatPopupTypes::k_EDOTA_SPT_Textline,
        }
    }

    pub fn clear_style(&mut self) {
        self.style = ::std::option::Option::None;
    }

    pub fn has_style(&self) -> bool {
        self.style.is_some()
    }

    // Param is passed by value, moved
    pub fn set_style(&mut self, v: EDOTAStatPopupTypes) {
        self.style = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional float duration = 5;

    pub fn duration(&self) -> f32 {
        self.duration.unwrap_or(0.)
    }

    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: f32) {
        self.duration = ::std::option::Option::Some(v);
    }

    // optional bool use_html = 6;

    pub fn use_html(&self) -> bool {
        self.use_html.unwrap_or(false)
    }

    pub fn clear_use_html(&mut self) {
        self.use_html = ::std::option::Option::None;
    }

    pub fn has_use_html(&self) -> bool {
        self.use_html.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_html(&mut self, v: bool) {
        self.use_html = ::std::option::Option::Some(v);
    }

    // optional string movie_name = 7;

    pub fn movie_name(&self) -> &str {
        match self.movie_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_movie_name(&mut self) {
        self.movie_name = ::std::option::Option::None;
    }

    pub fn has_movie_name(&self) -> bool {
        self.movie_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_movie_name(&mut self, v: ::std::string::String) {
        self.movie_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_movie_name(&mut self) -> &mut ::std::string::String {
        if self.movie_name.is_none() {
            self.movie_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.movie_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_movie_name(&mut self) -> ::std::string::String {
        self.movie_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "style",
            |m: &CDOTAMsg_SendStatPopup| { &m.style },
            |m: &mut CDOTAMsg_SendStatPopup| { &mut m.style },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stat_strings",
            |m: &CDOTAMsg_SendStatPopup| { &m.stat_strings },
            |m: &mut CDOTAMsg_SendStatPopup| { &mut m.stat_strings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stat_images",
            |m: &CDOTAMsg_SendStatPopup| { &m.stat_images },
            |m: &mut CDOTAMsg_SendStatPopup| { &mut m.stat_images },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stat_image_types",
            |m: &CDOTAMsg_SendStatPopup| { &m.stat_image_types },
            |m: &mut CDOTAMsg_SendStatPopup| { &mut m.stat_image_types },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "duration",
            |m: &CDOTAMsg_SendStatPopup| { &m.duration },
            |m: &mut CDOTAMsg_SendStatPopup| { &mut m.duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_html",
            |m: &CDOTAMsg_SendStatPopup| { &m.use_html },
            |m: &mut CDOTAMsg_SendStatPopup| { &mut m.use_html },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "movie_name",
            |m: &CDOTAMsg_SendStatPopup| { &m.movie_name },
            |m: &mut CDOTAMsg_SendStatPopup| { &mut m.movie_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTAMsg_SendStatPopup>(
            "CDOTAMsg_SendStatPopup",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTAMsg_SendStatPopup {
    const NAME: &'static str = "CDOTAMsg_SendStatPopup";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.style = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.stat_strings.push(is.read_string()?);
                },
                26 => {
                    is.read_repeated_packed_int32_into(&mut self.stat_images)?;
                },
                24 => {
                    self.stat_images.push(is.read_int32()?);
                },
                34 => {
                    is.read_repeated_packed_int32_into(&mut self.stat_image_types)?;
                },
                32 => {
                    self.stat_image_types.push(is.read_int32()?);
                },
                45 => {
                    self.duration = ::std::option::Option::Some(is.read_float()?);
                },
                48 => {
                    self.use_html = ::std::option::Option::Some(is.read_bool()?);
                },
                58 => {
                    self.movie_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.style {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        for value in &self.stat_strings {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.stat_images {
            my_size += ::protobuf::rt::int32_size(3, *value);
        };
        for value in &self.stat_image_types {
            my_size += ::protobuf::rt::int32_size(4, *value);
        };
        if let Some(v) = self.duration {
            my_size += 1 + 4;
        }
        if let Some(v) = self.use_html {
            my_size += 1 + 1;
        }
        if let Some(v) = self.movie_name.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.style {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.stat_strings {
            os.write_string(2, &v)?;
        };
        for v in &self.stat_images {
            os.write_int32(3, *v)?;
        };
        for v in &self.stat_image_types {
            os.write_int32(4, *v)?;
        };
        if let Some(v) = self.duration {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.use_html {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.movie_name.as_ref() {
            os.write_string(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAMsg_SendStatPopup {
        CDOTAMsg_SendStatPopup::new()
    }

    fn clear(&mut self) {
        self.style = ::std::option::Option::None;
        self.stat_strings.clear();
        self.stat_images.clear();
        self.stat_image_types.clear();
        self.duration = ::std::option::Option::None;
        self.use_html = ::std::option::Option::None;
        self.movie_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAMsg_SendStatPopup {
        static instance: CDOTAMsg_SendStatPopup = CDOTAMsg_SendStatPopup {
            style: ::std::option::Option::None,
            stat_strings: ::std::vec::Vec::new(),
            stat_images: ::std::vec::Vec::new(),
            stat_image_types: ::std::vec::Vec::new(),
            duration: ::std::option::Option::None,
            use_html: ::std::option::Option::None,
            movie_name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTAMsg_SendStatPopup {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTAMsg_SendStatPopup").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTAMsg_SendStatPopup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTAMsg_SendStatPopup {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTAMsg_DismissAllStatPopups)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAMsg_DismissAllStatPopups {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTAMsg_DismissAllStatPopups.time_delay)
    pub time_delay: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTAMsg_DismissAllStatPopups.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAMsg_DismissAllStatPopups {
    fn default() -> &'a CDOTAMsg_DismissAllStatPopups {
        <CDOTAMsg_DismissAllStatPopups as ::protobuf::Message>::default_instance()
    }
}

impl CDOTAMsg_DismissAllStatPopups {
    pub fn new() -> CDOTAMsg_DismissAllStatPopups {
        ::std::default::Default::default()
    }

    // optional float time_delay = 1;

    pub fn time_delay(&self) -> f32 {
        self.time_delay.unwrap_or(0.)
    }

    pub fn clear_time_delay(&mut self) {
        self.time_delay = ::std::option::Option::None;
    }

    pub fn has_time_delay(&self) -> bool {
        self.time_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_delay(&mut self, v: f32) {
        self.time_delay = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_delay",
            |m: &CDOTAMsg_DismissAllStatPopups| { &m.time_delay },
            |m: &mut CDOTAMsg_DismissAllStatPopups| { &mut m.time_delay },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTAMsg_DismissAllStatPopups>(
            "CDOTAMsg_DismissAllStatPopups",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTAMsg_DismissAllStatPopups {
    const NAME: &'static str = "CDOTAMsg_DismissAllStatPopups";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.time_delay = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.time_delay {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.time_delay {
            os.write_float(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAMsg_DismissAllStatPopups {
        CDOTAMsg_DismissAllStatPopups::new()
    }

    fn clear(&mut self) {
        self.time_delay = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAMsg_DismissAllStatPopups {
        static instance: CDOTAMsg_DismissAllStatPopups = CDOTAMsg_DismissAllStatPopups {
            time_delay: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTAMsg_DismissAllStatPopups {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTAMsg_DismissAllStatPopups").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTAMsg_DismissAllStatPopups {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTAMsg_DismissAllStatPopups {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTAMsg_CoachHUDPing)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAMsg_CoachHUDPing {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTAMsg_CoachHUDPing.x)
    pub x: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_CoachHUDPing.y)
    pub y: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_CoachHUDPing.tgtpath)
    pub tgtpath: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTAMsg_CoachHUDPing.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAMsg_CoachHUDPing {
    fn default() -> &'a CDOTAMsg_CoachHUDPing {
        <CDOTAMsg_CoachHUDPing as ::protobuf::Message>::default_instance()
    }
}

impl CDOTAMsg_CoachHUDPing {
    pub fn new() -> CDOTAMsg_CoachHUDPing {
        ::std::default::Default::default()
    }

    // optional uint32 x = 1;

    pub fn x(&self) -> u32 {
        self.x.unwrap_or(0)
    }

    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: u32) {
        self.x = ::std::option::Option::Some(v);
    }

    // optional uint32 y = 2;

    pub fn y(&self) -> u32 {
        self.y.unwrap_or(0)
    }

    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: u32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional string tgtpath = 3;

    pub fn tgtpath(&self) -> &str {
        match self.tgtpath.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_tgtpath(&mut self) {
        self.tgtpath = ::std::option::Option::None;
    }

    pub fn has_tgtpath(&self) -> bool {
        self.tgtpath.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tgtpath(&mut self, v: ::std::string::String) {
        self.tgtpath = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tgtpath(&mut self) -> &mut ::std::string::String {
        if self.tgtpath.is_none() {
            self.tgtpath = ::std::option::Option::Some(::std::string::String::new());
        }
        self.tgtpath.as_mut().unwrap()
    }

    // Take field
    pub fn take_tgtpath(&mut self) -> ::std::string::String {
        self.tgtpath.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "x",
            |m: &CDOTAMsg_CoachHUDPing| { &m.x },
            |m: &mut CDOTAMsg_CoachHUDPing| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "y",
            |m: &CDOTAMsg_CoachHUDPing| { &m.y },
            |m: &mut CDOTAMsg_CoachHUDPing| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tgtpath",
            |m: &CDOTAMsg_CoachHUDPing| { &m.tgtpath },
            |m: &mut CDOTAMsg_CoachHUDPing| { &mut m.tgtpath },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTAMsg_CoachHUDPing>(
            "CDOTAMsg_CoachHUDPing",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTAMsg_CoachHUDPing {
    const NAME: &'static str = "CDOTAMsg_CoachHUDPing";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.x = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.y = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.tgtpath = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.y {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.tgtpath.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.x {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.tgtpath.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAMsg_CoachHUDPing {
        CDOTAMsg_CoachHUDPing::new()
    }

    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.tgtpath = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAMsg_CoachHUDPing {
        static instance: CDOTAMsg_CoachHUDPing = CDOTAMsg_CoachHUDPing {
            x: ::std::option::Option::None,
            y: ::std::option::Option::None,
            tgtpath: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTAMsg_CoachHUDPing {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTAMsg_CoachHUDPing").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTAMsg_CoachHUDPing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTAMsg_CoachHUDPing {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CDOTAMsg_UnitOrder)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAMsg_UnitOrder {
    // message fields
    // @@protoc_insertion_point(field:dota.CDOTAMsg_UnitOrder.order_type)
    pub order_type: ::std::option::Option<::protobuf::EnumOrUnknown<Dotaunitorder_t>>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_UnitOrder.units)
    pub units: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_UnitOrder.target_index)
    pub target_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_UnitOrder.ability_index)
    pub ability_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_UnitOrder.position)
    pub position: ::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_UnitOrder.sequence_number)
    pub sequence_number: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:dota.CDOTAMsg_UnitOrder.flags)
    pub flags: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CDOTAMsg_UnitOrder.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAMsg_UnitOrder {
    fn default() -> &'a CDOTAMsg_UnitOrder {
        <CDOTAMsg_UnitOrder as ::protobuf::Message>::default_instance()
    }
}

impl CDOTAMsg_UnitOrder {
    pub fn new() -> CDOTAMsg_UnitOrder {
        ::std::default::Default::default()
    }

    // optional .dota.dotaunitorder_t order_type = 2;

    pub fn order_type(&self) -> Dotaunitorder_t {
        match self.order_type {
            Some(e) => e.enum_value_or(Dotaunitorder_t::DOTA_UNIT_ORDER_NONE),
            None => Dotaunitorder_t::DOTA_UNIT_ORDER_NONE,
        }
    }

    pub fn clear_order_type(&mut self) {
        self.order_type = ::std::option::Option::None;
    }

    pub fn has_order_type(&self) -> bool {
        self.order_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_order_type(&mut self, v: Dotaunitorder_t) {
        self.order_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 target_index = 4;

    pub fn target_index(&self) -> i32 {
        self.target_index.unwrap_or(0)
    }

    pub fn clear_target_index(&mut self) {
        self.target_index = ::std::option::Option::None;
    }

    pub fn has_target_index(&self) -> bool {
        self.target_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target_index(&mut self, v: i32) {
        self.target_index = ::std::option::Option::Some(v);
    }

    // optional int32 ability_index = 5;

    pub fn ability_index(&self) -> i32 {
        self.ability_index.unwrap_or(0)
    }

    pub fn clear_ability_index(&mut self) {
        self.ability_index = ::std::option::Option::None;
    }

    pub fn has_ability_index(&self) -> bool {
        self.ability_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ability_index(&mut self, v: i32) {
        self.ability_index = ::std::option::Option::Some(v);
    }

    // optional int32 sequence_number = 8;

    pub fn sequence_number(&self) -> i32 {
        self.sequence_number.unwrap_or(0)
    }

    pub fn clear_sequence_number(&mut self) {
        self.sequence_number = ::std::option::Option::None;
    }

    pub fn has_sequence_number(&self) -> bool {
        self.sequence_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sequence_number(&mut self, v: i32) {
        self.sequence_number = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 9;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "order_type",
            |m: &CDOTAMsg_UnitOrder| { &m.order_type },
            |m: &mut CDOTAMsg_UnitOrder| { &mut m.order_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "units",
            |m: &CDOTAMsg_UnitOrder| { &m.units },
            |m: &mut CDOTAMsg_UnitOrder| { &mut m.units },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "target_index",
            |m: &CDOTAMsg_UnitOrder| { &m.target_index },
            |m: &mut CDOTAMsg_UnitOrder| { &mut m.target_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ability_index",
            |m: &CDOTAMsg_UnitOrder| { &m.ability_index },
            |m: &mut CDOTAMsg_UnitOrder| { &mut m.ability_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::networkbasetypes::CMsgVector>(
            "position",
            |m: &CDOTAMsg_UnitOrder| { &m.position },
            |m: &mut CDOTAMsg_UnitOrder| { &mut m.position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sequence_number",
            |m: &CDOTAMsg_UnitOrder| { &m.sequence_number },
            |m: &mut CDOTAMsg_UnitOrder| { &mut m.sequence_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CDOTAMsg_UnitOrder| { &m.flags },
            |m: &mut CDOTAMsg_UnitOrder| { &mut m.flags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDOTAMsg_UnitOrder>(
            "CDOTAMsg_UnitOrder",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDOTAMsg_UnitOrder {
    const NAME: &'static str = "CDOTAMsg_UnitOrder";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.order_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                26 => {
                    is.read_repeated_packed_int32_into(&mut self.units)?;
                },
                24 => {
                    self.units.push(is.read_int32()?);
                },
                32 => {
                    self.target_index = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.ability_index = ::std::option::Option::Some(is.read_int32()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                64 => {
                    self.sequence_number = ::std::option::Option::Some(is.read_int32()?);
                },
                72 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.order_type {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        for value in &self.units {
            my_size += ::protobuf::rt::int32_size(3, *value);
        };
        if let Some(v) = self.target_index {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.ability_index {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sequence_number {
            my_size += ::protobuf::rt::int32_size(8, v);
        }
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.order_type {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.units {
            os.write_int32(3, *v)?;
        };
        if let Some(v) = self.target_index {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.ability_index {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.sequence_number {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAMsg_UnitOrder {
        CDOTAMsg_UnitOrder::new()
    }

    fn clear(&mut self) {
        self.order_type = ::std::option::Option::None;
        self.units.clear();
        self.target_index = ::std::option::Option::None;
        self.ability_index = ::std::option::Option::None;
        self.position.clear();
        self.sequence_number = ::std::option::Option::None;
        self.flags = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAMsg_UnitOrder {
        static instance: CDOTAMsg_UnitOrder = CDOTAMsg_UnitOrder {
            order_type: ::std::option::Option::None,
            units: ::std::vec::Vec::new(),
            target_index: ::std::option::Option::None,
            ability_index: ::std::option::Option::None,
            position: ::protobuf::MessageField::none(),
            sequence_number: ::std::option::Option::None,
            flags: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDOTAMsg_UnitOrder {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDOTAMsg_UnitOrder").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDOTAMsg_UnitOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDOTAMsg_UnitOrder {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.VersusScene_PlayActivity)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VersusScene_PlayActivity {
    // message fields
    // @@protoc_insertion_point(field:dota.VersusScene_PlayActivity.activities)
    pub activities: ::std::vec::Vec<versus_scene_play_activity::ActivityInfo>,
    // @@protoc_insertion_point(field:dota.VersusScene_PlayActivity.playback_rate)
    pub playback_rate: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.VersusScene_PlayActivity.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VersusScene_PlayActivity {
    fn default() -> &'a VersusScene_PlayActivity {
        <VersusScene_PlayActivity as ::protobuf::Message>::default_instance()
    }
}

impl VersusScene_PlayActivity {
    pub fn new() -> VersusScene_PlayActivity {
        ::std::default::Default::default()
    }

    // optional float playback_rate = 2;

    pub fn playback_rate(&self) -> f32 {
        self.playback_rate.unwrap_or(0.)
    }

    pub fn clear_playback_rate(&mut self) {
        self.playback_rate = ::std::option::Option::None;
    }

    pub fn has_playback_rate(&self) -> bool {
        self.playback_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_playback_rate(&mut self, v: f32) {
        self.playback_rate = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "activities",
            |m: &VersusScene_PlayActivity| { &m.activities },
            |m: &mut VersusScene_PlayActivity| { &mut m.activities },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "playback_rate",
            |m: &VersusScene_PlayActivity| { &m.playback_rate },
            |m: &mut VersusScene_PlayActivity| { &mut m.playback_rate },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VersusScene_PlayActivity>(
            "VersusScene_PlayActivity",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VersusScene_PlayActivity {
    const NAME: &'static str = "VersusScene_PlayActivity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.activities.push(is.read_message()?);
                },
                21 => {
                    self.playback_rate = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.activities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.playback_rate {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.activities {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.playback_rate {
            os.write_float(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VersusScene_PlayActivity {
        VersusScene_PlayActivity::new()
    }

    fn clear(&mut self) {
        self.activities.clear();
        self.playback_rate = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VersusScene_PlayActivity {
        static instance: VersusScene_PlayActivity = VersusScene_PlayActivity {
            activities: ::std::vec::Vec::new(),
            playback_rate: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VersusScene_PlayActivity {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VersusScene_PlayActivity").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VersusScene_PlayActivity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersusScene_PlayActivity {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `VersusScene_PlayActivity`
pub mod versus_scene_play_activity {
    // @@protoc_insertion_point(message:dota.VersusScene_PlayActivity.ActivityInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ActivityInfo {
        // message fields
        // @@protoc_insertion_point(field:dota.VersusScene_PlayActivity.ActivityInfo.activity)
        pub activity: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.VersusScene_PlayActivity.ActivityInfo.disable_auto_kill)
        pub disable_auto_kill: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:dota.VersusScene_PlayActivity.ActivityInfo.force_looping)
        pub force_looping: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.VersusScene_PlayActivity.ActivityInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ActivityInfo {
        fn default() -> &'a ActivityInfo {
            <ActivityInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl ActivityInfo {
        pub fn new() -> ActivityInfo {
            ::std::default::Default::default()
        }

        // optional string activity = 1;

        pub fn activity(&self) -> &str {
            match self.activity.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_activity(&mut self) {
            self.activity = ::std::option::Option::None;
        }

        pub fn has_activity(&self) -> bool {
            self.activity.is_some()
        }

        // Param is passed by value, moved
        pub fn set_activity(&mut self, v: ::std::string::String) {
            self.activity = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_activity(&mut self) -> &mut ::std::string::String {
            if self.activity.is_none() {
                self.activity = ::std::option::Option::Some(::std::string::String::new());
            }
            self.activity.as_mut().unwrap()
        }

        // Take field
        pub fn take_activity(&mut self) -> ::std::string::String {
            self.activity.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool disable_auto_kill = 2;

        pub fn disable_auto_kill(&self) -> bool {
            self.disable_auto_kill.unwrap_or(false)
        }

        pub fn clear_disable_auto_kill(&mut self) {
            self.disable_auto_kill = ::std::option::Option::None;
        }

        pub fn has_disable_auto_kill(&self) -> bool {
            self.disable_auto_kill.is_some()
        }

        // Param is passed by value, moved
        pub fn set_disable_auto_kill(&mut self, v: bool) {
            self.disable_auto_kill = ::std::option::Option::Some(v);
        }

        // optional bool force_looping = 3;

        pub fn force_looping(&self) -> bool {
            self.force_looping.unwrap_or(false)
        }

        pub fn clear_force_looping(&mut self) {
            self.force_looping = ::std::option::Option::None;
        }

        pub fn has_force_looping(&self) -> bool {
            self.force_looping.is_some()
        }

        // Param is passed by value, moved
        pub fn set_force_looping(&mut self, v: bool) {
            self.force_looping = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "activity",
                |m: &ActivityInfo| { &m.activity },
                |m: &mut ActivityInfo| { &mut m.activity },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "disable_auto_kill",
                |m: &ActivityInfo| { &m.disable_auto_kill },
                |m: &mut ActivityInfo| { &mut m.disable_auto_kill },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "force_looping",
                |m: &ActivityInfo| { &m.force_looping },
                |m: &mut ActivityInfo| { &mut m.force_looping },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ActivityInfo>(
                "VersusScene_PlayActivity.ActivityInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ActivityInfo {
        const NAME: &'static str = "ActivityInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.activity = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.disable_auto_kill = ::std::option::Option::Some(is.read_bool()?);
                    },
                    24 => {
                        self.force_looping = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.activity.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.disable_auto_kill {
                my_size += 1 + 1;
            }
            if let Some(v) = self.force_looping {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.activity.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.disable_auto_kill {
                os.write_bool(2, v)?;
            }
            if let Some(v) = self.force_looping {
                os.write_bool(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ActivityInfo {
            ActivityInfo::new()
        }

        fn clear(&mut self) {
            self.activity = ::std::option::Option::None;
            self.disable_auto_kill = ::std::option::Option::None;
            self.force_looping = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ActivityInfo {
            static instance: ActivityInfo = ActivityInfo {
                activity: ::std::option::Option::None,
                disable_auto_kill: ::std::option::Option::None,
                force_looping: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ActivityInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("VersusScene_PlayActivity.ActivityInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ActivityInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ActivityInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.VersusScene_ChatWheel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VersusScene_ChatWheel {
    // message fields
    // @@protoc_insertion_point(field:dota.VersusScene_ChatWheel.chat_message_id)
    pub chat_message_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.VersusScene_ChatWheel.emoticon_id)
    pub emoticon_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.VersusScene_ChatWheel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VersusScene_ChatWheel {
    fn default() -> &'a VersusScene_ChatWheel {
        <VersusScene_ChatWheel as ::protobuf::Message>::default_instance()
    }
}

impl VersusScene_ChatWheel {
    pub fn new() -> VersusScene_ChatWheel {
        ::std::default::Default::default()
    }

    // optional uint32 chat_message_id = 1;

    pub fn chat_message_id(&self) -> u32 {
        self.chat_message_id.unwrap_or(0)
    }

    pub fn clear_chat_message_id(&mut self) {
        self.chat_message_id = ::std::option::Option::None;
    }

    pub fn has_chat_message_id(&self) -> bool {
        self.chat_message_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_message_id(&mut self, v: u32) {
        self.chat_message_id = ::std::option::Option::Some(v);
    }

    // optional uint32 emoticon_id = 2;

    pub fn emoticon_id(&self) -> u32 {
        self.emoticon_id.unwrap_or(0)
    }

    pub fn clear_emoticon_id(&mut self) {
        self.emoticon_id = ::std::option::Option::None;
    }

    pub fn has_emoticon_id(&self) -> bool {
        self.emoticon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_emoticon_id(&mut self, v: u32) {
        self.emoticon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "chat_message_id",
            |m: &VersusScene_ChatWheel| { &m.chat_message_id },
            |m: &mut VersusScene_ChatWheel| { &mut m.chat_message_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "emoticon_id",
            |m: &VersusScene_ChatWheel| { &m.emoticon_id },
            |m: &mut VersusScene_ChatWheel| { &mut m.emoticon_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VersusScene_ChatWheel>(
            "VersusScene_ChatWheel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VersusScene_ChatWheel {
    const NAME: &'static str = "VersusScene_ChatWheel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.chat_message_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.emoticon_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.chat_message_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.emoticon_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.chat_message_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.emoticon_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VersusScene_ChatWheel {
        VersusScene_ChatWheel::new()
    }

    fn clear(&mut self) {
        self.chat_message_id = ::std::option::Option::None;
        self.emoticon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VersusScene_ChatWheel {
        static instance: VersusScene_ChatWheel = VersusScene_ChatWheel {
            chat_message_id: ::std::option::Option::None,
            emoticon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VersusScene_ChatWheel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VersusScene_ChatWheel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VersusScene_ChatWheel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersusScene_ChatWheel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.VersusScene_PlaybackRate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VersusScene_PlaybackRate {
    // message fields
    // @@protoc_insertion_point(field:dota.VersusScene_PlaybackRate.rate)
    pub rate: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.VersusScene_PlaybackRate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VersusScene_PlaybackRate {
    fn default() -> &'a VersusScene_PlaybackRate {
        <VersusScene_PlaybackRate as ::protobuf::Message>::default_instance()
    }
}

impl VersusScene_PlaybackRate {
    pub fn new() -> VersusScene_PlaybackRate {
        ::std::default::Default::default()
    }

    // optional float rate = 1;

    pub fn rate(&self) -> f32 {
        self.rate.unwrap_or(0.)
    }

    pub fn clear_rate(&mut self) {
        self.rate = ::std::option::Option::None;
    }

    pub fn has_rate(&self) -> bool {
        self.rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rate(&mut self, v: f32) {
        self.rate = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rate",
            |m: &VersusScene_PlaybackRate| { &m.rate },
            |m: &mut VersusScene_PlaybackRate| { &mut m.rate },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VersusScene_PlaybackRate>(
            "VersusScene_PlaybackRate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VersusScene_PlaybackRate {
    const NAME: &'static str = "VersusScene_PlaybackRate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.rate = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.rate {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.rate {
            os.write_float(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VersusScene_PlaybackRate {
        VersusScene_PlaybackRate::new()
    }

    fn clear(&mut self) {
        self.rate = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VersusScene_PlaybackRate {
        static instance: VersusScene_PlaybackRate = VersusScene_PlaybackRate {
            rate: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VersusScene_PlaybackRate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VersusScene_PlaybackRate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VersusScene_PlaybackRate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersusScene_PlaybackRate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EPingSource)
pub enum EPingSource {
    // @@protoc_insertion_point(enum_value:dota.EPingSource.k_ePingSource_Default)
    k_ePingSource_Default = 0,
    // @@protoc_insertion_point(enum_value:dota.EPingSource.k_ePingSource_Warning)
    k_ePingSource_Warning = 1,
    // @@protoc_insertion_point(enum_value:dota.EPingSource.k_ePingSource_Wheel)
    k_ePingSource_Wheel = 2,
    // @@protoc_insertion_point(enum_value:dota.EPingSource.k_ePingSource_System)
    k_ePingSource_System = 3,
}

impl ::protobuf::Enum for EPingSource {
    const NAME: &'static str = "EPingSource";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EPingSource> {
        match value {
            0 => ::std::option::Option::Some(EPingSource::k_ePingSource_Default),
            1 => ::std::option::Option::Some(EPingSource::k_ePingSource_Warning),
            2 => ::std::option::Option::Some(EPingSource::k_ePingSource_Wheel),
            3 => ::std::option::Option::Some(EPingSource::k_ePingSource_System),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EPingSource> {
        match str {
            "k_ePingSource_Default" => ::std::option::Option::Some(EPingSource::k_ePingSource_Default),
            "k_ePingSource_Warning" => ::std::option::Option::Some(EPingSource::k_ePingSource_Warning),
            "k_ePingSource_Wheel" => ::std::option::Option::Some(EPingSource::k_ePingSource_Wheel),
            "k_ePingSource_System" => ::std::option::Option::Some(EPingSource::k_ePingSource_System),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EPingSource] = &[
        EPingSource::k_ePingSource_Default,
        EPingSource::k_ePingSource_Warning,
        EPingSource::k_ePingSource_Wheel,
        EPingSource::k_ePingSource_System,
    ];
}

impl ::protobuf::EnumFull for EPingSource {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EPingSource").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EPingSource {
    fn default() -> Self {
        EPingSource::k_ePingSource_Default
    }
}

impl EPingSource {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EPingSource>("EPingSource")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EDOTAStatPopupTypes)
pub enum EDOTAStatPopupTypes {
    // @@protoc_insertion_point(enum_value:dota.EDOTAStatPopupTypes.k_EDOTA_SPT_Textline)
    k_EDOTA_SPT_Textline = 0,
    // @@protoc_insertion_point(enum_value:dota.EDOTAStatPopupTypes.k_EDOTA_SPT_Basic)
    k_EDOTA_SPT_Basic = 1,
    // @@protoc_insertion_point(enum_value:dota.EDOTAStatPopupTypes.k_EDOTA_SPT_Poll)
    k_EDOTA_SPT_Poll = 2,
    // @@protoc_insertion_point(enum_value:dota.EDOTAStatPopupTypes.k_EDOTA_SPT_Grid)
    k_EDOTA_SPT_Grid = 3,
    // @@protoc_insertion_point(enum_value:dota.EDOTAStatPopupTypes.k_EDOTA_SPT_DualImage)
    k_EDOTA_SPT_DualImage = 4,
    // @@protoc_insertion_point(enum_value:dota.EDOTAStatPopupTypes.k_EDOTA_SPT_Movie)
    k_EDOTA_SPT_Movie = 5,
}

impl ::protobuf::Enum for EDOTAStatPopupTypes {
    const NAME: &'static str = "EDOTAStatPopupTypes";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EDOTAStatPopupTypes> {
        match value {
            0 => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_Textline),
            1 => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_Basic),
            2 => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_Poll),
            3 => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_Grid),
            4 => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_DualImage),
            5 => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_Movie),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EDOTAStatPopupTypes> {
        match str {
            "k_EDOTA_SPT_Textline" => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_Textline),
            "k_EDOTA_SPT_Basic" => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_Basic),
            "k_EDOTA_SPT_Poll" => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_Poll),
            "k_EDOTA_SPT_Grid" => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_Grid),
            "k_EDOTA_SPT_DualImage" => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_DualImage),
            "k_EDOTA_SPT_Movie" => ::std::option::Option::Some(EDOTAStatPopupTypes::k_EDOTA_SPT_Movie),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EDOTAStatPopupTypes] = &[
        EDOTAStatPopupTypes::k_EDOTA_SPT_Textline,
        EDOTAStatPopupTypes::k_EDOTA_SPT_Basic,
        EDOTAStatPopupTypes::k_EDOTA_SPT_Poll,
        EDOTAStatPopupTypes::k_EDOTA_SPT_Grid,
        EDOTAStatPopupTypes::k_EDOTA_SPT_DualImage,
        EDOTAStatPopupTypes::k_EDOTA_SPT_Movie,
    ];
}

impl ::protobuf::EnumFull for EDOTAStatPopupTypes {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EDOTAStatPopupTypes").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EDOTAStatPopupTypes {
    fn default() -> Self {
        EDOTAStatPopupTypes::k_EDOTA_SPT_Textline
    }
}

impl EDOTAStatPopupTypes {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EDOTAStatPopupTypes>("EDOTAStatPopupTypes")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.dotaunitorder_t)
pub enum Dotaunitorder_t {
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_NONE)
    DOTA_UNIT_ORDER_NONE = 0,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_MOVE_TO_POSITION)
    DOTA_UNIT_ORDER_MOVE_TO_POSITION = 1,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_MOVE_TO_TARGET)
    DOTA_UNIT_ORDER_MOVE_TO_TARGET = 2,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_ATTACK_MOVE)
    DOTA_UNIT_ORDER_ATTACK_MOVE = 3,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_ATTACK_TARGET)
    DOTA_UNIT_ORDER_ATTACK_TARGET = 4,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_CAST_POSITION)
    DOTA_UNIT_ORDER_CAST_POSITION = 5,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_CAST_TARGET)
    DOTA_UNIT_ORDER_CAST_TARGET = 6,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_CAST_TARGET_TREE)
    DOTA_UNIT_ORDER_CAST_TARGET_TREE = 7,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_CAST_NO_TARGET)
    DOTA_UNIT_ORDER_CAST_NO_TARGET = 8,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_CAST_TOGGLE)
    DOTA_UNIT_ORDER_CAST_TOGGLE = 9,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_HOLD_POSITION)
    DOTA_UNIT_ORDER_HOLD_POSITION = 10,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_TRAIN_ABILITY)
    DOTA_UNIT_ORDER_TRAIN_ABILITY = 11,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_DROP_ITEM)
    DOTA_UNIT_ORDER_DROP_ITEM = 12,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_GIVE_ITEM)
    DOTA_UNIT_ORDER_GIVE_ITEM = 13,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_PICKUP_ITEM)
    DOTA_UNIT_ORDER_PICKUP_ITEM = 14,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_PICKUP_RUNE)
    DOTA_UNIT_ORDER_PICKUP_RUNE = 15,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_PURCHASE_ITEM)
    DOTA_UNIT_ORDER_PURCHASE_ITEM = 16,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_SELL_ITEM)
    DOTA_UNIT_ORDER_SELL_ITEM = 17,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_DISASSEMBLE_ITEM)
    DOTA_UNIT_ORDER_DISASSEMBLE_ITEM = 18,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_MOVE_ITEM)
    DOTA_UNIT_ORDER_MOVE_ITEM = 19,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO)
    DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO = 20,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_STOP)
    DOTA_UNIT_ORDER_STOP = 21,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_TAUNT)
    DOTA_UNIT_ORDER_TAUNT = 22,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_BUYBACK)
    DOTA_UNIT_ORDER_BUYBACK = 23,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_GLYPH)
    DOTA_UNIT_ORDER_GLYPH = 24,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH)
    DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH = 25,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_CAST_RUNE)
    DOTA_UNIT_ORDER_CAST_RUNE = 26,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_PING_ABILITY)
    DOTA_UNIT_ORDER_PING_ABILITY = 27,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_MOVE_TO_DIRECTION)
    DOTA_UNIT_ORDER_MOVE_TO_DIRECTION = 28,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_PATROL)
    DOTA_UNIT_ORDER_PATROL = 29,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION)
    DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION = 30,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_RADAR)
    DOTA_UNIT_ORDER_RADAR = 31,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK)
    DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK = 32,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_CONTINUE)
    DOTA_UNIT_ORDER_CONTINUE = 33,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED)
    DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED = 34,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_CAST_RIVER_PAINT)
    DOTA_UNIT_ORDER_CAST_RIVER_PAINT = 35,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT)
    DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT = 36,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN)
    DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN = 37,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH)
    DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH = 38,
    // @@protoc_insertion_point(enum_value:dota.dotaunitorder_t.DOTA_UNIT_ORDER_MOVE_RELATIVE)
    DOTA_UNIT_ORDER_MOVE_RELATIVE = 39,
}

impl ::protobuf::Enum for Dotaunitorder_t {
    const NAME: &'static str = "dotaunitorder_t";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Dotaunitorder_t> {
        match value {
            0 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_NONE),
            1 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_TO_POSITION),
            2 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_TO_TARGET),
            3 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_ATTACK_MOVE),
            4 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_ATTACK_TARGET),
            5 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_POSITION),
            6 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TARGET),
            7 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TARGET_TREE),
            8 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_NO_TARGET),
            9 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TOGGLE),
            10 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_HOLD_POSITION),
            11 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_TRAIN_ABILITY),
            12 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_DROP_ITEM),
            13 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_GIVE_ITEM),
            14 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PICKUP_ITEM),
            15 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PICKUP_RUNE),
            16 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PURCHASE_ITEM),
            17 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_SELL_ITEM),
            18 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_DISASSEMBLE_ITEM),
            19 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_ITEM),
            20 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO),
            21 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_STOP),
            22 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_TAUNT),
            23 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_BUYBACK),
            24 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_GLYPH),
            25 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH),
            26 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_RUNE),
            27 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PING_ABILITY),
            28 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_TO_DIRECTION),
            29 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PATROL),
            30 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION),
            31 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_RADAR),
            32 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK),
            33 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CONTINUE),
            34 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED),
            35 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_RIVER_PAINT),
            36 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT),
            37 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN),
            38 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH),
            39 => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_RELATIVE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Dotaunitorder_t> {
        match str {
            "DOTA_UNIT_ORDER_NONE" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_NONE),
            "DOTA_UNIT_ORDER_MOVE_TO_POSITION" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_TO_POSITION),
            "DOTA_UNIT_ORDER_MOVE_TO_TARGET" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_TO_TARGET),
            "DOTA_UNIT_ORDER_ATTACK_MOVE" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_ATTACK_MOVE),
            "DOTA_UNIT_ORDER_ATTACK_TARGET" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_ATTACK_TARGET),
            "DOTA_UNIT_ORDER_CAST_POSITION" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_POSITION),
            "DOTA_UNIT_ORDER_CAST_TARGET" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TARGET),
            "DOTA_UNIT_ORDER_CAST_TARGET_TREE" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TARGET_TREE),
            "DOTA_UNIT_ORDER_CAST_NO_TARGET" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_NO_TARGET),
            "DOTA_UNIT_ORDER_CAST_TOGGLE" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TOGGLE),
            "DOTA_UNIT_ORDER_HOLD_POSITION" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_HOLD_POSITION),
            "DOTA_UNIT_ORDER_TRAIN_ABILITY" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_TRAIN_ABILITY),
            "DOTA_UNIT_ORDER_DROP_ITEM" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_DROP_ITEM),
            "DOTA_UNIT_ORDER_GIVE_ITEM" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_GIVE_ITEM),
            "DOTA_UNIT_ORDER_PICKUP_ITEM" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PICKUP_ITEM),
            "DOTA_UNIT_ORDER_PICKUP_RUNE" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PICKUP_RUNE),
            "DOTA_UNIT_ORDER_PURCHASE_ITEM" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PURCHASE_ITEM),
            "DOTA_UNIT_ORDER_SELL_ITEM" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_SELL_ITEM),
            "DOTA_UNIT_ORDER_DISASSEMBLE_ITEM" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_DISASSEMBLE_ITEM),
            "DOTA_UNIT_ORDER_MOVE_ITEM" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_ITEM),
            "DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO),
            "DOTA_UNIT_ORDER_STOP" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_STOP),
            "DOTA_UNIT_ORDER_TAUNT" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_TAUNT),
            "DOTA_UNIT_ORDER_BUYBACK" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_BUYBACK),
            "DOTA_UNIT_ORDER_GLYPH" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_GLYPH),
            "DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH),
            "DOTA_UNIT_ORDER_CAST_RUNE" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_RUNE),
            "DOTA_UNIT_ORDER_PING_ABILITY" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PING_ABILITY),
            "DOTA_UNIT_ORDER_MOVE_TO_DIRECTION" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_TO_DIRECTION),
            "DOTA_UNIT_ORDER_PATROL" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PATROL),
            "DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION),
            "DOTA_UNIT_ORDER_RADAR" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_RADAR),
            "DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK),
            "DOTA_UNIT_ORDER_CONTINUE" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CONTINUE),
            "DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED),
            "DOTA_UNIT_ORDER_CAST_RIVER_PAINT" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_RIVER_PAINT),
            "DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT),
            "DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN),
            "DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH),
            "DOTA_UNIT_ORDER_MOVE_RELATIVE" => ::std::option::Option::Some(Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_RELATIVE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Dotaunitorder_t] = &[
        Dotaunitorder_t::DOTA_UNIT_ORDER_NONE,
        Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_TO_POSITION,
        Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_TO_TARGET,
        Dotaunitorder_t::DOTA_UNIT_ORDER_ATTACK_MOVE,
        Dotaunitorder_t::DOTA_UNIT_ORDER_ATTACK_TARGET,
        Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_POSITION,
        Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TARGET,
        Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TARGET_TREE,
        Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_NO_TARGET,
        Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TOGGLE,
        Dotaunitorder_t::DOTA_UNIT_ORDER_HOLD_POSITION,
        Dotaunitorder_t::DOTA_UNIT_ORDER_TRAIN_ABILITY,
        Dotaunitorder_t::DOTA_UNIT_ORDER_DROP_ITEM,
        Dotaunitorder_t::DOTA_UNIT_ORDER_GIVE_ITEM,
        Dotaunitorder_t::DOTA_UNIT_ORDER_PICKUP_ITEM,
        Dotaunitorder_t::DOTA_UNIT_ORDER_PICKUP_RUNE,
        Dotaunitorder_t::DOTA_UNIT_ORDER_PURCHASE_ITEM,
        Dotaunitorder_t::DOTA_UNIT_ORDER_SELL_ITEM,
        Dotaunitorder_t::DOTA_UNIT_ORDER_DISASSEMBLE_ITEM,
        Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_ITEM,
        Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO,
        Dotaunitorder_t::DOTA_UNIT_ORDER_STOP,
        Dotaunitorder_t::DOTA_UNIT_ORDER_TAUNT,
        Dotaunitorder_t::DOTA_UNIT_ORDER_BUYBACK,
        Dotaunitorder_t::DOTA_UNIT_ORDER_GLYPH,
        Dotaunitorder_t::DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH,
        Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_RUNE,
        Dotaunitorder_t::DOTA_UNIT_ORDER_PING_ABILITY,
        Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_TO_DIRECTION,
        Dotaunitorder_t::DOTA_UNIT_ORDER_PATROL,
        Dotaunitorder_t::DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION,
        Dotaunitorder_t::DOTA_UNIT_ORDER_RADAR,
        Dotaunitorder_t::DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK,
        Dotaunitorder_t::DOTA_UNIT_ORDER_CONTINUE,
        Dotaunitorder_t::DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED,
        Dotaunitorder_t::DOTA_UNIT_ORDER_CAST_RIVER_PAINT,
        Dotaunitorder_t::DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT,
        Dotaunitorder_t::DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN,
        Dotaunitorder_t::DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH,
        Dotaunitorder_t::DOTA_UNIT_ORDER_MOVE_RELATIVE,
    ];
}

impl ::protobuf::EnumFull for Dotaunitorder_t {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("dotaunitorder_t").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Dotaunitorder_t {
    fn default() -> Self {
        Dotaunitorder_t::DOTA_UNIT_ORDER_NONE
    }
}

impl Dotaunitorder_t {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Dotaunitorder_t>("dotaunitorder_t")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EDOTAVersusScenePlayerBehavior)
pub enum EDOTAVersusScenePlayerBehavior {
    // @@protoc_insertion_point(enum_value:dota.EDOTAVersusScenePlayerBehavior.VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY)
    VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY = 1,
    // @@protoc_insertion_point(enum_value:dota.EDOTAVersusScenePlayerBehavior.VS_PLAYER_BEHAVIOR_CHAT_WHEEL)
    VS_PLAYER_BEHAVIOR_CHAT_WHEEL = 2,
    // @@protoc_insertion_point(enum_value:dota.EDOTAVersusScenePlayerBehavior.VS_PLAYER_BEHAVIOR_PLAYBACK_RATE)
    VS_PLAYER_BEHAVIOR_PLAYBACK_RATE = 3,
}

impl ::protobuf::Enum for EDOTAVersusScenePlayerBehavior {
    const NAME: &'static str = "EDOTAVersusScenePlayerBehavior";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EDOTAVersusScenePlayerBehavior> {
        match value {
            1 => ::std::option::Option::Some(EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY),
            2 => ::std::option::Option::Some(EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_CHAT_WHEEL),
            3 => ::std::option::Option::Some(EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_PLAYBACK_RATE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EDOTAVersusScenePlayerBehavior> {
        match str {
            "VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY" => ::std::option::Option::Some(EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY),
            "VS_PLAYER_BEHAVIOR_CHAT_WHEEL" => ::std::option::Option::Some(EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_CHAT_WHEEL),
            "VS_PLAYER_BEHAVIOR_PLAYBACK_RATE" => ::std::option::Option::Some(EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_PLAYBACK_RATE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EDOTAVersusScenePlayerBehavior] = &[
        EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY,
        EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_CHAT_WHEEL,
        EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_PLAYBACK_RATE,
    ];
}

impl ::protobuf::EnumFull for EDOTAVersusScenePlayerBehavior {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EDOTAVersusScenePlayerBehavior").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY => 0,
            EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_CHAT_WHEEL => 1,
            EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_PLAYBACK_RATE => 2,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EDOTAVersusScenePlayerBehavior {
    fn default() -> Self {
        EDOTAVersusScenePlayerBehavior::VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY
    }
}

impl EDOTAVersusScenePlayerBehavior {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EDOTAVersusScenePlayerBehavior>("EDOTAVersusScenePlayerBehavior")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19dota_commonmessages.proto\x12\x04dota\x1a\x16networkbasetypes.prot\
    o\"\xb4\x01\n\x15CDOTAMsg_LocationPing\x12\x0c\n\x01x\x18\x01\x20\x01(\
    \x05R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x05R\x01y\x12\x16\n\x06target\
    \x18\x03\x20\x01(\x05R\x06target\x12\x1f\n\x0bdirect_ping\x18\x04\x20\
    \x01(\x08R\ndirectPing\x12\x12\n\x04type\x18\x05\x20\x01(\rR\x04type\x12\
    2\n\x0bping_source\x18\x06\x20\x01(\x0e2\x11.dota.EPingSourceR\npingSour\
    ce\"X\n\x12CDOTAMsg_ItemAlert\x12\x0c\n\x01x\x18\x01\x20\x01(\x05R\x01x\
    \x12\x0c\n\x01y\x18\x02\x20\x01(\x05R\x01y\x12&\n\x0fitem_ability_id\x18\
    \x03\x20\x01(\x05R\ritemAbilityId\"H\n\x10CDOTAMsg_MapLine\x12\x0c\n\x01\
    x\x18\x01\x20\x01(\x05R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x05R\x01y\
    \x12\x18\n\x07initial\x18\x03\x20\x01(\x08R\x07initial\"j\n\x12CDOTAMsg_\
    WorldLine\x12\x0c\n\x01x\x18\x01\x20\x01(\x05R\x01x\x12\x0c\n\x01y\x18\
    \x02\x20\x01(\x05R\x01y\x12\x0c\n\x01z\x18\x03\x20\x01(\x05R\x01z\x12\
    \x18\n\x07initial\x18\x04\x20\x01(\x08R\x07initial\x12\x10\n\x03end\x18\
    \x05\x20\x01(\x08R\x03end\"\x8d\x02\n\x16CDOTAMsg_SendStatPopup\x12/\n\
    \x05style\x18\x01\x20\x01(\x0e2\x19.dota.EDOTAStatPopupTypesR\x05style\
    \x12!\n\x0cstat_strings\x18\x02\x20\x03(\tR\x0bstatStrings\x12\x1f\n\x0b\
    stat_images\x18\x03\x20\x03(\x05R\nstatImages\x12(\n\x10stat_image_types\
    \x18\x04\x20\x03(\x05R\x0estatImageTypes\x12\x1a\n\x08duration\x18\x05\
    \x20\x01(\x02R\x08duration\x12\x19\n\x08use_html\x18\x06\x20\x01(\x08R\
    \x07useHtml\x12\x1d\n\nmovie_name\x18\x07\x20\x01(\tR\tmovieName\">\n\
    \x1dCDOTAMsg_DismissAllStatPopups\x12\x1d\n\ntime_delay\x18\x01\x20\x01(\
    \x02R\ttimeDelay\"M\n\x15CDOTAMsg_CoachHUDPing\x12\x0c\n\x01x\x18\x01\
    \x20\x01(\rR\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\rR\x01y\x12\x18\n\x07t\
    gtpath\x18\x03\x20\x01(\tR\x07tgtpath\"\x95\x02\n\x12CDOTAMsg_UnitOrder\
    \x124\n\norder_type\x18\x02\x20\x01(\x0e2\x15.dota.dotaunitorder_tR\tord\
    erType\x12\x14\n\x05units\x18\x03\x20\x03(\x05R\x05units\x12!\n\x0ctarge\
    t_index\x18\x04\x20\x01(\x05R\x0btargetIndex\x12#\n\rability_index\x18\
    \x05\x20\x01(\x05R\x0cabilityIndex\x12,\n\x08position\x18\x06\x20\x01(\
    \x0b2\x10.dota.CMsgVectorR\x08position\x12'\n\x0fsequence_number\x18\x08\
    \x20\x01(\x05R\x0esequenceNumber\x12\x14\n\x05flags\x18\t\x20\x01(\rR\
    \x05flags\"\x89\x02\n\x18VersusScene_PlayActivity\x12K\n\nactivities\x18\
    \x01\x20\x03(\x0b2+.dota.VersusScene_PlayActivity.ActivityInfoR\nactivit\
    ies\x12#\n\rplayback_rate\x18\x02\x20\x01(\x02R\x0cplaybackRate\x1a{\n\
    \x0cActivityInfo\x12\x1a\n\x08activity\x18\x01\x20\x01(\tR\x08activity\
    \x12*\n\x11disable_auto_kill\x18\x02\x20\x01(\x08R\x0fdisableAutoKill\
    \x12#\n\rforce_looping\x18\x03\x20\x01(\x08R\x0cforceLooping\"`\n\x15Ver\
    susScene_ChatWheel\x12&\n\x0fchat_message_id\x18\x01\x20\x01(\rR\rchatMe\
    ssageId\x12\x1f\n\x0bemoticon_id\x18\x02\x20\x01(\rR\nemoticonId\".\n\
    \x18VersusScene_PlaybackRate\x12\x12\n\x04rate\x18\x01\x20\x01(\x02R\x04\
    rate*v\n\x0bEPingSource\x12\x19\n\x15k_ePingSource_Default\x10\0\x12\x19\
    \n\x15k_ePingSource_Warning\x10\x01\x12\x17\n\x13k_ePingSource_Wheel\x10\
    \x02\x12\x18\n\x14k_ePingSource_System\x10\x03*\xa4\x01\n\x13EDOTAStatPo\
    pupTypes\x12\x18\n\x14k_EDOTA_SPT_Textline\x10\0\x12\x15\n\x11k_EDOTA_SP\
    T_Basic\x10\x01\x12\x14\n\x10k_EDOTA_SPT_Poll\x10\x02\x12\x14\n\x10k_EDO\
    TA_SPT_Grid\x10\x03\x12\x19\n\x15k_EDOTA_SPT_DualImage\x10\x04\x12\x15\n\
    \x11k_EDOTA_SPT_Movie\x10\x05*\x92\x0b\n\x0fdotaunitorder_t\x12\x18\n\
    \x14DOTA_UNIT_ORDER_NONE\x10\0\x12$\n\x20DOTA_UNIT_ORDER_MOVE_TO_POSITIO\
    N\x10\x01\x12\"\n\x1eDOTA_UNIT_ORDER_MOVE_TO_TARGET\x10\x02\x12\x1f\n\
    \x1bDOTA_UNIT_ORDER_ATTACK_MOVE\x10\x03\x12!\n\x1dDOTA_UNIT_ORDER_ATTACK\
    _TARGET\x10\x04\x12!\n\x1dDOTA_UNIT_ORDER_CAST_POSITION\x10\x05\x12\x1f\
    \n\x1bDOTA_UNIT_ORDER_CAST_TARGET\x10\x06\x12$\n\x20DOTA_UNIT_ORDER_CAST\
    _TARGET_TREE\x10\x07\x12\"\n\x1eDOTA_UNIT_ORDER_CAST_NO_TARGET\x10\x08\
    \x12\x1f\n\x1bDOTA_UNIT_ORDER_CAST_TOGGLE\x10\t\x12!\n\x1dDOTA_UNIT_ORDE\
    R_HOLD_POSITION\x10\n\x12!\n\x1dDOTA_UNIT_ORDER_TRAIN_ABILITY\x10\x0b\
    \x12\x1d\n\x19DOTA_UNIT_ORDER_DROP_ITEM\x10\x0c\x12\x1d\n\x19DOTA_UNIT_O\
    RDER_GIVE_ITEM\x10\r\x12\x1f\n\x1bDOTA_UNIT_ORDER_PICKUP_ITEM\x10\x0e\
    \x12\x1f\n\x1bDOTA_UNIT_ORDER_PICKUP_RUNE\x10\x0f\x12!\n\x1dDOTA_UNIT_OR\
    DER_PURCHASE_ITEM\x10\x10\x12\x1d\n\x19DOTA_UNIT_ORDER_SELL_ITEM\x10\x11\
    \x12$\n\x20DOTA_UNIT_ORDER_DISASSEMBLE_ITEM\x10\x12\x12\x1d\n\x19DOTA_UN\
    IT_ORDER_MOVE_ITEM\x10\x13\x12$\n\x20DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO\
    \x10\x14\x12\x18\n\x14DOTA_UNIT_ORDER_STOP\x10\x15\x12\x19\n\x15DOTA_UNI\
    T_ORDER_TAUNT\x10\x16\x12\x1b\n\x17DOTA_UNIT_ORDER_BUYBACK\x10\x17\x12\
    \x19\n\x15DOTA_UNIT_ORDER_GLYPH\x10\x18\x12)\n%DOTA_UNIT_ORDER_EJECT_ITE\
    M_FROM_STASH\x10\x19\x12\x1d\n\x19DOTA_UNIT_ORDER_CAST_RUNE\x10\x1a\x12\
    \x20\n\x1cDOTA_UNIT_ORDER_PING_ABILITY\x10\x1b\x12%\n!DOTA_UNIT_ORDER_MO\
    VE_TO_DIRECTION\x10\x1c\x12\x1a\n\x16DOTA_UNIT_ORDER_PATROL\x10\x1d\x12*\
    \n&DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION\x10\x1e\x12\x19\n\x15DOTA_UNIT\
    _ORDER_RADAR\x10\x1f\x12)\n%DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK\x10\
    \x20\x12\x1c\n\x18DOTA_UNIT_ORDER_CONTINUE\x10!\x12*\n&DOTA_UNIT_ORDER_V\
    ECTOR_TARGET_CANCELED\x10\"\x12$\n\x20DOTA_UNIT_ORDER_CAST_RIVER_PAINT\
    \x10#\x122\n.DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT\x10$\x12)\n%\
    DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN\x10%\x125\n1DOTA_UNIT_ORDER_TAKE_I\
    TEM_FROM_NEUTRAL_ITEM_STASH\x10&\x12!\n\x1dDOTA_UNIT_ORDER_MOVE_RELATIVE\
    \x10'*\x8f\x01\n\x1eEDOTAVersusScenePlayerBehavior\x12$\n\x20VS_PLAYER_B\
    EHAVIOR_PLAY_ACTIVITY\x10\x01\x12!\n\x1dVS_PLAYER_BEHAVIOR_CHAT_WHEEL\
    \x10\x02\x12$\n\x20VS_PLAYER_BEHAVIOR_PLAYBACK_RATE\x10\x03B%Z#github.co\
    m/dotabuff/manta/dota;dotaJ\xad,\n\x07\x12\x05\0\0\x95\x01\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0c\n\x08\n\x01\
    \x08\x12\x03\x03\0:\n\t\n\x02\x08\x0b\x12\x03\x03\0:\n\t\n\x02\x03\0\x12\
    \x03\x05\x07\x1f\n\n\n\x02\x05\0\x12\x04\x07\0\x0c\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x07\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03\x08\x08\"\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03\x08\x08\x1d\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x08\x20!\n\x0b\n\x04\x05\0\x02\x01\x12\x03\t\x08\"\n\x0c\n\x05\
    \x05\0\x02\x01\x01\x12\x03\t\x08\x1d\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03\t\x20!\n\x0b\n\x04\x05\0\x02\x02\x12\x03\n\x08\x20\n\x0c\n\x05\x05\
    \0\x02\x02\x01\x12\x03\n\x08\x1b\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\n\
    \x1e\x1f\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x0b\x08!\n\x0c\n\x05\x05\0\
    \x02\x03\x01\x12\x03\x0b\x08\x1c\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\
    \x0b\x1f\x20\n\n\n\x02\x05\x01\x12\x04\x0e\0\x15\x01\n\n\n\x03\x05\x01\
    \x01\x12\x03\x0e\x05\x18\n\x0b\n\x04\x05\x01\x02\0\x12\x03\x0f\x08!\n\
    \x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x0f\x08\x1c\n\x0c\n\x05\x05\x01\x02\
    \0\x02\x12\x03\x0f\x1f\x20\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x10\x08\
    \x1e\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x10\x08\x19\n\x0c\n\x05\x05\
    \x01\x02\x01\x02\x12\x03\x10\x1c\x1d\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\
    \x11\x08\x1d\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\x11\x08\x18\n\x0c\n\
    \x05\x05\x01\x02\x02\x02\x12\x03\x11\x1b\x1c\n\x0b\n\x04\x05\x01\x02\x03\
    \x12\x03\x12\x08\x1d\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\x12\x08\x18\
    \n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x12\x1b\x1c\n\x0b\n\x04\x05\x01\
    \x02\x04\x12\x03\x13\x08\"\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03\x13\
    \x08\x1d\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x13\x20!\n\x0b\n\x04\
    \x05\x01\x02\x05\x12\x03\x14\x08\x1e\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\
    \x03\x14\x08\x19\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03\x14\x1c\x1d\n\n\
    \n\x02\x05\x02\x12\x04\x17\0@\x01\n\n\n\x03\x05\x02\x01\x12\x03\x17\x05\
    \x14\n\x0b\n\x04\x05\x02\x02\0\x12\x03\x18\x08!\n\x0c\n\x05\x05\x02\x02\
    \0\x01\x12\x03\x18\x08\x1c\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03\x18\x1f\
    \x20\n\x0b\n\x04\x05\x02\x02\x01\x12\x03\x19\x08-\n\x0c\n\x05\x05\x02\
    \x02\x01\x01\x12\x03\x19\x08(\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03\
    \x19+,\n\x0b\n\x04\x05\x02\x02\x02\x12\x03\x1a\x08+\n\x0c\n\x05\x05\x02\
    \x02\x02\x01\x12\x03\x1a\x08&\n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03\
    \x1a)*\n\x0b\n\x04\x05\x02\x02\x03\x12\x03\x1b\x08(\n\x0c\n\x05\x05\x02\
    \x02\x03\x01\x12\x03\x1b\x08#\n\x0c\n\x05\x05\x02\x02\x03\x02\x12\x03\
    \x1b&'\n\x0b\n\x04\x05\x02\x02\x04\x12\x03\x1c\x08*\n\x0c\n\x05\x05\x02\
    \x02\x04\x01\x12\x03\x1c\x08%\n\x0c\n\x05\x05\x02\x02\x04\x02\x12\x03\
    \x1c()\n\x0b\n\x04\x05\x02\x02\x05\x12\x03\x1d\x08*\n\x0c\n\x05\x05\x02\
    \x02\x05\x01\x12\x03\x1d\x08%\n\x0c\n\x05\x05\x02\x02\x05\x02\x12\x03\
    \x1d()\n\x0b\n\x04\x05\x02\x02\x06\x12\x03\x1e\x08(\n\x0c\n\x05\x05\x02\
    \x02\x06\x01\x12\x03\x1e\x08#\n\x0c\n\x05\x05\x02\x02\x06\x02\x12\x03\
    \x1e&'\n\x0b\n\x04\x05\x02\x02\x07\x12\x03\x1f\x08-\n\x0c\n\x05\x05\x02\
    \x02\x07\x01\x12\x03\x1f\x08(\n\x0c\n\x05\x05\x02\x02\x07\x02\x12\x03\
    \x1f+,\n\x0b\n\x04\x05\x02\x02\x08\x12\x03\x20\x08+\n\x0c\n\x05\x05\x02\
    \x02\x08\x01\x12\x03\x20\x08&\n\x0c\n\x05\x05\x02\x02\x08\x02\x12\x03\
    \x20)*\n\x0b\n\x04\x05\x02\x02\t\x12\x03!\x08(\n\x0c\n\x05\x05\x02\x02\t\
    \x01\x12\x03!\x08#\n\x0c\n\x05\x05\x02\x02\t\x02\x12\x03!&'\n\x0b\n\x04\
    \x05\x02\x02\n\x12\x03\"\x08+\n\x0c\n\x05\x05\x02\x02\n\x01\x12\x03\"\
    \x08%\n\x0c\n\x05\x05\x02\x02\n\x02\x12\x03\"(*\n\x0b\n\x04\x05\x02\x02\
    \x0b\x12\x03#\x08+\n\x0c\n\x05\x05\x02\x02\x0b\x01\x12\x03#\x08%\n\x0c\n\
    \x05\x05\x02\x02\x0b\x02\x12\x03#(*\n\x0b\n\x04\x05\x02\x02\x0c\x12\x03$\
    \x08'\n\x0c\n\x05\x05\x02\x02\x0c\x01\x12\x03$\x08!\n\x0c\n\x05\x05\x02\
    \x02\x0c\x02\x12\x03$$&\n\x0b\n\x04\x05\x02\x02\r\x12\x03%\x08'\n\x0c\n\
    \x05\x05\x02\x02\r\x01\x12\x03%\x08!\n\x0c\n\x05\x05\x02\x02\r\x02\x12\
    \x03%$&\n\x0b\n\x04\x05\x02\x02\x0e\x12\x03&\x08)\n\x0c\n\x05\x05\x02\
    \x02\x0e\x01\x12\x03&\x08#\n\x0c\n\x05\x05\x02\x02\x0e\x02\x12\x03&&(\n\
    \x0b\n\x04\x05\x02\x02\x0f\x12\x03'\x08)\n\x0c\n\x05\x05\x02\x02\x0f\x01\
    \x12\x03'\x08#\n\x0c\n\x05\x05\x02\x02\x0f\x02\x12\x03'&(\n\x0b\n\x04\
    \x05\x02\x02\x10\x12\x03(\x08+\n\x0c\n\x05\x05\x02\x02\x10\x01\x12\x03(\
    \x08%\n\x0c\n\x05\x05\x02\x02\x10\x02\x12\x03((*\n\x0b\n\x04\x05\x02\x02\
    \x11\x12\x03)\x08'\n\x0c\n\x05\x05\x02\x02\x11\x01\x12\x03)\x08!\n\x0c\n\
    \x05\x05\x02\x02\x11\x02\x12\x03)$&\n\x0b\n\x04\x05\x02\x02\x12\x12\x03*\
    \x08.\n\x0c\n\x05\x05\x02\x02\x12\x01\x12\x03*\x08(\n\x0c\n\x05\x05\x02\
    \x02\x12\x02\x12\x03*+-\n\x0b\n\x04\x05\x02\x02\x13\x12\x03+\x08'\n\x0c\
    \n\x05\x05\x02\x02\x13\x01\x12\x03+\x08!\n\x0c\n\x05\x05\x02\x02\x13\x02\
    \x12\x03+$&\n\x0b\n\x04\x05\x02\x02\x14\x12\x03,\x08.\n\x0c\n\x05\x05\
    \x02\x02\x14\x01\x12\x03,\x08(\n\x0c\n\x05\x05\x02\x02\x14\x02\x12\x03,+\
    -\n\x0b\n\x04\x05\x02\x02\x15\x12\x03-\x08\"\n\x0c\n\x05\x05\x02\x02\x15\
    \x01\x12\x03-\x08\x1c\n\x0c\n\x05\x05\x02\x02\x15\x02\x12\x03-\x1f!\n\
    \x0b\n\x04\x05\x02\x02\x16\x12\x03.\x08#\n\x0c\n\x05\x05\x02\x02\x16\x01\
    \x12\x03.\x08\x1d\n\x0c\n\x05\x05\x02\x02\x16\x02\x12\x03.\x20\"\n\x0b\n\
    \x04\x05\x02\x02\x17\x12\x03/\x08%\n\x0c\n\x05\x05\x02\x02\x17\x01\x12\
    \x03/\x08\x1f\n\x0c\n\x05\x05\x02\x02\x17\x02\x12\x03/\"$\n\x0b\n\x04\
    \x05\x02\x02\x18\x12\x030\x08#\n\x0c\n\x05\x05\x02\x02\x18\x01\x12\x030\
    \x08\x1d\n\x0c\n\x05\x05\x02\x02\x18\x02\x12\x030\x20\"\n\x0b\n\x04\x05\
    \x02\x02\x19\x12\x031\x083\n\x0c\n\x05\x05\x02\x02\x19\x01\x12\x031\x08-\
    \n\x0c\n\x05\x05\x02\x02\x19\x02\x12\x03102\n\x0b\n\x04\x05\x02\x02\x1a\
    \x12\x032\x08'\n\x0c\n\x05\x05\x02\x02\x1a\x01\x12\x032\x08!\n\x0c\n\x05\
    \x05\x02\x02\x1a\x02\x12\x032$&\n\x0b\n\x04\x05\x02\x02\x1b\x12\x033\x08\
    *\n\x0c\n\x05\x05\x02\x02\x1b\x01\x12\x033\x08$\n\x0c\n\x05\x05\x02\x02\
    \x1b\x02\x12\x033')\n\x0b\n\x04\x05\x02\x02\x1c\x12\x034\x08/\n\x0c\n\
    \x05\x05\x02\x02\x1c\x01\x12\x034\x08)\n\x0c\n\x05\x05\x02\x02\x1c\x02\
    \x12\x034,.\n\x0b\n\x04\x05\x02\x02\x1d\x12\x035\x08$\n\x0c\n\x05\x05\
    \x02\x02\x1d\x01\x12\x035\x08\x1e\n\x0c\n\x05\x05\x02\x02\x1d\x02\x12\
    \x035!#\n\x0b\n\x04\x05\x02\x02\x1e\x12\x036\x084\n\x0c\n\x05\x05\x02\
    \x02\x1e\x01\x12\x036\x08.\n\x0c\n\x05\x05\x02\x02\x1e\x02\x12\x03613\n\
    \x0b\n\x04\x05\x02\x02\x1f\x12\x037\x08#\n\x0c\n\x05\x05\x02\x02\x1f\x01\
    \x12\x037\x08\x1d\n\x0c\n\x05\x05\x02\x02\x1f\x02\x12\x037\x20\"\n\x0b\n\
    \x04\x05\x02\x02\x20\x12\x038\x083\n\x0c\n\x05\x05\x02\x02\x20\x01\x12\
    \x038\x08-\n\x0c\n\x05\x05\x02\x02\x20\x02\x12\x03802\n\x0b\n\x04\x05\
    \x02\x02!\x12\x039\x08&\n\x0c\n\x05\x05\x02\x02!\x01\x12\x039\x08\x20\n\
    \x0c\n\x05\x05\x02\x02!\x02\x12\x039#%\n\x0b\n\x04\x05\x02\x02\"\x12\x03\
    :\x084\n\x0c\n\x05\x05\x02\x02\"\x01\x12\x03:\x08.\n\x0c\n\x05\x05\x02\
    \x02\"\x02\x12\x03:13\n\x0b\n\x04\x05\x02\x02#\x12\x03;\x08.\n\x0c\n\x05\
    \x05\x02\x02#\x01\x12\x03;\x08(\n\x0c\n\x05\x05\x02\x02#\x02\x12\x03;+-\
    \n\x0b\n\x04\x05\x02\x02$\x12\x03<\x08<\n\x0c\n\x05\x05\x02\x02$\x01\x12\
    \x03<\x086\n\x0c\n\x05\x05\x02\x02$\x02\x12\x03<9;\n\x0b\n\x04\x05\x02\
    \x02%\x12\x03=\x083\n\x0c\n\x05\x05\x02\x02%\x01\x12\x03=\x08-\n\x0c\n\
    \x05\x05\x02\x02%\x02\x12\x03=02\n\x0b\n\x04\x05\x02\x02&\x12\x03>\x08?\
    \n\x0c\n\x05\x05\x02\x02&\x01\x12\x03>\x089\n\x0c\n\x05\x05\x02\x02&\x02\
    \x12\x03><>\n\x0b\n\x04\x05\x02\x02'\x12\x03?\x08+\n\x0c\n\x05\x05\x02\
    \x02'\x01\x12\x03?\x08%\n\x0c\n\x05\x05\x02\x02'\x02\x12\x03?(*\n\n\n\
    \x02\x05\x03\x12\x04B\0F\x01\n\n\n\x03\x05\x03\x01\x12\x03B\x05#\n\x0b\n\
    \x04\x05\x03\x02\0\x12\x03C\x08-\n\x0c\n\x05\x05\x03\x02\0\x01\x12\x03C\
    \x08(\n\x0c\n\x05\x05\x03\x02\0\x02\x12\x03C+,\n\x0b\n\x04\x05\x03\x02\
    \x01\x12\x03D\x08*\n\x0c\n\x05\x05\x03\x02\x01\x01\x12\x03D\x08%\n\x0c\n\
    \x05\x05\x03\x02\x01\x02\x12\x03D()\n\x0b\n\x04\x05\x03\x02\x02\x12\x03E\
    \x08-\n\x0c\n\x05\x05\x03\x02\x02\x01\x12\x03E\x08(\n\x0c\n\x05\x05\x03\
    \x02\x02\x02\x12\x03E+,\n\n\n\x02\x04\0\x12\x04H\0O\x01\n\n\n\x03\x04\0\
    \x01\x12\x03H\x08\x1d\n\x0b\n\x04\x04\0\x02\0\x12\x03I\x08\x1d\n\x0c\n\
    \x05\x04\0\x02\0\x04\x12\x03I\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03I\x11\x16\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03I\x17\x18\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03I\x1b\x1c\n\x0b\n\x04\x04\0\x02\x01\x12\x03J\x08\
    \x1d\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03J\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03J\x11\x16\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03J\x17\
    \x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03J\x1b\x1c\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03K\x08\"\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03K\x08\x10\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03K\x11\x16\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03K\x17\x1d\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03K\x20!\n\x0b\
    \n\x04\x04\0\x02\x03\x12\x03L\x08&\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\
    L\x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03L\x11\x15\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03L\x16!\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03L$%\n\
    \x0b\n\x04\x04\0\x02\x04\x12\x03M\x08!\n\x0c\n\x05\x04\0\x02\x04\x04\x12\
    \x03M\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03M\x11\x17\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03M\x18\x1c\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03M\x1f\x20\n\x0b\n\x04\x04\0\x02\x05\x12\x03N\x08-\n\x0c\n\x05\x04\0\
    \x02\x05\x04\x12\x03N\x08\x10\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03N\x11\
    \x1c\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03N\x1d(\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03N+,\n\n\n\x02\x04\x01\x12\x04Q\0U\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03Q\x08\x1a\n\x0b\n\x04\x04\x01\x02\0\x12\x03R\x08\x1d\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03R\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03R\x11\x16\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03R\x17\x18\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03R\x1b\x1c\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03S\x08\x1d\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03S\x08\x10\n\x0c\n\
    \x05\x04\x01\x02\x01\x05\x12\x03S\x11\x16\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03S\x17\x18\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03S\x1b\x1c\n\
    \x0b\n\x04\x04\x01\x02\x02\x12\x03T\x08+\n\x0c\n\x05\x04\x01\x02\x02\x04\
    \x12\x03T\x08\x10\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03T\x11\x16\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03T\x17&\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03T)*\n\n\n\x02\x04\x02\x12\x04W\0[\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03W\x08\x18\n\x0b\n\x04\x04\x02\x02\0\x12\x03X\x08\x1d\n\x0c\n\x05\x04\
    \x02\x02\0\x04\x12\x03X\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03X\
    \x11\x16\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03X\x17\x18\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03X\x1b\x1c\n\x0b\n\x04\x04\x02\x02\x01\x12\x03Y\x08\
    \x1d\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03Y\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03Y\x11\x16\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03Y\x17\x18\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03Y\x1b\x1c\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03Z\x08\"\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\
    \x03Z\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03Z\x11\x15\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03Z\x16\x1d\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03Z\x20!\n\n\n\x02\x04\x03\x12\x04]\0c\x01\n\n\n\x03\x04\x03\
    \x01\x12\x03]\x08\x1a\n\x0b\n\x04\x04\x03\x02\0\x12\x03^\x08\x1d\n\x0c\n\
    \x05\x04\x03\x02\0\x04\x12\x03^\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03^\x11\x16\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03^\x17\x18\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03^\x1b\x1c\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03_\x08\x1d\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03_\x08\x10\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03_\x11\x16\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03_\x17\x18\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03_\x1b\x1c\n\
    \x0b\n\x04\x04\x03\x02\x02\x12\x03`\x08\x1d\n\x0c\n\x05\x04\x03\x02\x02\
    \x04\x12\x03`\x08\x10\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03`\x11\x16\n\
    \x0c\n\x05\x04\x03\x02\x02\x01\x12\x03`\x17\x18\n\x0c\n\x05\x04\x03\x02\
    \x02\x03\x12\x03`\x1b\x1c\n\x0b\n\x04\x04\x03\x02\x03\x12\x03a\x08\"\n\
    \x0c\n\x05\x04\x03\x02\x03\x04\x12\x03a\x08\x10\n\x0c\n\x05\x04\x03\x02\
    \x03\x05\x12\x03a\x11\x15\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03a\x16\
    \x1d\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03a\x20!\n\x0b\n\x04\x04\x03\
    \x02\x04\x12\x03b\x08\x1e\n\x0c\n\x05\x04\x03\x02\x04\x04\x12\x03b\x08\
    \x10\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03b\x11\x15\n\x0c\n\x05\x04\
    \x03\x02\x04\x01\x12\x03b\x16\x19\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\
    \x03b\x1c\x1d\n\n\n\x02\x04\x04\x12\x04e\0m\x01\n\n\n\x03\x04\x04\x01\
    \x12\x03e\x08\x1e\n\x0b\n\x04\x04\x04\x02\0\x12\x03f\x08/\n\x0c\n\x05\
    \x04\x04\x02\0\x04\x12\x03f\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x06\x12\
    \x03f\x11$\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03f%*\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03f-.\n\x0b\n\x04\x04\x04\x02\x01\x12\x03g\x08)\n\x0c\n\
    \x05\x04\x04\x02\x01\x04\x12\x03g\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03g\x11\x17\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03g\x18$\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03g'(\n\x0b\n\x04\x04\x04\x02\x02\
    \x12\x03h\x08'\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03h\x08\x10\n\x0c\n\
    \x05\x04\x04\x02\x02\x05\x12\x03h\x11\x16\n\x0c\n\x05\x04\x04\x02\x02\
    \x01\x12\x03h\x17\"\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03h%&\n\x0b\n\
    \x04\x04\x04\x02\x03\x12\x03i\x08,\n\x0c\n\x05\x04\x04\x02\x03\x04\x12\
    \x03i\x08\x10\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03i\x11\x16\n\x0c\n\
    \x05\x04\x04\x02\x03\x01\x12\x03i\x17'\n\x0c\n\x05\x04\x04\x02\x03\x03\
    \x12\x03i*+\n\x0b\n\x04\x04\x04\x02\x04\x12\x03j\x08$\n\x0c\n\x05\x04\
    \x04\x02\x04\x04\x12\x03j\x08\x10\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\
    \x03j\x11\x16\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03j\x17\x1f\n\x0c\n\
    \x05\x04\x04\x02\x04\x03\x12\x03j\"#\n\x0b\n\x04\x04\x04\x02\x05\x12\x03\
    k\x08#\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\x03k\x08\x10\n\x0c\n\x05\x04\
    \x04\x02\x05\x05\x12\x03k\x11\x15\n\x0c\n\x05\x04\x04\x02\x05\x01\x12\
    \x03k\x16\x1e\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03k!\"\n\x0b\n\x04\
    \x04\x04\x02\x06\x12\x03l\x08'\n\x0c\n\x05\x04\x04\x02\x06\x04\x12\x03l\
    \x08\x10\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\x03l\x11\x17\n\x0c\n\x05\
    \x04\x04\x02\x06\x01\x12\x03l\x18\"\n\x0c\n\x05\x04\x04\x02\x06\x03\x12\
    \x03l%&\n\n\n\x02\x04\x05\x12\x04o\0q\x01\n\n\n\x03\x04\x05\x01\x12\x03o\
    \x08%\n\x0b\n\x04\x04\x05\x02\0\x12\x03p\x08&\n\x0c\n\x05\x04\x05\x02\0\
    \x04\x12\x03p\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03p\x11\x16\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03p\x17!\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03p$%\n\n\n\x02\x04\x06\x12\x04s\0w\x01\n\n\n\x03\x04\x06\x01\x12\
    \x03s\x08\x1d\n\x0b\n\x04\x04\x06\x02\0\x12\x03t\x08\x1e\n\x0c\n\x05\x04\
    \x06\x02\0\x04\x12\x03t\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03t\
    \x11\x17\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03t\x18\x19\n\x0c\n\x05\x04\
    \x06\x02\0\x03\x12\x03t\x1c\x1d\n\x0b\n\x04\x04\x06\x02\x01\x12\x03u\x08\
    \x1e\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03u\x08\x10\n\x0c\n\x05\x04\
    \x06\x02\x01\x05\x12\x03u\x11\x17\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\
    \x03u\x18\x19\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03u\x1c\x1d\n\x0b\n\
    \x04\x04\x06\x02\x02\x12\x03v\x08$\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\
    \x03v\x08\x10\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03v\x11\x17\n\x0c\n\
    \x05\x04\x06\x02\x02\x01\x12\x03v\x18\x1f\n\x0c\n\x05\x04\x06\x02\x02\
    \x03\x12\x03v\"#\n\x0b\n\x02\x04\x07\x12\x05y\0\x81\x01\x01\n\n\n\x03\
    \x04\x07\x01\x12\x03y\x08\x1a\n\x0b\n\x04\x04\x07\x02\0\x12\x03z\x080\n\
    \x0c\n\x05\x04\x07\x02\0\x04\x12\x03z\x08\x10\n\x0c\n\x05\x04\x07\x02\0\
    \x06\x12\x03z\x11\x20\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03z!+\n\x0c\n\
    \x05\x04\x07\x02\0\x03\x12\x03z./\n\x0b\n\x04\x04\x07\x02\x01\x12\x03{\
    \x08!\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03{\x08\x10\n\x0c\n\x05\x04\
    \x07\x02\x01\x05\x12\x03{\x11\x16\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\
    \x03{\x17\x1c\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03{\x1f\x20\n\x0b\n\
    \x04\x04\x07\x02\x02\x12\x03|\x08(\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\
    \x03|\x08\x10\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x03|\x11\x16\n\x0c\n\
    \x05\x04\x07\x02\x02\x01\x12\x03|\x17#\n\x0c\n\x05\x04\x07\x02\x02\x03\
    \x12\x03|&'\n\x0b\n\x04\x04\x07\x02\x03\x12\x03}\x08)\n\x0c\n\x05\x04\
    \x07\x02\x03\x04\x12\x03}\x08\x10\n\x0c\n\x05\x04\x07\x02\x03\x05\x12\
    \x03}\x11\x16\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\x03}\x17$\n\x0c\n\x05\
    \x04\x07\x02\x03\x03\x12\x03}'(\n\x0b\n\x04\x04\x07\x02\x04\x12\x03~\x08\
    )\n\x0c\n\x05\x04\x07\x02\x04\x04\x12\x03~\x08\x10\n\x0c\n\x05\x04\x07\
    \x02\x04\x06\x12\x03~\x11\x1b\n\x0c\n\x05\x04\x07\x02\x04\x01\x12\x03~\
    \x1c$\n\x0c\n\x05\x04\x07\x02\x04\x03\x12\x03~'(\n\x0b\n\x04\x04\x07\x02\
    \x05\x12\x03\x7f\x08+\n\x0c\n\x05\x04\x07\x02\x05\x04\x12\x03\x7f\x08\
    \x10\n\x0c\n\x05\x04\x07\x02\x05\x05\x12\x03\x7f\x11\x16\n\x0c\n\x05\x04\
    \x07\x02\x05\x01\x12\x03\x7f\x17&\n\x0c\n\x05\x04\x07\x02\x05\x03\x12\
    \x03\x7f)*\n\x0c\n\x04\x04\x07\x02\x06\x12\x04\x80\x01\x08\"\n\r\n\x05\
    \x04\x07\x02\x06\x04\x12\x04\x80\x01\x08\x10\n\r\n\x05\x04\x07\x02\x06\
    \x05\x12\x04\x80\x01\x11\x17\n\r\n\x05\x04\x07\x02\x06\x01\x12\x04\x80\
    \x01\x18\x1d\n\r\n\x05\x04\x07\x02\x06\x03\x12\x04\x80\x01\x20!\n\x0c\n\
    \x02\x04\x08\x12\x06\x83\x01\0\x8c\x01\x01\n\x0b\n\x03\x04\x08\x01\x12\
    \x04\x83\x01\x08\x20\n\x0e\n\x04\x04\x08\x03\0\x12\x06\x84\x01\x08\x88\
    \x01\t\n\r\n\x05\x04\x08\x03\0\x01\x12\x04\x84\x01\x10\x1c\n\x0e\n\x06\
    \x04\x08\x03\0\x02\0\x12\x04\x85\x01\x10-\n\x0f\n\x07\x04\x08\x03\0\x02\
    \0\x04\x12\x04\x85\x01\x10\x18\n\x0f\n\x07\x04\x08\x03\0\x02\0\x05\x12\
    \x04\x85\x01\x19\x1f\n\x0f\n\x07\x04\x08\x03\0\x02\0\x01\x12\x04\x85\x01\
    \x20(\n\x0f\n\x07\x04\x08\x03\0\x02\0\x03\x12\x04\x85\x01+,\n\x0e\n\x06\
    \x04\x08\x03\0\x02\x01\x12\x04\x86\x01\x104\n\x0f\n\x07\x04\x08\x03\0\
    \x02\x01\x04\x12\x04\x86\x01\x10\x18\n\x0f\n\x07\x04\x08\x03\0\x02\x01\
    \x05\x12\x04\x86\x01\x19\x1d\n\x0f\n\x07\x04\x08\x03\0\x02\x01\x01\x12\
    \x04\x86\x01\x1e/\n\x0f\n\x07\x04\x08\x03\0\x02\x01\x03\x12\x04\x86\x012\
    3\n\x0e\n\x06\x04\x08\x03\0\x02\x02\x12\x04\x87\x01\x100\n\x0f\n\x07\x04\
    \x08\x03\0\x02\x02\x04\x12\x04\x87\x01\x10\x18\n\x0f\n\x07\x04\x08\x03\0\
    \x02\x02\x05\x12\x04\x87\x01\x19\x1d\n\x0f\n\x07\x04\x08\x03\0\x02\x02\
    \x01\x12\x04\x87\x01\x1e+\n\x0f\n\x07\x04\x08\x03\0\x02\x02\x03\x12\x04\
    \x87\x01./\n\x0c\n\x04\x04\x08\x02\0\x12\x04\x8a\x01\x08F\n\r\n\x05\x04\
    \x08\x02\0\x04\x12\x04\x8a\x01\x08\x10\n\r\n\x05\x04\x08\x02\0\x06\x12\
    \x04\x8a\x01\x116\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\x8a\x017A\n\r\n\
    \x05\x04\x08\x02\0\x03\x12\x04\x8a\x01DE\n\x0c\n\x04\x04\x08\x02\x01\x12\
    \x04\x8b\x01\x08)\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04\x8b\x01\x08\x10\
    \n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\x8b\x01\x11\x16\n\r\n\x05\x04\x08\
    \x02\x01\x01\x12\x04\x8b\x01\x17$\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\
    \x8b\x01'(\n\x0c\n\x02\x04\t\x12\x06\x8e\x01\0\x91\x01\x01\n\x0b\n\x03\
    \x04\t\x01\x12\x04\x8e\x01\x08\x1d\n\x0c\n\x04\x04\t\x02\0\x12\x04\x8f\
    \x01\x08,\n\r\n\x05\x04\t\x02\0\x04\x12\x04\x8f\x01\x08\x10\n\r\n\x05\
    \x04\t\x02\0\x05\x12\x04\x8f\x01\x11\x17\n\r\n\x05\x04\t\x02\0\x01\x12\
    \x04\x8f\x01\x18'\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x8f\x01*+\n\x0c\n\
    \x04\x04\t\x02\x01\x12\x04\x90\x01\x08(\n\r\n\x05\x04\t\x02\x01\x04\x12\
    \x04\x90\x01\x08\x10\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\x90\x01\x11\x17\
    \n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x90\x01\x18#\n\r\n\x05\x04\t\x02\
    \x01\x03\x12\x04\x90\x01&'\n\x0c\n\x02\x04\n\x12\x06\x93\x01\0\x95\x01\
    \x01\n\x0b\n\x03\x04\n\x01\x12\x04\x93\x01\x08\x20\n\x0c\n\x04\x04\n\x02\
    \0\x12\x04\x94\x01\x08\x20\n\r\n\x05\x04\n\x02\0\x04\x12\x04\x94\x01\x08\
    \x10\n\r\n\x05\x04\n\x02\0\x05\x12\x04\x94\x01\x11\x16\n\r\n\x05\x04\n\
    \x02\0\x01\x12\x04\x94\x01\x17\x1b\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x94\
    \x01\x1e\x1f\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::networkbasetypes::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(CDOTAMsg_LocationPing::generated_message_descriptor_data());
            messages.push(CDOTAMsg_ItemAlert::generated_message_descriptor_data());
            messages.push(CDOTAMsg_MapLine::generated_message_descriptor_data());
            messages.push(CDOTAMsg_WorldLine::generated_message_descriptor_data());
            messages.push(CDOTAMsg_SendStatPopup::generated_message_descriptor_data());
            messages.push(CDOTAMsg_DismissAllStatPopups::generated_message_descriptor_data());
            messages.push(CDOTAMsg_CoachHUDPing::generated_message_descriptor_data());
            messages.push(CDOTAMsg_UnitOrder::generated_message_descriptor_data());
            messages.push(VersusScene_PlayActivity::generated_message_descriptor_data());
            messages.push(VersusScene_ChatWheel::generated_message_descriptor_data());
            messages.push(VersusScene_PlaybackRate::generated_message_descriptor_data());
            messages.push(versus_scene_play_activity::ActivityInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(EPingSource::generated_enum_descriptor_data());
            enums.push(EDOTAStatPopupTypes::generated_enum_descriptor_data());
            enums.push(Dotaunitorder_t::generated_enum_descriptor_data());
            enums.push(EDOTAVersusScenePlayerBehavior::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
