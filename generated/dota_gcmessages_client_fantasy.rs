// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_fantasy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CMsgDOTAPlayerInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPlayerInfo {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.country_code)
    pub country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.fantasy_role)
    pub fantasy_role: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_shared_enums::Fantasy_Roles>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.team_name)
    pub team_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.team_tag)
    pub team_tag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.sponsor)
    pub sponsor: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.is_locked)
    pub is_locked: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.is_pro)
    pub is_pro: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.real_name)
    pub real_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.total_earnings)
    pub total_earnings: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.results)
    pub results: ::std::vec::Vec<cmsg_dotaplayer_info::Results>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.team_url_logo)
    pub team_url_logo: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.audit_entries)
    pub audit_entries: ::std::vec::Vec<cmsg_dotaplayer_info::AuditEntry>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.team_abbreviation)
    pub team_abbreviation: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAPlayerInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPlayerInfo {
    fn default() -> &'a CMsgDOTAPlayerInfo {
        <CMsgDOTAPlayerInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPlayerInfo {
    pub fn new() -> CMsgDOTAPlayerInfo {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string country_code = 3;

    pub fn country_code(&self) -> &str {
        match self.country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country_code(&mut self) {
        self.country_code = ::std::option::Option::None;
    }

    pub fn has_country_code(&self) -> bool {
        self.country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        if self.country_code.is_none() {
            self.country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .dota.Fantasy_Roles fantasy_role = 4;

    pub fn fantasy_role(&self) -> super::dota_shared_enums::Fantasy_Roles {
        match self.fantasy_role {
            Some(e) => e.enum_value_or(super::dota_shared_enums::Fantasy_Roles::FANTASY_ROLE_UNDEFINED),
            None => super::dota_shared_enums::Fantasy_Roles::FANTASY_ROLE_UNDEFINED,
        }
    }

    pub fn clear_fantasy_role(&mut self) {
        self.fantasy_role = ::std::option::Option::None;
    }

    pub fn has_fantasy_role(&self) -> bool {
        self.fantasy_role.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_role(&mut self, v: super::dota_shared_enums::Fantasy_Roles) {
        self.fantasy_role = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 team_id = 5;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional string team_name = 6;

    pub fn team_name(&self) -> &str {
        match self.team_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name(&mut self) {
        self.team_name = ::std::option::Option::None;
    }

    pub fn has_team_name(&self) -> bool {
        self.team_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name(&mut self, v: ::std::string::String) {
        self.team_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
        if self.team_name.is_none() {
            self.team_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name(&mut self) -> ::std::string::String {
        self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string team_tag = 7;

    pub fn team_tag(&self) -> &str {
        match self.team_tag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_tag(&mut self) {
        self.team_tag = ::std::option::Option::None;
    }

    pub fn has_team_tag(&self) -> bool {
        self.team_tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_tag(&mut self, v: ::std::string::String) {
        self.team_tag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_tag(&mut self) -> &mut ::std::string::String {
        if self.team_tag.is_none() {
            self.team_tag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_tag(&mut self) -> ::std::string::String {
        self.team_tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string sponsor = 8;

    pub fn sponsor(&self) -> &str {
        match self.sponsor.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sponsor(&mut self) {
        self.sponsor = ::std::option::Option::None;
    }

    pub fn has_sponsor(&self) -> bool {
        self.sponsor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sponsor(&mut self, v: ::std::string::String) {
        self.sponsor = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sponsor(&mut self) -> &mut ::std::string::String {
        if self.sponsor.is_none() {
            self.sponsor = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sponsor.as_mut().unwrap()
    }

    // Take field
    pub fn take_sponsor(&mut self) -> ::std::string::String {
        self.sponsor.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_locked = 9;

    pub fn is_locked(&self) -> bool {
        self.is_locked.unwrap_or(false)
    }

    pub fn clear_is_locked(&mut self) {
        self.is_locked = ::std::option::Option::None;
    }

    pub fn has_is_locked(&self) -> bool {
        self.is_locked.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_locked(&mut self, v: bool) {
        self.is_locked = ::std::option::Option::Some(v);
    }

    // optional bool is_pro = 10;

    pub fn is_pro(&self) -> bool {
        self.is_pro.unwrap_or(false)
    }

    pub fn clear_is_pro(&mut self) {
        self.is_pro = ::std::option::Option::None;
    }

    pub fn has_is_pro(&self) -> bool {
        self.is_pro.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_pro(&mut self, v: bool) {
        self.is_pro = ::std::option::Option::Some(v);
    }

    // optional string real_name = 11;

    pub fn real_name(&self) -> &str {
        match self.real_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_real_name(&mut self) {
        self.real_name = ::std::option::Option::None;
    }

    pub fn has_real_name(&self) -> bool {
        self.real_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_real_name(&mut self, v: ::std::string::String) {
        self.real_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_real_name(&mut self) -> &mut ::std::string::String {
        if self.real_name.is_none() {
            self.real_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.real_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_real_name(&mut self) -> ::std::string::String {
        self.real_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 total_earnings = 13;

    pub fn total_earnings(&self) -> u32 {
        self.total_earnings.unwrap_or(0)
    }

    pub fn clear_total_earnings(&mut self) {
        self.total_earnings = ::std::option::Option::None;
    }

    pub fn has_total_earnings(&self) -> bool {
        self.total_earnings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_earnings(&mut self, v: u32) {
        self.total_earnings = ::std::option::Option::Some(v);
    }

    // optional string team_url_logo = 15;

    pub fn team_url_logo(&self) -> &str {
        match self.team_url_logo.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_url_logo(&mut self) {
        self.team_url_logo = ::std::option::Option::None;
    }

    pub fn has_team_url_logo(&self) -> bool {
        self.team_url_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_url_logo(&mut self, v: ::std::string::String) {
        self.team_url_logo = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_url_logo(&mut self) -> &mut ::std::string::String {
        if self.team_url_logo.is_none() {
            self.team_url_logo = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_url_logo.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_url_logo(&mut self) -> ::std::string::String {
        self.team_url_logo.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string team_abbreviation = 17;

    pub fn team_abbreviation(&self) -> &str {
        match self.team_abbreviation.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_abbreviation(&mut self) {
        self.team_abbreviation = ::std::option::Option::None;
    }

    pub fn has_team_abbreviation(&self) -> bool {
        self.team_abbreviation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_abbreviation(&mut self, v: ::std::string::String) {
        self.team_abbreviation = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_abbreviation(&mut self) -> &mut ::std::string::String {
        if self.team_abbreviation.is_none() {
            self.team_abbreviation = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_abbreviation.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_abbreviation(&mut self) -> ::std::string::String {
        self.team_abbreviation.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CMsgDOTAPlayerInfo| { &m.account_id },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &CMsgDOTAPlayerInfo| { &m.name },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "country_code",
            |m: &CMsgDOTAPlayerInfo| { &m.country_code },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fantasy_role",
            |m: &CMsgDOTAPlayerInfo| { &m.fantasy_role },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.fantasy_role },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CMsgDOTAPlayerInfo| { &m.team_id },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.team_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_name",
            |m: &CMsgDOTAPlayerInfo| { &m.team_name },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.team_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_tag",
            |m: &CMsgDOTAPlayerInfo| { &m.team_tag },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.team_tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sponsor",
            |m: &CMsgDOTAPlayerInfo| { &m.sponsor },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.sponsor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_locked",
            |m: &CMsgDOTAPlayerInfo| { &m.is_locked },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.is_locked },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_pro",
            |m: &CMsgDOTAPlayerInfo| { &m.is_pro },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.is_pro },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "real_name",
            |m: &CMsgDOTAPlayerInfo| { &m.real_name },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.real_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "total_earnings",
            |m: &CMsgDOTAPlayerInfo| { &m.total_earnings },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.total_earnings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "results",
            |m: &CMsgDOTAPlayerInfo| { &m.results },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.results },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_url_logo",
            |m: &CMsgDOTAPlayerInfo| { &m.team_url_logo },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.team_url_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audit_entries",
            |m: &CMsgDOTAPlayerInfo| { &m.audit_entries },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.audit_entries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_abbreviation",
            |m: &CMsgDOTAPlayerInfo| { &m.team_abbreviation },
            |m: &mut CMsgDOTAPlayerInfo| { &mut m.team_abbreviation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAPlayerInfo>(
            "CMsgDOTAPlayerInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAPlayerInfo {
    const NAME: &'static str = "CMsgDOTAPlayerInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.country_code = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.fantasy_role = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    self.team_name = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.team_tag = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.sponsor = ::std::option::Option::Some(is.read_string()?);
                },
                72 => {
                    self.is_locked = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.is_pro = ::std::option::Option::Some(is.read_bool()?);
                },
                90 => {
                    self.real_name = ::std::option::Option::Some(is.read_string()?);
                },
                104 => {
                    self.total_earnings = ::std::option::Option::Some(is.read_uint32()?);
                },
                114 => {
                    self.results.push(is.read_message()?);
                },
                122 => {
                    self.team_url_logo = ::std::option::Option::Some(is.read_string()?);
                },
                130 => {
                    self.audit_entries.push(is.read_message()?);
                },
                138 => {
                    self.team_abbreviation = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.country_code.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.fantasy_role {
            my_size += ::protobuf::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.team_name.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.team_tag.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.sponsor.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.is_locked {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_pro {
            my_size += 1 + 1;
        }
        if let Some(v) = self.real_name.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.total_earnings {
            my_size += ::protobuf::rt::uint32_size(13, v);
        }
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_url_logo.as_ref() {
            my_size += ::protobuf::rt::string_size(15, &v);
        }
        for value in &self.audit_entries {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_abbreviation.as_ref() {
            my_size += ::protobuf::rt::string_size(17, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.country_code.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.fantasy_role {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.team_name.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.team_tag.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.sponsor.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.is_locked {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.is_pro {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.real_name.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.total_earnings {
            os.write_uint32(13, v)?;
        }
        for v in &self.results {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        if let Some(v) = self.team_url_logo.as_ref() {
            os.write_string(15, v)?;
        }
        for v in &self.audit_entries {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        };
        if let Some(v) = self.team_abbreviation.as_ref() {
            os.write_string(17, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPlayerInfo {
        CMsgDOTAPlayerInfo::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.country_code = ::std::option::Option::None;
        self.fantasy_role = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.team_name = ::std::option::Option::None;
        self.team_tag = ::std::option::Option::None;
        self.sponsor = ::std::option::Option::None;
        self.is_locked = ::std::option::Option::None;
        self.is_pro = ::std::option::Option::None;
        self.real_name = ::std::option::Option::None;
        self.total_earnings = ::std::option::Option::None;
        self.results.clear();
        self.team_url_logo = ::std::option::Option::None;
        self.audit_entries.clear();
        self.team_abbreviation = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPlayerInfo {
        static instance: CMsgDOTAPlayerInfo = CMsgDOTAPlayerInfo {
            account_id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            country_code: ::std::option::Option::None,
            fantasy_role: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            team_name: ::std::option::Option::None,
            team_tag: ::std::option::Option::None,
            sponsor: ::std::option::Option::None,
            is_locked: ::std::option::Option::None,
            is_pro: ::std::option::Option::None,
            real_name: ::std::option::Option::None,
            total_earnings: ::std::option::Option::None,
            results: ::std::vec::Vec::new(),
            team_url_logo: ::std::option::Option::None,
            audit_entries: ::std::vec::Vec::new(),
            team_abbreviation: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAPlayerInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAPlayerInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAPlayerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAPlayerInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTAPlayerInfo`
pub mod cmsg_dotaplayer_info {
    // @@protoc_insertion_point(message:dota.CMsgDOTAPlayerInfo.Results)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Results {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.Results.league_id)
        pub league_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.Results.placement)
        pub placement: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.Results.earnings)
        pub earnings: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAPlayerInfo.Results.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Results {
        fn default() -> &'a Results {
            <Results as ::protobuf::Message>::default_instance()
        }
    }

    impl Results {
        pub fn new() -> Results {
            ::std::default::Default::default()
        }

        // optional uint32 league_id = 1;

        pub fn league_id(&self) -> u32 {
            self.league_id.unwrap_or(0)
        }

        pub fn clear_league_id(&mut self) {
            self.league_id = ::std::option::Option::None;
        }

        pub fn has_league_id(&self) -> bool {
            self.league_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_id(&mut self, v: u32) {
            self.league_id = ::std::option::Option::Some(v);
        }

        // optional uint32 placement = 2;

        pub fn placement(&self) -> u32 {
            self.placement.unwrap_or(0)
        }

        pub fn clear_placement(&mut self) {
            self.placement = ::std::option::Option::None;
        }

        pub fn has_placement(&self) -> bool {
            self.placement.is_some()
        }

        // Param is passed by value, moved
        pub fn set_placement(&mut self, v: u32) {
            self.placement = ::std::option::Option::Some(v);
        }

        // optional uint32 earnings = 3;

        pub fn earnings(&self) -> u32 {
            self.earnings.unwrap_or(0)
        }

        pub fn clear_earnings(&mut self) {
            self.earnings = ::std::option::Option::None;
        }

        pub fn has_earnings(&self) -> bool {
            self.earnings.is_some()
        }

        // Param is passed by value, moved
        pub fn set_earnings(&mut self, v: u32) {
            self.earnings = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "league_id",
                |m: &Results| { &m.league_id },
                |m: &mut Results| { &mut m.league_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "placement",
                |m: &Results| { &m.placement },
                |m: &mut Results| { &mut m.placement },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "earnings",
                |m: &Results| { &m.earnings },
                |m: &mut Results| { &mut m.earnings },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Results>(
                "CMsgDOTAPlayerInfo.Results",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Results {
        const NAME: &'static str = "Results";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.placement = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.earnings = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.league_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.placement {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.earnings {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.league_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.placement {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.earnings {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Results {
            Results::new()
        }

        fn clear(&mut self) {
            self.league_id = ::std::option::Option::None;
            self.placement = ::std::option::Option::None;
            self.earnings = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Results {
            static instance: Results = Results {
                league_id: ::std::option::Option::None,
                placement: ::std::option::Option::None,
                earnings: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Results {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAPlayerInfo.Results").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Results {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Results {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTAPlayerInfo.AuditEntry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AuditEntry {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.AuditEntry.start_timestamp)
        pub start_timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.AuditEntry.end_timestamp)
        pub end_timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.AuditEntry.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.AuditEntry.team_name)
        pub team_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.AuditEntry.team_tag)
        pub team_tag: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
        pub team_url_logo: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAPlayerInfo.AuditEntry.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AuditEntry {
        fn default() -> &'a AuditEntry {
            <AuditEntry as ::protobuf::Message>::default_instance()
        }
    }

    impl AuditEntry {
        pub fn new() -> AuditEntry {
            ::std::default::Default::default()
        }

        // optional uint32 start_timestamp = 1;

        pub fn start_timestamp(&self) -> u32 {
            self.start_timestamp.unwrap_or(0)
        }

        pub fn clear_start_timestamp(&mut self) {
            self.start_timestamp = ::std::option::Option::None;
        }

        pub fn has_start_timestamp(&self) -> bool {
            self.start_timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_start_timestamp(&mut self, v: u32) {
            self.start_timestamp = ::std::option::Option::Some(v);
        }

        // optional uint32 end_timestamp = 2;

        pub fn end_timestamp(&self) -> u32 {
            self.end_timestamp.unwrap_or(0)
        }

        pub fn clear_end_timestamp(&mut self) {
            self.end_timestamp = ::std::option::Option::None;
        }

        pub fn has_end_timestamp(&self) -> bool {
            self.end_timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_end_timestamp(&mut self, v: u32) {
            self.end_timestamp = ::std::option::Option::Some(v);
        }

        // optional uint32 team_id = 3;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional string team_name = 4;

        pub fn team_name(&self) -> &str {
            match self.team_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_name(&mut self) {
            self.team_name = ::std::option::Option::None;
        }

        pub fn has_team_name(&self) -> bool {
            self.team_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_name(&mut self, v: ::std::string::String) {
            self.team_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
            if self.team_name.is_none() {
                self.team_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_name(&mut self) -> ::std::string::String {
            self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string team_tag = 5;

        pub fn team_tag(&self) -> &str {
            match self.team_tag.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_tag(&mut self) {
            self.team_tag = ::std::option::Option::None;
        }

        pub fn has_team_tag(&self) -> bool {
            self.team_tag.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_tag(&mut self, v: ::std::string::String) {
            self.team_tag = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_tag(&mut self) -> &mut ::std::string::String {
            if self.team_tag.is_none() {
                self.team_tag = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_tag.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_tag(&mut self) -> ::std::string::String {
            self.team_tag.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string team_url_logo = 6;

        pub fn team_url_logo(&self) -> &str {
            match self.team_url_logo.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_url_logo(&mut self) {
            self.team_url_logo = ::std::option::Option::None;
        }

        pub fn has_team_url_logo(&self) -> bool {
            self.team_url_logo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_url_logo(&mut self, v: ::std::string::String) {
            self.team_url_logo = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_url_logo(&mut self) -> &mut ::std::string::String {
            if self.team_url_logo.is_none() {
                self.team_url_logo = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_url_logo.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_url_logo(&mut self) -> ::std::string::String {
            self.team_url_logo.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "start_timestamp",
                |m: &AuditEntry| { &m.start_timestamp },
                |m: &mut AuditEntry| { &mut m.start_timestamp },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "end_timestamp",
                |m: &AuditEntry| { &m.end_timestamp },
                |m: &mut AuditEntry| { &mut m.end_timestamp },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_id",
                |m: &AuditEntry| { &m.team_id },
                |m: &mut AuditEntry| { &mut m.team_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_name",
                |m: &AuditEntry| { &m.team_name },
                |m: &mut AuditEntry| { &mut m.team_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_tag",
                |m: &AuditEntry| { &m.team_tag },
                |m: &mut AuditEntry| { &mut m.team_tag },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_url_logo",
                |m: &AuditEntry| { &m.team_url_logo },
                |m: &mut AuditEntry| { &mut m.team_url_logo },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuditEntry>(
                "CMsgDOTAPlayerInfo.AuditEntry",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for AuditEntry {
        const NAME: &'static str = "AuditEntry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.start_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.end_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    34 => {
                        self.team_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.team_tag = ::std::option::Option::Some(is.read_string()?);
                    },
                    50 => {
                        self.team_url_logo = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.start_timestamp {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.end_timestamp {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.team_id {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.team_name.as_ref() {
                my_size += ::protobuf::rt::string_size(4, &v);
            }
            if let Some(v) = self.team_tag.as_ref() {
                my_size += ::protobuf::rt::string_size(5, &v);
            }
            if let Some(v) = self.team_url_logo.as_ref() {
                my_size += ::protobuf::rt::string_size(6, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.start_timestamp {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.end_timestamp {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.team_id {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.team_name.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.team_tag.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.team_url_logo.as_ref() {
                os.write_string(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AuditEntry {
            AuditEntry::new()
        }

        fn clear(&mut self) {
            self.start_timestamp = ::std::option::Option::None;
            self.end_timestamp = ::std::option::Option::None;
            self.team_id = ::std::option::Option::None;
            self.team_name = ::std::option::Option::None;
            self.team_tag = ::std::option::Option::None;
            self.team_url_logo = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AuditEntry {
            static instance: AuditEntry = AuditEntry {
                start_timestamp: ::std::option::Option::None,
                end_timestamp: ::std::option::Option::None,
                team_id: ::std::option::Option::None,
                team_name: ::std::option::Option::None,
                team_tag: ::std::option::Option::None,
                team_url_logo: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for AuditEntry {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAPlayerInfo.AuditEntry").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AuditEntry {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for AuditEntry {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAPlayerInfoList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPlayerInfoList {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAPlayerInfoList.player_infos)
    pub player_infos: ::std::vec::Vec<CMsgDOTAPlayerInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAPlayerInfoList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPlayerInfoList {
    fn default() -> &'a CMsgDOTAPlayerInfoList {
        <CMsgDOTAPlayerInfoList as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPlayerInfoList {
    pub fn new() -> CMsgDOTAPlayerInfoList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "player_infos",
            |m: &CMsgDOTAPlayerInfoList| { &m.player_infos },
            |m: &mut CMsgDOTAPlayerInfoList| { &mut m.player_infos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAPlayerInfoList>(
            "CMsgDOTAPlayerInfoList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAPlayerInfoList {
    const NAME: &'static str = "CMsgDOTAPlayerInfoList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player_infos.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.player_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.player_infos {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPlayerInfoList {
        CMsgDOTAPlayerInfoList::new()
    }

    fn clear(&mut self) {
        self.player_infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPlayerInfoList {
        static instance: CMsgDOTAPlayerInfoList = CMsgDOTAPlayerInfoList {
            player_infos: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAPlayerInfoList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAPlayerInfoList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAPlayerInfoList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAPlayerInfoList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTATeamRoster)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamRoster {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamRoster.timestamp)
    pub timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamRoster.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamRoster.member_account_ids)
    pub member_account_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATeamRoster.coach_account_id)
    pub coach_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATeamRoster.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamRoster {
    fn default() -> &'a CMsgDOTATeamRoster {
        <CMsgDOTATeamRoster as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamRoster {
    pub fn new() -> CMsgDOTATeamRoster {
        ::std::default::Default::default()
    }

    // optional uint32 timestamp = 1;

    pub fn timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional uint32 coach_account_id = 4;

    pub fn coach_account_id(&self) -> u32 {
        self.coach_account_id.unwrap_or(0)
    }

    pub fn clear_coach_account_id(&mut self) {
        self.coach_account_id = ::std::option::Option::None;
    }

    pub fn has_coach_account_id(&self) -> bool {
        self.coach_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coach_account_id(&mut self, v: u32) {
        self.coach_account_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp",
            |m: &CMsgDOTATeamRoster| { &m.timestamp },
            |m: &mut CMsgDOTATeamRoster| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CMsgDOTATeamRoster| { &m.team_id },
            |m: &mut CMsgDOTATeamRoster| { &mut m.team_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "member_account_ids",
            |m: &CMsgDOTATeamRoster| { &m.member_account_ids },
            |m: &mut CMsgDOTATeamRoster| { &mut m.member_account_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "coach_account_id",
            |m: &CMsgDOTATeamRoster| { &m.coach_account_id },
            |m: &mut CMsgDOTATeamRoster| { &mut m.coach_account_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATeamRoster>(
            "CMsgDOTATeamRoster",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATeamRoster {
    const NAME: &'static str = "CMsgDOTATeamRoster";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.member_account_ids)?;
                },
                24 => {
                    self.member_account_ids.push(is.read_uint32()?);
                },
                32 => {
                    self.coach_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        for value in &self.member_account_ids {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        if let Some(v) = self.coach_account_id {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        for v in &self.member_account_ids {
            os.write_uint32(3, *v)?;
        };
        if let Some(v) = self.coach_account_id {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamRoster {
        CMsgDOTATeamRoster::new()
    }

    fn clear(&mut self) {
        self.timestamp = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.member_account_ids.clear();
        self.coach_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamRoster {
        static instance: CMsgDOTATeamRoster = CMsgDOTATeamRoster {
            timestamp: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            member_account_ids: ::std::vec::Vec::new(),
            coach_account_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATeamRoster {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATeamRoster").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATeamRoster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATeamRoster {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTADPCProfileInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTADPCProfileInfo {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTADPCProfileInfo.player_info)
    pub player_info: ::protobuf::MessageField<CMsgDOTAPlayerInfo>,
    // @@protoc_insertion_point(field:dota.CMsgDOTADPCProfileInfo.prediction_info)
    pub prediction_info: ::protobuf::MessageField<cmsg_dotadpcprofile_info::PredictionInfo>,
    // @@protoc_insertion_point(field:dota.CMsgDOTADPCProfileInfo.fantasy_info)
    pub fantasy_info: ::protobuf::MessageField<cmsg_dotadpcprofile_info::FantasyInfo>,
    // @@protoc_insertion_point(field:dota.CMsgDOTADPCProfileInfo.disabled_notifications)
    pub disabled_notifications: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTADPCProfileInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTADPCProfileInfo {
    fn default() -> &'a CMsgDOTADPCProfileInfo {
        <CMsgDOTADPCProfileInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTADPCProfileInfo {
    pub fn new() -> CMsgDOTADPCProfileInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgDOTAPlayerInfo>(
            "player_info",
            |m: &CMsgDOTADPCProfileInfo| { &m.player_info },
            |m: &mut CMsgDOTADPCProfileInfo| { &mut m.player_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_dotadpcprofile_info::PredictionInfo>(
            "prediction_info",
            |m: &CMsgDOTADPCProfileInfo| { &m.prediction_info },
            |m: &mut CMsgDOTADPCProfileInfo| { &mut m.prediction_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_dotadpcprofile_info::FantasyInfo>(
            "fantasy_info",
            |m: &CMsgDOTADPCProfileInfo| { &m.fantasy_info },
            |m: &mut CMsgDOTADPCProfileInfo| { &mut m.fantasy_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "disabled_notifications",
            |m: &CMsgDOTADPCProfileInfo| { &m.disabled_notifications },
            |m: &mut CMsgDOTADPCProfileInfo| { &mut m.disabled_notifications },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTADPCProfileInfo>(
            "CMsgDOTADPCProfileInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTADPCProfileInfo {
    const NAME: &'static str = "CMsgDOTADPCProfileInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_info)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.prediction_info)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.fantasy_info)?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.disabled_notifications)?;
                },
                32 => {
                    self.disabled_notifications.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.prediction_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.fantasy_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.disabled_notifications {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.prediction_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.fantasy_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.disabled_notifications {
            os.write_uint32(4, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTADPCProfileInfo {
        CMsgDOTADPCProfileInfo::new()
    }

    fn clear(&mut self) {
        self.player_info.clear();
        self.prediction_info.clear();
        self.fantasy_info.clear();
        self.disabled_notifications.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTADPCProfileInfo {
        static instance: CMsgDOTADPCProfileInfo = CMsgDOTADPCProfileInfo {
            player_info: ::protobuf::MessageField::none(),
            prediction_info: ::protobuf::MessageField::none(),
            fantasy_info: ::protobuf::MessageField::none(),
            disabled_notifications: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTADPCProfileInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTADPCProfileInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTADPCProfileInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTADPCProfileInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTADPCProfileInfo`
pub mod cmsg_dotadpcprofile_info {
    // @@protoc_insertion_point(message:dota.CMsgDOTADPCProfileInfo.PredictionInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PredictionInfo {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCProfileInfo.PredictionInfo.percent)
        pub percent: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCProfileInfo.PredictionInfo.shard_winnings)
        pub shard_winnings: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTADPCProfileInfo.PredictionInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PredictionInfo {
        fn default() -> &'a PredictionInfo {
            <PredictionInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl PredictionInfo {
        pub fn new() -> PredictionInfo {
            ::std::default::Default::default()
        }

        // optional uint32 percent = 1;

        pub fn percent(&self) -> u32 {
            self.percent.unwrap_or(0)
        }

        pub fn clear_percent(&mut self) {
            self.percent = ::std::option::Option::None;
        }

        pub fn has_percent(&self) -> bool {
            self.percent.is_some()
        }

        // Param is passed by value, moved
        pub fn set_percent(&mut self, v: u32) {
            self.percent = ::std::option::Option::Some(v);
        }

        // optional int32 shard_winnings = 2;

        pub fn shard_winnings(&self) -> i32 {
            self.shard_winnings.unwrap_or(0)
        }

        pub fn clear_shard_winnings(&mut self) {
            self.shard_winnings = ::std::option::Option::None;
        }

        pub fn has_shard_winnings(&self) -> bool {
            self.shard_winnings.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shard_winnings(&mut self, v: i32) {
            self.shard_winnings = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "percent",
                |m: &PredictionInfo| { &m.percent },
                |m: &mut PredictionInfo| { &mut m.percent },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "shard_winnings",
                |m: &PredictionInfo| { &m.shard_winnings },
                |m: &mut PredictionInfo| { &mut m.shard_winnings },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PredictionInfo>(
                "CMsgDOTADPCProfileInfo.PredictionInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PredictionInfo {
        const NAME: &'static str = "PredictionInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.percent = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.shard_winnings = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.percent {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.shard_winnings {
                my_size += ::protobuf::rt::int32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.percent {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.shard_winnings {
                os.write_int32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PredictionInfo {
            PredictionInfo::new()
        }

        fn clear(&mut self) {
            self.percent = ::std::option::Option::None;
            self.shard_winnings = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PredictionInfo {
            static instance: PredictionInfo = PredictionInfo {
                percent: ::std::option::Option::None,
                shard_winnings: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PredictionInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTADPCProfileInfo.PredictionInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PredictionInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PredictionInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTADPCProfileInfo.FantasyInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct FantasyInfo {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCProfileInfo.FantasyInfo.top_90_finishes)
        pub top_90_finishes: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCProfileInfo.FantasyInfo.top_75_finishes)
        pub top_75_finishes: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCProfileInfo.FantasyInfo.top_50_finishes)
        pub top_50_finishes: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCProfileInfo.FantasyInfo.shard_winnings)
        pub shard_winnings: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTADPCProfileInfo.FantasyInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a FantasyInfo {
        fn default() -> &'a FantasyInfo {
            <FantasyInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl FantasyInfo {
        pub fn new() -> FantasyInfo {
            ::std::default::Default::default()
        }

        // optional uint32 top_90_finishes = 1;

        pub fn top_90_finishes(&self) -> u32 {
            self.top_90_finishes.unwrap_or(0)
        }

        pub fn clear_top_90_finishes(&mut self) {
            self.top_90_finishes = ::std::option::Option::None;
        }

        pub fn has_top_90_finishes(&self) -> bool {
            self.top_90_finishes.is_some()
        }

        // Param is passed by value, moved
        pub fn set_top_90_finishes(&mut self, v: u32) {
            self.top_90_finishes = ::std::option::Option::Some(v);
        }

        // optional uint32 top_75_finishes = 2;

        pub fn top_75_finishes(&self) -> u32 {
            self.top_75_finishes.unwrap_or(0)
        }

        pub fn clear_top_75_finishes(&mut self) {
            self.top_75_finishes = ::std::option::Option::None;
        }

        pub fn has_top_75_finishes(&self) -> bool {
            self.top_75_finishes.is_some()
        }

        // Param is passed by value, moved
        pub fn set_top_75_finishes(&mut self, v: u32) {
            self.top_75_finishes = ::std::option::Option::Some(v);
        }

        // optional uint32 top_50_finishes = 3;

        pub fn top_50_finishes(&self) -> u32 {
            self.top_50_finishes.unwrap_or(0)
        }

        pub fn clear_top_50_finishes(&mut self) {
            self.top_50_finishes = ::std::option::Option::None;
        }

        pub fn has_top_50_finishes(&self) -> bool {
            self.top_50_finishes.is_some()
        }

        // Param is passed by value, moved
        pub fn set_top_50_finishes(&mut self, v: u32) {
            self.top_50_finishes = ::std::option::Option::Some(v);
        }

        // optional uint32 shard_winnings = 4;

        pub fn shard_winnings(&self) -> u32 {
            self.shard_winnings.unwrap_or(0)
        }

        pub fn clear_shard_winnings(&mut self) {
            self.shard_winnings = ::std::option::Option::None;
        }

        pub fn has_shard_winnings(&self) -> bool {
            self.shard_winnings.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shard_winnings(&mut self, v: u32) {
            self.shard_winnings = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "top_90_finishes",
                |m: &FantasyInfo| { &m.top_90_finishes },
                |m: &mut FantasyInfo| { &mut m.top_90_finishes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "top_75_finishes",
                |m: &FantasyInfo| { &m.top_75_finishes },
                |m: &mut FantasyInfo| { &mut m.top_75_finishes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "top_50_finishes",
                |m: &FantasyInfo| { &m.top_50_finishes },
                |m: &mut FantasyInfo| { &mut m.top_50_finishes },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "shard_winnings",
                |m: &FantasyInfo| { &m.shard_winnings },
                |m: &mut FantasyInfo| { &mut m.shard_winnings },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FantasyInfo>(
                "CMsgDOTADPCProfileInfo.FantasyInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for FantasyInfo {
        const NAME: &'static str = "FantasyInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.top_90_finishes = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.top_75_finishes = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.top_50_finishes = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.shard_winnings = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.top_90_finishes {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.top_75_finishes {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.top_50_finishes {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.shard_winnings {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.top_90_finishes {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.top_75_finishes {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.top_50_finishes {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.shard_winnings {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> FantasyInfo {
            FantasyInfo::new()
        }

        fn clear(&mut self) {
            self.top_90_finishes = ::std::option::Option::None;
            self.top_75_finishes = ::std::option::Option::None;
            self.top_50_finishes = ::std::option::Option::None;
            self.shard_winnings = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static FantasyInfo {
            static instance: FantasyInfo = FantasyInfo {
                top_90_finishes: ::std::option::Option::None,
                top_75_finishes: ::std::option::Option::None,
                top_50_finishes: ::std::option::Option::None,
                shard_winnings: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for FantasyInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTADPCProfileInfo.FantasyInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for FantasyInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for FantasyInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTALeaderboards)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTALeaderboards {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTALeaderboards.leaderboards)
    pub leaderboards: ::std::vec::Vec<cmsg_dotaleaderboards::RegionLeaderboard>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTALeaderboards.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTALeaderboards {
    fn default() -> &'a CMsgDOTALeaderboards {
        <CMsgDOTALeaderboards as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTALeaderboards {
    pub fn new() -> CMsgDOTALeaderboards {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "leaderboards",
            |m: &CMsgDOTALeaderboards| { &m.leaderboards },
            |m: &mut CMsgDOTALeaderboards| { &mut m.leaderboards },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTALeaderboards>(
            "CMsgDOTALeaderboards",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTALeaderboards {
    const NAME: &'static str = "CMsgDOTALeaderboards";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.leaderboards.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.leaderboards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.leaderboards {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTALeaderboards {
        CMsgDOTALeaderboards::new()
    }

    fn clear(&mut self) {
        self.leaderboards.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTALeaderboards {
        static instance: CMsgDOTALeaderboards = CMsgDOTALeaderboards {
            leaderboards: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTALeaderboards {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTALeaderboards").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTALeaderboards {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTALeaderboards {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTALeaderboards`
pub mod cmsg_dotaleaderboards {
    // @@protoc_insertion_point(message:dota.CMsgDOTALeaderboards.RegionLeaderboard)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RegionLeaderboard {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTALeaderboards.RegionLeaderboard.division)
        pub division: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
        pub account_ids: ::std::vec::Vec<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTALeaderboards.RegionLeaderboard.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RegionLeaderboard {
        fn default() -> &'a RegionLeaderboard {
            <RegionLeaderboard as ::protobuf::Message>::default_instance()
        }
    }

    impl RegionLeaderboard {
        pub fn new() -> RegionLeaderboard {
            ::std::default::Default::default()
        }

        // optional uint32 division = 1;

        pub fn division(&self) -> u32 {
            self.division.unwrap_or(0)
        }

        pub fn clear_division(&mut self) {
            self.division = ::std::option::Option::None;
        }

        pub fn has_division(&self) -> bool {
            self.division.is_some()
        }

        // Param is passed by value, moved
        pub fn set_division(&mut self, v: u32) {
            self.division = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "division",
                |m: &RegionLeaderboard| { &m.division },
                |m: &mut RegionLeaderboard| { &mut m.division },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "account_ids",
                |m: &RegionLeaderboard| { &m.account_ids },
                |m: &mut RegionLeaderboard| { &mut m.account_ids },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegionLeaderboard>(
                "CMsgDOTALeaderboards.RegionLeaderboard",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RegionLeaderboard {
        const NAME: &'static str = "RegionLeaderboard";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.division = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        is.read_repeated_packed_uint32_into(&mut self.account_ids)?;
                    },
                    16 => {
                        self.account_ids.push(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.division {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            for value in &self.account_ids {
                my_size += ::protobuf::rt::uint32_size(2, *value);
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.division {
                os.write_uint32(1, v)?;
            }
            for v in &self.account_ids {
                os.write_uint32(2, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RegionLeaderboard {
            RegionLeaderboard::new()
        }

        fn clear(&mut self) {
            self.division = ::std::option::Option::None;
            self.account_ids.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RegionLeaderboard {
            static instance: RegionLeaderboard = RegionLeaderboard {
                division: ::std::option::Option::None,
                account_ids: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RegionLeaderboard {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTALeaderboards.RegionLeaderboard").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RegionLeaderboard {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RegionLeaderboard {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAPassportVoteTeamGuess)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPassportVoteTeamGuess {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportVoteTeamGuess.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportVoteTeamGuess.winner_id)
    pub winner_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportVoteTeamGuess.runnerup_id)
    pub runnerup_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAPassportVoteTeamGuess.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPassportVoteTeamGuess {
    fn default() -> &'a CMsgDOTAPassportVoteTeamGuess {
        <CMsgDOTAPassportVoteTeamGuess as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPassportVoteTeamGuess {
    pub fn new() -> CMsgDOTAPassportVoteTeamGuess {
        ::std::default::Default::default()
    }

    // optional uint32 league_id = 1;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional uint32 winner_id = 2;

    pub fn winner_id(&self) -> u32 {
        self.winner_id.unwrap_or(0)
    }

    pub fn clear_winner_id(&mut self) {
        self.winner_id = ::std::option::Option::None;
    }

    pub fn has_winner_id(&self) -> bool {
        self.winner_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_winner_id(&mut self, v: u32) {
        self.winner_id = ::std::option::Option::Some(v);
    }

    // optional uint32 runnerup_id = 3;

    pub fn runnerup_id(&self) -> u32 {
        self.runnerup_id.unwrap_or(0)
    }

    pub fn clear_runnerup_id(&mut self) {
        self.runnerup_id = ::std::option::Option::None;
    }

    pub fn has_runnerup_id(&self) -> bool {
        self.runnerup_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_runnerup_id(&mut self, v: u32) {
        self.runnerup_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "league_id",
            |m: &CMsgDOTAPassportVoteTeamGuess| { &m.league_id },
            |m: &mut CMsgDOTAPassportVoteTeamGuess| { &mut m.league_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "winner_id",
            |m: &CMsgDOTAPassportVoteTeamGuess| { &m.winner_id },
            |m: &mut CMsgDOTAPassportVoteTeamGuess| { &mut m.winner_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "runnerup_id",
            |m: &CMsgDOTAPassportVoteTeamGuess| { &m.runnerup_id },
            |m: &mut CMsgDOTAPassportVoteTeamGuess| { &mut m.runnerup_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAPassportVoteTeamGuess>(
            "CMsgDOTAPassportVoteTeamGuess",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAPassportVoteTeamGuess {
    const NAME: &'static str = "CMsgDOTAPassportVoteTeamGuess";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.winner_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.runnerup_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.league_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.winner_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.runnerup_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.league_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.winner_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.runnerup_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPassportVoteTeamGuess {
        CMsgDOTAPassportVoteTeamGuess::new()
    }

    fn clear(&mut self) {
        self.league_id = ::std::option::Option::None;
        self.winner_id = ::std::option::Option::None;
        self.runnerup_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPassportVoteTeamGuess {
        static instance: CMsgDOTAPassportVoteTeamGuess = CMsgDOTAPassportVoteTeamGuess {
            league_id: ::std::option::Option::None,
            winner_id: ::std::option::Option::None,
            runnerup_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAPassportVoteTeamGuess {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAPassportVoteTeamGuess").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAPassportVoteTeamGuess {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAPassportVoteTeamGuess {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAPassportVoteGenericSelection)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPassportVoteGenericSelection {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportVoteGenericSelection.selection_index)
    pub selection_index: ::std::option::Option<::protobuf::EnumOrUnknown<DOTA_2013PassportSelectionIndices>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportVoteGenericSelection.selection)
    pub selection: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAPassportVoteGenericSelection.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPassportVoteGenericSelection {
    fn default() -> &'a CMsgDOTAPassportVoteGenericSelection {
        <CMsgDOTAPassportVoteGenericSelection as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPassportVoteGenericSelection {
    pub fn new() -> CMsgDOTAPassportVoteGenericSelection {
        ::std::default::Default::default()
    }

    // optional .dota.DOTA_2013PassportSelectionIndices selection_index = 1;

    pub fn selection_index(&self) -> DOTA_2013PassportSelectionIndices {
        match self.selection_index {
            Some(e) => e.enum_value_or(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0),
            None => DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0,
        }
    }

    pub fn clear_selection_index(&mut self) {
        self.selection_index = ::std::option::Option::None;
    }

    pub fn has_selection_index(&self) -> bool {
        self.selection_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selection_index(&mut self, v: DOTA_2013PassportSelectionIndices) {
        self.selection_index = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 selection = 2;

    pub fn selection(&self) -> u32 {
        self.selection.unwrap_or(0)
    }

    pub fn clear_selection(&mut self) {
        self.selection = ::std::option::Option::None;
    }

    pub fn has_selection(&self) -> bool {
        self.selection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selection(&mut self, v: u32) {
        self.selection = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "selection_index",
            |m: &CMsgDOTAPassportVoteGenericSelection| { &m.selection_index },
            |m: &mut CMsgDOTAPassportVoteGenericSelection| { &mut m.selection_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "selection",
            |m: &CMsgDOTAPassportVoteGenericSelection| { &m.selection },
            |m: &mut CMsgDOTAPassportVoteGenericSelection| { &mut m.selection },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAPassportVoteGenericSelection>(
            "CMsgDOTAPassportVoteGenericSelection",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAPassportVoteGenericSelection {
    const NAME: &'static str = "CMsgDOTAPassportVoteGenericSelection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.selection_index = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.selection = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.selection_index {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.selection {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.selection_index {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.selection {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPassportVoteGenericSelection {
        CMsgDOTAPassportVoteGenericSelection::new()
    }

    fn clear(&mut self) {
        self.selection_index = ::std::option::Option::None;
        self.selection = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPassportVoteGenericSelection {
        static instance: CMsgDOTAPassportVoteGenericSelection = CMsgDOTAPassportVoteGenericSelection {
            selection_index: ::std::option::Option::None,
            selection: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAPassportVoteGenericSelection {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAPassportVoteGenericSelection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAPassportVoteGenericSelection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAPassportVoteGenericSelection {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAPassportStampedPlayer)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPassportStampedPlayer {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportStampedPlayer.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportStampedPlayer.stamp_level)
    pub stamp_level: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAPassportStampedPlayer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPassportStampedPlayer {
    fn default() -> &'a CMsgDOTAPassportStampedPlayer {
        <CMsgDOTAPassportStampedPlayer as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPassportStampedPlayer {
    pub fn new() -> CMsgDOTAPassportStampedPlayer {
        ::std::default::Default::default()
    }

    // optional uint64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 stamp_level = 2;

    pub fn stamp_level(&self) -> u32 {
        self.stamp_level.unwrap_or(0)
    }

    pub fn clear_stamp_level(&mut self) {
        self.stamp_level = ::std::option::Option::None;
    }

    pub fn has_stamp_level(&self) -> bool {
        self.stamp_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stamp_level(&mut self, v: u32) {
        self.stamp_level = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgDOTAPassportStampedPlayer| { &m.steam_id },
            |m: &mut CMsgDOTAPassportStampedPlayer| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "stamp_level",
            |m: &CMsgDOTAPassportStampedPlayer| { &m.stamp_level },
            |m: &mut CMsgDOTAPassportStampedPlayer| { &mut m.stamp_level },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAPassportStampedPlayer>(
            "CMsgDOTAPassportStampedPlayer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAPassportStampedPlayer {
    const NAME: &'static str = "CMsgDOTAPassportStampedPlayer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.steam_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.stamp_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.stamp_level {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.stamp_level {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPassportStampedPlayer {
        CMsgDOTAPassportStampedPlayer::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.stamp_level = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPassportStampedPlayer {
        static instance: CMsgDOTAPassportStampedPlayer = CMsgDOTAPassportStampedPlayer {
            steam_id: ::std::option::Option::None,
            stamp_level: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAPassportStampedPlayer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAPassportStampedPlayer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAPassportStampedPlayer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAPassportStampedPlayer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAPassportPlayerCardChallenge)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPassportPlayerCardChallenge {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportPlayerCardChallenge.challenge_id)
    pub challenge_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAPassportPlayerCardChallenge.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPassportPlayerCardChallenge {
    fn default() -> &'a CMsgDOTAPassportPlayerCardChallenge {
        <CMsgDOTAPassportPlayerCardChallenge as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPassportPlayerCardChallenge {
    pub fn new() -> CMsgDOTAPassportPlayerCardChallenge {
        ::std::default::Default::default()
    }

    // optional uint32 challenge_id = 1;

    pub fn challenge_id(&self) -> u32 {
        self.challenge_id.unwrap_or(0)
    }

    pub fn clear_challenge_id(&mut self) {
        self.challenge_id = ::std::option::Option::None;
    }

    pub fn has_challenge_id(&self) -> bool {
        self.challenge_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_id(&mut self, v: u32) {
        self.challenge_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge_id",
            |m: &CMsgDOTAPassportPlayerCardChallenge| { &m.challenge_id },
            |m: &mut CMsgDOTAPassportPlayerCardChallenge| { &mut m.challenge_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAPassportPlayerCardChallenge>(
            "CMsgDOTAPassportPlayerCardChallenge",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAPassportPlayerCardChallenge {
    const NAME: &'static str = "CMsgDOTAPassportPlayerCardChallenge";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.challenge_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.challenge_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.challenge_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPassportPlayerCardChallenge {
        CMsgDOTAPassportPlayerCardChallenge::new()
    }

    fn clear(&mut self) {
        self.challenge_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPassportPlayerCardChallenge {
        static instance: CMsgDOTAPassportPlayerCardChallenge = CMsgDOTAPassportPlayerCardChallenge {
            challenge_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAPassportPlayerCardChallenge {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAPassportPlayerCardChallenge").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAPassportPlayerCardChallenge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAPassportPlayerCardChallenge {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAPassportVote)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPassportVote {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportVote.team_votes)
    pub team_votes: ::std::vec::Vec<CMsgDOTAPassportVoteTeamGuess>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportVote.generic_selections)
    pub generic_selections: ::std::vec::Vec<CMsgDOTAPassportVoteGenericSelection>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportVote.stamped_players)
    pub stamped_players: ::std::vec::Vec<CMsgDOTAPassportStampedPlayer>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAPassportVote.player_card_challenges)
    pub player_card_challenges: ::std::vec::Vec<CMsgDOTAPassportPlayerCardChallenge>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAPassportVote.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPassportVote {
    fn default() -> &'a CMsgDOTAPassportVote {
        <CMsgDOTAPassportVote as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPassportVote {
    pub fn new() -> CMsgDOTAPassportVote {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "team_votes",
            |m: &CMsgDOTAPassportVote| { &m.team_votes },
            |m: &mut CMsgDOTAPassportVote| { &mut m.team_votes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "generic_selections",
            |m: &CMsgDOTAPassportVote| { &m.generic_selections },
            |m: &mut CMsgDOTAPassportVote| { &mut m.generic_selections },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stamped_players",
            |m: &CMsgDOTAPassportVote| { &m.stamped_players },
            |m: &mut CMsgDOTAPassportVote| { &mut m.stamped_players },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "player_card_challenges",
            |m: &CMsgDOTAPassportVote| { &m.player_card_challenges },
            |m: &mut CMsgDOTAPassportVote| { &mut m.player_card_challenges },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAPassportVote>(
            "CMsgDOTAPassportVote",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAPassportVote {
    const NAME: &'static str = "CMsgDOTAPassportVote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.team_votes.push(is.read_message()?);
                },
                18 => {
                    self.generic_selections.push(is.read_message()?);
                },
                26 => {
                    self.stamped_players.push(is.read_message()?);
                },
                34 => {
                    self.player_card_challenges.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.team_votes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.generic_selections {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.stamped_players {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.player_card_challenges {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.team_votes {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.generic_selections {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.stamped_players {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.player_card_challenges {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPassportVote {
        CMsgDOTAPassportVote::new()
    }

    fn clear(&mut self) {
        self.team_votes.clear();
        self.generic_selections.clear();
        self.stamped_players.clear();
        self.player_card_challenges.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPassportVote {
        static instance: CMsgDOTAPassportVote = CMsgDOTAPassportVote {
            team_votes: ::std::vec::Vec::new(),
            generic_selections: ::std::vec::Vec::new(),
            stamped_players: ::std::vec::Vec::new(),
            player_card_challenges: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAPassportVote {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAPassportVote").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAPassportVote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAPassportVote {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCGetPlayerCardRosterRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCGetPlayerCardRosterRequest {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCGetPlayerCardRosterRequest.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCGetPlayerCardRosterRequest.fantasy_period)
    pub fantasy_period: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCGetPlayerCardRosterRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCGetPlayerCardRosterRequest {
    fn default() -> &'a CMsgClientToGCGetPlayerCardRosterRequest {
        <CMsgClientToGCGetPlayerCardRosterRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCGetPlayerCardRosterRequest {
    pub fn new() -> CMsgClientToGCGetPlayerCardRosterRequest {
        ::std::default::Default::default()
    }

    // optional uint32 league_id = 1;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional uint32 fantasy_period = 3;

    pub fn fantasy_period(&self) -> u32 {
        self.fantasy_period.unwrap_or(0)
    }

    pub fn clear_fantasy_period(&mut self) {
        self.fantasy_period = ::std::option::Option::None;
    }

    pub fn has_fantasy_period(&self) -> bool {
        self.fantasy_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_period(&mut self, v: u32) {
        self.fantasy_period = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "league_id",
            |m: &CMsgClientToGCGetPlayerCardRosterRequest| { &m.league_id },
            |m: &mut CMsgClientToGCGetPlayerCardRosterRequest| { &mut m.league_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fantasy_period",
            |m: &CMsgClientToGCGetPlayerCardRosterRequest| { &m.fantasy_period },
            |m: &mut CMsgClientToGCGetPlayerCardRosterRequest| { &mut m.fantasy_period },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCGetPlayerCardRosterRequest>(
            "CMsgClientToGCGetPlayerCardRosterRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCGetPlayerCardRosterRequest {
    const NAME: &'static str = "CMsgClientToGCGetPlayerCardRosterRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.fantasy_period = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.league_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.fantasy_period {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.league_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.fantasy_period {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCGetPlayerCardRosterRequest {
        CMsgClientToGCGetPlayerCardRosterRequest::new()
    }

    fn clear(&mut self) {
        self.league_id = ::std::option::Option::None;
        self.fantasy_period = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCGetPlayerCardRosterRequest {
        static instance: CMsgClientToGCGetPlayerCardRosterRequest = CMsgClientToGCGetPlayerCardRosterRequest {
            league_id: ::std::option::Option::None,
            fantasy_period: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCGetPlayerCardRosterRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCGetPlayerCardRosterRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCGetPlayerCardRosterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCGetPlayerCardRosterRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCGetPlayerCardRosterResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCGetPlayerCardRosterResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCGetPlayerCardRosterResponse.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_client_to_gcget_player_card_roster_response::Result>>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
    pub player_card_item_id: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCGetPlayerCardRosterResponse.score)
    pub score: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCGetPlayerCardRosterResponse.finalized)
    pub finalized: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCGetPlayerCardRosterResponse.percentile)
    pub percentile: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCGetPlayerCardRosterResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCGetPlayerCardRosterResponse {
    fn default() -> &'a CMsgClientToGCGetPlayerCardRosterResponse {
        <CMsgClientToGCGetPlayerCardRosterResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCGetPlayerCardRosterResponse {
    pub fn new() -> CMsgClientToGCGetPlayerCardRosterResponse {
        ::std::default::Default::default()
    }

    // optional .dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1;

    pub fn result(&self) -> cmsg_client_to_gcget_player_card_roster_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcget_player_card_roster_response::Result::SUCCESS),
            None => cmsg_client_to_gcget_player_card_roster_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcget_player_card_roster_response::Result) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional float score = 3;

    pub fn score(&self) -> f32 {
        self.score.unwrap_or(0.)
    }

    pub fn clear_score(&mut self) {
        self.score = ::std::option::Option::None;
    }

    pub fn has_score(&self) -> bool {
        self.score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: f32) {
        self.score = ::std::option::Option::Some(v);
    }

    // optional bool finalized = 4;

    pub fn finalized(&self) -> bool {
        self.finalized.unwrap_or(false)
    }

    pub fn clear_finalized(&mut self) {
        self.finalized = ::std::option::Option::None;
    }

    pub fn has_finalized(&self) -> bool {
        self.finalized.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finalized(&mut self, v: bool) {
        self.finalized = ::std::option::Option::Some(v);
    }

    // optional float percentile = 5;

    pub fn percentile(&self) -> f32 {
        self.percentile.unwrap_or(0.)
    }

    pub fn clear_percentile(&mut self) {
        self.percentile = ::std::option::Option::None;
    }

    pub fn has_percentile(&self) -> bool {
        self.percentile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_percentile(&mut self, v: f32) {
        self.percentile = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgClientToGCGetPlayerCardRosterResponse| { &m.result },
            |m: &mut CMsgClientToGCGetPlayerCardRosterResponse| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "player_card_item_id",
            |m: &CMsgClientToGCGetPlayerCardRosterResponse| { &m.player_card_item_id },
            |m: &mut CMsgClientToGCGetPlayerCardRosterResponse| { &mut m.player_card_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "score",
            |m: &CMsgClientToGCGetPlayerCardRosterResponse| { &m.score },
            |m: &mut CMsgClientToGCGetPlayerCardRosterResponse| { &mut m.score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "finalized",
            |m: &CMsgClientToGCGetPlayerCardRosterResponse| { &m.finalized },
            |m: &mut CMsgClientToGCGetPlayerCardRosterResponse| { &mut m.finalized },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "percentile",
            |m: &CMsgClientToGCGetPlayerCardRosterResponse| { &m.percentile },
            |m: &mut CMsgClientToGCGetPlayerCardRosterResponse| { &mut m.percentile },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCGetPlayerCardRosterResponse>(
            "CMsgClientToGCGetPlayerCardRosterResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCGetPlayerCardRosterResponse {
    const NAME: &'static str = "CMsgClientToGCGetPlayerCardRosterResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    is.read_repeated_packed_uint64_into(&mut self.player_card_item_id)?;
                },
                16 => {
                    self.player_card_item_id.push(is.read_uint64()?);
                },
                29 => {
                    self.score = ::std::option::Option::Some(is.read_float()?);
                },
                32 => {
                    self.finalized = ::std::option::Option::Some(is.read_bool()?);
                },
                45 => {
                    self.percentile = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        for value in &self.player_card_item_id {
            my_size += ::protobuf::rt::uint64_size(2, *value);
        };
        if let Some(v) = self.score {
            my_size += 1 + 4;
        }
        if let Some(v) = self.finalized {
            my_size += 1 + 1;
        }
        if let Some(v) = self.percentile {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.player_card_item_id {
            os.write_uint64(2, *v)?;
        };
        if let Some(v) = self.score {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.finalized {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.percentile {
            os.write_float(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCGetPlayerCardRosterResponse {
        CMsgClientToGCGetPlayerCardRosterResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.player_card_item_id.clear();
        self.score = ::std::option::Option::None;
        self.finalized = ::std::option::Option::None;
        self.percentile = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCGetPlayerCardRosterResponse {
        static instance: CMsgClientToGCGetPlayerCardRosterResponse = CMsgClientToGCGetPlayerCardRosterResponse {
            result: ::std::option::Option::None,
            player_card_item_id: ::std::vec::Vec::new(),
            score: ::std::option::Option::None,
            finalized: ::std::option::Option::None,
            percentile: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCGetPlayerCardRosterResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCGetPlayerCardRosterResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCGetPlayerCardRosterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCGetPlayerCardRosterResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientToGCGetPlayerCardRosterResponse`
pub mod cmsg_client_to_gcget_player_card_roster_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgClientToGCGetPlayerCardRosterResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCGetPlayerCardRosterResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCGetPlayerCardRosterResponse.Result.ERROR_UNSPECIFIED)
        ERROR_UNSPECIFIED = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCGetPlayerCardRosterResponse.Result.ERROR_INVALID_LEAGUE_ID)
        ERROR_INVALID_LEAGUE_ID = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCGetPlayerCardRosterResponse.Result.ERROR_INVALID_TIMESTAMP)
        ERROR_INVALID_TIMESTAMP = 3,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                2 => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                3 => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "ERROR_UNSPECIFIED" => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                "ERROR_INVALID_LEAGUE_ID" => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                "ERROR_INVALID_TIMESTAMP" => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::ERROR_UNSPECIFIED,
            Result::ERROR_INVALID_LEAGUE_ID,
            Result::ERROR_INVALID_TIMESTAMP,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgClientToGCGetPlayerCardRosterResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("CMsgClientToGCGetPlayerCardRosterResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCBatchGetPlayerCardRosterRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCBatchGetPlayerCardRosterRequest {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterRequest.league_timestamps)
    pub league_timestamps: ::std::vec::Vec<cmsg_client_to_gcbatch_get_player_card_roster_request::LeagueTimestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCBatchGetPlayerCardRosterRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCBatchGetPlayerCardRosterRequest {
    fn default() -> &'a CMsgClientToGCBatchGetPlayerCardRosterRequest {
        <CMsgClientToGCBatchGetPlayerCardRosterRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCBatchGetPlayerCardRosterRequest {
    pub fn new() -> CMsgClientToGCBatchGetPlayerCardRosterRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "league_timestamps",
            |m: &CMsgClientToGCBatchGetPlayerCardRosterRequest| { &m.league_timestamps },
            |m: &mut CMsgClientToGCBatchGetPlayerCardRosterRequest| { &mut m.league_timestamps },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCBatchGetPlayerCardRosterRequest>(
            "CMsgClientToGCBatchGetPlayerCardRosterRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCBatchGetPlayerCardRosterRequest {
    const NAME: &'static str = "CMsgClientToGCBatchGetPlayerCardRosterRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.league_timestamps.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.league_timestamps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.league_timestamps {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCBatchGetPlayerCardRosterRequest {
        CMsgClientToGCBatchGetPlayerCardRosterRequest::new()
    }

    fn clear(&mut self) {
        self.league_timestamps.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCBatchGetPlayerCardRosterRequest {
        static instance: CMsgClientToGCBatchGetPlayerCardRosterRequest = CMsgClientToGCBatchGetPlayerCardRosterRequest {
            league_timestamps: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCBatchGetPlayerCardRosterRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCBatchGetPlayerCardRosterRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCBatchGetPlayerCardRosterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCBatchGetPlayerCardRosterRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientToGCBatchGetPlayerCardRosterRequest`
pub mod cmsg_client_to_gcbatch_get_player_card_roster_request {
    // @@protoc_insertion_point(message:dota.CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LeagueTimestamp {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp.league_id)
        pub league_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp.fantasy_period)
        pub fantasy_period: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LeagueTimestamp {
        fn default() -> &'a LeagueTimestamp {
            <LeagueTimestamp as ::protobuf::Message>::default_instance()
        }
    }

    impl LeagueTimestamp {
        pub fn new() -> LeagueTimestamp {
            ::std::default::Default::default()
        }

        // optional uint32 league_id = 1;

        pub fn league_id(&self) -> u32 {
            self.league_id.unwrap_or(0)
        }

        pub fn clear_league_id(&mut self) {
            self.league_id = ::std::option::Option::None;
        }

        pub fn has_league_id(&self) -> bool {
            self.league_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_id(&mut self, v: u32) {
            self.league_id = ::std::option::Option::Some(v);
        }

        // optional uint32 fantasy_period = 3;

        pub fn fantasy_period(&self) -> u32 {
            self.fantasy_period.unwrap_or(0)
        }

        pub fn clear_fantasy_period(&mut self) {
            self.fantasy_period = ::std::option::Option::None;
        }

        pub fn has_fantasy_period(&self) -> bool {
            self.fantasy_period.is_some()
        }

        // Param is passed by value, moved
        pub fn set_fantasy_period(&mut self, v: u32) {
            self.fantasy_period = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "league_id",
                |m: &LeagueTimestamp| { &m.league_id },
                |m: &mut LeagueTimestamp| { &mut m.league_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "fantasy_period",
                |m: &LeagueTimestamp| { &m.fantasy_period },
                |m: &mut LeagueTimestamp| { &mut m.fantasy_period },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LeagueTimestamp>(
                "CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LeagueTimestamp {
        const NAME: &'static str = "LeagueTimestamp";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.fantasy_period = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.league_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.fantasy_period {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.league_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.fantasy_period {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LeagueTimestamp {
            LeagueTimestamp::new()
        }

        fn clear(&mut self) {
            self.league_id = ::std::option::Option::None;
            self.fantasy_period = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LeagueTimestamp {
            static instance: LeagueTimestamp = LeagueTimestamp {
                league_id: ::std::option::Option::None,
                fantasy_period: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for LeagueTimestamp {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LeagueTimestamp {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LeagueTimestamp {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCBatchGetPlayerCardRosterResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.responses)
    pub responses: ::std::vec::Vec<cmsg_client_to_gcbatch_get_player_card_roster_response::RosterResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCBatchGetPlayerCardRosterResponse {
    fn default() -> &'a CMsgClientToGCBatchGetPlayerCardRosterResponse {
        <CMsgClientToGCBatchGetPlayerCardRosterResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCBatchGetPlayerCardRosterResponse {
    pub fn new() -> CMsgClientToGCBatchGetPlayerCardRosterResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "responses",
            |m: &CMsgClientToGCBatchGetPlayerCardRosterResponse| { &m.responses },
            |m: &mut CMsgClientToGCBatchGetPlayerCardRosterResponse| { &mut m.responses },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCBatchGetPlayerCardRosterResponse>(
            "CMsgClientToGCBatchGetPlayerCardRosterResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCBatchGetPlayerCardRosterResponse {
    const NAME: &'static str = "CMsgClientToGCBatchGetPlayerCardRosterResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.responses.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCBatchGetPlayerCardRosterResponse {
        CMsgClientToGCBatchGetPlayerCardRosterResponse::new()
    }

    fn clear(&mut self) {
        self.responses.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCBatchGetPlayerCardRosterResponse {
        static instance: CMsgClientToGCBatchGetPlayerCardRosterResponse = CMsgClientToGCBatchGetPlayerCardRosterResponse {
            responses: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCBatchGetPlayerCardRosterResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCBatchGetPlayerCardRosterResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCBatchGetPlayerCardRosterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCBatchGetPlayerCardRosterResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientToGCBatchGetPlayerCardRosterResponse`
pub mod cmsg_client_to_gcbatch_get_player_card_roster_response {
    // @@protoc_insertion_point(message:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RosterResponse {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.league_id)
        pub league_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.deprecated_timestamp)
        pub deprecated_timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.result)
        pub result: ::std::option::Option<::protobuf::EnumOrUnknown<Result>>,
        // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.player_card_item_id)
        pub player_card_item_id: ::std::vec::Vec<u64>,
        // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.score)
        pub score: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.finalized)
        pub finalized: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.percentile)
        pub percentile: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.fantasy_period)
        pub fantasy_period: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RosterResponse {
        fn default() -> &'a RosterResponse {
            <RosterResponse as ::protobuf::Message>::default_instance()
        }
    }

    impl RosterResponse {
        pub fn new() -> RosterResponse {
            ::std::default::Default::default()
        }

        // optional uint32 league_id = 1;

        pub fn league_id(&self) -> u32 {
            self.league_id.unwrap_or(0)
        }

        pub fn clear_league_id(&mut self) {
            self.league_id = ::std::option::Option::None;
        }

        pub fn has_league_id(&self) -> bool {
            self.league_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_id(&mut self, v: u32) {
            self.league_id = ::std::option::Option::Some(v);
        }

        // optional uint32 deprecated_timestamp = 2;

        pub fn deprecated_timestamp(&self) -> u32 {
            self.deprecated_timestamp.unwrap_or(0)
        }

        pub fn clear_deprecated_timestamp(&mut self) {
            self.deprecated_timestamp = ::std::option::Option::None;
        }

        pub fn has_deprecated_timestamp(&self) -> bool {
            self.deprecated_timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_deprecated_timestamp(&mut self, v: u32) {
            self.deprecated_timestamp = ::std::option::Option::Some(v);
        }

        // optional .dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.Result result = 3;

        pub fn result(&self) -> Result {
            match self.result {
                Some(e) => e.enum_value_or(Result::SUCCESS),
                None => Result::SUCCESS,
            }
        }

        pub fn clear_result(&mut self) {
            self.result = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            self.result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: Result) {
            self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        // optional float score = 5;

        pub fn score(&self) -> f32 {
            self.score.unwrap_or(0.)
        }

        pub fn clear_score(&mut self) {
            self.score = ::std::option::Option::None;
        }

        pub fn has_score(&self) -> bool {
            self.score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_score(&mut self, v: f32) {
            self.score = ::std::option::Option::Some(v);
        }

        // optional bool finalized = 6;

        pub fn finalized(&self) -> bool {
            self.finalized.unwrap_or(false)
        }

        pub fn clear_finalized(&mut self) {
            self.finalized = ::std::option::Option::None;
        }

        pub fn has_finalized(&self) -> bool {
            self.finalized.is_some()
        }

        // Param is passed by value, moved
        pub fn set_finalized(&mut self, v: bool) {
            self.finalized = ::std::option::Option::Some(v);
        }

        // optional float percentile = 7;

        pub fn percentile(&self) -> f32 {
            self.percentile.unwrap_or(0.)
        }

        pub fn clear_percentile(&mut self) {
            self.percentile = ::std::option::Option::None;
        }

        pub fn has_percentile(&self) -> bool {
            self.percentile.is_some()
        }

        // Param is passed by value, moved
        pub fn set_percentile(&mut self, v: f32) {
            self.percentile = ::std::option::Option::Some(v);
        }

        // optional uint32 fantasy_period = 8;

        pub fn fantasy_period(&self) -> u32 {
            self.fantasy_period.unwrap_or(0)
        }

        pub fn clear_fantasy_period(&mut self) {
            self.fantasy_period = ::std::option::Option::None;
        }

        pub fn has_fantasy_period(&self) -> bool {
            self.fantasy_period.is_some()
        }

        // Param is passed by value, moved
        pub fn set_fantasy_period(&mut self, v: u32) {
            self.fantasy_period = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(8);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "league_id",
                |m: &RosterResponse| { &m.league_id },
                |m: &mut RosterResponse| { &mut m.league_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "deprecated_timestamp",
                |m: &RosterResponse| { &m.deprecated_timestamp },
                |m: &mut RosterResponse| { &mut m.deprecated_timestamp },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "result",
                |m: &RosterResponse| { &m.result },
                |m: &mut RosterResponse| { &mut m.result },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "player_card_item_id",
                |m: &RosterResponse| { &m.player_card_item_id },
                |m: &mut RosterResponse| { &mut m.player_card_item_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "score",
                |m: &RosterResponse| { &m.score },
                |m: &mut RosterResponse| { &mut m.score },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "finalized",
                |m: &RosterResponse| { &m.finalized },
                |m: &mut RosterResponse| { &mut m.finalized },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "percentile",
                |m: &RosterResponse| { &m.percentile },
                |m: &mut RosterResponse| { &mut m.percentile },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "fantasy_period",
                |m: &RosterResponse| { &m.fantasy_period },
                |m: &mut RosterResponse| { &mut m.fantasy_period },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RosterResponse>(
                "CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RosterResponse {
        const NAME: &'static str = "RosterResponse";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.deprecated_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    34 => {
                        is.read_repeated_packed_uint64_into(&mut self.player_card_item_id)?;
                    },
                    32 => {
                        self.player_card_item_id.push(is.read_uint64()?);
                    },
                    45 => {
                        self.score = ::std::option::Option::Some(is.read_float()?);
                    },
                    48 => {
                        self.finalized = ::std::option::Option::Some(is.read_bool()?);
                    },
                    61 => {
                        self.percentile = ::std::option::Option::Some(is.read_float()?);
                    },
                    64 => {
                        self.fantasy_period = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.league_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.deprecated_timestamp {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.result {
                my_size += ::protobuf::rt::int32_size(3, v.value());
            }
            for value in &self.player_card_item_id {
                my_size += ::protobuf::rt::uint64_size(4, *value);
            };
            if let Some(v) = self.score {
                my_size += 1 + 4;
            }
            if let Some(v) = self.finalized {
                my_size += 1 + 1;
            }
            if let Some(v) = self.percentile {
                my_size += 1 + 4;
            }
            if let Some(v) = self.fantasy_period {
                my_size += ::protobuf::rt::uint32_size(8, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.league_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.deprecated_timestamp {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.result {
                os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            for v in &self.player_card_item_id {
                os.write_uint64(4, *v)?;
            };
            if let Some(v) = self.score {
                os.write_float(5, v)?;
            }
            if let Some(v) = self.finalized {
                os.write_bool(6, v)?;
            }
            if let Some(v) = self.percentile {
                os.write_float(7, v)?;
            }
            if let Some(v) = self.fantasy_period {
                os.write_uint32(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RosterResponse {
            RosterResponse::new()
        }

        fn clear(&mut self) {
            self.league_id = ::std::option::Option::None;
            self.deprecated_timestamp = ::std::option::Option::None;
            self.result = ::std::option::Option::None;
            self.player_card_item_id.clear();
            self.score = ::std::option::Option::None;
            self.finalized = ::std::option::Option::None;
            self.percentile = ::std::option::Option::None;
            self.fantasy_period = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RosterResponse {
            static instance: RosterResponse = RosterResponse {
                league_id: ::std::option::Option::None,
                deprecated_timestamp: ::std::option::Option::None,
                result: ::std::option::Option::None,
                player_card_item_id: ::std::vec::Vec::new(),
                score: ::std::option::Option::None,
                finalized: ::std::option::Option::None,
                percentile: ::std::option::Option::None,
                fantasy_period: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RosterResponse {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RosterResponse {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RosterResponse {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.Result.ERROR_UNSPECIFIED)
        ERROR_UNSPECIFIED = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.Result.ERROR_INVALID_LEAGUE_ID)
        ERROR_INVALID_LEAGUE_ID = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.Result.ERROR_INVALID_TIMESTAMP)
        ERROR_INVALID_TIMESTAMP = 3,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                2 => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                3 => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "ERROR_UNSPECIFIED" => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                "ERROR_INVALID_LEAGUE_ID" => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                "ERROR_INVALID_TIMESTAMP" => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::ERROR_UNSPECIFIED,
            Result::ERROR_INVALID_LEAGUE_ID,
            Result::ERROR_INVALID_TIMESTAMP,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgClientToGCBatchGetPlayerCardRosterResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("CMsgClientToGCBatchGetPlayerCardRosterResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCSetPlayerCardRosterRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCSetPlayerCardRosterRequest {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCSetPlayerCardRosterRequest.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCSetPlayerCardRosterRequest.deprecated_timestamp)
    pub deprecated_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCSetPlayerCardRosterRequest.slot)
    pub slot: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCSetPlayerCardRosterRequest.player_card_item_id)
    pub player_card_item_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCSetPlayerCardRosterRequest.event_id)
    pub event_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgClientToGCSetPlayerCardRosterRequest.fantasy_period)
    pub fantasy_period: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCSetPlayerCardRosterRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCSetPlayerCardRosterRequest {
    fn default() -> &'a CMsgClientToGCSetPlayerCardRosterRequest {
        <CMsgClientToGCSetPlayerCardRosterRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCSetPlayerCardRosterRequest {
    pub fn new() -> CMsgClientToGCSetPlayerCardRosterRequest {
        ::std::default::Default::default()
    }

    // optional uint32 league_id = 1;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional uint32 deprecated_timestamp = 2;

    pub fn deprecated_timestamp(&self) -> u32 {
        self.deprecated_timestamp.unwrap_or(0)
    }

    pub fn clear_deprecated_timestamp(&mut self) {
        self.deprecated_timestamp = ::std::option::Option::None;
    }

    pub fn has_deprecated_timestamp(&self) -> bool {
        self.deprecated_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_timestamp(&mut self, v: u32) {
        self.deprecated_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 slot = 3;

    pub fn slot(&self) -> u32 {
        self.slot.unwrap_or(0)
    }

    pub fn clear_slot(&mut self) {
        self.slot = ::std::option::Option::None;
    }

    pub fn has_slot(&self) -> bool {
        self.slot.is_some()
    }

    // Param is passed by value, moved
    pub fn set_slot(&mut self, v: u32) {
        self.slot = ::std::option::Option::Some(v);
    }

    // optional uint64 player_card_item_id = 4;

    pub fn player_card_item_id(&self) -> u64 {
        self.player_card_item_id.unwrap_or(0)
    }

    pub fn clear_player_card_item_id(&mut self) {
        self.player_card_item_id = ::std::option::Option::None;
    }

    pub fn has_player_card_item_id(&self) -> bool {
        self.player_card_item_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_card_item_id(&mut self, v: u64) {
        self.player_card_item_id = ::std::option::Option::Some(v);
    }

    // optional uint32 event_id = 5;

    pub fn event_id(&self) -> u32 {
        self.event_id.unwrap_or(0)
    }

    pub fn clear_event_id(&mut self) {
        self.event_id = ::std::option::Option::None;
    }

    pub fn has_event_id(&self) -> bool {
        self.event_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_id(&mut self, v: u32) {
        self.event_id = ::std::option::Option::Some(v);
    }

    // optional uint32 fantasy_period = 6;

    pub fn fantasy_period(&self) -> u32 {
        self.fantasy_period.unwrap_or(0)
    }

    pub fn clear_fantasy_period(&mut self) {
        self.fantasy_period = ::std::option::Option::None;
    }

    pub fn has_fantasy_period(&self) -> bool {
        self.fantasy_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_period(&mut self, v: u32) {
        self.fantasy_period = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "league_id",
            |m: &CMsgClientToGCSetPlayerCardRosterRequest| { &m.league_id },
            |m: &mut CMsgClientToGCSetPlayerCardRosterRequest| { &mut m.league_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "deprecated_timestamp",
            |m: &CMsgClientToGCSetPlayerCardRosterRequest| { &m.deprecated_timestamp },
            |m: &mut CMsgClientToGCSetPlayerCardRosterRequest| { &mut m.deprecated_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "slot",
            |m: &CMsgClientToGCSetPlayerCardRosterRequest| { &m.slot },
            |m: &mut CMsgClientToGCSetPlayerCardRosterRequest| { &mut m.slot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_card_item_id",
            |m: &CMsgClientToGCSetPlayerCardRosterRequest| { &m.player_card_item_id },
            |m: &mut CMsgClientToGCSetPlayerCardRosterRequest| { &mut m.player_card_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "event_id",
            |m: &CMsgClientToGCSetPlayerCardRosterRequest| { &m.event_id },
            |m: &mut CMsgClientToGCSetPlayerCardRosterRequest| { &mut m.event_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fantasy_period",
            |m: &CMsgClientToGCSetPlayerCardRosterRequest| { &m.fantasy_period },
            |m: &mut CMsgClientToGCSetPlayerCardRosterRequest| { &mut m.fantasy_period },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCSetPlayerCardRosterRequest>(
            "CMsgClientToGCSetPlayerCardRosterRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCSetPlayerCardRosterRequest {
    const NAME: &'static str = "CMsgClientToGCSetPlayerCardRosterRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.deprecated_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.slot = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.player_card_item_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.event_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.fantasy_period = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.league_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.deprecated_timestamp {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.slot {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.player_card_item_id {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.event_id {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.fantasy_period {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.league_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.deprecated_timestamp {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.slot {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.player_card_item_id {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.event_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.fantasy_period {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCSetPlayerCardRosterRequest {
        CMsgClientToGCSetPlayerCardRosterRequest::new()
    }

    fn clear(&mut self) {
        self.league_id = ::std::option::Option::None;
        self.deprecated_timestamp = ::std::option::Option::None;
        self.slot = ::std::option::Option::None;
        self.player_card_item_id = ::std::option::Option::None;
        self.event_id = ::std::option::Option::None;
        self.fantasy_period = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCSetPlayerCardRosterRequest {
        static instance: CMsgClientToGCSetPlayerCardRosterRequest = CMsgClientToGCSetPlayerCardRosterRequest {
            league_id: ::std::option::Option::None,
            deprecated_timestamp: ::std::option::Option::None,
            slot: ::std::option::Option::None,
            player_card_item_id: ::std::option::Option::None,
            event_id: ::std::option::Option::None,
            fantasy_period: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCSetPlayerCardRosterRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCSetPlayerCardRosterRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCSetPlayerCardRosterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCSetPlayerCardRosterRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgClientToGCSetPlayerCardRosterResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCSetPlayerCardRosterResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgClientToGCSetPlayerCardRosterResponse.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_client_to_gcset_player_card_roster_response::Result>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgClientToGCSetPlayerCardRosterResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCSetPlayerCardRosterResponse {
    fn default() -> &'a CMsgClientToGCSetPlayerCardRosterResponse {
        <CMsgClientToGCSetPlayerCardRosterResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCSetPlayerCardRosterResponse {
    pub fn new() -> CMsgClientToGCSetPlayerCardRosterResponse {
        ::std::default::Default::default()
    }

    // optional .dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1;

    pub fn result(&self) -> cmsg_client_to_gcset_player_card_roster_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcset_player_card_roster_response::Result::SUCCESS),
            None => cmsg_client_to_gcset_player_card_roster_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcset_player_card_roster_response::Result) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgClientToGCSetPlayerCardRosterResponse| { &m.result },
            |m: &mut CMsgClientToGCSetPlayerCardRosterResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientToGCSetPlayerCardRosterResponse>(
            "CMsgClientToGCSetPlayerCardRosterResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientToGCSetPlayerCardRosterResponse {
    const NAME: &'static str = "CMsgClientToGCSetPlayerCardRosterResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCSetPlayerCardRosterResponse {
        CMsgClientToGCSetPlayerCardRosterResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCSetPlayerCardRosterResponse {
        static instance: CMsgClientToGCSetPlayerCardRosterResponse = CMsgClientToGCSetPlayerCardRosterResponse {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientToGCSetPlayerCardRosterResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientToGCSetPlayerCardRosterResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientToGCSetPlayerCardRosterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientToGCSetPlayerCardRosterResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientToGCSetPlayerCardRosterResponse`
pub mod cmsg_client_to_gcset_player_card_roster_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_UNSPECIFIED)
        ERROR_UNSPECIFIED = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_INVALID_LEAGUE_ID)
        ERROR_INVALID_LEAGUE_ID = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_INVALID_TIMESTAMP)
        ERROR_INVALID_TIMESTAMP = 3,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_PLAYER_CARD_NOT_OWNED)
        ERROR_PLAYER_CARD_NOT_OWNED = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_INVALID_SLOT)
        ERROR_INVALID_SLOT = 5,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_FAILED_CARD_INFO)
        ERROR_FAILED_CARD_INFO = 6,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_ACCOUNT_DUPLICATE)
        ERROR_ACCOUNT_DUPLICATE = 7,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_LOCKED_TIMESTAMP)
        ERROR_LOCKED_TIMESTAMP = 8,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_INVALID_LEAGUE_FOR_PERIOD)
        ERROR_INVALID_LEAGUE_FOR_PERIOD = 9,
        // @@protoc_insertion_point(enum_value:dota.CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_INVALID_EVENT)
        ERROR_INVALID_EVENT = 10,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                2 => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                3 => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                4 => ::std::option::Option::Some(Result::ERROR_PLAYER_CARD_NOT_OWNED),
                5 => ::std::option::Option::Some(Result::ERROR_INVALID_SLOT),
                6 => ::std::option::Option::Some(Result::ERROR_FAILED_CARD_INFO),
                7 => ::std::option::Option::Some(Result::ERROR_ACCOUNT_DUPLICATE),
                8 => ::std::option::Option::Some(Result::ERROR_LOCKED_TIMESTAMP),
                9 => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_FOR_PERIOD),
                10 => ::std::option::Option::Some(Result::ERROR_INVALID_EVENT),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "ERROR_UNSPECIFIED" => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                "ERROR_INVALID_LEAGUE_ID" => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                "ERROR_INVALID_TIMESTAMP" => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                "ERROR_PLAYER_CARD_NOT_OWNED" => ::std::option::Option::Some(Result::ERROR_PLAYER_CARD_NOT_OWNED),
                "ERROR_INVALID_SLOT" => ::std::option::Option::Some(Result::ERROR_INVALID_SLOT),
                "ERROR_FAILED_CARD_INFO" => ::std::option::Option::Some(Result::ERROR_FAILED_CARD_INFO),
                "ERROR_ACCOUNT_DUPLICATE" => ::std::option::Option::Some(Result::ERROR_ACCOUNT_DUPLICATE),
                "ERROR_LOCKED_TIMESTAMP" => ::std::option::Option::Some(Result::ERROR_LOCKED_TIMESTAMP),
                "ERROR_INVALID_LEAGUE_FOR_PERIOD" => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_FOR_PERIOD),
                "ERROR_INVALID_EVENT" => ::std::option::Option::Some(Result::ERROR_INVALID_EVENT),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::ERROR_UNSPECIFIED,
            Result::ERROR_INVALID_LEAGUE_ID,
            Result::ERROR_INVALID_TIMESTAMP,
            Result::ERROR_PLAYER_CARD_NOT_OWNED,
            Result::ERROR_INVALID_SLOT,
            Result::ERROR_FAILED_CARD_INFO,
            Result::ERROR_ACCOUNT_DUPLICATE,
            Result::ERROR_LOCKED_TIMESTAMP,
            Result::ERROR_INVALID_LEAGUE_FOR_PERIOD,
            Result::ERROR_INVALID_EVENT,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgClientToGCSetPlayerCardRosterResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("CMsgClientToGCSetPlayerCardRosterResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAFantasyDPCLeagueStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAFantasyDPCLeagueStatus {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAFantasyDPCLeagueStatus.league_infos)
    pub league_infos: ::std::vec::Vec<cmsg_dotafantasy_dpcleague_status::LeagueInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAFantasyDPCLeagueStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAFantasyDPCLeagueStatus {
    fn default() -> &'a CMsgDOTAFantasyDPCLeagueStatus {
        <CMsgDOTAFantasyDPCLeagueStatus as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAFantasyDPCLeagueStatus {
    pub fn new() -> CMsgDOTAFantasyDPCLeagueStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "league_infos",
            |m: &CMsgDOTAFantasyDPCLeagueStatus| { &m.league_infos },
            |m: &mut CMsgDOTAFantasyDPCLeagueStatus| { &mut m.league_infos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAFantasyDPCLeagueStatus>(
            "CMsgDOTAFantasyDPCLeagueStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAFantasyDPCLeagueStatus {
    const NAME: &'static str = "CMsgDOTAFantasyDPCLeagueStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.league_infos.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.league_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.league_infos {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAFantasyDPCLeagueStatus {
        CMsgDOTAFantasyDPCLeagueStatus::new()
    }

    fn clear(&mut self) {
        self.league_infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAFantasyDPCLeagueStatus {
        static instance: CMsgDOTAFantasyDPCLeagueStatus = CMsgDOTAFantasyDPCLeagueStatus {
            league_infos: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAFantasyDPCLeagueStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAFantasyDPCLeagueStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAFantasyDPCLeagueStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAFantasyDPCLeagueStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTAFantasyDPCLeagueStatus`
pub mod cmsg_dotafantasy_dpcleague_status {
    // @@protoc_insertion_point(message:dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LeagueInfo {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_id)
        pub league_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
        pub league_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.start_timestamp)
        pub start_timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.end_timestamp)
        pub end_timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
        pub day_timestamps: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.status)
        pub status: ::std::option::Option<::protobuf::EnumOrUnknown<ERosterStatus>>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LeagueInfo {
        fn default() -> &'a LeagueInfo {
            <LeagueInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl LeagueInfo {
        pub fn new() -> LeagueInfo {
            ::std::default::Default::default()
        }

        // optional uint32 league_id = 1;

        pub fn league_id(&self) -> u32 {
            self.league_id.unwrap_or(0)
        }

        pub fn clear_league_id(&mut self) {
            self.league_id = ::std::option::Option::None;
        }

        pub fn has_league_id(&self) -> bool {
            self.league_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_id(&mut self, v: u32) {
            self.league_id = ::std::option::Option::Some(v);
        }

        // optional string league_name = 2;

        pub fn league_name(&self) -> &str {
            match self.league_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_league_name(&mut self) {
            self.league_name = ::std::option::Option::None;
        }

        pub fn has_league_name(&self) -> bool {
            self.league_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_name(&mut self, v: ::std::string::String) {
            self.league_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_league_name(&mut self) -> &mut ::std::string::String {
            if self.league_name.is_none() {
                self.league_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.league_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_league_name(&mut self) -> ::std::string::String {
            self.league_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 start_timestamp = 3;

        pub fn start_timestamp(&self) -> u32 {
            self.start_timestamp.unwrap_or(0)
        }

        pub fn clear_start_timestamp(&mut self) {
            self.start_timestamp = ::std::option::Option::None;
        }

        pub fn has_start_timestamp(&self) -> bool {
            self.start_timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_start_timestamp(&mut self, v: u32) {
            self.start_timestamp = ::std::option::Option::Some(v);
        }

        // optional uint32 end_timestamp = 4;

        pub fn end_timestamp(&self) -> u32 {
            self.end_timestamp.unwrap_or(0)
        }

        pub fn clear_end_timestamp(&mut self) {
            self.end_timestamp = ::std::option::Option::None;
        }

        pub fn has_end_timestamp(&self) -> bool {
            self.end_timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_end_timestamp(&mut self, v: u32) {
            self.end_timestamp = ::std::option::Option::Some(v);
        }

        // optional .dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8;

        pub fn status(&self) -> ERosterStatus {
            match self.status {
                Some(e) => e.enum_value_or(ERosterStatus::UNSET),
                None => ERosterStatus::UNSET,
            }
        }

        pub fn clear_status(&mut self) {
            self.status = ::std::option::Option::None;
        }

        pub fn has_status(&self) -> bool {
            self.status.is_some()
        }

        // Param is passed by value, moved
        pub fn set_status(&mut self, v: ERosterStatus) {
            self.status = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "league_id",
                |m: &LeagueInfo| { &m.league_id },
                |m: &mut LeagueInfo| { &mut m.league_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "league_name",
                |m: &LeagueInfo| { &m.league_name },
                |m: &mut LeagueInfo| { &mut m.league_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "start_timestamp",
                |m: &LeagueInfo| { &m.start_timestamp },
                |m: &mut LeagueInfo| { &mut m.start_timestamp },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "end_timestamp",
                |m: &LeagueInfo| { &m.end_timestamp },
                |m: &mut LeagueInfo| { &mut m.end_timestamp },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "day_timestamps",
                |m: &LeagueInfo| { &m.day_timestamps },
                |m: &mut LeagueInfo| { &mut m.day_timestamps },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "status",
                |m: &LeagueInfo| { &m.status },
                |m: &mut LeagueInfo| { &mut m.status },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LeagueInfo>(
                "CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LeagueInfo {
        const NAME: &'static str = "LeagueInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.league_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.start_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.end_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    42 => {
                        is.read_repeated_packed_uint32_into(&mut self.day_timestamps)?;
                    },
                    40 => {
                        self.day_timestamps.push(is.read_uint32()?);
                    },
                    64 => {
                        self.status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.league_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.league_name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.start_timestamp {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.end_timestamp {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            for value in &self.day_timestamps {
                my_size += ::protobuf::rt::uint32_size(5, *value);
            };
            if let Some(v) = self.status {
                my_size += ::protobuf::rt::int32_size(8, v.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.league_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.league_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.start_timestamp {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.end_timestamp {
                os.write_uint32(4, v)?;
            }
            for v in &self.day_timestamps {
                os.write_uint32(5, *v)?;
            };
            if let Some(v) = self.status {
                os.write_enum(8, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LeagueInfo {
            LeagueInfo::new()
        }

        fn clear(&mut self) {
            self.league_id = ::std::option::Option::None;
            self.league_name = ::std::option::Option::None;
            self.start_timestamp = ::std::option::Option::None;
            self.end_timestamp = ::std::option::Option::None;
            self.day_timestamps.clear();
            self.status = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LeagueInfo {
            static instance: LeagueInfo = LeagueInfo {
                league_id: ::std::option::Option::None,
                league_name: ::std::option::Option::None,
                start_timestamp: ::std::option::Option::None,
                end_timestamp: ::std::option::Option::None,
                day_timestamps: ::std::vec::Vec::new(),
                status: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for LeagueInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LeagueInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LeagueInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus)
    pub enum ERosterStatus {
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus.UNSET)
        UNSET = 0,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus.PARTIAL)
        PARTIAL = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus.FULL)
        FULL = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus.CONCLUDED)
        CONCLUDED = 3,
    }

    impl ::protobuf::Enum for ERosterStatus {
        const NAME: &'static str = "ERosterStatus";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ERosterStatus> {
            match value {
                0 => ::std::option::Option::Some(ERosterStatus::UNSET),
                1 => ::std::option::Option::Some(ERosterStatus::PARTIAL),
                2 => ::std::option::Option::Some(ERosterStatus::FULL),
                3 => ::std::option::Option::Some(ERosterStatus::CONCLUDED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ERosterStatus> {
            match str {
                "UNSET" => ::std::option::Option::Some(ERosterStatus::UNSET),
                "PARTIAL" => ::std::option::Option::Some(ERosterStatus::PARTIAL),
                "FULL" => ::std::option::Option::Some(ERosterStatus::FULL),
                "CONCLUDED" => ::std::option::Option::Some(ERosterStatus::CONCLUDED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ERosterStatus] = &[
            ERosterStatus::UNSET,
            ERosterStatus::PARTIAL,
            ERosterStatus::FULL,
            ERosterStatus::CONCLUDED,
        ];
    }

    impl ::protobuf::EnumFull for ERosterStatus {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ERosterStatus {
        fn default() -> Self {
            ERosterStatus::UNSET
        }
    }

    impl ERosterStatus {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ERosterStatus>("CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTADPCSearchResults)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTADPCSearchResults {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.players)
    pub players: ::std::vec::Vec<cmsg_dotadpcsearch_results::Player>,
    // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.teams)
    pub teams: ::std::vec::Vec<cmsg_dotadpcsearch_results::Team>,
    // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.leagues)
    pub leagues: ::std::vec::Vec<cmsg_dotadpcsearch_results::League>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTADPCSearchResults.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTADPCSearchResults {
    fn default() -> &'a CMsgDOTADPCSearchResults {
        <CMsgDOTADPCSearchResults as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTADPCSearchResults {
    pub fn new() -> CMsgDOTADPCSearchResults {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "players",
            |m: &CMsgDOTADPCSearchResults| { &m.players },
            |m: &mut CMsgDOTADPCSearchResults| { &mut m.players },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "teams",
            |m: &CMsgDOTADPCSearchResults| { &m.teams },
            |m: &mut CMsgDOTADPCSearchResults| { &mut m.teams },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "leagues",
            |m: &CMsgDOTADPCSearchResults| { &m.leagues },
            |m: &mut CMsgDOTADPCSearchResults| { &mut m.leagues },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTADPCSearchResults>(
            "CMsgDOTADPCSearchResults",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTADPCSearchResults {
    const NAME: &'static str = "CMsgDOTADPCSearchResults";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.players.push(is.read_message()?);
                },
                18 => {
                    self.teams.push(is.read_message()?);
                },
                26 => {
                    self.leagues.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.players {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.leagues {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.players {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.teams {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.leagues {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTADPCSearchResults {
        CMsgDOTADPCSearchResults::new()
    }

    fn clear(&mut self) {
        self.players.clear();
        self.teams.clear();
        self.leagues.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTADPCSearchResults {
        static instance: CMsgDOTADPCSearchResults = CMsgDOTADPCSearchResults {
            players: ::std::vec::Vec::new(),
            teams: ::std::vec::Vec::new(),
            leagues: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTADPCSearchResults {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTADPCSearchResults").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTADPCSearchResults {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTADPCSearchResults {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTADPCSearchResults`
pub mod cmsg_dotadpcsearch_results {
    // @@protoc_insertion_point(message:dota.CMsgDOTADPCSearchResults.Player)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Player {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.Player.id)
        pub id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.Player.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.Player.real_name)
        pub real_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTADPCSearchResults.Player.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Player {
        fn default() -> &'a Player {
            <Player as ::protobuf::Message>::default_instance()
        }
    }

    impl Player {
        pub fn new() -> Player {
            ::std::default::Default::default()
        }

        // optional uint32 id = 1;

        pub fn id(&self) -> u32 {
            self.id.unwrap_or(0)
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: u32) {
            self.id = ::std::option::Option::Some(v);
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string real_name = 3;

        pub fn real_name(&self) -> &str {
            match self.real_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_real_name(&mut self) {
            self.real_name = ::std::option::Option::None;
        }

        pub fn has_real_name(&self) -> bool {
            self.real_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_real_name(&mut self, v: ::std::string::String) {
            self.real_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_real_name(&mut self) -> &mut ::std::string::String {
            if self.real_name.is_none() {
                self.real_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.real_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_real_name(&mut self) -> ::std::string::String {
            self.real_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "id",
                |m: &Player| { &m.id },
                |m: &mut Player| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &Player| { &m.name },
                |m: &mut Player| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "real_name",
                |m: &Player| { &m.real_name },
                |m: &mut Player| { &mut m.real_name },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Player>(
                "CMsgDOTADPCSearchResults.Player",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Player {
        const NAME: &'static str = "Player";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.real_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.real_name.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.real_name.as_ref() {
                os.write_string(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Player {
            Player::new()
        }

        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.real_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Player {
            static instance: Player = Player {
                id: ::std::option::Option::None,
                name: ::std::option::Option::None,
                real_name: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Player {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTADPCSearchResults.Player").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Player {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Player {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTADPCSearchResults.Team)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Team {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.Team.id)
        pub id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.Team.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.Team.url)
        pub url: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTADPCSearchResults.Team.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Team {
        fn default() -> &'a Team {
            <Team as ::protobuf::Message>::default_instance()
        }
    }

    impl Team {
        pub fn new() -> Team {
            ::std::default::Default::default()
        }

        // optional uint32 id = 1;

        pub fn id(&self) -> u32 {
            self.id.unwrap_or(0)
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: u32) {
            self.id = ::std::option::Option::Some(v);
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string url = 3;

        pub fn url(&self) -> &str {
            match self.url.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_url(&mut self) {
            self.url = ::std::option::Option::None;
        }

        pub fn has_url(&self) -> bool {
            self.url.is_some()
        }

        // Param is passed by value, moved
        pub fn set_url(&mut self, v: ::std::string::String) {
            self.url = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_url(&mut self) -> &mut ::std::string::String {
            if self.url.is_none() {
                self.url = ::std::option::Option::Some(::std::string::String::new());
            }
            self.url.as_mut().unwrap()
        }

        // Take field
        pub fn take_url(&mut self) -> ::std::string::String {
            self.url.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "id",
                |m: &Team| { &m.id },
                |m: &mut Team| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &Team| { &m.name },
                |m: &mut Team| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "url",
                |m: &Team| { &m.url },
                |m: &mut Team| { &mut m.url },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Team>(
                "CMsgDOTADPCSearchResults.Team",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Team {
        const NAME: &'static str = "Team";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.url = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.url.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.url.as_ref() {
                os.write_string(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Team {
            Team::new()
        }

        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.url = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Team {
            static instance: Team = Team {
                id: ::std::option::Option::None,
                name: ::std::option::Option::None,
                url: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Team {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTADPCSearchResults.Team").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Team {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Team {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTADPCSearchResults.League)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct League {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.League.id)
        pub id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCSearchResults.League.name)
        pub name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTADPCSearchResults.League.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a League {
        fn default() -> &'a League {
            <League as ::protobuf::Message>::default_instance()
        }
    }

    impl League {
        pub fn new() -> League {
            ::std::default::Default::default()
        }

        // optional uint32 id = 1;

        pub fn id(&self) -> u32 {
            self.id.unwrap_or(0)
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: u32) {
            self.id = ::std::option::Option::Some(v);
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "id",
                |m: &League| { &m.id },
                |m: &mut League| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &League| { &m.name },
                |m: &mut League| { &mut m.name },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<League>(
                "CMsgDOTADPCSearchResults.League",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for League {
        const NAME: &'static str = "League";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> League {
            League::new()
        }

        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static League {
            static instance: League = League {
                id: ::std::option::Option::None,
                name: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for League {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTADPCSearchResults.League").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for League {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for League {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CMsgDOTADPCSearchResults.ESearchResultsDesired)
    pub enum ESearchResultsDesired {
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTADPCSearchResults.ESearchResultsDesired.k_ESearchResultsDesired_Players)
        k_ESearchResultsDesired_Players = 1,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTADPCSearchResults.ESearchResultsDesired.k_ESearchResultsDesired_Teams)
        k_ESearchResultsDesired_Teams = 2,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTADPCSearchResults.ESearchResultsDesired.k_ESearchResultsDesired_Leagues)
        k_ESearchResultsDesired_Leagues = 4,
        // @@protoc_insertion_point(enum_value:dota.CMsgDOTADPCSearchResults.ESearchResultsDesired.k_ESearchResultsDesired_All)
        k_ESearchResultsDesired_All = 7,
    }

    impl ::protobuf::Enum for ESearchResultsDesired {
        const NAME: &'static str = "ESearchResultsDesired";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ESearchResultsDesired> {
            match value {
                1 => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Players),
                2 => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Teams),
                4 => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Leagues),
                7 => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_All),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ESearchResultsDesired> {
            match str {
                "k_ESearchResultsDesired_Players" => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Players),
                "k_ESearchResultsDesired_Teams" => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Teams),
                "k_ESearchResultsDesired_Leagues" => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Leagues),
                "k_ESearchResultsDesired_All" => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_All),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ESearchResultsDesired] = &[
            ESearchResultsDesired::k_ESearchResultsDesired_Players,
            ESearchResultsDesired::k_ESearchResultsDesired_Teams,
            ESearchResultsDesired::k_ESearchResultsDesired_Leagues,
            ESearchResultsDesired::k_ESearchResultsDesired_All,
        ];
    }

    impl ::protobuf::EnumFull for ESearchResultsDesired {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgDOTADPCSearchResults.ESearchResultsDesired").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                ESearchResultsDesired::k_ESearchResultsDesired_Players => 0,
                ESearchResultsDesired::k_ESearchResultsDesired_Teams => 1,
                ESearchResultsDesired::k_ESearchResultsDesired_Leagues => 2,
                ESearchResultsDesired::k_ESearchResultsDesired_All => 3,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for ESearchResultsDesired {
        fn default() -> Self {
            ESearchResultsDesired::k_ESearchResultsDesired_Players
        }
    }

    impl ESearchResultsDesired {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ESearchResultsDesired>("CMsgDOTADPCSearchResults.ESearchResultsDesired")
        }
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTADPCTeamFavoriteRankings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTADPCTeamFavoriteRankings {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTADPCTeamFavoriteRankings.teams)
    pub teams: ::std::vec::Vec<cmsg_dotadpcteam_favorite_rankings::Team>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTADPCTeamFavoriteRankings.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTADPCTeamFavoriteRankings {
    fn default() -> &'a CMsgDOTADPCTeamFavoriteRankings {
        <CMsgDOTADPCTeamFavoriteRankings as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTADPCTeamFavoriteRankings {
    pub fn new() -> CMsgDOTADPCTeamFavoriteRankings {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "teams",
            |m: &CMsgDOTADPCTeamFavoriteRankings| { &m.teams },
            |m: &mut CMsgDOTADPCTeamFavoriteRankings| { &mut m.teams },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTADPCTeamFavoriteRankings>(
            "CMsgDOTADPCTeamFavoriteRankings",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTADPCTeamFavoriteRankings {
    const NAME: &'static str = "CMsgDOTADPCTeamFavoriteRankings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.teams.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.teams {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTADPCTeamFavoriteRankings {
        CMsgDOTADPCTeamFavoriteRankings::new()
    }

    fn clear(&mut self) {
        self.teams.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTADPCTeamFavoriteRankings {
        static instance: CMsgDOTADPCTeamFavoriteRankings = CMsgDOTADPCTeamFavoriteRankings {
            teams: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTADPCTeamFavoriteRankings {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTADPCTeamFavoriteRankings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTADPCTeamFavoriteRankings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTADPCTeamFavoriteRankings {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTADPCTeamFavoriteRankings`
pub mod cmsg_dotadpcteam_favorite_rankings {
    // @@protoc_insertion_point(message:dota.CMsgDOTADPCTeamFavoriteRankings.Team)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Team {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCTeamFavoriteRankings.Team.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTADPCTeamFavoriteRankings.Team.favorites)
        pub favorites: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTADPCTeamFavoriteRankings.Team.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Team {
        fn default() -> &'a Team {
            <Team as ::protobuf::Message>::default_instance()
        }
    }

    impl Team {
        pub fn new() -> Team {
            ::std::default::Default::default()
        }

        // optional uint32 team_id = 1;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional uint32 favorites = 2;

        pub fn favorites(&self) -> u32 {
            self.favorites.unwrap_or(0)
        }

        pub fn clear_favorites(&mut self) {
            self.favorites = ::std::option::Option::None;
        }

        pub fn has_favorites(&self) -> bool {
            self.favorites.is_some()
        }

        // Param is passed by value, moved
        pub fn set_favorites(&mut self, v: u32) {
            self.favorites = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_id",
                |m: &Team| { &m.team_id },
                |m: &mut Team| { &mut m.team_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "favorites",
                |m: &Team| { &m.favorites },
                |m: &mut Team| { &mut m.favorites },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Team>(
                "CMsgDOTADPCTeamFavoriteRankings.Team",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Team {
        const NAME: &'static str = "Team";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.favorites = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.team_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.favorites {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.team_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.favorites {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Team {
            Team::new()
        }

        fn clear(&mut self) {
            self.team_id = ::std::option::Option::None;
            self.favorites = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Team {
            static instance: Team = Team {
                team_id: ::std::option::Option::None,
                favorites: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Team {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTADPCTeamFavoriteRankings.Team").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Team {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Team {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.DOTA_2013PassportSelectionIndices)
pub enum DOTA_2013PassportSelectionIndices {
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_0)
    PP13_SEL_ALLSTAR_PLAYER_0 = 0,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_1)
    PP13_SEL_ALLSTAR_PLAYER_1 = 1,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_2)
    PP13_SEL_ALLSTAR_PLAYER_2 = 2,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_3)
    PP13_SEL_ALLSTAR_PLAYER_3 = 3,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_4)
    PP13_SEL_ALLSTAR_PLAYER_4 = 4,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_5)
    PP13_SEL_ALLSTAR_PLAYER_5 = 5,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_6)
    PP13_SEL_ALLSTAR_PLAYER_6 = 6,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_7)
    PP13_SEL_ALLSTAR_PLAYER_7 = 7,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_8)
    PP13_SEL_ALLSTAR_PLAYER_8 = 8,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_9)
    PP13_SEL_ALLSTAR_PLAYER_9 = 9,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_0)
    PP13_SEL_QUALPRED_WEST_0 = 10,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_1)
    PP13_SEL_QUALPRED_WEST_1 = 11,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_2)
    PP13_SEL_QUALPRED_WEST_2 = 12,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_3)
    PP13_SEL_QUALPRED_WEST_3 = 13,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_4)
    PP13_SEL_QUALPRED_WEST_4 = 14,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_5)
    PP13_SEL_QUALPRED_WEST_5 = 15,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_6)
    PP13_SEL_QUALPRED_WEST_6 = 16,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_7)
    PP13_SEL_QUALPRED_WEST_7 = 17,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_8)
    PP13_SEL_QUALPRED_WEST_8 = 18,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_9)
    PP13_SEL_QUALPRED_WEST_9 = 19,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_10)
    PP13_SEL_QUALPRED_WEST_10 = 20,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_11)
    PP13_SEL_QUALPRED_WEST_11 = 21,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_12)
    PP13_SEL_QUALPRED_WEST_12 = 22,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_13)
    PP13_SEL_QUALPRED_WEST_13 = 23,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_14)
    PP13_SEL_QUALPRED_WEST_14 = 24,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_0)
    PP13_SEL_QUALPRED_EAST_0 = 25,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_1)
    PP13_SEL_QUALPRED_EAST_1 = 26,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_2)
    PP13_SEL_QUALPRED_EAST_2 = 27,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_3)
    PP13_SEL_QUALPRED_EAST_3 = 28,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_4)
    PP13_SEL_QUALPRED_EAST_4 = 29,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_5)
    PP13_SEL_QUALPRED_EAST_5 = 30,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_6)
    PP13_SEL_QUALPRED_EAST_6 = 31,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_7)
    PP13_SEL_QUALPRED_EAST_7 = 32,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_8)
    PP13_SEL_QUALPRED_EAST_8 = 33,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_9)
    PP13_SEL_QUALPRED_EAST_9 = 34,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_10)
    PP13_SEL_QUALPRED_EAST_10 = 35,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_11)
    PP13_SEL_QUALPRED_EAST_11 = 36,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_12)
    PP13_SEL_QUALPRED_EAST_12 = 37,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_13)
    PP13_SEL_QUALPRED_EAST_13 = 38,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_14)
    PP13_SEL_QUALPRED_EAST_14 = 39,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_TEAMCUP_TEAM)
    PP13_SEL_TEAMCUP_TEAM = 40,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_TEAMCUP_PLAYER)
    PP13_SEL_TEAMCUP_PLAYER = 41,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_TEAMCUP_TEAM_LOCK)
    PP13_SEL_TEAMCUP_TEAM_LOCK = 42,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_TEAMCUP_PLAYER_LOCK)
    PP13_SEL_TEAMCUP_PLAYER_LOCK = 43,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_0)
    PP13_SEL_EVENTPRED_0 = 44,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_1)
    PP13_SEL_EVENTPRED_1 = 45,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_2)
    PP13_SEL_EVENTPRED_2 = 46,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_3)
    PP13_SEL_EVENTPRED_3 = 47,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_4)
    PP13_SEL_EVENTPRED_4 = 48,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_5)
    PP13_SEL_EVENTPRED_5 = 49,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_6)
    PP13_SEL_EVENTPRED_6 = 50,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_7)
    PP13_SEL_EVENTPRED_7 = 51,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_8)
    PP13_SEL_EVENTPRED_8 = 52,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_9)
    PP13_SEL_EVENTPRED_9 = 53,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_10)
    PP13_SEL_EVENTPRED_10 = 54,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_11)
    PP13_SEL_EVENTPRED_11 = 55,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_12)
    PP13_SEL_EVENTPRED_12 = 56,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_13)
    PP13_SEL_EVENTPRED_13 = 57,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_14)
    PP13_SEL_EVENTPRED_14 = 58,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_15)
    PP13_SEL_EVENTPRED_15 = 59,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_16)
    PP13_SEL_EVENTPRED_16 = 60,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_17)
    PP13_SEL_EVENTPRED_17 = 61,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_18)
    PP13_SEL_EVENTPRED_18 = 62,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_19)
    PP13_SEL_EVENTPRED_19 = 63,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_20)
    PP13_SEL_EVENTPRED_20 = 64,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_21)
    PP13_SEL_EVENTPRED_21 = 65,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_22)
    PP13_SEL_EVENTPRED_22 = 66,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_23)
    PP13_SEL_EVENTPRED_23 = 67,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_24)
    PP13_SEL_EVENTPRED_24 = 68,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_25)
    PP13_SEL_EVENTPRED_25 = 69,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_26)
    PP13_SEL_EVENTPRED_26 = 70,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_27)
    PP13_SEL_EVENTPRED_27 = 71,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_28)
    PP13_SEL_EVENTPRED_28 = 72,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_29)
    PP13_SEL_EVENTPRED_29 = 73,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_30)
    PP13_SEL_EVENTPRED_30 = 74,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_31)
    PP13_SEL_EVENTPRED_31 = 75,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_32)
    PP13_SEL_EVENTPRED_32 = 76,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_33)
    PP13_SEL_EVENTPRED_33 = 77,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_34)
    PP13_SEL_EVENTPRED_34 = 78,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_35)
    PP13_SEL_EVENTPRED_35 = 79,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_36)
    PP13_SEL_EVENTPRED_36 = 80,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_37)
    PP13_SEL_EVENTPRED_37 = 81,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_38)
    PP13_SEL_EVENTPRED_38 = 82,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_39)
    PP13_SEL_EVENTPRED_39 = 83,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_40)
    PP13_SEL_EVENTPRED_40 = 84,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_41)
    PP13_SEL_EVENTPRED_41 = 85,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_42)
    PP13_SEL_EVENTPRED_42 = 86,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_43)
    PP13_SEL_EVENTPRED_43 = 87,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_0)
    PP13_SEL_SOLO_0 = 88,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_1)
    PP13_SEL_SOLO_1 = 89,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_2)
    PP13_SEL_SOLO_2 = 90,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_3)
    PP13_SEL_SOLO_3 = 91,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_4)
    PP13_SEL_SOLO_4 = 92,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_5)
    PP13_SEL_SOLO_5 = 93,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_6)
    PP13_SEL_SOLO_6 = 94,
    // @@protoc_insertion_point(enum_value:dota.DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_7)
    PP13_SEL_SOLO_7 = 95,
}

impl ::protobuf::Enum for DOTA_2013PassportSelectionIndices {
    const NAME: &'static str = "DOTA_2013PassportSelectionIndices";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DOTA_2013PassportSelectionIndices> {
        match value {
            0 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0),
            1 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_1),
            2 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_2),
            3 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_3),
            4 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_4),
            5 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_5),
            6 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_6),
            7 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_7),
            8 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_8),
            9 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_9),
            10 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_0),
            11 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_1),
            12 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_2),
            13 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_3),
            14 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_4),
            15 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_5),
            16 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_6),
            17 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_7),
            18 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_8),
            19 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_9),
            20 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_10),
            21 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_11),
            22 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_12),
            23 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_13),
            24 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_14),
            25 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_0),
            26 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_1),
            27 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_2),
            28 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_3),
            29 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_4),
            30 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_5),
            31 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_6),
            32 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_7),
            33 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_8),
            34 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_9),
            35 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_10),
            36 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_11),
            37 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_12),
            38 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_13),
            39 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_14),
            40 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM),
            41 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER),
            42 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM_LOCK),
            43 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER_LOCK),
            44 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_0),
            45 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_1),
            46 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_2),
            47 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_3),
            48 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_4),
            49 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_5),
            50 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_6),
            51 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_7),
            52 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_8),
            53 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_9),
            54 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_10),
            55 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_11),
            56 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_12),
            57 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_13),
            58 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_14),
            59 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_15),
            60 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_16),
            61 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_17),
            62 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_18),
            63 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_19),
            64 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_20),
            65 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_21),
            66 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_22),
            67 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_23),
            68 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_24),
            69 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_25),
            70 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_26),
            71 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_27),
            72 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_28),
            73 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_29),
            74 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_30),
            75 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_31),
            76 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_32),
            77 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_33),
            78 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_34),
            79 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_35),
            80 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_36),
            81 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_37),
            82 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_38),
            83 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_39),
            84 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_40),
            85 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_41),
            86 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_42),
            87 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_43),
            88 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_0),
            89 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_1),
            90 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_2),
            91 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_3),
            92 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_4),
            93 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_5),
            94 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_6),
            95 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_7),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<DOTA_2013PassportSelectionIndices> {
        match str {
            "PP13_SEL_ALLSTAR_PLAYER_0" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0),
            "PP13_SEL_ALLSTAR_PLAYER_1" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_1),
            "PP13_SEL_ALLSTAR_PLAYER_2" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_2),
            "PP13_SEL_ALLSTAR_PLAYER_3" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_3),
            "PP13_SEL_ALLSTAR_PLAYER_4" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_4),
            "PP13_SEL_ALLSTAR_PLAYER_5" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_5),
            "PP13_SEL_ALLSTAR_PLAYER_6" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_6),
            "PP13_SEL_ALLSTAR_PLAYER_7" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_7),
            "PP13_SEL_ALLSTAR_PLAYER_8" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_8),
            "PP13_SEL_ALLSTAR_PLAYER_9" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_9),
            "PP13_SEL_QUALPRED_WEST_0" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_0),
            "PP13_SEL_QUALPRED_WEST_1" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_1),
            "PP13_SEL_QUALPRED_WEST_2" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_2),
            "PP13_SEL_QUALPRED_WEST_3" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_3),
            "PP13_SEL_QUALPRED_WEST_4" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_4),
            "PP13_SEL_QUALPRED_WEST_5" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_5),
            "PP13_SEL_QUALPRED_WEST_6" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_6),
            "PP13_SEL_QUALPRED_WEST_7" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_7),
            "PP13_SEL_QUALPRED_WEST_8" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_8),
            "PP13_SEL_QUALPRED_WEST_9" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_9),
            "PP13_SEL_QUALPRED_WEST_10" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_10),
            "PP13_SEL_QUALPRED_WEST_11" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_11),
            "PP13_SEL_QUALPRED_WEST_12" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_12),
            "PP13_SEL_QUALPRED_WEST_13" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_13),
            "PP13_SEL_QUALPRED_WEST_14" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_14),
            "PP13_SEL_QUALPRED_EAST_0" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_0),
            "PP13_SEL_QUALPRED_EAST_1" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_1),
            "PP13_SEL_QUALPRED_EAST_2" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_2),
            "PP13_SEL_QUALPRED_EAST_3" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_3),
            "PP13_SEL_QUALPRED_EAST_4" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_4),
            "PP13_SEL_QUALPRED_EAST_5" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_5),
            "PP13_SEL_QUALPRED_EAST_6" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_6),
            "PP13_SEL_QUALPRED_EAST_7" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_7),
            "PP13_SEL_QUALPRED_EAST_8" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_8),
            "PP13_SEL_QUALPRED_EAST_9" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_9),
            "PP13_SEL_QUALPRED_EAST_10" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_10),
            "PP13_SEL_QUALPRED_EAST_11" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_11),
            "PP13_SEL_QUALPRED_EAST_12" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_12),
            "PP13_SEL_QUALPRED_EAST_13" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_13),
            "PP13_SEL_QUALPRED_EAST_14" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_14),
            "PP13_SEL_TEAMCUP_TEAM" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM),
            "PP13_SEL_TEAMCUP_PLAYER" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER),
            "PP13_SEL_TEAMCUP_TEAM_LOCK" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM_LOCK),
            "PP13_SEL_TEAMCUP_PLAYER_LOCK" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER_LOCK),
            "PP13_SEL_EVENTPRED_0" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_0),
            "PP13_SEL_EVENTPRED_1" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_1),
            "PP13_SEL_EVENTPRED_2" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_2),
            "PP13_SEL_EVENTPRED_3" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_3),
            "PP13_SEL_EVENTPRED_4" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_4),
            "PP13_SEL_EVENTPRED_5" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_5),
            "PP13_SEL_EVENTPRED_6" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_6),
            "PP13_SEL_EVENTPRED_7" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_7),
            "PP13_SEL_EVENTPRED_8" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_8),
            "PP13_SEL_EVENTPRED_9" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_9),
            "PP13_SEL_EVENTPRED_10" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_10),
            "PP13_SEL_EVENTPRED_11" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_11),
            "PP13_SEL_EVENTPRED_12" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_12),
            "PP13_SEL_EVENTPRED_13" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_13),
            "PP13_SEL_EVENTPRED_14" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_14),
            "PP13_SEL_EVENTPRED_15" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_15),
            "PP13_SEL_EVENTPRED_16" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_16),
            "PP13_SEL_EVENTPRED_17" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_17),
            "PP13_SEL_EVENTPRED_18" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_18),
            "PP13_SEL_EVENTPRED_19" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_19),
            "PP13_SEL_EVENTPRED_20" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_20),
            "PP13_SEL_EVENTPRED_21" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_21),
            "PP13_SEL_EVENTPRED_22" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_22),
            "PP13_SEL_EVENTPRED_23" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_23),
            "PP13_SEL_EVENTPRED_24" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_24),
            "PP13_SEL_EVENTPRED_25" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_25),
            "PP13_SEL_EVENTPRED_26" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_26),
            "PP13_SEL_EVENTPRED_27" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_27),
            "PP13_SEL_EVENTPRED_28" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_28),
            "PP13_SEL_EVENTPRED_29" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_29),
            "PP13_SEL_EVENTPRED_30" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_30),
            "PP13_SEL_EVENTPRED_31" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_31),
            "PP13_SEL_EVENTPRED_32" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_32),
            "PP13_SEL_EVENTPRED_33" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_33),
            "PP13_SEL_EVENTPRED_34" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_34),
            "PP13_SEL_EVENTPRED_35" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_35),
            "PP13_SEL_EVENTPRED_36" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_36),
            "PP13_SEL_EVENTPRED_37" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_37),
            "PP13_SEL_EVENTPRED_38" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_38),
            "PP13_SEL_EVENTPRED_39" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_39),
            "PP13_SEL_EVENTPRED_40" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_40),
            "PP13_SEL_EVENTPRED_41" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_41),
            "PP13_SEL_EVENTPRED_42" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_42),
            "PP13_SEL_EVENTPRED_43" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_43),
            "PP13_SEL_SOLO_0" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_0),
            "PP13_SEL_SOLO_1" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_1),
            "PP13_SEL_SOLO_2" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_2),
            "PP13_SEL_SOLO_3" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_3),
            "PP13_SEL_SOLO_4" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_4),
            "PP13_SEL_SOLO_5" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_5),
            "PP13_SEL_SOLO_6" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_6),
            "PP13_SEL_SOLO_7" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_7),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DOTA_2013PassportSelectionIndices] = &[
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_1,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_2,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_3,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_4,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_5,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_6,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_7,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_8,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_9,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_0,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_1,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_2,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_3,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_4,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_5,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_6,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_7,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_8,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_9,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_10,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_11,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_12,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_13,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_14,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_0,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_1,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_2,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_3,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_4,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_5,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_6,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_7,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_8,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_9,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_10,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_11,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_12,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_13,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_14,
        DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM,
        DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER,
        DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM_LOCK,
        DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER_LOCK,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_0,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_1,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_2,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_3,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_4,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_5,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_6,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_7,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_8,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_9,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_10,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_11,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_12,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_13,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_14,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_15,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_16,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_17,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_18,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_19,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_20,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_21,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_22,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_23,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_24,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_25,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_26,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_27,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_28,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_29,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_30,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_31,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_32,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_33,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_34,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_35,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_36,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_37,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_38,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_39,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_40,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_41,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_42,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_43,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_0,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_1,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_2,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_3,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_4,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_5,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_6,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_7,
    ];
}

impl ::protobuf::EnumFull for DOTA_2013PassportSelectionIndices {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DOTA_2013PassportSelectionIndices").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DOTA_2013PassportSelectionIndices {
    fn default() -> Self {
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0
    }
}

impl DOTA_2013PassportSelectionIndices {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DOTA_2013PassportSelectionIndices>("DOTA_2013PassportSelectionIndices")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$dota_gcmessages_client_fantasy.proto\x12\x04dota\x1a\x17dota_shared_e\
    nums.proto\"\x90\x07\n\x12CMsgDOTAPlayerInfo\x12\x1d\n\naccount_id\x18\
    \x01\x20\x01(\rR\taccountId\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04nam\
    e\x12!\n\x0ccountry_code\x18\x03\x20\x01(\tR\x0bcountryCode\x126\n\x0cfa\
    ntasy_role\x18\x04\x20\x01(\x0e2\x13.dota.Fantasy_RolesR\x0bfantasyRole\
    \x12\x17\n\x07team_id\x18\x05\x20\x01(\rR\x06teamId\x12\x1b\n\tteam_name\
    \x18\x06\x20\x01(\tR\x08teamName\x12\x19\n\x08team_tag\x18\x07\x20\x01(\
    \tR\x07teamTag\x12\x18\n\x07sponsor\x18\x08\x20\x01(\tR\x07sponsor\x12\
    \x1b\n\tis_locked\x18\t\x20\x01(\x08R\x08isLocked\x12\x15\n\x06is_pro\
    \x18\n\x20\x01(\x08R\x05isPro\x12\x1b\n\treal_name\x18\x0b\x20\x01(\tR\
    \x08realName\x12%\n\x0etotal_earnings\x18\r\x20\x01(\rR\rtotalEarnings\
    \x12:\n\x07results\x18\x0e\x20\x03(\x0b2\x20.dota.CMsgDOTAPlayerInfo.Res\
    ultsR\x07results\x12\"\n\rteam_url_logo\x18\x0f\x20\x01(\tR\x0bteamUrlLo\
    go\x12H\n\raudit_entries\x18\x10\x20\x03(\x0b2#.dota.CMsgDOTAPlayerInfo.\
    AuditEntryR\x0cauditEntries\x12+\n\x11team_abbreviation\x18\x11\x20\x01(\
    \tR\x10teamAbbreviation\x1a`\n\x07Results\x12\x1b\n\tleague_id\x18\x01\
    \x20\x01(\rR\x08leagueId\x12\x1c\n\tplacement\x18\x02\x20\x01(\rR\tplace\
    ment\x12\x1a\n\x08earnings\x18\x03\x20\x01(\rR\x08earnings\x1a\xcf\x01\n\
    \nAuditEntry\x12'\n\x0fstart_timestamp\x18\x01\x20\x01(\rR\x0estartTimes\
    tamp\x12#\n\rend_timestamp\x18\x02\x20\x01(\rR\x0cendTimestamp\x12\x17\n\
    \x07team_id\x18\x03\x20\x01(\rR\x06teamId\x12\x1b\n\tteam_name\x18\x04\
    \x20\x01(\tR\x08teamName\x12\x19\n\x08team_tag\x18\x05\x20\x01(\tR\x07te\
    amTag\x12\"\n\rteam_url_logo\x18\x06\x20\x01(\tR\x0bteamUrlLogo\"U\n\x16\
    CMsgDOTAPlayerInfoList\x12;\n\x0cplayer_infos\x18\x01\x20\x03(\x0b2\x18.\
    dota.CMsgDOTAPlayerInfoR\x0bplayerInfos\"\xa3\x01\n\x12CMsgDOTATeamRoste\
    r\x12\x1c\n\ttimestamp\x18\x01\x20\x01(\rR\ttimestamp\x12\x17\n\x07team_\
    id\x18\x02\x20\x01(\rR\x06teamId\x12,\n\x12member_account_ids\x18\x03\
    \x20\x03(\rR\x10memberAccountIds\x12(\n\x10coach_account_id\x18\x04\x20\
    \x01(\rR\x0ecoachAccountId\"\xaf\x04\n\x16CMsgDOTADPCProfileInfo\x129\n\
    \x0bplayer_info\x18\x01\x20\x01(\x0b2\x18.dota.CMsgDOTAPlayerInfoR\nplay\
    erInfo\x12T\n\x0fprediction_info\x18\x02\x20\x01(\x0b2+.dota.CMsgDOTADPC\
    ProfileInfo.PredictionInfoR\x0epredictionInfo\x12K\n\x0cfantasy_info\x18\
    \x03\x20\x01(\x0b2(.dota.CMsgDOTADPCProfileInfo.FantasyInfoR\x0bfantasyI\
    nfo\x125\n\x16disabled_notifications\x18\x04\x20\x03(\rR\x15disabledNoti\
    fications\x1aQ\n\x0ePredictionInfo\x12\x18\n\x07percent\x18\x01\x20\x01(\
    \rR\x07percent\x12%\n\x0eshard_winnings\x18\x02\x20\x01(\x05R\rshardWinn\
    ings\x1a\xac\x01\n\x0bFantasyInfo\x12&\n\x0ftop_90_finishes\x18\x01\x20\
    \x01(\rR\rtop90Finishes\x12&\n\x0ftop_75_finishes\x18\x02\x20\x01(\rR\rt\
    op75Finishes\x12&\n\x0ftop_50_finishes\x18\x03\x20\x01(\rR\rtop50Finishe\
    s\x12%\n\x0eshard_winnings\x18\x04\x20\x01(\rR\rshardWinnings\"\xba\x01\
    \n\x14CMsgDOTALeaderboards\x12P\n\x0cleaderboards\x18\x02\x20\x03(\x0b2,\
    .dota.CMsgDOTALeaderboards.RegionLeaderboardR\x0cleaderboards\x1aP\n\x11\
    RegionLeaderboard\x12\x1a\n\x08division\x18\x01\x20\x01(\rR\x08division\
    \x12\x1f\n\x0baccount_ids\x18\x02\x20\x03(\rR\naccountIds\"z\n\x1dCMsgDO\
    TAPassportVoteTeamGuess\x12\x1b\n\tleague_id\x18\x01\x20\x01(\rR\x08leag\
    ueId\x12\x1b\n\twinner_id\x18\x02\x20\x01(\rR\x08winnerId\x12\x1f\n\x0br\
    unnerup_id\x18\x03\x20\x01(\rR\nrunnerupId\"\x96\x01\n$CMsgDOTAPassportV\
    oteGenericSelection\x12P\n\x0fselection_index\x18\x01\x20\x01(\x0e2'.dot\
    a.DOTA_2013PassportSelectionIndicesR\x0eselectionIndex\x12\x1c\n\tselect\
    ion\x18\x02\x20\x01(\rR\tselection\"[\n\x1dCMsgDOTAPassportStampedPlayer\
    \x12\x19\n\x08steam_id\x18\x01\x20\x01(\x04R\x07steamId\x12\x1f\n\x0bsta\
    mp_level\x18\x02\x20\x01(\rR\nstampLevel\"H\n#CMsgDOTAPassportPlayerCard\
    Challenge\x12!\n\x0cchallenge_id\x18\x01\x20\x01(\rR\x0bchallengeId\"\
    \xe4\x02\n\x14CMsgDOTAPassportVote\x12B\n\nteam_votes\x18\x01\x20\x03(\
    \x0b2#.dota.CMsgDOTAPassportVoteTeamGuessR\tteamVotes\x12Y\n\x12generic_\
    selections\x18\x02\x20\x03(\x0b2*.dota.CMsgDOTAPassportVoteGenericSelect\
    ionR\x11genericSelections\x12L\n\x0fstamped_players\x18\x03\x20\x03(\x0b\
    2#.dota.CMsgDOTAPassportStampedPlayerR\x0estampedPlayers\x12_\n\x16playe\
    r_card_challenges\x18\x04\x20\x03(\x0b2).dota.CMsgDOTAPassportPlayerCard\
    ChallengeR\x14playerCardChallenges\"n\n(CMsgClientToGCGetPlayerCardRoste\
    rRequest\x12\x1b\n\tleague_id\x18\x01\x20\x01(\rR\x08leagueId\x12%\n\x0e\
    fantasy_period\x18\x03\x20\x01(\rR\rfantasyPeriod\"\xe6\x02\n)CMsgClient\
    ToGCGetPlayerCardRosterResponse\x12N\n\x06result\x18\x01\x20\x01(\x0e26.\
    dota.CMsgClientToGCGetPlayerCardRosterResponse.ResultR\x06result\x12-\n\
    \x13player_card_item_id\x18\x02\x20\x03(\x04R\x10playerCardItemId\x12\
    \x14\n\x05score\x18\x03\x20\x01(\x02R\x05score\x12\x1c\n\tfinalized\x18\
    \x04\x20\x01(\x08R\tfinalized\x12\x1e\n\npercentile\x18\x05\x20\x01(\x02\
    R\npercentile\"f\n\x06Result\x12\x0b\n\x07SUCCESS\x10\0\x12\x15\n\x11ERR\
    OR_UNSPECIFIED\x10\x01\x12\x1b\n\x17ERROR_INVALID_LEAGUE_ID\x10\x02\x12\
    \x1b\n\x17ERROR_INVALID_TIMESTAMP\x10\x03\"\xf8\x01\n-CMsgClientToGCBatc\
    hGetPlayerCardRosterRequest\x12p\n\x11league_timestamps\x18\x01\x20\x03(\
    \x0b2C.dota.CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestam\
    pR\x10leagueTimestamps\x1aU\n\x0fLeagueTimestamp\x12\x1b\n\tleague_id\
    \x18\x01\x20\x01(\rR\x08leagueId\x12%\n\x0efantasy_period\x18\x03\x20\
    \x01(\rR\rfantasyPeriod\"\xdd\x04\n.CMsgClientToGCBatchGetPlayerCardRost\
    erResponse\x12a\n\tresponses\x18\x01\x20\x03(\x0b2C.dota.CMsgClientToGCB\
    atchGetPlayerCardRosterResponse.RosterResponseR\tresponses\x1a\xdf\x02\n\
    \x0eRosterResponse\x12\x1b\n\tleague_id\x18\x01\x20\x01(\rR\x08leagueId\
    \x121\n\x14deprecated_timestamp\x18\x02\x20\x01(\rR\x13deprecatedTimesta\
    mp\x12S\n\x06result\x18\x03\x20\x01(\x0e2;.dota.CMsgClientToGCBatchGetPl\
    ayerCardRosterResponse.ResultR\x06result\x12-\n\x13player_card_item_id\
    \x18\x04\x20\x03(\x04R\x10playerCardItemId\x12\x14\n\x05score\x18\x05\
    \x20\x01(\x02R\x05score\x12\x1c\n\tfinalized\x18\x06\x20\x01(\x08R\tfina\
    lized\x12\x1e\n\npercentile\x18\x07\x20\x01(\x02R\npercentile\x12%\n\x0e\
    fantasy_period\x18\x08\x20\x01(\rR\rfantasyPeriod\"f\n\x06Result\x12\x0b\
    \n\x07SUCCESS\x10\0\x12\x15\n\x11ERROR_UNSPECIFIED\x10\x01\x12\x1b\n\x17\
    ERROR_INVALID_LEAGUE_ID\x10\x02\x12\x1b\n\x17ERROR_INVALID_TIMESTAMP\x10\
    \x03\"\xff\x01\n(CMsgClientToGCSetPlayerCardRosterRequest\x12\x1b\n\tlea\
    gue_id\x18\x01\x20\x01(\rR\x08leagueId\x121\n\x14deprecated_timestamp\
    \x18\x02\x20\x01(\rR\x13deprecatedTimestamp\x12\x12\n\x04slot\x18\x03\
    \x20\x01(\rR\x04slot\x12-\n\x13player_card_item_id\x18\x04\x20\x01(\x04R\
    \x10playerCardItemId\x12\x19\n\x08event_id\x18\x05\x20\x01(\rR\x07eventI\
    d\x12%\n\x0efantasy_period\x18\x06\x20\x01(\rR\rfantasyPeriod\"\xb0\x03\
    \n)CMsgClientToGCSetPlayerCardRosterResponse\x12N\n\x06result\x18\x01\
    \x20\x01(\x0e26.dota.CMsgClientToGCSetPlayerCardRosterResponse.ResultR\
    \x06result\"\xb2\x02\n\x06Result\x12\x0b\n\x07SUCCESS\x10\0\x12\x15\n\
    \x11ERROR_UNSPECIFIED\x10\x01\x12\x1b\n\x17ERROR_INVALID_LEAGUE_ID\x10\
    \x02\x12\x1b\n\x17ERROR_INVALID_TIMESTAMP\x10\x03\x12\x1f\n\x1bERROR_PLA\
    YER_CARD_NOT_OWNED\x10\x04\x12\x16\n\x12ERROR_INVALID_SLOT\x10\x05\x12\
    \x1a\n\x16ERROR_FAILED_CARD_INFO\x10\x06\x12\x1b\n\x17ERROR_ACCOUNT_DUPL\
    ICATE\x10\x07\x12\x1a\n\x16ERROR_LOCKED_TIMESTAMP\x10\x08\x12#\n\x1fERRO\
    R_INVALID_LEAGUE_FOR_PERIOD\x10\t\x12\x17\n\x13ERROR_INVALID_EVENT\x10\n\
    \"\xc4\x03\n\x1eCMsgDOTAFantasyDPCLeagueStatus\x12R\n\x0cleague_infos\
    \x18\x01\x20\x03(\x0b2/.dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfoR\
    \x0bleagueInfos\x1a\x8b\x02\n\nLeagueInfo\x12\x1b\n\tleague_id\x18\x01\
    \x20\x01(\rR\x08leagueId\x12\x1f\n\x0bleague_name\x18\x02\x20\x01(\tR\nl\
    eagueName\x12'\n\x0fstart_timestamp\x18\x03\x20\x01(\rR\x0estartTimestam\
    p\x12#\n\rend_timestamp\x18\x04\x20\x01(\rR\x0cendTimestamp\x12%\n\x0eda\
    y_timestamps\x18\x05\x20\x03(\rR\rdayTimestamps\x12J\n\x06status\x18\x08\
    \x20\x01(\x0e22.dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatusR\x06st\
    atus\"@\n\rERosterStatus\x12\t\n\x05UNSET\x10\0\x12\x0b\n\x07PARTIAL\x10\
    \x01\x12\x08\n\x04FULL\x10\x02\x12\r\n\tCONCLUDED\x10\x03\"\xb6\x04\n\
    \x18CMsgDOTADPCSearchResults\x12?\n\x07players\x18\x01\x20\x03(\x0b2%.do\
    ta.CMsgDOTADPCSearchResults.PlayerR\x07players\x129\n\x05teams\x18\x02\
    \x20\x03(\x0b2#.dota.CMsgDOTADPCSearchResults.TeamR\x05teams\x12?\n\x07l\
    eagues\x18\x03\x20\x03(\x0b2%.dota.CMsgDOTADPCSearchResults.LeagueR\x07l\
    eagues\x1aI\n\x06Player\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12\
    \x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x1b\n\treal_name\x18\x03\
    \x20\x01(\tR\x08realName\x1a<\n\x04Team\x12\x0e\n\x02id\x18\x01\x20\x01(\
    \rR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x10\n\x03url\
    \x18\x03\x20\x01(\tR\x03url\x1a,\n\x06League\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\rR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\"\xa5\x01\n\
    \x15ESearchResultsDesired\x12#\n\x1fk_ESearchResultsDesired_Players\x10\
    \x01\x12!\n\x1dk_ESearchResultsDesired_Teams\x10\x02\x12#\n\x1fk_ESearch\
    ResultsDesired_Leagues\x10\x04\x12\x1f\n\x1bk_ESearchResultsDesired_All\
    \x10\x07\"\xa2\x01\n\x1fCMsgDOTADPCTeamFavoriteRankings\x12@\n\x05teams\
    \x18\x01\x20\x03(\x0b2*.dota.CMsgDOTADPCTeamFavoriteRankings.TeamR\x05te\
    ams\x1a=\n\x04Team\x12\x17\n\x07team_id\x18\x01\x20\x01(\rR\x06teamId\
    \x12\x1c\n\tfavorites\x18\x02\x20\x01(\rR\tfavorites*\xa3\x15\n!DOTA_201\
    3PassportSelectionIndices\x12\x1d\n\x19PP13_SEL_ALLSTAR_PLAYER_0\x10\0\
    \x12\x1d\n\x19PP13_SEL_ALLSTAR_PLAYER_1\x10\x01\x12\x1d\n\x19PP13_SEL_AL\
    LSTAR_PLAYER_2\x10\x02\x12\x1d\n\x19PP13_SEL_ALLSTAR_PLAYER_3\x10\x03\
    \x12\x1d\n\x19PP13_SEL_ALLSTAR_PLAYER_4\x10\x04\x12\x1d\n\x19PP13_SEL_AL\
    LSTAR_PLAYER_5\x10\x05\x12\x1d\n\x19PP13_SEL_ALLSTAR_PLAYER_6\x10\x06\
    \x12\x1d\n\x19PP13_SEL_ALLSTAR_PLAYER_7\x10\x07\x12\x1d\n\x19PP13_SEL_AL\
    LSTAR_PLAYER_8\x10\x08\x12\x1d\n\x19PP13_SEL_ALLSTAR_PLAYER_9\x10\t\x12\
    \x1c\n\x18PP13_SEL_QUALPRED_WEST_0\x10\n\x12\x1c\n\x18PP13_SEL_QUALPRED_\
    WEST_1\x10\x0b\x12\x1c\n\x18PP13_SEL_QUALPRED_WEST_2\x10\x0c\x12\x1c\n\
    \x18PP13_SEL_QUALPRED_WEST_3\x10\r\x12\x1c\n\x18PP13_SEL_QUALPRED_WEST_4\
    \x10\x0e\x12\x1c\n\x18PP13_SEL_QUALPRED_WEST_5\x10\x0f\x12\x1c\n\x18PP13\
    _SEL_QUALPRED_WEST_6\x10\x10\x12\x1c\n\x18PP13_SEL_QUALPRED_WEST_7\x10\
    \x11\x12\x1c\n\x18PP13_SEL_QUALPRED_WEST_8\x10\x12\x12\x1c\n\x18PP13_SEL\
    _QUALPRED_WEST_9\x10\x13\x12\x1d\n\x19PP13_SEL_QUALPRED_WEST_10\x10\x14\
    \x12\x1d\n\x19PP13_SEL_QUALPRED_WEST_11\x10\x15\x12\x1d\n\x19PP13_SEL_QU\
    ALPRED_WEST_12\x10\x16\x12\x1d\n\x19PP13_SEL_QUALPRED_WEST_13\x10\x17\
    \x12\x1d\n\x19PP13_SEL_QUALPRED_WEST_14\x10\x18\x12\x1c\n\x18PP13_SEL_QU\
    ALPRED_EAST_0\x10\x19\x12\x1c\n\x18PP13_SEL_QUALPRED_EAST_1\x10\x1a\x12\
    \x1c\n\x18PP13_SEL_QUALPRED_EAST_2\x10\x1b\x12\x1c\n\x18PP13_SEL_QUALPRE\
    D_EAST_3\x10\x1c\x12\x1c\n\x18PP13_SEL_QUALPRED_EAST_4\x10\x1d\x12\x1c\n\
    \x18PP13_SEL_QUALPRED_EAST_5\x10\x1e\x12\x1c\n\x18PP13_SEL_QUALPRED_EAST\
    _6\x10\x1f\x12\x1c\n\x18PP13_SEL_QUALPRED_EAST_7\x10\x20\x12\x1c\n\x18PP\
    13_SEL_QUALPRED_EAST_8\x10!\x12\x1c\n\x18PP13_SEL_QUALPRED_EAST_9\x10\"\
    \x12\x1d\n\x19PP13_SEL_QUALPRED_EAST_10\x10#\x12\x1d\n\x19PP13_SEL_QUALP\
    RED_EAST_11\x10$\x12\x1d\n\x19PP13_SEL_QUALPRED_EAST_12\x10%\x12\x1d\n\
    \x19PP13_SEL_QUALPRED_EAST_13\x10&\x12\x1d\n\x19PP13_SEL_QUALPRED_EAST_1\
    4\x10'\x12\x19\n\x15PP13_SEL_TEAMCUP_TEAM\x10(\x12\x1b\n\x17PP13_SEL_TEA\
    MCUP_PLAYER\x10)\x12\x1e\n\x1aPP13_SEL_TEAMCUP_TEAM_LOCK\x10*\x12\x20\n\
    \x1cPP13_SEL_TEAMCUP_PLAYER_LOCK\x10+\x12\x18\n\x14PP13_SEL_EVENTPRED_0\
    \x10,\x12\x18\n\x14PP13_SEL_EVENTPRED_1\x10-\x12\x18\n\x14PP13_SEL_EVENT\
    PRED_2\x10.\x12\x18\n\x14PP13_SEL_EVENTPRED_3\x10/\x12\x18\n\x14PP13_SEL\
    _EVENTPRED_4\x100\x12\x18\n\x14PP13_SEL_EVENTPRED_5\x101\x12\x18\n\x14PP\
    13_SEL_EVENTPRED_6\x102\x12\x18\n\x14PP13_SEL_EVENTPRED_7\x103\x12\x18\n\
    \x14PP13_SEL_EVENTPRED_8\x104\x12\x18\n\x14PP13_SEL_EVENTPRED_9\x105\x12\
    \x19\n\x15PP13_SEL_EVENTPRED_10\x106\x12\x19\n\x15PP13_SEL_EVENTPRED_11\
    \x107\x12\x19\n\x15PP13_SEL_EVENTPRED_12\x108\x12\x19\n\x15PP13_SEL_EVEN\
    TPRED_13\x109\x12\x19\n\x15PP13_SEL_EVENTPRED_14\x10:\x12\x19\n\x15PP13_\
    SEL_EVENTPRED_15\x10;\x12\x19\n\x15PP13_SEL_EVENTPRED_16\x10<\x12\x19\n\
    \x15PP13_SEL_EVENTPRED_17\x10=\x12\x19\n\x15PP13_SEL_EVENTPRED_18\x10>\
    \x12\x19\n\x15PP13_SEL_EVENTPRED_19\x10?\x12\x19\n\x15PP13_SEL_EVENTPRED\
    _20\x10@\x12\x19\n\x15PP13_SEL_EVENTPRED_21\x10A\x12\x19\n\x15PP13_SEL_E\
    VENTPRED_22\x10B\x12\x19\n\x15PP13_SEL_EVENTPRED_23\x10C\x12\x19\n\x15PP\
    13_SEL_EVENTPRED_24\x10D\x12\x19\n\x15PP13_SEL_EVENTPRED_25\x10E\x12\x19\
    \n\x15PP13_SEL_EVENTPRED_26\x10F\x12\x19\n\x15PP13_SEL_EVENTPRED_27\x10G\
    \x12\x19\n\x15PP13_SEL_EVENTPRED_28\x10H\x12\x19\n\x15PP13_SEL_EVENTPRED\
    _29\x10I\x12\x19\n\x15PP13_SEL_EVENTPRED_30\x10J\x12\x19\n\x15PP13_SEL_E\
    VENTPRED_31\x10K\x12\x19\n\x15PP13_SEL_EVENTPRED_32\x10L\x12\x19\n\x15PP\
    13_SEL_EVENTPRED_33\x10M\x12\x19\n\x15PP13_SEL_EVENTPRED_34\x10N\x12\x19\
    \n\x15PP13_SEL_EVENTPRED_35\x10O\x12\x19\n\x15PP13_SEL_EVENTPRED_36\x10P\
    \x12\x19\n\x15PP13_SEL_EVENTPRED_37\x10Q\x12\x19\n\x15PP13_SEL_EVENTPRED\
    _38\x10R\x12\x19\n\x15PP13_SEL_EVENTPRED_39\x10S\x12\x19\n\x15PP13_SEL_E\
    VENTPRED_40\x10T\x12\x19\n\x15PP13_SEL_EVENTPRED_41\x10U\x12\x19\n\x15PP\
    13_SEL_EVENTPRED_42\x10V\x12\x19\n\x15PP13_SEL_EVENTPRED_43\x10W\x12\x13\
    \n\x0fPP13_SEL_SOLO_0\x10X\x12\x13\n\x0fPP13_SEL_SOLO_1\x10Y\x12\x13\n\
    \x0fPP13_SEL_SOLO_2\x10Z\x12\x13\n\x0fPP13_SEL_SOLO_3\x10[\x12\x13\n\x0f\
    PP13_SEL_SOLO_4\x10\\\x12\x13\n\x0fPP13_SEL_SOLO_5\x10]\x12\x13\n\x0fPP1\
    3_SEL_SOLO_6\x10^\x12\x13\n\x0fPP13_SEL_SOLO_7\x10_B%Z#github.com/dotabu\
    ff/manta/dota;dotaJ\xe2o\n\x07\x12\x05\0\0\xd5\x02\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\
    \x03\x03\0:\n\t\n\x02\x08\x0b\x12\x03\x03\0:\n\t\n\x02\x03\0\x12\x03\x05\
    \x07\x20\n\n\n\x02\x05\0\x12\x04\x07\0h\x01\n\n\n\x03\x05\0\x01\x12\x03\
    \x07\x05&\n\x0b\n\x04\x05\0\x02\0\x12\x03\x08\x08&\n\x0c\n\x05\x05\0\x02\
    \0\x01\x12\x03\x08\x08!\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x08$%\n\x0b\
    \n\x04\x05\0\x02\x01\x12\x03\t\x08&\n\x0c\n\x05\x05\0\x02\x01\x01\x12\
    \x03\t\x08!\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\t$%\n\x0b\n\x04\x05\0\
    \x02\x02\x12\x03\n\x08&\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\n\x08!\n\
    \x0c\n\x05\x05\0\x02\x02\x02\x12\x03\n$%\n\x0b\n\x04\x05\0\x02\x03\x12\
    \x03\x0b\x08&\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x0b\x08!\n\x0c\n\x05\
    \x05\0\x02\x03\x02\x12\x03\x0b$%\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x0c\
    \x08&\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x0c\x08!\n\x0c\n\x05\x05\0\
    \x02\x04\x02\x12\x03\x0c$%\n\x0b\n\x04\x05\0\x02\x05\x12\x03\r\x08&\n\
    \x0c\n\x05\x05\0\x02\x05\x01\x12\x03\r\x08!\n\x0c\n\x05\x05\0\x02\x05\
    \x02\x12\x03\r$%\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x0e\x08&\n\x0c\n\x05\
    \x05\0\x02\x06\x01\x12\x03\x0e\x08!\n\x0c\n\x05\x05\0\x02\x06\x02\x12\
    \x03\x0e$%\n\x0b\n\x04\x05\0\x02\x07\x12\x03\x0f\x08&\n\x0c\n\x05\x05\0\
    \x02\x07\x01\x12\x03\x0f\x08!\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\x0f$\
    %\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x10\x08&\n\x0c\n\x05\x05\0\x02\x08\
    \x01\x12\x03\x10\x08!\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\x10$%\n\x0b\
    \n\x04\x05\0\x02\t\x12\x03\x11\x08&\n\x0c\n\x05\x05\0\x02\t\x01\x12\x03\
    \x11\x08!\n\x0c\n\x05\x05\0\x02\t\x02\x12\x03\x11$%\n\x0b\n\x04\x05\0\
    \x02\n\x12\x03\x12\x08&\n\x0c\n\x05\x05\0\x02\n\x01\x12\x03\x12\x08\x20\
    \n\x0c\n\x05\x05\0\x02\n\x02\x12\x03\x12#%\n\x0b\n\x04\x05\0\x02\x0b\x12\
    \x03\x13\x08&\n\x0c\n\x05\x05\0\x02\x0b\x01\x12\x03\x13\x08\x20\n\x0c\n\
    \x05\x05\0\x02\x0b\x02\x12\x03\x13#%\n\x0b\n\x04\x05\0\x02\x0c\x12\x03\
    \x14\x08&\n\x0c\n\x05\x05\0\x02\x0c\x01\x12\x03\x14\x08\x20\n\x0c\n\x05\
    \x05\0\x02\x0c\x02\x12\x03\x14#%\n\x0b\n\x04\x05\0\x02\r\x12\x03\x15\x08\
    &\n\x0c\n\x05\x05\0\x02\r\x01\x12\x03\x15\x08\x20\n\x0c\n\x05\x05\0\x02\
    \r\x02\x12\x03\x15#%\n\x0b\n\x04\x05\0\x02\x0e\x12\x03\x16\x08&\n\x0c\n\
    \x05\x05\0\x02\x0e\x01\x12\x03\x16\x08\x20\n\x0c\n\x05\x05\0\x02\x0e\x02\
    \x12\x03\x16#%\n\x0b\n\x04\x05\0\x02\x0f\x12\x03\x17\x08&\n\x0c\n\x05\
    \x05\0\x02\x0f\x01\x12\x03\x17\x08\x20\n\x0c\n\x05\x05\0\x02\x0f\x02\x12\
    \x03\x17#%\n\x0b\n\x04\x05\0\x02\x10\x12\x03\x18\x08&\n\x0c\n\x05\x05\0\
    \x02\x10\x01\x12\x03\x18\x08\x20\n\x0c\n\x05\x05\0\x02\x10\x02\x12\x03\
    \x18#%\n\x0b\n\x04\x05\0\x02\x11\x12\x03\x19\x08&\n\x0c\n\x05\x05\0\x02\
    \x11\x01\x12\x03\x19\x08\x20\n\x0c\n\x05\x05\0\x02\x11\x02\x12\x03\x19#%\
    \n\x0b\n\x04\x05\0\x02\x12\x12\x03\x1a\x08&\n\x0c\n\x05\x05\0\x02\x12\
    \x01\x12\x03\x1a\x08\x20\n\x0c\n\x05\x05\0\x02\x12\x02\x12\x03\x1a#%\n\
    \x0b\n\x04\x05\0\x02\x13\x12\x03\x1b\x08&\n\x0c\n\x05\x05\0\x02\x13\x01\
    \x12\x03\x1b\x08\x20\n\x0c\n\x05\x05\0\x02\x13\x02\x12\x03\x1b#%\n\x0b\n\
    \x04\x05\0\x02\x14\x12\x03\x1c\x08'\n\x0c\n\x05\x05\0\x02\x14\x01\x12\
    \x03\x1c\x08!\n\x0c\n\x05\x05\0\x02\x14\x02\x12\x03\x1c$&\n\x0b\n\x04\
    \x05\0\x02\x15\x12\x03\x1d\x08'\n\x0c\n\x05\x05\0\x02\x15\x01\x12\x03\
    \x1d\x08!\n\x0c\n\x05\x05\0\x02\x15\x02\x12\x03\x1d$&\n\x0b\n\x04\x05\0\
    \x02\x16\x12\x03\x1e\x08'\n\x0c\n\x05\x05\0\x02\x16\x01\x12\x03\x1e\x08!\
    \n\x0c\n\x05\x05\0\x02\x16\x02\x12\x03\x1e$&\n\x0b\n\x04\x05\0\x02\x17\
    \x12\x03\x1f\x08'\n\x0c\n\x05\x05\0\x02\x17\x01\x12\x03\x1f\x08!\n\x0c\n\
    \x05\x05\0\x02\x17\x02\x12\x03\x1f$&\n\x0b\n\x04\x05\0\x02\x18\x12\x03\
    \x20\x08'\n\x0c\n\x05\x05\0\x02\x18\x01\x12\x03\x20\x08!\n\x0c\n\x05\x05\
    \0\x02\x18\x02\x12\x03\x20$&\n\x0b\n\x04\x05\0\x02\x19\x12\x03!\x08&\n\
    \x0c\n\x05\x05\0\x02\x19\x01\x12\x03!\x08\x20\n\x0c\n\x05\x05\0\x02\x19\
    \x02\x12\x03!#%\n\x0b\n\x04\x05\0\x02\x1a\x12\x03\"\x08&\n\x0c\n\x05\x05\
    \0\x02\x1a\x01\x12\x03\"\x08\x20\n\x0c\n\x05\x05\0\x02\x1a\x02\x12\x03\"\
    #%\n\x0b\n\x04\x05\0\x02\x1b\x12\x03#\x08&\n\x0c\n\x05\x05\0\x02\x1b\x01\
    \x12\x03#\x08\x20\n\x0c\n\x05\x05\0\x02\x1b\x02\x12\x03##%\n\x0b\n\x04\
    \x05\0\x02\x1c\x12\x03$\x08&\n\x0c\n\x05\x05\0\x02\x1c\x01\x12\x03$\x08\
    \x20\n\x0c\n\x05\x05\0\x02\x1c\x02\x12\x03$#%\n\x0b\n\x04\x05\0\x02\x1d\
    \x12\x03%\x08&\n\x0c\n\x05\x05\0\x02\x1d\x01\x12\x03%\x08\x20\n\x0c\n\
    \x05\x05\0\x02\x1d\x02\x12\x03%#%\n\x0b\n\x04\x05\0\x02\x1e\x12\x03&\x08\
    &\n\x0c\n\x05\x05\0\x02\x1e\x01\x12\x03&\x08\x20\n\x0c\n\x05\x05\0\x02\
    \x1e\x02\x12\x03&#%\n\x0b\n\x04\x05\0\x02\x1f\x12\x03'\x08&\n\x0c\n\x05\
    \x05\0\x02\x1f\x01\x12\x03'\x08\x20\n\x0c\n\x05\x05\0\x02\x1f\x02\x12\
    \x03'#%\n\x0b\n\x04\x05\0\x02\x20\x12\x03(\x08&\n\x0c\n\x05\x05\0\x02\
    \x20\x01\x12\x03(\x08\x20\n\x0c\n\x05\x05\0\x02\x20\x02\x12\x03(#%\n\x0b\
    \n\x04\x05\0\x02!\x12\x03)\x08&\n\x0c\n\x05\x05\0\x02!\x01\x12\x03)\x08\
    \x20\n\x0c\n\x05\x05\0\x02!\x02\x12\x03)#%\n\x0b\n\x04\x05\0\x02\"\x12\
    \x03*\x08&\n\x0c\n\x05\x05\0\x02\"\x01\x12\x03*\x08\x20\n\x0c\n\x05\x05\
    \0\x02\"\x02\x12\x03*#%\n\x0b\n\x04\x05\0\x02#\x12\x03+\x08'\n\x0c\n\x05\
    \x05\0\x02#\x01\x12\x03+\x08!\n\x0c\n\x05\x05\0\x02#\x02\x12\x03+$&\n\
    \x0b\n\x04\x05\0\x02$\x12\x03,\x08'\n\x0c\n\x05\x05\0\x02$\x01\x12\x03,\
    \x08!\n\x0c\n\x05\x05\0\x02$\x02\x12\x03,$&\n\x0b\n\x04\x05\0\x02%\x12\
    \x03-\x08'\n\x0c\n\x05\x05\0\x02%\x01\x12\x03-\x08!\n\x0c\n\x05\x05\0\
    \x02%\x02\x12\x03-$&\n\x0b\n\x04\x05\0\x02&\x12\x03.\x08'\n\x0c\n\x05\
    \x05\0\x02&\x01\x12\x03.\x08!\n\x0c\n\x05\x05\0\x02&\x02\x12\x03.$&\n\
    \x0b\n\x04\x05\0\x02'\x12\x03/\x08'\n\x0c\n\x05\x05\0\x02'\x01\x12\x03/\
    \x08!\n\x0c\n\x05\x05\0\x02'\x02\x12\x03/$&\n\x0b\n\x04\x05\0\x02(\x12\
    \x030\x08#\n\x0c\n\x05\x05\0\x02(\x01\x12\x030\x08\x1d\n\x0c\n\x05\x05\0\
    \x02(\x02\x12\x030\x20\"\n\x0b\n\x04\x05\0\x02)\x12\x031\x08%\n\x0c\n\
    \x05\x05\0\x02)\x01\x12\x031\x08\x1f\n\x0c\n\x05\x05\0\x02)\x02\x12\x031\
    \"$\n\x0b\n\x04\x05\0\x02*\x12\x032\x08(\n\x0c\n\x05\x05\0\x02*\x01\x12\
    \x032\x08\"\n\x0c\n\x05\x05\0\x02*\x02\x12\x032%'\n\x0b\n\x04\x05\0\x02+\
    \x12\x033\x08*\n\x0c\n\x05\x05\0\x02+\x01\x12\x033\x08$\n\x0c\n\x05\x05\
    \0\x02+\x02\x12\x033')\n\x0b\n\x04\x05\0\x02,\x12\x034\x08\"\n\x0c\n\x05\
    \x05\0\x02,\x01\x12\x034\x08\x1c\n\x0c\n\x05\x05\0\x02,\x02\x12\x034\x1f\
    !\n\x0b\n\x04\x05\0\x02-\x12\x035\x08\"\n\x0c\n\x05\x05\0\x02-\x01\x12\
    \x035\x08\x1c\n\x0c\n\x05\x05\0\x02-\x02\x12\x035\x1f!\n\x0b\n\x04\x05\0\
    \x02.\x12\x036\x08\"\n\x0c\n\x05\x05\0\x02.\x01\x12\x036\x08\x1c\n\x0c\n\
    \x05\x05\0\x02.\x02\x12\x036\x1f!\n\x0b\n\x04\x05\0\x02/\x12\x037\x08\"\
    \n\x0c\n\x05\x05\0\x02/\x01\x12\x037\x08\x1c\n\x0c\n\x05\x05\0\x02/\x02\
    \x12\x037\x1f!\n\x0b\n\x04\x05\0\x020\x12\x038\x08\"\n\x0c\n\x05\x05\0\
    \x020\x01\x12\x038\x08\x1c\n\x0c\n\x05\x05\0\x020\x02\x12\x038\x1f!\n\
    \x0b\n\x04\x05\0\x021\x12\x039\x08\"\n\x0c\n\x05\x05\0\x021\x01\x12\x039\
    \x08\x1c\n\x0c\n\x05\x05\0\x021\x02\x12\x039\x1f!\n\x0b\n\x04\x05\0\x022\
    \x12\x03:\x08\"\n\x0c\n\x05\x05\0\x022\x01\x12\x03:\x08\x1c\n\x0c\n\x05\
    \x05\0\x022\x02\x12\x03:\x1f!\n\x0b\n\x04\x05\0\x023\x12\x03;\x08\"\n\
    \x0c\n\x05\x05\0\x023\x01\x12\x03;\x08\x1c\n\x0c\n\x05\x05\0\x023\x02\
    \x12\x03;\x1f!\n\x0b\n\x04\x05\0\x024\x12\x03<\x08\"\n\x0c\n\x05\x05\0\
    \x024\x01\x12\x03<\x08\x1c\n\x0c\n\x05\x05\0\x024\x02\x12\x03<\x1f!\n\
    \x0b\n\x04\x05\0\x025\x12\x03=\x08\"\n\x0c\n\x05\x05\0\x025\x01\x12\x03=\
    \x08\x1c\n\x0c\n\x05\x05\0\x025\x02\x12\x03=\x1f!\n\x0b\n\x04\x05\0\x026\
    \x12\x03>\x08#\n\x0c\n\x05\x05\0\x026\x01\x12\x03>\x08\x1d\n\x0c\n\x05\
    \x05\0\x026\x02\x12\x03>\x20\"\n\x0b\n\x04\x05\0\x027\x12\x03?\x08#\n\
    \x0c\n\x05\x05\0\x027\x01\x12\x03?\x08\x1d\n\x0c\n\x05\x05\0\x027\x02\
    \x12\x03?\x20\"\n\x0b\n\x04\x05\0\x028\x12\x03@\x08#\n\x0c\n\x05\x05\0\
    \x028\x01\x12\x03@\x08\x1d\n\x0c\n\x05\x05\0\x028\x02\x12\x03@\x20\"\n\
    \x0b\n\x04\x05\0\x029\x12\x03A\x08#\n\x0c\n\x05\x05\0\x029\x01\x12\x03A\
    \x08\x1d\n\x0c\n\x05\x05\0\x029\x02\x12\x03A\x20\"\n\x0b\n\x04\x05\0\x02\
    :\x12\x03B\x08#\n\x0c\n\x05\x05\0\x02:\x01\x12\x03B\x08\x1d\n\x0c\n\x05\
    \x05\0\x02:\x02\x12\x03B\x20\"\n\x0b\n\x04\x05\0\x02;\x12\x03C\x08#\n\
    \x0c\n\x05\x05\0\x02;\x01\x12\x03C\x08\x1d\n\x0c\n\x05\x05\0\x02;\x02\
    \x12\x03C\x20\"\n\x0b\n\x04\x05\0\x02<\x12\x03D\x08#\n\x0c\n\x05\x05\0\
    \x02<\x01\x12\x03D\x08\x1d\n\x0c\n\x05\x05\0\x02<\x02\x12\x03D\x20\"\n\
    \x0b\n\x04\x05\0\x02=\x12\x03E\x08#\n\x0c\n\x05\x05\0\x02=\x01\x12\x03E\
    \x08\x1d\n\x0c\n\x05\x05\0\x02=\x02\x12\x03E\x20\"\n\x0b\n\x04\x05\0\x02\
    >\x12\x03F\x08#\n\x0c\n\x05\x05\0\x02>\x01\x12\x03F\x08\x1d\n\x0c\n\x05\
    \x05\0\x02>\x02\x12\x03F\x20\"\n\x0b\n\x04\x05\0\x02?\x12\x03G\x08#\n\
    \x0c\n\x05\x05\0\x02?\x01\x12\x03G\x08\x1d\n\x0c\n\x05\x05\0\x02?\x02\
    \x12\x03G\x20\"\n\x0b\n\x04\x05\0\x02@\x12\x03H\x08#\n\x0c\n\x05\x05\0\
    \x02@\x01\x12\x03H\x08\x1d\n\x0c\n\x05\x05\0\x02@\x02\x12\x03H\x20\"\n\
    \x0b\n\x04\x05\0\x02A\x12\x03I\x08#\n\x0c\n\x05\x05\0\x02A\x01\x12\x03I\
    \x08\x1d\n\x0c\n\x05\x05\0\x02A\x02\x12\x03I\x20\"\n\x0b\n\x04\x05\0\x02\
    B\x12\x03J\x08#\n\x0c\n\x05\x05\0\x02B\x01\x12\x03J\x08\x1d\n\x0c\n\x05\
    \x05\0\x02B\x02\x12\x03J\x20\"\n\x0b\n\x04\x05\0\x02C\x12\x03K\x08#\n\
    \x0c\n\x05\x05\0\x02C\x01\x12\x03K\x08\x1d\n\x0c\n\x05\x05\0\x02C\x02\
    \x12\x03K\x20\"\n\x0b\n\x04\x05\0\x02D\x12\x03L\x08#\n\x0c\n\x05\x05\0\
    \x02D\x01\x12\x03L\x08\x1d\n\x0c\n\x05\x05\0\x02D\x02\x12\x03L\x20\"\n\
    \x0b\n\x04\x05\0\x02E\x12\x03M\x08#\n\x0c\n\x05\x05\0\x02E\x01\x12\x03M\
    \x08\x1d\n\x0c\n\x05\x05\0\x02E\x02\x12\x03M\x20\"\n\x0b\n\x04\x05\0\x02\
    F\x12\x03N\x08#\n\x0c\n\x05\x05\0\x02F\x01\x12\x03N\x08\x1d\n\x0c\n\x05\
    \x05\0\x02F\x02\x12\x03N\x20\"\n\x0b\n\x04\x05\0\x02G\x12\x03O\x08#\n\
    \x0c\n\x05\x05\0\x02G\x01\x12\x03O\x08\x1d\n\x0c\n\x05\x05\0\x02G\x02\
    \x12\x03O\x20\"\n\x0b\n\x04\x05\0\x02H\x12\x03P\x08#\n\x0c\n\x05\x05\0\
    \x02H\x01\x12\x03P\x08\x1d\n\x0c\n\x05\x05\0\x02H\x02\x12\x03P\x20\"\n\
    \x0b\n\x04\x05\0\x02I\x12\x03Q\x08#\n\x0c\n\x05\x05\0\x02I\x01\x12\x03Q\
    \x08\x1d\n\x0c\n\x05\x05\0\x02I\x02\x12\x03Q\x20\"\n\x0b\n\x04\x05\0\x02\
    J\x12\x03R\x08#\n\x0c\n\x05\x05\0\x02J\x01\x12\x03R\x08\x1d\n\x0c\n\x05\
    \x05\0\x02J\x02\x12\x03R\x20\"\n\x0b\n\x04\x05\0\x02K\x12\x03S\x08#\n\
    \x0c\n\x05\x05\0\x02K\x01\x12\x03S\x08\x1d\n\x0c\n\x05\x05\0\x02K\x02\
    \x12\x03S\x20\"\n\x0b\n\x04\x05\0\x02L\x12\x03T\x08#\n\x0c\n\x05\x05\0\
    \x02L\x01\x12\x03T\x08\x1d\n\x0c\n\x05\x05\0\x02L\x02\x12\x03T\x20\"\n\
    \x0b\n\x04\x05\0\x02M\x12\x03U\x08#\n\x0c\n\x05\x05\0\x02M\x01\x12\x03U\
    \x08\x1d\n\x0c\n\x05\x05\0\x02M\x02\x12\x03U\x20\"\n\x0b\n\x04\x05\0\x02\
    N\x12\x03V\x08#\n\x0c\n\x05\x05\0\x02N\x01\x12\x03V\x08\x1d\n\x0c\n\x05\
    \x05\0\x02N\x02\x12\x03V\x20\"\n\x0b\n\x04\x05\0\x02O\x12\x03W\x08#\n\
    \x0c\n\x05\x05\0\x02O\x01\x12\x03W\x08\x1d\n\x0c\n\x05\x05\0\x02O\x02\
    \x12\x03W\x20\"\n\x0b\n\x04\x05\0\x02P\x12\x03X\x08#\n\x0c\n\x05\x05\0\
    \x02P\x01\x12\x03X\x08\x1d\n\x0c\n\x05\x05\0\x02P\x02\x12\x03X\x20\"\n\
    \x0b\n\x04\x05\0\x02Q\x12\x03Y\x08#\n\x0c\n\x05\x05\0\x02Q\x01\x12\x03Y\
    \x08\x1d\n\x0c\n\x05\x05\0\x02Q\x02\x12\x03Y\x20\"\n\x0b\n\x04\x05\0\x02\
    R\x12\x03Z\x08#\n\x0c\n\x05\x05\0\x02R\x01\x12\x03Z\x08\x1d\n\x0c\n\x05\
    \x05\0\x02R\x02\x12\x03Z\x20\"\n\x0b\n\x04\x05\0\x02S\x12\x03[\x08#\n\
    \x0c\n\x05\x05\0\x02S\x01\x12\x03[\x08\x1d\n\x0c\n\x05\x05\0\x02S\x02\
    \x12\x03[\x20\"\n\x0b\n\x04\x05\0\x02T\x12\x03\\\x08#\n\x0c\n\x05\x05\0\
    \x02T\x01\x12\x03\\\x08\x1d\n\x0c\n\x05\x05\0\x02T\x02\x12\x03\\\x20\"\n\
    \x0b\n\x04\x05\0\x02U\x12\x03]\x08#\n\x0c\n\x05\x05\0\x02U\x01\x12\x03]\
    \x08\x1d\n\x0c\n\x05\x05\0\x02U\x02\x12\x03]\x20\"\n\x0b\n\x04\x05\0\x02\
    V\x12\x03^\x08#\n\x0c\n\x05\x05\0\x02V\x01\x12\x03^\x08\x1d\n\x0c\n\x05\
    \x05\0\x02V\x02\x12\x03^\x20\"\n\x0b\n\x04\x05\0\x02W\x12\x03_\x08#\n\
    \x0c\n\x05\x05\0\x02W\x01\x12\x03_\x08\x1d\n\x0c\n\x05\x05\0\x02W\x02\
    \x12\x03_\x20\"\n\x0b\n\x04\x05\0\x02X\x12\x03`\x08\x1d\n\x0c\n\x05\x05\
    \0\x02X\x01\x12\x03`\x08\x17\n\x0c\n\x05\x05\0\x02X\x02\x12\x03`\x1a\x1c\
    \n\x0b\n\x04\x05\0\x02Y\x12\x03a\x08\x1d\n\x0c\n\x05\x05\0\x02Y\x01\x12\
    \x03a\x08\x17\n\x0c\n\x05\x05\0\x02Y\x02\x12\x03a\x1a\x1c\n\x0b\n\x04\
    \x05\0\x02Z\x12\x03b\x08\x1d\n\x0c\n\x05\x05\0\x02Z\x01\x12\x03b\x08\x17\
    \n\x0c\n\x05\x05\0\x02Z\x02\x12\x03b\x1a\x1c\n\x0b\n\x04\x05\0\x02[\x12\
    \x03c\x08\x1d\n\x0c\n\x05\x05\0\x02[\x01\x12\x03c\x08\x17\n\x0c\n\x05\
    \x05\0\x02[\x02\x12\x03c\x1a\x1c\n\x0b\n\x04\x05\0\x02\\\x12\x03d\x08\
    \x1d\n\x0c\n\x05\x05\0\x02\\\x01\x12\x03d\x08\x17\n\x0c\n\x05\x05\0\x02\
    \\\x02\x12\x03d\x1a\x1c\n\x0b\n\x04\x05\0\x02]\x12\x03e\x08\x1d\n\x0c\n\
    \x05\x05\0\x02]\x01\x12\x03e\x08\x17\n\x0c\n\x05\x05\0\x02]\x02\x12\x03e\
    \x1a\x1c\n\x0b\n\x04\x05\0\x02^\x12\x03f\x08\x1d\n\x0c\n\x05\x05\0\x02^\
    \x01\x12\x03f\x08\x17\n\x0c\n\x05\x05\0\x02^\x02\x12\x03f\x1a\x1c\n\x0b\
    \n\x04\x05\0\x02_\x12\x03g\x08\x1d\n\x0c\n\x05\x05\0\x02_\x01\x12\x03g\
    \x08\x17\n\x0c\n\x05\x05\0\x02_\x02\x12\x03g\x1a\x1c\n\x0b\n\x02\x04\0\
    \x12\x05j\0\x8a\x01\x01\n\n\n\x03\x04\0\x01\x12\x03j\x08\x1a\n\x0c\n\x04\
    \x04\0\x03\0\x12\x04k\x08o\t\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03k\x10\
    \x17\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03l\x10.\n\x0e\n\x07\x04\0\x03\0\
    \x02\0\x04\x12\x03l\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03l\
    \x19\x1f\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03l\x20)\n\x0e\n\x07\x04\
    \0\x03\0\x02\0\x03\x12\x03l,-\n\r\n\x06\x04\0\x03\0\x02\x01\x12\x03m\x10\
    .\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\x12\x03m\x10\x18\n\x0e\n\x07\x04\0\
    \x03\0\x02\x01\x05\x12\x03m\x19\x1f\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\
    \x12\x03m\x20)\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03m,-\n\r\n\x06\
    \x04\0\x03\0\x02\x02\x12\x03n\x10-\n\x0e\n\x07\x04\0\x03\0\x02\x02\x04\
    \x12\x03n\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\x12\x03n\x19\x1f\n\
    \x0e\n\x07\x04\0\x03\0\x02\x02\x01\x12\x03n\x20(\n\x0e\n\x07\x04\0\x03\0\
    \x02\x02\x03\x12\x03n+,\n\x0c\n\x04\x04\0\x03\x01\x12\x04q\x08x\t\n\x0c\
    \n\x05\x04\0\x03\x01\x01\x12\x03q\x10\x1a\n\r\n\x06\x04\0\x03\x01\x02\0\
    \x12\x03r\x104\n\x0e\n\x07\x04\0\x03\x01\x02\0\x04\x12\x03r\x10\x18\n\
    \x0e\n\x07\x04\0\x03\x01\x02\0\x05\x12\x03r\x19\x1f\n\x0e\n\x07\x04\0\
    \x03\x01\x02\0\x01\x12\x03r\x20/\n\x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\
    \x03r23\n\r\n\x06\x04\0\x03\x01\x02\x01\x12\x03s\x102\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x01\x04\x12\x03s\x10\x18\n\x0e\n\x07\x04\0\x03\x01\x02\x01\
    \x05\x12\x03s\x19\x1f\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x03s\x20\
    -\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03s01\n\r\n\x06\x04\0\x03\
    \x01\x02\x02\x12\x03t\x10,\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x04\x12\x03\
    t\x10\x18\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x05\x12\x03t\x19\x1f\n\x0e\n\
    \x07\x04\0\x03\x01\x02\x02\x01\x12\x03t\x20'\n\x0e\n\x07\x04\0\x03\x01\
    \x02\x02\x03\x12\x03t*+\n\r\n\x06\x04\0\x03\x01\x02\x03\x12\x03u\x10.\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x03\x04\x12\x03u\x10\x18\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x03\x05\x12\x03u\x19\x1f\n\x0e\n\x07\x04\0\x03\x01\x02\x03\
    \x01\x12\x03u\x20)\n\x0e\n\x07\x04\0\x03\x01\x02\x03\x03\x12\x03u,-\n\r\
    \n\x06\x04\0\x03\x01\x02\x04\x12\x03v\x10-\n\x0e\n\x07\x04\0\x03\x01\x02\
    \x04\x04\x12\x03v\x10\x18\n\x0e\n\x07\x04\0\x03\x01\x02\x04\x05\x12\x03v\
    \x19\x1f\n\x0e\n\x07\x04\0\x03\x01\x02\x04\x01\x12\x03v\x20(\n\x0e\n\x07\
    \x04\0\x03\x01\x02\x04\x03\x12\x03v+,\n\r\n\x06\x04\0\x03\x01\x02\x05\
    \x12\x03w\x102\n\x0e\n\x07\x04\0\x03\x01\x02\x05\x04\x12\x03w\x10\x18\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x05\x05\x12\x03w\x19\x1f\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x05\x01\x12\x03w\x20-\n\x0e\n\x07\x04\0\x03\x01\x02\x05\x03\
    \x12\x03w01\n\x0b\n\x04\x04\0\x02\0\x12\x03z\x08'\n\x0c\n\x05\x04\0\x02\
    \0\x04\x12\x03z\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03z\x11\x17\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03z\x18\"\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03z%&\n\x0b\n\x04\x04\0\x02\x01\x12\x03{\x08!\n\x0c\n\x05\x04\0\
    \x02\x01\x04\x12\x03{\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03{\x11\
    \x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03{\x18\x1c\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03{\x1f\x20\n\x0b\n\x04\x04\0\x02\x02\x12\x03|\x08)\n\
    \x0c\n\x05\x04\0\x02\x02\x04\x12\x03|\x08\x10\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03|\x11\x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03|\x18$\n\x0c\
    \n\x05\x04\0\x02\x02\x03\x12\x03|'(\n\x0b\n\x04\x04\0\x02\x03\x12\x03}\
    \x080\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03}\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x03\x06\x12\x03}\x11\x1e\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03}\x1f\
    +\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03}./\n\x0b\n\x04\x04\0\x02\x04\x12\
    \x03~\x08$\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03~\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x04\x05\x12\x03~\x11\x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x03~\x18\x1f\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03~\"#\n\x0b\n\x04\x04\
    \0\x02\x05\x12\x03\x7f\x08&\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\x7f\
    \x08\x10\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x7f\x11\x17\n\x0c\n\x05\
    \x04\0\x02\x05\x01\x12\x03\x7f\x18!\n\x0c\n\x05\x04\0\x02\x05\x03\x12\
    \x03\x7f$%\n\x0c\n\x04\x04\0\x02\x06\x12\x04\x80\x01\x08%\n\r\n\x05\x04\
    \0\x02\x06\x04\x12\x04\x80\x01\x08\x10\n\r\n\x05\x04\0\x02\x06\x05\x12\
    \x04\x80\x01\x11\x17\n\r\n\x05\x04\0\x02\x06\x01\x12\x04\x80\x01\x18\x20\
    \n\r\n\x05\x04\0\x02\x06\x03\x12\x04\x80\x01#$\n\x0c\n\x04\x04\0\x02\x07\
    \x12\x04\x81\x01\x08$\n\r\n\x05\x04\0\x02\x07\x04\x12\x04\x81\x01\x08\
    \x10\n\r\n\x05\x04\0\x02\x07\x05\x12\x04\x81\x01\x11\x17\n\r\n\x05\x04\0\
    \x02\x07\x01\x12\x04\x81\x01\x18\x1f\n\r\n\x05\x04\0\x02\x07\x03\x12\x04\
    \x81\x01\"#\n\x0c\n\x04\x04\0\x02\x08\x12\x04\x82\x01\x08$\n\r\n\x05\x04\
    \0\x02\x08\x04\x12\x04\x82\x01\x08\x10\n\r\n\x05\x04\0\x02\x08\x05\x12\
    \x04\x82\x01\x11\x15\n\r\n\x05\x04\0\x02\x08\x01\x12\x04\x82\x01\x16\x1f\
    \n\r\n\x05\x04\0\x02\x08\x03\x12\x04\x82\x01\"#\n\x0c\n\x04\x04\0\x02\t\
    \x12\x04\x83\x01\x08\"\n\r\n\x05\x04\0\x02\t\x04\x12\x04\x83\x01\x08\x10\
    \n\r\n\x05\x04\0\x02\t\x05\x12\x04\x83\x01\x11\x15\n\r\n\x05\x04\0\x02\t\
    \x01\x12\x04\x83\x01\x16\x1c\n\r\n\x05\x04\0\x02\t\x03\x12\x04\x83\x01\
    \x1f!\n\x0c\n\x04\x04\0\x02\n\x12\x04\x84\x01\x08'\n\r\n\x05\x04\0\x02\n\
    \x04\x12\x04\x84\x01\x08\x10\n\r\n\x05\x04\0\x02\n\x05\x12\x04\x84\x01\
    \x11\x17\n\r\n\x05\x04\0\x02\n\x01\x12\x04\x84\x01\x18!\n\r\n\x05\x04\0\
    \x02\n\x03\x12\x04\x84\x01$&\n\x0c\n\x04\x04\0\x02\x0b\x12\x04\x85\x01\
    \x08,\n\r\n\x05\x04\0\x02\x0b\x04\x12\x04\x85\x01\x08\x10\n\r\n\x05\x04\
    \0\x02\x0b\x05\x12\x04\x85\x01\x11\x17\n\r\n\x05\x04\0\x02\x0b\x01\x12\
    \x04\x85\x01\x18&\n\r\n\x05\x04\0\x02\x0b\x03\x12\x04\x85\x01)+\n\x0c\n\
    \x04\x04\0\x02\x0c\x12\x04\x86\x01\x089\n\r\n\x05\x04\0\x02\x0c\x04\x12\
    \x04\x86\x01\x08\x10\n\r\n\x05\x04\0\x02\x0c\x06\x12\x04\x86\x01\x11+\n\
    \r\n\x05\x04\0\x02\x0c\x01\x12\x04\x86\x01,3\n\r\n\x05\x04\0\x02\x0c\x03\
    \x12\x04\x86\x0168\n\x0c\n\x04\x04\0\x02\r\x12\x04\x87\x01\x08+\n\r\n\
    \x05\x04\0\x02\r\x04\x12\x04\x87\x01\x08\x10\n\r\n\x05\x04\0\x02\r\x05\
    \x12\x04\x87\x01\x11\x17\n\r\n\x05\x04\0\x02\r\x01\x12\x04\x87\x01\x18%\
    \n\r\n\x05\x04\0\x02\r\x03\x12\x04\x87\x01(*\n\x0c\n\x04\x04\0\x02\x0e\
    \x12\x04\x88\x01\x08B\n\r\n\x05\x04\0\x02\x0e\x04\x12\x04\x88\x01\x08\
    \x10\n\r\n\x05\x04\0\x02\x0e\x06\x12\x04\x88\x01\x11.\n\r\n\x05\x04\0\
    \x02\x0e\x01\x12\x04\x88\x01/<\n\r\n\x05\x04\0\x02\x0e\x03\x12\x04\x88\
    \x01?A\n\x0c\n\x04\x04\0\x02\x0f\x12\x04\x89\x01\x08/\n\r\n\x05\x04\0\
    \x02\x0f\x04\x12\x04\x89\x01\x08\x10\n\r\n\x05\x04\0\x02\x0f\x05\x12\x04\
    \x89\x01\x11\x17\n\r\n\x05\x04\0\x02\x0f\x01\x12\x04\x89\x01\x18)\n\r\n\
    \x05\x04\0\x02\x0f\x03\x12\x04\x89\x01,.\n\x0c\n\x02\x04\x01\x12\x06\x8c\
    \x01\0\x8e\x01\x01\n\x0b\n\x03\x04\x01\x01\x12\x04\x8c\x01\x08\x1e\n\x0c\
    \n\x04\x04\x01\x02\0\x12\x04\x8d\x01\x085\n\r\n\x05\x04\x01\x02\0\x04\
    \x12\x04\x8d\x01\x08\x10\n\r\n\x05\x04\x01\x02\0\x06\x12\x04\x8d\x01\x11\
    #\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x8d\x01$0\n\r\n\x05\x04\x01\x02\0\
    \x03\x12\x04\x8d\x0134\n\x0c\n\x02\x04\x02\x12\x06\x90\x01\0\x95\x01\x01\
    \n\x0b\n\x03\x04\x02\x01\x12\x04\x90\x01\x08\x1a\n\x0c\n\x04\x04\x02\x02\
    \0\x12\x04\x91\x01\x08&\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x91\x01\x08\
    \x10\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\x91\x01\x11\x17\n\r\n\x05\x04\
    \x02\x02\0\x01\x12\x04\x91\x01\x18!\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\
    \x91\x01$%\n\x0c\n\x04\x04\x02\x02\x01\x12\x04\x92\x01\x08$\n\r\n\x05\
    \x04\x02\x02\x01\x04\x12\x04\x92\x01\x08\x10\n\r\n\x05\x04\x02\x02\x01\
    \x05\x12\x04\x92\x01\x11\x17\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x92\
    \x01\x18\x1f\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\x92\x01\"#\n\x0c\n\
    \x04\x04\x02\x02\x02\x12\x04\x93\x01\x08/\n\r\n\x05\x04\x02\x02\x02\x04\
    \x12\x04\x93\x01\x08\x10\n\r\n\x05\x04\x02\x02\x02\x05\x12\x04\x93\x01\
    \x11\x17\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\x93\x01\x18*\n\r\n\x05\
    \x04\x02\x02\x02\x03\x12\x04\x93\x01-.\n\x0c\n\x04\x04\x02\x02\x03\x12\
    \x04\x94\x01\x08-\n\r\n\x05\x04\x02\x02\x03\x04\x12\x04\x94\x01\x08\x10\
    \n\r\n\x05\x04\x02\x02\x03\x05\x12\x04\x94\x01\x11\x17\n\r\n\x05\x04\x02\
    \x02\x03\x01\x12\x04\x94\x01\x18(\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\
    \x94\x01+,\n\x0c\n\x02\x04\x03\x12\x06\x97\x01\0\xa8\x01\x01\n\x0b\n\x03\
    \x04\x03\x01\x12\x04\x97\x01\x08\x1e\n\x0e\n\x04\x04\x03\x03\0\x12\x06\
    \x98\x01\x08\x9b\x01\t\n\r\n\x05\x04\x03\x03\0\x01\x12\x04\x98\x01\x10\
    \x1e\n\x0e\n\x06\x04\x03\x03\0\x02\0\x12\x04\x99\x01\x10,\n\x0f\n\x07\
    \x04\x03\x03\0\x02\0\x04\x12\x04\x99\x01\x10\x18\n\x0f\n\x07\x04\x03\x03\
    \0\x02\0\x05\x12\x04\x99\x01\x19\x1f\n\x0f\n\x07\x04\x03\x03\0\x02\0\x01\
    \x12\x04\x99\x01\x20'\n\x0f\n\x07\x04\x03\x03\0\x02\0\x03\x12\x04\x99\
    \x01*+\n\x0e\n\x06\x04\x03\x03\0\x02\x01\x12\x04\x9a\x01\x102\n\x0f\n\
    \x07\x04\x03\x03\0\x02\x01\x04\x12\x04\x9a\x01\x10\x18\n\x0f\n\x07\x04\
    \x03\x03\0\x02\x01\x05\x12\x04\x9a\x01\x19\x1e\n\x0f\n\x07\x04\x03\x03\0\
    \x02\x01\x01\x12\x04\x9a\x01\x1f-\n\x0f\n\x07\x04\x03\x03\0\x02\x01\x03\
    \x12\x04\x9a\x0101\n\x0e\n\x04\x04\x03\x03\x01\x12\x06\x9d\x01\x08\xa2\
    \x01\t\n\r\n\x05\x04\x03\x03\x01\x01\x12\x04\x9d\x01\x10\x1b\n\x0e\n\x06\
    \x04\x03\x03\x01\x02\0\x12\x04\x9e\x01\x104\n\x0f\n\x07\x04\x03\x03\x01\
    \x02\0\x04\x12\x04\x9e\x01\x10\x18\n\x0f\n\x07\x04\x03\x03\x01\x02\0\x05\
    \x12\x04\x9e\x01\x19\x1f\n\x0f\n\x07\x04\x03\x03\x01\x02\0\x01\x12\x04\
    \x9e\x01\x20/\n\x0f\n\x07\x04\x03\x03\x01\x02\0\x03\x12\x04\x9e\x0123\n\
    \x0e\n\x06\x04\x03\x03\x01\x02\x01\x12\x04\x9f\x01\x104\n\x0f\n\x07\x04\
    \x03\x03\x01\x02\x01\x04\x12\x04\x9f\x01\x10\x18\n\x0f\n\x07\x04\x03\x03\
    \x01\x02\x01\x05\x12\x04\x9f\x01\x19\x1f\n\x0f\n\x07\x04\x03\x03\x01\x02\
    \x01\x01\x12\x04\x9f\x01\x20/\n\x0f\n\x07\x04\x03\x03\x01\x02\x01\x03\
    \x12\x04\x9f\x0123\n\x0e\n\x06\x04\x03\x03\x01\x02\x02\x12\x04\xa0\x01\
    \x104\n\x0f\n\x07\x04\x03\x03\x01\x02\x02\x04\x12\x04\xa0\x01\x10\x18\n\
    \x0f\n\x07\x04\x03\x03\x01\x02\x02\x05\x12\x04\xa0\x01\x19\x1f\n\x0f\n\
    \x07\x04\x03\x03\x01\x02\x02\x01\x12\x04\xa0\x01\x20/\n\x0f\n\x07\x04\
    \x03\x03\x01\x02\x02\x03\x12\x04\xa0\x0123\n\x0e\n\x06\x04\x03\x03\x01\
    \x02\x03\x12\x04\xa1\x01\x103\n\x0f\n\x07\x04\x03\x03\x01\x02\x03\x04\
    \x12\x04\xa1\x01\x10\x18\n\x0f\n\x07\x04\x03\x03\x01\x02\x03\x05\x12\x04\
    \xa1\x01\x19\x1f\n\x0f\n\x07\x04\x03\x03\x01\x02\x03\x01\x12\x04\xa1\x01\
    \x20.\n\x0f\n\x07\x04\x03\x03\x01\x02\x03\x03\x12\x04\xa1\x0112\n\x0c\n\
    \x04\x04\x03\x02\0\x12\x04\xa4\x01\x084\n\r\n\x05\x04\x03\x02\0\x04\x12\
    \x04\xa4\x01\x08\x10\n\r\n\x05\x04\x03\x02\0\x06\x12\x04\xa4\x01\x11#\n\
    \r\n\x05\x04\x03\x02\0\x01\x12\x04\xa4\x01$/\n\r\n\x05\x04\x03\x02\0\x03\
    \x12\x04\xa4\x0123\n\x0c\n\x04\x04\x03\x02\x01\x12\x04\xa5\x01\x08K\n\r\
    \n\x05\x04\x03\x02\x01\x04\x12\x04\xa5\x01\x08\x10\n\r\n\x05\x04\x03\x02\
    \x01\x06\x12\x04\xa5\x01\x116\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xa5\
    \x017F\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xa5\x01IJ\n\x0c\n\x04\x04\
    \x03\x02\x02\x12\x04\xa6\x01\x08E\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\
    \xa6\x01\x08\x10\n\r\n\x05\x04\x03\x02\x02\x06\x12\x04\xa6\x01\x113\n\r\
    \n\x05\x04\x03\x02\x02\x01\x12\x04\xa6\x014@\n\r\n\x05\x04\x03\x02\x02\
    \x03\x12\x04\xa6\x01CD\n\x0c\n\x04\x04\x03\x02\x03\x12\x04\xa7\x01\x083\
    \n\r\n\x05\x04\x03\x02\x03\x04\x12\x04\xa7\x01\x08\x10\n\r\n\x05\x04\x03\
    \x02\x03\x05\x12\x04\xa7\x01\x11\x17\n\r\n\x05\x04\x03\x02\x03\x01\x12\
    \x04\xa7\x01\x18.\n\r\n\x05\x04\x03\x02\x03\x03\x12\x04\xa7\x0112\n\x0c\
    \n\x02\x04\x04\x12\x06\xaa\x01\0\xb1\x01\x01\n\x0b\n\x03\x04\x04\x01\x12\
    \x04\xaa\x01\x08\x1c\n\x0e\n\x04\x04\x04\x03\0\x12\x06\xab\x01\x08\xae\
    \x01\t\n\r\n\x05\x04\x04\x03\0\x01\x12\x04\xab\x01\x10!\n\x0e\n\x06\x04\
    \x04\x03\0\x02\0\x12\x04\xac\x01\x10-\n\x0f\n\x07\x04\x04\x03\0\x02\0\
    \x04\x12\x04\xac\x01\x10\x18\n\x0f\n\x07\x04\x04\x03\0\x02\0\x05\x12\x04\
    \xac\x01\x19\x1f\n\x0f\n\x07\x04\x04\x03\0\x02\0\x01\x12\x04\xac\x01\x20\
    (\n\x0f\n\x07\x04\x04\x03\0\x02\0\x03\x12\x04\xac\x01+,\n\x0e\n\x06\x04\
    \x04\x03\0\x02\x01\x12\x04\xad\x01\x100\n\x0f\n\x07\x04\x04\x03\0\x02\
    \x01\x04\x12\x04\xad\x01\x10\x18\n\x0f\n\x07\x04\x04\x03\0\x02\x01\x05\
    \x12\x04\xad\x01\x19\x1f\n\x0f\n\x07\x04\x04\x03\0\x02\x01\x01\x12\x04\
    \xad\x01\x20+\n\x0f\n\x07\x04\x04\x03\0\x02\x01\x03\x12\x04\xad\x01./\n\
    \x0c\n\x04\x04\x04\x02\0\x12\x04\xb0\x01\x08I\n\r\n\x05\x04\x04\x02\0\
    \x04\x12\x04\xb0\x01\x08\x10\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xb0\x01\
    \x117\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xb0\x018D\n\r\n\x05\x04\x04\
    \x02\0\x03\x12\x04\xb0\x01GH\n\x0c\n\x02\x04\x05\x12\x06\xb3\x01\0\xb7\
    \x01\x01\n\x0b\n\x03\x04\x05\x01\x12\x04\xb3\x01\x08%\n\x0c\n\x04\x04\
    \x05\x02\0\x12\x04\xb4\x01\x08&\n\r\n\x05\x04\x05\x02\0\x04\x12\x04\xb4\
    \x01\x08\x10\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\xb4\x01\x11\x17\n\r\n\
    \x05\x04\x05\x02\0\x01\x12\x04\xb4\x01\x18!\n\r\n\x05\x04\x05\x02\0\x03\
    \x12\x04\xb4\x01$%\n\x0c\n\x04\x04\x05\x02\x01\x12\x04\xb5\x01\x08&\n\r\
    \n\x05\x04\x05\x02\x01\x04\x12\x04\xb5\x01\x08\x10\n\r\n\x05\x04\x05\x02\
    \x01\x05\x12\x04\xb5\x01\x11\x17\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\
    \xb5\x01\x18!\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\xb5\x01$%\n\x0c\n\
    \x04\x04\x05\x02\x02\x12\x04\xb6\x01\x08(\n\r\n\x05\x04\x05\x02\x02\x04\
    \x12\x04\xb6\x01\x08\x10\n\r\n\x05\x04\x05\x02\x02\x05\x12\x04\xb6\x01\
    \x11\x17\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\xb6\x01\x18#\n\r\n\x05\
    \x04\x05\x02\x02\x03\x12\x04\xb6\x01&'\n\x0c\n\x02\x04\x06\x12\x06\xb9\
    \x01\0\xbc\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\x04\xb9\x01\x08,\n\x0c\n\
    \x04\x04\x06\x02\0\x12\x04\xba\x01\x08G\n\r\n\x05\x04\x06\x02\0\x04\x12\
    \x04\xba\x01\x08\x10\n\r\n\x05\x04\x06\x02\0\x06\x12\x04\xba\x01\x112\n\
    \r\n\x05\x04\x06\x02\0\x01\x12\x04\xba\x013B\n\r\n\x05\x04\x06\x02\0\x03\
    \x12\x04\xba\x01EF\n\x0c\n\x04\x04\x06\x02\x01\x12\x04\xbb\x01\x08&\n\r\
    \n\x05\x04\x06\x02\x01\x04\x12\x04\xbb\x01\x08\x10\n\r\n\x05\x04\x06\x02\
    \x01\x05\x12\x04\xbb\x01\x11\x17\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\
    \xbb\x01\x18!\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\xbb\x01$%\n\x0c\n\
    \x02\x04\x07\x12\x06\xbe\x01\0\xc1\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\
    \x04\xbe\x01\x08%\n\x0c\n\x04\x04\x07\x02\0\x12\x04\xbf\x01\x08%\n\r\n\
    \x05\x04\x07\x02\0\x04\x12\x04\xbf\x01\x08\x10\n\r\n\x05\x04\x07\x02\0\
    \x05\x12\x04\xbf\x01\x11\x17\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xbf\x01\
    \x18\x20\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xbf\x01#$\n\x0c\n\x04\x04\
    \x07\x02\x01\x12\x04\xc0\x01\x08(\n\r\n\x05\x04\x07\x02\x01\x04\x12\x04\
    \xc0\x01\x08\x10\n\r\n\x05\x04\x07\x02\x01\x05\x12\x04\xc0\x01\x11\x17\n\
    \r\n\x05\x04\x07\x02\x01\x01\x12\x04\xc0\x01\x18#\n\r\n\x05\x04\x07\x02\
    \x01\x03\x12\x04\xc0\x01&'\n\x0c\n\x02\x04\x08\x12\x06\xc3\x01\0\xc5\x01\
    \x01\n\x0b\n\x03\x04\x08\x01\x12\x04\xc3\x01\x08+\n\x0c\n\x04\x04\x08\
    \x02\0\x12\x04\xc4\x01\x08)\n\r\n\x05\x04\x08\x02\0\x04\x12\x04\xc4\x01\
    \x08\x10\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xc4\x01\x11\x17\n\r\n\x05\
    \x04\x08\x02\0\x01\x12\x04\xc4\x01\x18$\n\r\n\x05\x04\x08\x02\0\x03\x12\
    \x04\xc4\x01'(\n\x0c\n\x02\x04\t\x12\x06\xc7\x01\0\xcc\x01\x01\n\x0b\n\
    \x03\x04\t\x01\x12\x04\xc7\x01\x08\x1c\n\x0c\n\x04\x04\t\x02\0\x12\x04\
    \xc8\x01\x08>\n\r\n\x05\x04\t\x02\0\x04\x12\x04\xc8\x01\x08\x10\n\r\n\
    \x05\x04\t\x02\0\x06\x12\x04\xc8\x01\x11.\n\r\n\x05\x04\t\x02\0\x01\x12\
    \x04\xc8\x01/9\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xc8\x01<=\n\x0c\n\x04\
    \x04\t\x02\x01\x12\x04\xc9\x01\x08M\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\
    \xc9\x01\x08\x10\n\r\n\x05\x04\t\x02\x01\x06\x12\x04\xc9\x01\x115\n\r\n\
    \x05\x04\t\x02\x01\x01\x12\x04\xc9\x016H\n\r\n\x05\x04\t\x02\x01\x03\x12\
    \x04\xc9\x01KL\n\x0c\n\x04\x04\t\x02\x02\x12\x04\xca\x01\x08C\n\r\n\x05\
    \x04\t\x02\x02\x04\x12\x04\xca\x01\x08\x10\n\r\n\x05\x04\t\x02\x02\x06\
    \x12\x04\xca\x01\x11.\n\r\n\x05\x04\t\x02\x02\x01\x12\x04\xca\x01/>\n\r\
    \n\x05\x04\t\x02\x02\x03\x12\x04\xca\x01AB\n\x0c\n\x04\x04\t\x02\x03\x12\
    \x04\xcb\x01\x08P\n\r\n\x05\x04\t\x02\x03\x04\x12\x04\xcb\x01\x08\x10\n\
    \r\n\x05\x04\t\x02\x03\x06\x12\x04\xcb\x01\x114\n\r\n\x05\x04\t\x02\x03\
    \x01\x12\x04\xcb\x015K\n\r\n\x05\x04\t\x02\x03\x03\x12\x04\xcb\x01NO\n\
    \x0c\n\x02\x04\n\x12\x06\xce\x01\0\xd1\x01\x01\n\x0b\n\x03\x04\n\x01\x12\
    \x04\xce\x01\x080\n\x0c\n\x04\x04\n\x02\0\x12\x04\xcf\x01\x08&\n\r\n\x05\
    \x04\n\x02\0\x04\x12\x04\xcf\x01\x08\x10\n\r\n\x05\x04\n\x02\0\x05\x12\
    \x04\xcf\x01\x11\x17\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xcf\x01\x18!\n\r\
    \n\x05\x04\n\x02\0\x03\x12\x04\xcf\x01$%\n\x0c\n\x04\x04\n\x02\x01\x12\
    \x04\xd0\x01\x08+\n\r\n\x05\x04\n\x02\x01\x04\x12\x04\xd0\x01\x08\x10\n\
    \r\n\x05\x04\n\x02\x01\x05\x12\x04\xd0\x01\x11\x17\n\r\n\x05\x04\n\x02\
    \x01\x01\x12\x04\xd0\x01\x18&\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xd0\
    \x01)*\n\x0c\n\x02\x04\x0b\x12\x06\xd3\x01\0\xe0\x01\x01\n\x0b\n\x03\x04\
    \x0b\x01\x12\x04\xd3\x01\x081\n\x0e\n\x04\x04\x0b\x04\0\x12\x06\xd4\x01\
    \x08\xd9\x01\t\n\r\n\x05\x04\x0b\x04\0\x01\x12\x04\xd4\x01\r\x13\n\x0e\n\
    \x06\x04\x0b\x04\0\x02\0\x12\x04\xd5\x01\x10\x1c\n\x0f\n\x07\x04\x0b\x04\
    \0\x02\0\x01\x12\x04\xd5\x01\x10\x17\n\x0f\n\x07\x04\x0b\x04\0\x02\0\x02\
    \x12\x04\xd5\x01\x1a\x1b\n\x0e\n\x06\x04\x0b\x04\0\x02\x01\x12\x04\xd6\
    \x01\x10&\n\x0f\n\x07\x04\x0b\x04\0\x02\x01\x01\x12\x04\xd6\x01\x10!\n\
    \x0f\n\x07\x04\x0b\x04\0\x02\x01\x02\x12\x04\xd6\x01$%\n\x0e\n\x06\x04\
    \x0b\x04\0\x02\x02\x12\x04\xd7\x01\x10,\n\x0f\n\x07\x04\x0b\x04\0\x02\
    \x02\x01\x12\x04\xd7\x01\x10'\n\x0f\n\x07\x04\x0b\x04\0\x02\x02\x02\x12\
    \x04\xd7\x01*+\n\x0e\n\x06\x04\x0b\x04\0\x02\x03\x12\x04\xd8\x01\x10,\n\
    \x0f\n\x07\x04\x0b\x04\0\x02\x03\x01\x12\x04\xd8\x01\x10'\n\x0f\n\x07\
    \x04\x0b\x04\0\x02\x03\x02\x12\x04\xd8\x01*+\n\x0c\n\x04\x04\x0b\x02\0\
    \x12\x04\xdb\x01\x08M\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04\xdb\x01\x08\
    \x10\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\xdb\x01\x11A\n\r\n\x05\x04\x0b\
    \x02\0\x01\x12\x04\xdb\x01BH\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xdb\x01\
    KL\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\xdc\x01\x080\n\r\n\x05\x04\x0b\
    \x02\x01\x04\x12\x04\xdc\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x01\x05\x12\
    \x04\xdc\x01\x11\x17\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\xdc\x01\x18+\
    \n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\xdc\x01./\n\x0c\n\x04\x04\x0b\x02\
    \x02\x12\x04\xdd\x01\x08!\n\r\n\x05\x04\x0b\x02\x02\x04\x12\x04\xdd\x01\
    \x08\x10\n\r\n\x05\x04\x0b\x02\x02\x05\x12\x04\xdd\x01\x11\x16\n\r\n\x05\
    \x04\x0b\x02\x02\x01\x12\x04\xdd\x01\x17\x1c\n\r\n\x05\x04\x0b\x02\x02\
    \x03\x12\x04\xdd\x01\x1f\x20\n\x0c\n\x04\x04\x0b\x02\x03\x12\x04\xde\x01\
    \x08$\n\r\n\x05\x04\x0b\x02\x03\x04\x12\x04\xde\x01\x08\x10\n\r\n\x05\
    \x04\x0b\x02\x03\x05\x12\x04\xde\x01\x11\x15\n\r\n\x05\x04\x0b\x02\x03\
    \x01\x12\x04\xde\x01\x16\x1f\n\r\n\x05\x04\x0b\x02\x03\x03\x12\x04\xde\
    \x01\"#\n\x0c\n\x04\x04\x0b\x02\x04\x12\x04\xdf\x01\x08&\n\r\n\x05\x04\
    \x0b\x02\x04\x04\x12\x04\xdf\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x04\x05\
    \x12\x04\xdf\x01\x11\x16\n\r\n\x05\x04\x0b\x02\x04\x01\x12\x04\xdf\x01\
    \x17!\n\r\n\x05\x04\x0b\x02\x04\x03\x12\x04\xdf\x01$%\n\x0c\n\x02\x04\
    \x0c\x12\x06\xe2\x01\0\xe9\x01\x01\n\x0b\n\x03\x04\x0c\x01\x12\x04\xe2\
    \x01\x085\n\x0e\n\x04\x04\x0c\x03\0\x12\x06\xe3\x01\x08\xe6\x01\t\n\r\n\
    \x05\x04\x0c\x03\0\x01\x12\x04\xe3\x01\x10\x1f\n\x0e\n\x06\x04\x0c\x03\0\
    \x02\0\x12\x04\xe4\x01\x10.\n\x0f\n\x07\x04\x0c\x03\0\x02\0\x04\x12\x04\
    \xe4\x01\x10\x18\n\x0f\n\x07\x04\x0c\x03\0\x02\0\x05\x12\x04\xe4\x01\x19\
    \x1f\n\x0f\n\x07\x04\x0c\x03\0\x02\0\x01\x12\x04\xe4\x01\x20)\n\x0f\n\
    \x07\x04\x0c\x03\0\x02\0\x03\x12\x04\xe4\x01,-\n\x0e\n\x06\x04\x0c\x03\0\
    \x02\x01\x12\x04\xe5\x01\x103\n\x0f\n\x07\x04\x0c\x03\0\x02\x01\x04\x12\
    \x04\xe5\x01\x10\x18\n\x0f\n\x07\x04\x0c\x03\0\x02\x01\x05\x12\x04\xe5\
    \x01\x19\x1f\n\x0f\n\x07\x04\x0c\x03\0\x02\x01\x01\x12\x04\xe5\x01\x20.\
    \n\x0f\n\x07\x04\x0c\x03\0\x02\x01\x03\x12\x04\xe5\x0112\n\x0c\n\x04\x04\
    \x0c\x02\0\x12\x04\xe8\x01\x08e\n\r\n\x05\x04\x0c\x02\0\x04\x12\x04\xe8\
    \x01\x08\x10\n\r\n\x05\x04\x0c\x02\0\x06\x12\x04\xe8\x01\x11N\n\r\n\x05\
    \x04\x0c\x02\0\x01\x12\x04\xe8\x01O`\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\
    \xe8\x01cd\n\x0c\n\x02\x04\r\x12\x06\xeb\x01\0\xff\x01\x01\n\x0b\n\x03\
    \x04\r\x01\x12\x04\xeb\x01\x086\n\x0e\n\x04\x04\r\x03\0\x12\x06\xec\x01\
    \x08\xf5\x01\t\n\r\n\x05\x04\r\x03\0\x01\x12\x04\xec\x01\x10\x1e\n\x0e\n\
    \x06\x04\r\x03\0\x02\0\x12\x04\xed\x01\x10.\n\x0f\n\x07\x04\r\x03\0\x02\
    \0\x04\x12\x04\xed\x01\x10\x18\n\x0f\n\x07\x04\r\x03\0\x02\0\x05\x12\x04\
    \xed\x01\x19\x1f\n\x0f\n\x07\x04\r\x03\0\x02\0\x01\x12\x04\xed\x01\x20)\
    \n\x0f\n\x07\x04\r\x03\0\x02\0\x03\x12\x04\xed\x01,-\n\x0e\n\x06\x04\r\
    \x03\0\x02\x01\x12\x04\xee\x01\x109\n\x0f\n\x07\x04\r\x03\0\x02\x01\x04\
    \x12\x04\xee\x01\x10\x18\n\x0f\n\x07\x04\r\x03\0\x02\x01\x05\x12\x04\xee\
    \x01\x19\x1f\n\x0f\n\x07\x04\r\x03\0\x02\x01\x01\x12\x04\xee\x01\x204\n\
    \x0f\n\x07\x04\r\x03\0\x02\x01\x03\x12\x04\xee\x0178\n\x0e\n\x06\x04\r\
    \x03\0\x02\x02\x12\x04\xef\x01\x10Z\n\x0f\n\x07\x04\r\x03\0\x02\x02\x04\
    \x12\x04\xef\x01\x10\x18\n\x0f\n\x07\x04\r\x03\0\x02\x02\x06\x12\x04\xef\
    \x01\x19N\n\x0f\n\x07\x04\r\x03\0\x02\x02\x01\x12\x04\xef\x01OU\n\x0f\n\
    \x07\x04\r\x03\0\x02\x02\x03\x12\x04\xef\x01XY\n\x0e\n\x06\x04\r\x03\0\
    \x02\x03\x12\x04\xf0\x01\x108\n\x0f\n\x07\x04\r\x03\0\x02\x03\x04\x12\
    \x04\xf0\x01\x10\x18\n\x0f\n\x07\x04\r\x03\0\x02\x03\x05\x12\x04\xf0\x01\
    \x19\x1f\n\x0f\n\x07\x04\r\x03\0\x02\x03\x01\x12\x04\xf0\x01\x203\n\x0f\
    \n\x07\x04\r\x03\0\x02\x03\x03\x12\x04\xf0\x0167\n\x0e\n\x06\x04\r\x03\0\
    \x02\x04\x12\x04\xf1\x01\x10)\n\x0f\n\x07\x04\r\x03\0\x02\x04\x04\x12\
    \x04\xf1\x01\x10\x18\n\x0f\n\x07\x04\r\x03\0\x02\x04\x05\x12\x04\xf1\x01\
    \x19\x1e\n\x0f\n\x07\x04\r\x03\0\x02\x04\x01\x12\x04\xf1\x01\x1f$\n\x0f\
    \n\x07\x04\r\x03\0\x02\x04\x03\x12\x04\xf1\x01'(\n\x0e\n\x06\x04\r\x03\0\
    \x02\x05\x12\x04\xf2\x01\x10,\n\x0f\n\x07\x04\r\x03\0\x02\x05\x04\x12\
    \x04\xf2\x01\x10\x18\n\x0f\n\x07\x04\r\x03\0\x02\x05\x05\x12\x04\xf2\x01\
    \x19\x1d\n\x0f\n\x07\x04\r\x03\0\x02\x05\x01\x12\x04\xf2\x01\x1e'\n\x0f\
    \n\x07\x04\r\x03\0\x02\x05\x03\x12\x04\xf2\x01*+\n\x0e\n\x06\x04\r\x03\0\
    \x02\x06\x12\x04\xf3\x01\x10.\n\x0f\n\x07\x04\r\x03\0\x02\x06\x04\x12\
    \x04\xf3\x01\x10\x18\n\x0f\n\x07\x04\r\x03\0\x02\x06\x05\x12\x04\xf3\x01\
    \x19\x1e\n\x0f\n\x07\x04\r\x03\0\x02\x06\x01\x12\x04\xf3\x01\x1f)\n\x0f\
    \n\x07\x04\r\x03\0\x02\x06\x03\x12\x04\xf3\x01,-\n\x0e\n\x06\x04\r\x03\0\
    \x02\x07\x12\x04\xf4\x01\x103\n\x0f\n\x07\x04\r\x03\0\x02\x07\x04\x12\
    \x04\xf4\x01\x10\x18\n\x0f\n\x07\x04\r\x03\0\x02\x07\x05\x12\x04\xf4\x01\
    \x19\x1f\n\x0f\n\x07\x04\r\x03\0\x02\x07\x01\x12\x04\xf4\x01\x20.\n\x0f\
    \n\x07\x04\r\x03\0\x02\x07\x03\x12\x04\xf4\x0112\n\x0e\n\x04\x04\r\x04\0\
    \x12\x06\xf7\x01\x08\xfc\x01\t\n\r\n\x05\x04\r\x04\0\x01\x12\x04\xf7\x01\
    \r\x13\n\x0e\n\x06\x04\r\x04\0\x02\0\x12\x04\xf8\x01\x10\x1c\n\x0f\n\x07\
    \x04\r\x04\0\x02\0\x01\x12\x04\xf8\x01\x10\x17\n\x0f\n\x07\x04\r\x04\0\
    \x02\0\x02\x12\x04\xf8\x01\x1a\x1b\n\x0e\n\x06\x04\r\x04\0\x02\x01\x12\
    \x04\xf9\x01\x10&\n\x0f\n\x07\x04\r\x04\0\x02\x01\x01\x12\x04\xf9\x01\
    \x10!\n\x0f\n\x07\x04\r\x04\0\x02\x01\x02\x12\x04\xf9\x01$%\n\x0e\n\x06\
    \x04\r\x04\0\x02\x02\x12\x04\xfa\x01\x10,\n\x0f\n\x07\x04\r\x04\0\x02\
    \x02\x01\x12\x04\xfa\x01\x10'\n\x0f\n\x07\x04\r\x04\0\x02\x02\x02\x12\
    \x04\xfa\x01*+\n\x0e\n\x06\x04\r\x04\0\x02\x03\x12\x04\xfb\x01\x10,\n\
    \x0f\n\x07\x04\r\x04\0\x02\x03\x01\x12\x04\xfb\x01\x10'\n\x0f\n\x07\x04\
    \r\x04\0\x02\x03\x02\x12\x04\xfb\x01*+\n\x0c\n\x04\x04\r\x02\0\x12\x04\
    \xfe\x01\x08]\n\r\n\x05\x04\r\x02\0\x04\x12\x04\xfe\x01\x08\x10\n\r\n\
    \x05\x04\r\x02\0\x06\x12\x04\xfe\x01\x11N\n\r\n\x05\x04\r\x02\0\x01\x12\
    \x04\xfe\x01OX\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xfe\x01[\\\n\x0c\n\x02\
    \x04\x0e\x12\x06\x81\x02\0\x88\x02\x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\
    \x81\x02\x080\n\x0c\n\x04\x04\x0e\x02\0\x12\x04\x82\x02\x08&\n\r\n\x05\
    \x04\x0e\x02\0\x04\x12\x04\x82\x02\x08\x10\n\r\n\x05\x04\x0e\x02\0\x05\
    \x12\x04\x82\x02\x11\x17\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\x82\x02\x18\
    !\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\x82\x02$%\n\x0c\n\x04\x04\x0e\x02\
    \x01\x12\x04\x83\x02\x081\n\r\n\x05\x04\x0e\x02\x01\x04\x12\x04\x83\x02\
    \x08\x10\n\r\n\x05\x04\x0e\x02\x01\x05\x12\x04\x83\x02\x11\x17\n\r\n\x05\
    \x04\x0e\x02\x01\x01\x12\x04\x83\x02\x18,\n\r\n\x05\x04\x0e\x02\x01\x03\
    \x12\x04\x83\x02/0\n\x0c\n\x04\x04\x0e\x02\x02\x12\x04\x84\x02\x08!\n\r\
    \n\x05\x04\x0e\x02\x02\x04\x12\x04\x84\x02\x08\x10\n\r\n\x05\x04\x0e\x02\
    \x02\x05\x12\x04\x84\x02\x11\x17\n\r\n\x05\x04\x0e\x02\x02\x01\x12\x04\
    \x84\x02\x18\x1c\n\r\n\x05\x04\x0e\x02\x02\x03\x12\x04\x84\x02\x1f\x20\n\
    \x0c\n\x04\x04\x0e\x02\x03\x12\x04\x85\x02\x080\n\r\n\x05\x04\x0e\x02\
    \x03\x04\x12\x04\x85\x02\x08\x10\n\r\n\x05\x04\x0e\x02\x03\x05\x12\x04\
    \x85\x02\x11\x17\n\r\n\x05\x04\x0e\x02\x03\x01\x12\x04\x85\x02\x18+\n\r\
    \n\x05\x04\x0e\x02\x03\x03\x12\x04\x85\x02./\n\x0c\n\x04\x04\x0e\x02\x04\
    \x12\x04\x86\x02\x08%\n\r\n\x05\x04\x0e\x02\x04\x04\x12\x04\x86\x02\x08\
    \x10\n\r\n\x05\x04\x0e\x02\x04\x05\x12\x04\x86\x02\x11\x17\n\r\n\x05\x04\
    \x0e\x02\x04\x01\x12\x04\x86\x02\x18\x20\n\r\n\x05\x04\x0e\x02\x04\x03\
    \x12\x04\x86\x02#$\n\x0c\n\x04\x04\x0e\x02\x05\x12\x04\x87\x02\x08+\n\r\
    \n\x05\x04\x0e\x02\x05\x04\x12\x04\x87\x02\x08\x10\n\r\n\x05\x04\x0e\x02\
    \x05\x05\x12\x04\x87\x02\x11\x17\n\r\n\x05\x04\x0e\x02\x05\x01\x12\x04\
    \x87\x02\x18&\n\r\n\x05\x04\x0e\x02\x05\x03\x12\x04\x87\x02)*\n\x0c\n\
    \x02\x04\x0f\x12\x06\x8a\x02\0\x9a\x02\x01\n\x0b\n\x03\x04\x0f\x01\x12\
    \x04\x8a\x02\x081\n\x0e\n\x04\x04\x0f\x04\0\x12\x06\x8b\x02\x08\x97\x02\
    \t\n\r\n\x05\x04\x0f\x04\0\x01\x12\x04\x8b\x02\r\x13\n\x0e\n\x06\x04\x0f\
    \x04\0\x02\0\x12\x04\x8c\x02\x10\x1c\n\x0f\n\x07\x04\x0f\x04\0\x02\0\x01\
    \x12\x04\x8c\x02\x10\x17\n\x0f\n\x07\x04\x0f\x04\0\x02\0\x02\x12\x04\x8c\
    \x02\x1a\x1b\n\x0e\n\x06\x04\x0f\x04\0\x02\x01\x12\x04\x8d\x02\x10&\n\
    \x0f\n\x07\x04\x0f\x04\0\x02\x01\x01\x12\x04\x8d\x02\x10!\n\x0f\n\x07\
    \x04\x0f\x04\0\x02\x01\x02\x12\x04\x8d\x02$%\n\x0e\n\x06\x04\x0f\x04\0\
    \x02\x02\x12\x04\x8e\x02\x10,\n\x0f\n\x07\x04\x0f\x04\0\x02\x02\x01\x12\
    \x04\x8e\x02\x10'\n\x0f\n\x07\x04\x0f\x04\0\x02\x02\x02\x12\x04\x8e\x02*\
    +\n\x0e\n\x06\x04\x0f\x04\0\x02\x03\x12\x04\x8f\x02\x10,\n\x0f\n\x07\x04\
    \x0f\x04\0\x02\x03\x01\x12\x04\x8f\x02\x10'\n\x0f\n\x07\x04\x0f\x04\0\
    \x02\x03\x02\x12\x04\x8f\x02*+\n\x0e\n\x06\x04\x0f\x04\0\x02\x04\x12\x04\
    \x90\x02\x100\n\x0f\n\x07\x04\x0f\x04\0\x02\x04\x01\x12\x04\x90\x02\x10+\
    \n\x0f\n\x07\x04\x0f\x04\0\x02\x04\x02\x12\x04\x90\x02./\n\x0e\n\x06\x04\
    \x0f\x04\0\x02\x05\x12\x04\x91\x02\x10'\n\x0f\n\x07\x04\x0f\x04\0\x02\
    \x05\x01\x12\x04\x91\x02\x10\"\n\x0f\n\x07\x04\x0f\x04\0\x02\x05\x02\x12\
    \x04\x91\x02%&\n\x0e\n\x06\x04\x0f\x04\0\x02\x06\x12\x04\x92\x02\x10+\n\
    \x0f\n\x07\x04\x0f\x04\0\x02\x06\x01\x12\x04\x92\x02\x10&\n\x0f\n\x07\
    \x04\x0f\x04\0\x02\x06\x02\x12\x04\x92\x02)*\n\x0e\n\x06\x04\x0f\x04\0\
    \x02\x07\x12\x04\x93\x02\x10,\n\x0f\n\x07\x04\x0f\x04\0\x02\x07\x01\x12\
    \x04\x93\x02\x10'\n\x0f\n\x07\x04\x0f\x04\0\x02\x07\x02\x12\x04\x93\x02*\
    +\n\x0e\n\x06\x04\x0f\x04\0\x02\x08\x12\x04\x94\x02\x10+\n\x0f\n\x07\x04\
    \x0f\x04\0\x02\x08\x01\x12\x04\x94\x02\x10&\n\x0f\n\x07\x04\x0f\x04\0\
    \x02\x08\x02\x12\x04\x94\x02)*\n\x0e\n\x06\x04\x0f\x04\0\x02\t\x12\x04\
    \x95\x02\x104\n\x0f\n\x07\x04\x0f\x04\0\x02\t\x01\x12\x04\x95\x02\x10/\n\
    \x0f\n\x07\x04\x0f\x04\0\x02\t\x02\x12\x04\x95\x0223\n\x0e\n\x06\x04\x0f\
    \x04\0\x02\n\x12\x04\x96\x02\x10)\n\x0f\n\x07\x04\x0f\x04\0\x02\n\x01\
    \x12\x04\x96\x02\x10#\n\x0f\n\x07\x04\x0f\x04\0\x02\n\x02\x12\x04\x96\
    \x02&(\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\x99\x02\x08M\n\r\n\x05\x04\x0f\
    \x02\0\x04\x12\x04\x99\x02\x08\x10\n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\
    \x99\x02\x11A\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\x99\x02BH\n\r\n\x05\
    \x04\x0f\x02\0\x03\x12\x04\x99\x02KL\n\x0c\n\x02\x04\x10\x12\x06\x9c\x02\
    \0\xae\x02\x01\n\x0b\n\x03\x04\x10\x01\x12\x04\x9c\x02\x08&\n\x0e\n\x04\
    \x04\x10\x03\0\x12\x06\x9d\x02\x08\xa4\x02\t\n\r\n\x05\x04\x10\x03\0\x01\
    \x12\x04\x9d\x02\x10\x1a\n\x0e\n\x06\x04\x10\x03\0\x02\0\x12\x04\x9e\x02\
    \x10.\n\x0f\n\x07\x04\x10\x03\0\x02\0\x04\x12\x04\x9e\x02\x10\x18\n\x0f\
    \n\x07\x04\x10\x03\0\x02\0\x05\x12\x04\x9e\x02\x19\x1f\n\x0f\n\x07\x04\
    \x10\x03\0\x02\0\x01\x12\x04\x9e\x02\x20)\n\x0f\n\x07\x04\x10\x03\0\x02\
    \0\x03\x12\x04\x9e\x02,-\n\x0e\n\x06\x04\x10\x03\0\x02\x01\x12\x04\x9f\
    \x02\x100\n\x0f\n\x07\x04\x10\x03\0\x02\x01\x04\x12\x04\x9f\x02\x10\x18\
    \n\x0f\n\x07\x04\x10\x03\0\x02\x01\x05\x12\x04\x9f\x02\x19\x1f\n\x0f\n\
    \x07\x04\x10\x03\0\x02\x01\x01\x12\x04\x9f\x02\x20+\n\x0f\n\x07\x04\x10\
    \x03\0\x02\x01\x03\x12\x04\x9f\x02./\n\x0e\n\x06\x04\x10\x03\0\x02\x02\
    \x12\x04\xa0\x02\x104\n\x0f\n\x07\x04\x10\x03\0\x02\x02\x04\x12\x04\xa0\
    \x02\x10\x18\n\x0f\n\x07\x04\x10\x03\0\x02\x02\x05\x12\x04\xa0\x02\x19\
    \x1f\n\x0f\n\x07\x04\x10\x03\0\x02\x02\x01\x12\x04\xa0\x02\x20/\n\x0f\n\
    \x07\x04\x10\x03\0\x02\x02\x03\x12\x04\xa0\x0223\n\x0e\n\x06\x04\x10\x03\
    \0\x02\x03\x12\x04\xa1\x02\x102\n\x0f\n\x07\x04\x10\x03\0\x02\x03\x04\
    \x12\x04\xa1\x02\x10\x18\n\x0f\n\x07\x04\x10\x03\0\x02\x03\x05\x12\x04\
    \xa1\x02\x19\x1f\n\x0f\n\x07\x04\x10\x03\0\x02\x03\x01\x12\x04\xa1\x02\
    \x20-\n\x0f\n\x07\x04\x10\x03\0\x02\x03\x03\x12\x04\xa1\x0201\n\x0e\n\
    \x06\x04\x10\x03\0\x02\x04\x12\x04\xa2\x02\x103\n\x0f\n\x07\x04\x10\x03\
    \0\x02\x04\x04\x12\x04\xa2\x02\x10\x18\n\x0f\n\x07\x04\x10\x03\0\x02\x04\
    \x05\x12\x04\xa2\x02\x19\x1f\n\x0f\n\x07\x04\x10\x03\0\x02\x04\x01\x12\
    \x04\xa2\x02\x20.\n\x0f\n\x07\x04\x10\x03\0\x02\x04\x03\x12\x04\xa2\x021\
    2\n\x0e\n\x06\x04\x10\x03\0\x02\x05\x12\x04\xa3\x02\x10Q\n\x0f\n\x07\x04\
    \x10\x03\0\x02\x05\x04\x12\x04\xa3\x02\x10\x18\n\x0f\n\x07\x04\x10\x03\0\
    \x02\x05\x06\x12\x04\xa3\x02\x19E\n\x0f\n\x07\x04\x10\x03\0\x02\x05\x01\
    \x12\x04\xa3\x02FL\n\x0f\n\x07\x04\x10\x03\0\x02\x05\x03\x12\x04\xa3\x02\
    OP\n\x0e\n\x04\x04\x10\x04\0\x12\x06\xa6\x02\x08\xab\x02\t\n\r\n\x05\x04\
    \x10\x04\0\x01\x12\x04\xa6\x02\r\x1a\n\x0e\n\x06\x04\x10\x04\0\x02\0\x12\
    \x04\xa7\x02\x10\x1a\n\x0f\n\x07\x04\x10\x04\0\x02\0\x01\x12\x04\xa7\x02\
    \x10\x15\n\x0f\n\x07\x04\x10\x04\0\x02\0\x02\x12\x04\xa7\x02\x18\x19\n\
    \x0e\n\x06\x04\x10\x04\0\x02\x01\x12\x04\xa8\x02\x10\x1c\n\x0f\n\x07\x04\
    \x10\x04\0\x02\x01\x01\x12\x04\xa8\x02\x10\x17\n\x0f\n\x07\x04\x10\x04\0\
    \x02\x01\x02\x12\x04\xa8\x02\x1a\x1b\n\x0e\n\x06\x04\x10\x04\0\x02\x02\
    \x12\x04\xa9\x02\x10\x19\n\x0f\n\x07\x04\x10\x04\0\x02\x02\x01\x12\x04\
    \xa9\x02\x10\x14\n\x0f\n\x07\x04\x10\x04\0\x02\x02\x02\x12\x04\xa9\x02\
    \x17\x18\n\x0e\n\x06\x04\x10\x04\0\x02\x03\x12\x04\xaa\x02\x10\x1e\n\x0f\
    \n\x07\x04\x10\x04\0\x02\x03\x01\x12\x04\xaa\x02\x10\x19\n\x0f\n\x07\x04\
    \x10\x04\0\x02\x03\x02\x12\x04\xaa\x02\x1c\x1d\n\x0c\n\x04\x04\x10\x02\0\
    \x12\x04\xad\x02\x08L\n\r\n\x05\x04\x10\x02\0\x04\x12\x04\xad\x02\x08\
    \x10\n\r\n\x05\x04\x10\x02\0\x06\x12\x04\xad\x02\x11:\n\r\n\x05\x04\x10\
    \x02\0\x01\x12\x04\xad\x02;G\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\xad\x02\
    JK\n\x0c\n\x02\x04\x11\x12\x06\xb0\x02\0\xcc\x02\x01\n\x0b\n\x03\x04\x11\
    \x01\x12\x04\xb0\x02\x08\x20\n\x0e\n\x04\x04\x11\x03\0\x12\x06\xb1\x02\
    \x08\xb5\x02\t\n\r\n\x05\x04\x11\x03\0\x01\x12\x04\xb1\x02\x10\x16\n\x0e\
    \n\x06\x04\x11\x03\0\x02\0\x12\x04\xb2\x02\x10'\n\x0f\n\x07\x04\x11\x03\
    \0\x02\0\x04\x12\x04\xb2\x02\x10\x18\n\x0f\n\x07\x04\x11\x03\0\x02\0\x05\
    \x12\x04\xb2\x02\x19\x1f\n\x0f\n\x07\x04\x11\x03\0\x02\0\x01\x12\x04\xb2\
    \x02\x20\"\n\x0f\n\x07\x04\x11\x03\0\x02\0\x03\x12\x04\xb2\x02%&\n\x0e\n\
    \x06\x04\x11\x03\0\x02\x01\x12\x04\xb3\x02\x10)\n\x0f\n\x07\x04\x11\x03\
    \0\x02\x01\x04\x12\x04\xb3\x02\x10\x18\n\x0f\n\x07\x04\x11\x03\0\x02\x01\
    \x05\x12\x04\xb3\x02\x19\x1f\n\x0f\n\x07\x04\x11\x03\0\x02\x01\x01\x12\
    \x04\xb3\x02\x20$\n\x0f\n\x07\x04\x11\x03\0\x02\x01\x03\x12\x04\xb3\x02'\
    (\n\x0e\n\x06\x04\x11\x03\0\x02\x02\x12\x04\xb4\x02\x10.\n\x0f\n\x07\x04\
    \x11\x03\0\x02\x02\x04\x12\x04\xb4\x02\x10\x18\n\x0f\n\x07\x04\x11\x03\0\
    \x02\x02\x05\x12\x04\xb4\x02\x19\x1f\n\x0f\n\x07\x04\x11\x03\0\x02\x02\
    \x01\x12\x04\xb4\x02\x20)\n\x0f\n\x07\x04\x11\x03\0\x02\x02\x03\x12\x04\
    \xb4\x02,-\n\x0e\n\x04\x04\x11\x03\x01\x12\x06\xb7\x02\x08\xbb\x02\t\n\r\
    \n\x05\x04\x11\x03\x01\x01\x12\x04\xb7\x02\x10\x14\n\x0e\n\x06\x04\x11\
    \x03\x01\x02\0\x12\x04\xb8\x02\x10'\n\x0f\n\x07\x04\x11\x03\x01\x02\0\
    \x04\x12\x04\xb8\x02\x10\x18\n\x0f\n\x07\x04\x11\x03\x01\x02\0\x05\x12\
    \x04\xb8\x02\x19\x1f\n\x0f\n\x07\x04\x11\x03\x01\x02\0\x01\x12\x04\xb8\
    \x02\x20\"\n\x0f\n\x07\x04\x11\x03\x01\x02\0\x03\x12\x04\xb8\x02%&\n\x0e\
    \n\x06\x04\x11\x03\x01\x02\x01\x12\x04\xb9\x02\x10)\n\x0f\n\x07\x04\x11\
    \x03\x01\x02\x01\x04\x12\x04\xb9\x02\x10\x18\n\x0f\n\x07\x04\x11\x03\x01\
    \x02\x01\x05\x12\x04\xb9\x02\x19\x1f\n\x0f\n\x07\x04\x11\x03\x01\x02\x01\
    \x01\x12\x04\xb9\x02\x20$\n\x0f\n\x07\x04\x11\x03\x01\x02\x01\x03\x12\
    \x04\xb9\x02'(\n\x0e\n\x06\x04\x11\x03\x01\x02\x02\x12\x04\xba\x02\x10(\
    \n\x0f\n\x07\x04\x11\x03\x01\x02\x02\x04\x12\x04\xba\x02\x10\x18\n\x0f\n\
    \x07\x04\x11\x03\x01\x02\x02\x05\x12\x04\xba\x02\x19\x1f\n\x0f\n\x07\x04\
    \x11\x03\x01\x02\x02\x01\x12\x04\xba\x02\x20#\n\x0f\n\x07\x04\x11\x03\
    \x01\x02\x02\x03\x12\x04\xba\x02&'\n\x0e\n\x04\x04\x11\x03\x02\x12\x06\
    \xbd\x02\x08\xc0\x02\t\n\r\n\x05\x04\x11\x03\x02\x01\x12\x04\xbd\x02\x10\
    \x16\n\x0e\n\x06\x04\x11\x03\x02\x02\0\x12\x04\xbe\x02\x10'\n\x0f\n\x07\
    \x04\x11\x03\x02\x02\0\x04\x12\x04\xbe\x02\x10\x18\n\x0f\n\x07\x04\x11\
    \x03\x02\x02\0\x05\x12\x04\xbe\x02\x19\x1f\n\x0f\n\x07\x04\x11\x03\x02\
    \x02\0\x01\x12\x04\xbe\x02\x20\"\n\x0f\n\x07\x04\x11\x03\x02\x02\0\x03\
    \x12\x04\xbe\x02%&\n\x0e\n\x06\x04\x11\x03\x02\x02\x01\x12\x04\xbf\x02\
    \x10)\n\x0f\n\x07\x04\x11\x03\x02\x02\x01\x04\x12\x04\xbf\x02\x10\x18\n\
    \x0f\n\x07\x04\x11\x03\x02\x02\x01\x05\x12\x04\xbf\x02\x19\x1f\n\x0f\n\
    \x07\x04\x11\x03\x02\x02\x01\x01\x12\x04\xbf\x02\x20$\n\x0f\n\x07\x04\
    \x11\x03\x02\x02\x01\x03\x12\x04\xbf\x02'(\n\x0e\n\x04\x04\x11\x04\0\x12\
    \x06\xc2\x02\x08\xc7\x02\t\n\r\n\x05\x04\x11\x04\0\x01\x12\x04\xc2\x02\r\
    \"\n\x0e\n\x06\x04\x11\x04\0\x02\0\x12\x04\xc3\x02\x104\n\x0f\n\x07\x04\
    \x11\x04\0\x02\0\x01\x12\x04\xc3\x02\x10/\n\x0f\n\x07\x04\x11\x04\0\x02\
    \0\x02\x12\x04\xc3\x0223\n\x0e\n\x06\x04\x11\x04\0\x02\x01\x12\x04\xc4\
    \x02\x102\n\x0f\n\x07\x04\x11\x04\0\x02\x01\x01\x12\x04\xc4\x02\x10-\n\
    \x0f\n\x07\x04\x11\x04\0\x02\x01\x02\x12\x04\xc4\x0201\n\x0e\n\x06\x04\
    \x11\x04\0\x02\x02\x12\x04\xc5\x02\x104\n\x0f\n\x07\x04\x11\x04\0\x02\
    \x02\x01\x12\x04\xc5\x02\x10/\n\x0f\n\x07\x04\x11\x04\0\x02\x02\x02\x12\
    \x04\xc5\x0223\n\x0e\n\x06\x04\x11\x04\0\x02\x03\x12\x04\xc6\x02\x100\n\
    \x0f\n\x07\x04\x11\x04\0\x02\x03\x01\x12\x04\xc6\x02\x10+\n\x0f\n\x07\
    \x04\x11\x04\0\x02\x03\x02\x12\x04\xc6\x02./\n\x0c\n\x04\x04\x11\x02\0\
    \x12\x04\xc9\x02\x08=\n\r\n\x05\x04\x11\x02\0\x04\x12\x04\xc9\x02\x08\
    \x10\n\r\n\x05\x04\x11\x02\0\x06\x12\x04\xc9\x02\x110\n\r\n\x05\x04\x11\
    \x02\0\x01\x12\x04\xc9\x0218\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\xc9\x02\
    ;<\n\x0c\n\x04\x04\x11\x02\x01\x12\x04\xca\x02\x089\n\r\n\x05\x04\x11\
    \x02\x01\x04\x12\x04\xca\x02\x08\x10\n\r\n\x05\x04\x11\x02\x01\x06\x12\
    \x04\xca\x02\x11.\n\r\n\x05\x04\x11\x02\x01\x01\x12\x04\xca\x02/4\n\r\n\
    \x05\x04\x11\x02\x01\x03\x12\x04\xca\x0278\n\x0c\n\x04\x04\x11\x02\x02\
    \x12\x04\xcb\x02\x08=\n\r\n\x05\x04\x11\x02\x02\x04\x12\x04\xcb\x02\x08\
    \x10\n\r\n\x05\x04\x11\x02\x02\x06\x12\x04\xcb\x02\x110\n\r\n\x05\x04\
    \x11\x02\x02\x01\x12\x04\xcb\x0218\n\r\n\x05\x04\x11\x02\x02\x03\x12\x04\
    \xcb\x02;<\n\x0c\n\x02\x04\x12\x12\x06\xce\x02\0\xd5\x02\x01\n\x0b\n\x03\
    \x04\x12\x01\x12\x04\xce\x02\x08'\n\x0e\n\x04\x04\x12\x03\0\x12\x06\xcf\
    \x02\x08\xd2\x02\t\n\r\n\x05\x04\x12\x03\0\x01\x12\x04\xcf\x02\x10\x14\n\
    \x0e\n\x06\x04\x12\x03\0\x02\0\x12\x04\xd0\x02\x10,\n\x0f\n\x07\x04\x12\
    \x03\0\x02\0\x04\x12\x04\xd0\x02\x10\x18\n\x0f\n\x07\x04\x12\x03\0\x02\0\
    \x05\x12\x04\xd0\x02\x19\x1f\n\x0f\n\x07\x04\x12\x03\0\x02\0\x01\x12\x04\
    \xd0\x02\x20'\n\x0f\n\x07\x04\x12\x03\0\x02\0\x03\x12\x04\xd0\x02*+\n\
    \x0e\n\x06\x04\x12\x03\0\x02\x01\x12\x04\xd1\x02\x10.\n\x0f\n\x07\x04\
    \x12\x03\0\x02\x01\x04\x12\x04\xd1\x02\x10\x18\n\x0f\n\x07\x04\x12\x03\0\
    \x02\x01\x05\x12\x04\xd1\x02\x19\x1f\n\x0f\n\x07\x04\x12\x03\0\x02\x01\
    \x01\x12\x04\xd1\x02\x20)\n\x0f\n\x07\x04\x12\x03\0\x02\x01\x03\x12\x04\
    \xd1\x02,-\n\x0c\n\x04\x04\x12\x02\0\x12\x04\xd4\x02\x08@\n\r\n\x05\x04\
    \x12\x02\0\x04\x12\x04\xd4\x02\x08\x10\n\r\n\x05\x04\x12\x02\0\x06\x12\
    \x04\xd4\x02\x115\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\xd4\x026;\n\r\n\
    \x05\x04\x12\x02\0\x03\x12\x04\xd4\x02>?\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::dota_shared_enums::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(31);
            messages.push(CMsgDOTAPlayerInfo::generated_message_descriptor_data());
            messages.push(CMsgDOTAPlayerInfoList::generated_message_descriptor_data());
            messages.push(CMsgDOTATeamRoster::generated_message_descriptor_data());
            messages.push(CMsgDOTADPCProfileInfo::generated_message_descriptor_data());
            messages.push(CMsgDOTALeaderboards::generated_message_descriptor_data());
            messages.push(CMsgDOTAPassportVoteTeamGuess::generated_message_descriptor_data());
            messages.push(CMsgDOTAPassportVoteGenericSelection::generated_message_descriptor_data());
            messages.push(CMsgDOTAPassportStampedPlayer::generated_message_descriptor_data());
            messages.push(CMsgDOTAPassportPlayerCardChallenge::generated_message_descriptor_data());
            messages.push(CMsgDOTAPassportVote::generated_message_descriptor_data());
            messages.push(CMsgClientToGCGetPlayerCardRosterRequest::generated_message_descriptor_data());
            messages.push(CMsgClientToGCGetPlayerCardRosterResponse::generated_message_descriptor_data());
            messages.push(CMsgClientToGCBatchGetPlayerCardRosterRequest::generated_message_descriptor_data());
            messages.push(CMsgClientToGCBatchGetPlayerCardRosterResponse::generated_message_descriptor_data());
            messages.push(CMsgClientToGCSetPlayerCardRosterRequest::generated_message_descriptor_data());
            messages.push(CMsgClientToGCSetPlayerCardRosterResponse::generated_message_descriptor_data());
            messages.push(CMsgDOTAFantasyDPCLeagueStatus::generated_message_descriptor_data());
            messages.push(CMsgDOTADPCSearchResults::generated_message_descriptor_data());
            messages.push(CMsgDOTADPCTeamFavoriteRankings::generated_message_descriptor_data());
            messages.push(cmsg_dotaplayer_info::Results::generated_message_descriptor_data());
            messages.push(cmsg_dotaplayer_info::AuditEntry::generated_message_descriptor_data());
            messages.push(cmsg_dotadpcprofile_info::PredictionInfo::generated_message_descriptor_data());
            messages.push(cmsg_dotadpcprofile_info::FantasyInfo::generated_message_descriptor_data());
            messages.push(cmsg_dotaleaderboards::RegionLeaderboard::generated_message_descriptor_data());
            messages.push(cmsg_client_to_gcbatch_get_player_card_roster_request::LeagueTimestamp::generated_message_descriptor_data());
            messages.push(cmsg_client_to_gcbatch_get_player_card_roster_response::RosterResponse::generated_message_descriptor_data());
            messages.push(cmsg_dotafantasy_dpcleague_status::LeagueInfo::generated_message_descriptor_data());
            messages.push(cmsg_dotadpcsearch_results::Player::generated_message_descriptor_data());
            messages.push(cmsg_dotadpcsearch_results::Team::generated_message_descriptor_data());
            messages.push(cmsg_dotadpcsearch_results::League::generated_message_descriptor_data());
            messages.push(cmsg_dotadpcteam_favorite_rankings::Team::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(6);
            enums.push(DOTA_2013PassportSelectionIndices::generated_enum_descriptor_data());
            enums.push(cmsg_client_to_gcget_player_card_roster_response::Result::generated_enum_descriptor_data());
            enums.push(cmsg_client_to_gcbatch_get_player_card_roster_response::Result::generated_enum_descriptor_data());
            enums.push(cmsg_client_to_gcset_player_card_roster_response::Result::generated_enum_descriptor_data());
            enums.push(cmsg_dotafantasy_dpcleague_status::ERosterStatus::generated_enum_descriptor_data());
            enums.push(cmsg_dotadpcsearch_results::ESearchResultsDesired::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
