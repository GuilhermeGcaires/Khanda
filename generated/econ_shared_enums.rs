// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `econ_shared_enums.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CMsgGenericResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGenericResult {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgGenericResult.eresult)
    pub eresult: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgGenericResult.debug_message)
    pub debug_message: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgGenericResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGenericResult {
    fn default() -> &'a CMsgGenericResult {
        <CMsgGenericResult as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGenericResult {
    pub fn new() -> CMsgGenericResult {
        ::std::default::Default::default()
    }

    // optional uint32 eresult = 1;

    pub fn eresult(&self) -> u32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: u32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional string debug_message = 2;

    pub fn debug_message(&self) -> &str {
        match self.debug_message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_debug_message(&mut self) {
        self.debug_message = ::std::option::Option::None;
    }

    pub fn has_debug_message(&self) -> bool {
        self.debug_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_debug_message(&mut self, v: ::std::string::String) {
        self.debug_message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_debug_message(&mut self) -> &mut ::std::string::String {
        if self.debug_message.is_none() {
            self.debug_message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.debug_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_debug_message(&mut self) -> ::std::string::String {
        self.debug_message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgGenericResult| { &m.eresult },
            |m: &mut CMsgGenericResult| { &mut m.eresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "debug_message",
            |m: &CMsgGenericResult| { &m.debug_message },
            |m: &mut CMsgGenericResult| { &mut m.debug_message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGenericResult>(
            "CMsgGenericResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGenericResult {
    const NAME: &'static str = "CMsgGenericResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.debug_message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.debug_message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.debug_message.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGenericResult {
        CMsgGenericResult::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.debug_message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGenericResult {
        static instance: CMsgGenericResult = CMsgGenericResult {
            eresult: ::std::option::Option::None,
            debug_message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGenericResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGenericResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGenericResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGenericResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EGCEconBaseMsg)
pub enum EGCEconBaseMsg {
    // @@protoc_insertion_point(enum_value:dota.EGCEconBaseMsg.k_EMsgGCGenericResult)
    k_EMsgGCGenericResult = 2579,
}

impl ::protobuf::Enum for EGCEconBaseMsg {
    const NAME: &'static str = "EGCEconBaseMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCEconBaseMsg> {
        match value {
            2579 => ::std::option::Option::Some(EGCEconBaseMsg::k_EMsgGCGenericResult),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCEconBaseMsg> {
        match str {
            "k_EMsgGCGenericResult" => ::std::option::Option::Some(EGCEconBaseMsg::k_EMsgGCGenericResult),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCEconBaseMsg] = &[
        EGCEconBaseMsg::k_EMsgGCGenericResult,
    ];
}

impl ::protobuf::EnumFull for EGCEconBaseMsg {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCEconBaseMsg").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EGCEconBaseMsg::k_EMsgGCGenericResult => 0,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCEconBaseMsg {
    fn default() -> Self {
        EGCEconBaseMsg::k_EMsgGCGenericResult
    }
}

impl EGCEconBaseMsg {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCEconBaseMsg>("EGCEconBaseMsg")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EGCMsgResponse)
pub enum EGCMsgResponse {
    // @@protoc_insertion_point(enum_value:dota.EGCMsgResponse.k_EGCMsgResponseOK)
    k_EGCMsgResponseOK = 0,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgResponse.k_EGCMsgResponseDenied)
    k_EGCMsgResponseDenied = 1,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgResponse.k_EGCMsgResponseServerError)
    k_EGCMsgResponseServerError = 2,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgResponse.k_EGCMsgResponseTimeout)
    k_EGCMsgResponseTimeout = 3,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgResponse.k_EGCMsgResponseInvalid)
    k_EGCMsgResponseInvalid = 4,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgResponse.k_EGCMsgResponseNoMatch)
    k_EGCMsgResponseNoMatch = 5,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgResponse.k_EGCMsgResponseUnknownError)
    k_EGCMsgResponseUnknownError = 6,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgResponse.k_EGCMsgResponseNotLoggedOn)
    k_EGCMsgResponseNotLoggedOn = 7,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgResponse.k_EGCMsgFailedToCreate)
    k_EGCMsgFailedToCreate = 8,
}

impl ::protobuf::Enum for EGCMsgResponse {
    const NAME: &'static str = "EGCMsgResponse";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCMsgResponse> {
        match value {
            0 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseOK),
            1 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseDenied),
            2 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseServerError),
            3 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseTimeout),
            4 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseInvalid),
            5 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseNoMatch),
            6 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseUnknownError),
            7 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseNotLoggedOn),
            8 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgFailedToCreate),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCMsgResponse> {
        match str {
            "k_EGCMsgResponseOK" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseOK),
            "k_EGCMsgResponseDenied" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseDenied),
            "k_EGCMsgResponseServerError" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseServerError),
            "k_EGCMsgResponseTimeout" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseTimeout),
            "k_EGCMsgResponseInvalid" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseInvalid),
            "k_EGCMsgResponseNoMatch" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseNoMatch),
            "k_EGCMsgResponseUnknownError" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseUnknownError),
            "k_EGCMsgResponseNotLoggedOn" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseNotLoggedOn),
            "k_EGCMsgFailedToCreate" => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgFailedToCreate),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCMsgResponse] = &[
        EGCMsgResponse::k_EGCMsgResponseOK,
        EGCMsgResponse::k_EGCMsgResponseDenied,
        EGCMsgResponse::k_EGCMsgResponseServerError,
        EGCMsgResponse::k_EGCMsgResponseTimeout,
        EGCMsgResponse::k_EGCMsgResponseInvalid,
        EGCMsgResponse::k_EGCMsgResponseNoMatch,
        EGCMsgResponse::k_EGCMsgResponseUnknownError,
        EGCMsgResponse::k_EGCMsgResponseNotLoggedOn,
        EGCMsgResponse::k_EGCMsgFailedToCreate,
    ];
}

impl ::protobuf::EnumFull for EGCMsgResponse {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCMsgResponse").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EGCMsgResponse {
    fn default() -> Self {
        EGCMsgResponse::k_EGCMsgResponseOK
    }
}

impl EGCMsgResponse {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCMsgResponse>("EGCMsgResponse")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EGCMsgUseItemResponse)
pub enum EGCMsgUseItemResponse {
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_ItemUsed)
    k_EGCMsgUseItemResponse_ItemUsed = 0,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_GiftNoOtherPlayers)
    k_EGCMsgUseItemResponse_GiftNoOtherPlayers = 1,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_ServerError)
    k_EGCMsgUseItemResponse_ServerError = 2,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_MiniGameAlreadyStarted)
    k_EGCMsgUseItemResponse_MiniGameAlreadyStarted = 3,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_ItemUsed_ItemsGranted)
    k_EGCMsgUseItemResponse_ItemUsed_ItemsGranted = 4,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_DropRateBonusAlreadyGranted)
    k_EGCMsgUseItemResponse_DropRateBonusAlreadyGranted = 5,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_NotInLowPriorityPool)
    k_EGCMsgUseItemResponse_NotInLowPriorityPool = 6,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_NotHighEnoughLevel)
    k_EGCMsgUseItemResponse_NotHighEnoughLevel = 7,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_EventNotActive)
    k_EGCMsgUseItemResponse_EventNotActive = 8,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_ItemUsed_EventPointsGranted)
    k_EGCMsgUseItemResponse_ItemUsed_EventPointsGranted = 9,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_MissingRequirement)
    k_EGCMsgUseItemResponse_MissingRequirement = 10,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_EmoticonUnlock_NoNew)
    k_EGCMsgUseItemResponse_EmoticonUnlock_NoNew = 11,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_EmoticonUnlock_Complete)
    k_EGCMsgUseItemResponse_EmoticonUnlock_Complete = 12,
    // @@protoc_insertion_point(enum_value:dota.EGCMsgUseItemResponse.k_EGCMsgUseItemResponse_ItemUsed_Compendium)
    k_EGCMsgUseItemResponse_ItemUsed_Compendium = 13,
}

impl ::protobuf::Enum for EGCMsgUseItemResponse {
    const NAME: &'static str = "EGCMsgUseItemResponse";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCMsgUseItemResponse> {
        match value {
            0 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed),
            1 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_GiftNoOtherPlayers),
            2 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ServerError),
            3 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_MiniGameAlreadyStarted),
            4 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed_ItemsGranted),
            5 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_DropRateBonusAlreadyGranted),
            6 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_NotInLowPriorityPool),
            7 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_NotHighEnoughLevel),
            8 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_EventNotActive),
            9 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed_EventPointsGranted),
            10 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_MissingRequirement),
            11 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_EmoticonUnlock_NoNew),
            12 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_EmoticonUnlock_Complete),
            13 => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed_Compendium),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCMsgUseItemResponse> {
        match str {
            "k_EGCMsgUseItemResponse_ItemUsed" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed),
            "k_EGCMsgUseItemResponse_GiftNoOtherPlayers" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_GiftNoOtherPlayers),
            "k_EGCMsgUseItemResponse_ServerError" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ServerError),
            "k_EGCMsgUseItemResponse_MiniGameAlreadyStarted" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_MiniGameAlreadyStarted),
            "k_EGCMsgUseItemResponse_ItemUsed_ItemsGranted" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed_ItemsGranted),
            "k_EGCMsgUseItemResponse_DropRateBonusAlreadyGranted" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_DropRateBonusAlreadyGranted),
            "k_EGCMsgUseItemResponse_NotInLowPriorityPool" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_NotInLowPriorityPool),
            "k_EGCMsgUseItemResponse_NotHighEnoughLevel" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_NotHighEnoughLevel),
            "k_EGCMsgUseItemResponse_EventNotActive" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_EventNotActive),
            "k_EGCMsgUseItemResponse_ItemUsed_EventPointsGranted" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed_EventPointsGranted),
            "k_EGCMsgUseItemResponse_MissingRequirement" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_MissingRequirement),
            "k_EGCMsgUseItemResponse_EmoticonUnlock_NoNew" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_EmoticonUnlock_NoNew),
            "k_EGCMsgUseItemResponse_EmoticonUnlock_Complete" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_EmoticonUnlock_Complete),
            "k_EGCMsgUseItemResponse_ItemUsed_Compendium" => ::std::option::Option::Some(EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed_Compendium),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCMsgUseItemResponse] = &[
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_GiftNoOtherPlayers,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ServerError,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_MiniGameAlreadyStarted,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed_ItemsGranted,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_DropRateBonusAlreadyGranted,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_NotInLowPriorityPool,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_NotHighEnoughLevel,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_EventNotActive,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed_EventPointsGranted,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_MissingRequirement,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_EmoticonUnlock_NoNew,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_EmoticonUnlock_Complete,
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed_Compendium,
    ];
}

impl ::protobuf::EnumFull for EGCMsgUseItemResponse {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCMsgUseItemResponse").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EGCMsgUseItemResponse {
    fn default() -> Self {
        EGCMsgUseItemResponse::k_EGCMsgUseItemResponse_ItemUsed
    }
}

impl EGCMsgUseItemResponse {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCMsgUseItemResponse>("EGCMsgUseItemResponse")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17econ_shared_enums.proto\x12\x04dota\"R\n\x11CMsgGenericResult\x12\
    \x18\n\x07eresult\x18\x01\x20\x01(\rR\x07eresult\x12#\n\rdebug_message\
    \x18\x02\x20\x01(\tR\x0cdebugMessage*,\n\x0eEGCEconBaseMsg\x12\x1a\n\x15\
    k_EMsgGCGenericResult\x10\x93\x14*\x9b\x02\n\x0eEGCMsgResponse\x12\x16\n\
    \x12k_EGCMsgResponseOK\x10\0\x12\x1a\n\x16k_EGCMsgResponseDenied\x10\x01\
    \x12\x1f\n\x1bk_EGCMsgResponseServerError\x10\x02\x12\x1b\n\x17k_EGCMsgR\
    esponseTimeout\x10\x03\x12\x1b\n\x17k_EGCMsgResponseInvalid\x10\x04\x12\
    \x1b\n\x17k_EGCMsgResponseNoMatch\x10\x05\x12\x20\n\x1ck_EGCMsgResponseU\
    nknownError\x10\x06\x12\x1f\n\x1bk_EGCMsgResponseNotLoggedOn\x10\x07\x12\
    \x1a\n\x16k_EGCMsgFailedToCreate\x10\x08*\xc5\x05\n\x15EGCMsgUseItemResp\
    onse\x12$\n\x20k_EGCMsgUseItemResponse_ItemUsed\x10\0\x12.\n*k_EGCMsgUse\
    ItemResponse_GiftNoOtherPlayers\x10\x01\x12'\n#k_EGCMsgUseItemResponse_S\
    erverError\x10\x02\x122\n.k_EGCMsgUseItemResponse_MiniGameAlreadyStarted\
    \x10\x03\x121\n-k_EGCMsgUseItemResponse_ItemUsed_ItemsGranted\x10\x04\
    \x127\n3k_EGCMsgUseItemResponse_DropRateBonusAlreadyGranted\x10\x05\x120\
    \n,k_EGCMsgUseItemResponse_NotInLowPriorityPool\x10\x06\x12.\n*k_EGCMsgU\
    seItemResponse_NotHighEnoughLevel\x10\x07\x12*\n&k_EGCMsgUseItemResponse\
    _EventNotActive\x10\x08\x127\n3k_EGCMsgUseItemResponse_ItemUsed_EventPoi\
    ntsGranted\x10\t\x12.\n*k_EGCMsgUseItemResponse_MissingRequirement\x10\n\
    \x120\n,k_EGCMsgUseItemResponse_EmoticonUnlock_NoNew\x10\x0b\x123\n/k_EG\
    CMsgUseItemResponse_EmoticonUnlock_Complete\x10\x0c\x12/\n+k_EGCMsgUseIt\
    emResponse_ItemUsed_Compendium\x10\rB%Z#github.com/dotabuff/manta/dota;d\
    otaJ\xf3\t\n\x06\x12\x04\0\0)\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x03\0:\n\t\n\x02\
    \x08\x0b\x12\x03\x03\0:\n\n\n\x02\x05\0\x12\x04\x05\0\x07\x01\n\n\n\x03\
    \x05\0\x01\x12\x03\x05\x05\x13\n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\x08%\
    \n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x06\x08\x1d\n\x0c\n\x05\x05\0\x02\0\
    \x02\x12\x03\x06\x20$\n\n\n\x02\x05\x01\x12\x04\t\0\x13\x01\n\n\n\x03\
    \x05\x01\x01\x12\x03\t\x05\x13\n\x0b\n\x04\x05\x01\x02\0\x12\x03\n\x08\
    \x1f\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\n\x08\x1a\n\x0c\n\x05\x05\x01\
    \x02\0\x02\x12\x03\n\x1d\x1e\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x0b\x08\
    #\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x0b\x08\x1e\n\x0c\n\x05\x05\
    \x01\x02\x01\x02\x12\x03\x0b!\"\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x0c\
    \x08(\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\x0c\x08#\n\x0c\n\x05\x05\
    \x01\x02\x02\x02\x12\x03\x0c&'\n\x0b\n\x04\x05\x01\x02\x03\x12\x03\r\x08\
    $\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\r\x08\x1f\n\x0c\n\x05\x05\x01\
    \x02\x03\x02\x12\x03\r\"#\n\x0b\n\x04\x05\x01\x02\x04\x12\x03\x0e\x08$\n\
    \x0c\n\x05\x05\x01\x02\x04\x01\x12\x03\x0e\x08\x1f\n\x0c\n\x05\x05\x01\
    \x02\x04\x02\x12\x03\x0e\"#\n\x0b\n\x04\x05\x01\x02\x05\x12\x03\x0f\x08$\
    \n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03\x0f\x08\x1f\n\x0c\n\x05\x05\x01\
    \x02\x05\x02\x12\x03\x0f\"#\n\x0b\n\x04\x05\x01\x02\x06\x12\x03\x10\x08)\
    \n\x0c\n\x05\x05\x01\x02\x06\x01\x12\x03\x10\x08$\n\x0c\n\x05\x05\x01\
    \x02\x06\x02\x12\x03\x10'(\n\x0b\n\x04\x05\x01\x02\x07\x12\x03\x11\x08(\
    \n\x0c\n\x05\x05\x01\x02\x07\x01\x12\x03\x11\x08#\n\x0c\n\x05\x05\x01\
    \x02\x07\x02\x12\x03\x11&'\n\x0b\n\x04\x05\x01\x02\x08\x12\x03\x12\x08#\
    \n\x0c\n\x05\x05\x01\x02\x08\x01\x12\x03\x12\x08\x1e\n\x0c\n\x05\x05\x01\
    \x02\x08\x02\x12\x03\x12!\"\n\n\n\x02\x05\x02\x12\x04\x15\0$\x01\n\n\n\
    \x03\x05\x02\x01\x12\x03\x15\x05\x1a\n\x0b\n\x04\x05\x02\x02\0\x12\x03\
    \x16\x08-\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03\x16\x08(\n\x0c\n\x05\x05\
    \x02\x02\0\x02\x12\x03\x16+,\n\x0b\n\x04\x05\x02\x02\x01\x12\x03\x17\x08\
    7\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x03\x17\x082\n\x0c\n\x05\x05\x02\
    \x02\x01\x02\x12\x03\x1756\n\x0b\n\x04\x05\x02\x02\x02\x12\x03\x18\x080\
    \n\x0c\n\x05\x05\x02\x02\x02\x01\x12\x03\x18\x08+\n\x0c\n\x05\x05\x02\
    \x02\x02\x02\x12\x03\x18./\n\x0b\n\x04\x05\x02\x02\x03\x12\x03\x19\x08;\
    \n\x0c\n\x05\x05\x02\x02\x03\x01\x12\x03\x19\x086\n\x0c\n\x05\x05\x02\
    \x02\x03\x02\x12\x03\x199:\n\x0b\n\x04\x05\x02\x02\x04\x12\x03\x1a\x08:\
    \n\x0c\n\x05\x05\x02\x02\x04\x01\x12\x03\x1a\x085\n\x0c\n\x05\x05\x02\
    \x02\x04\x02\x12\x03\x1a89\n\x0b\n\x04\x05\x02\x02\x05\x12\x03\x1b\x08@\
    \n\x0c\n\x05\x05\x02\x02\x05\x01\x12\x03\x1b\x08;\n\x0c\n\x05\x05\x02\
    \x02\x05\x02\x12\x03\x1b>?\n\x0b\n\x04\x05\x02\x02\x06\x12\x03\x1c\x089\
    \n\x0c\n\x05\x05\x02\x02\x06\x01\x12\x03\x1c\x084\n\x0c\n\x05\x05\x02\
    \x02\x06\x02\x12\x03\x1c78\n\x0b\n\x04\x05\x02\x02\x07\x12\x03\x1d\x087\
    \n\x0c\n\x05\x05\x02\x02\x07\x01\x12\x03\x1d\x082\n\x0c\n\x05\x05\x02\
    \x02\x07\x02\x12\x03\x1d56\n\x0b\n\x04\x05\x02\x02\x08\x12\x03\x1e\x083\
    \n\x0c\n\x05\x05\x02\x02\x08\x01\x12\x03\x1e\x08.\n\x0c\n\x05\x05\x02\
    \x02\x08\x02\x12\x03\x1e12\n\x0b\n\x04\x05\x02\x02\t\x12\x03\x1f\x08@\n\
    \x0c\n\x05\x05\x02\x02\t\x01\x12\x03\x1f\x08;\n\x0c\n\x05\x05\x02\x02\t\
    \x02\x12\x03\x1f>?\n\x0b\n\x04\x05\x02\x02\n\x12\x03\x20\x088\n\x0c\n\
    \x05\x05\x02\x02\n\x01\x12\x03\x20\x082\n\x0c\n\x05\x05\x02\x02\n\x02\
    \x12\x03\x2057\n\x0b\n\x04\x05\x02\x02\x0b\x12\x03!\x08:\n\x0c\n\x05\x05\
    \x02\x02\x0b\x01\x12\x03!\x084\n\x0c\n\x05\x05\x02\x02\x0b\x02\x12\x03!7\
    9\n\x0b\n\x04\x05\x02\x02\x0c\x12\x03\"\x08=\n\x0c\n\x05\x05\x02\x02\x0c\
    \x01\x12\x03\"\x087\n\x0c\n\x05\x05\x02\x02\x0c\x02\x12\x03\":<\n\x0b\n\
    \x04\x05\x02\x02\r\x12\x03#\x089\n\x0c\n\x05\x05\x02\x02\r\x01\x12\x03#\
    \x083\n\x0c\n\x05\x05\x02\x02\r\x02\x12\x03#68\n\n\n\x02\x04\0\x12\x04&\
    \0)\x01\n\n\n\x03\x04\0\x01\x12\x03&\x08\x19\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03'\x08$\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03'\x08\x10\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03'\x11\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03'\x18\
    \x1f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03'\"#\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03(\x08*\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03(\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03(\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03(\x18%\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03(()\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CMsgGenericResult::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(EGCEconBaseMsg::generated_enum_descriptor_data());
            enums.push(EGCMsgResponse::generated_enum_descriptor_data());
            enums.push(EGCMsgUseItemResponse::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
