// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_common_match_management.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CSODOTAPartyMember)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSODOTAPartyMember {
    // message fields
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.is_coach)
    pub is_coach: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.region_ping_codes)
    pub region_ping_codes: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.region_ping_times)
    pub region_ping_times: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.region_ping_failed_bitmask)
    pub region_ping_failed_bitmask: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.is_plus_subscriber)
    pub is_plus_subscriber: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.tourney_skill_level)
    pub tourney_skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.tourney_buyin)
    pub tourney_buyin: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.tourney_prevent_until)
    pub tourney_prevent_until: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.mm_data_valid)
    pub mm_data_valid: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.lane_selection_flags)
    pub lane_selection_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.high_priority_disabled)
    pub high_priority_disabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.has_hp_resource)
    pub has_hp_resource: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.joined_from_partyfinder)
    pub joined_from_partyfinder: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyMember.is_steam_china)
    pub is_steam_china: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CSODOTAPartyMember.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSODOTAPartyMember {
    fn default() -> &'a CSODOTAPartyMember {
        <CSODOTAPartyMember as ::protobuf::Message>::default_instance()
    }
}

impl CSODOTAPartyMember {
    pub fn new() -> CSODOTAPartyMember {
        ::std::default::Default::default()
    }

    // optional bool is_coach = 2;

    pub fn is_coach(&self) -> bool {
        self.is_coach.unwrap_or(false)
    }

    pub fn clear_is_coach(&mut self) {
        self.is_coach = ::std::option::Option::None;
    }

    pub fn has_is_coach(&self) -> bool {
        self.is_coach.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_coach(&mut self, v: bool) {
        self.is_coach = ::std::option::Option::Some(v);
    }

    // optional uint32 region_ping_failed_bitmask = 6;

    pub fn region_ping_failed_bitmask(&self) -> u32 {
        self.region_ping_failed_bitmask.unwrap_or(0)
    }

    pub fn clear_region_ping_failed_bitmask(&mut self) {
        self.region_ping_failed_bitmask = ::std::option::Option::None;
    }

    pub fn has_region_ping_failed_bitmask(&self) -> bool {
        self.region_ping_failed_bitmask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_region_ping_failed_bitmask(&mut self, v: u32) {
        self.region_ping_failed_bitmask = ::std::option::Option::Some(v);
    }

    // optional bool is_plus_subscriber = 10;

    pub fn is_plus_subscriber(&self) -> bool {
        self.is_plus_subscriber.unwrap_or(false)
    }

    pub fn clear_is_plus_subscriber(&mut self) {
        self.is_plus_subscriber = ::std::option::Option::None;
    }

    pub fn has_is_plus_subscriber(&self) -> bool {
        self.is_plus_subscriber.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_plus_subscriber(&mut self, v: bool) {
        self.is_plus_subscriber = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_skill_level = 7;

    pub fn tourney_skill_level(&self) -> u32 {
        self.tourney_skill_level.unwrap_or(0)
    }

    pub fn clear_tourney_skill_level(&mut self) {
        self.tourney_skill_level = ::std::option::Option::None;
    }

    pub fn has_tourney_skill_level(&self) -> bool {
        self.tourney_skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_skill_level(&mut self, v: u32) {
        self.tourney_skill_level = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_buyin = 8;

    pub fn tourney_buyin(&self) -> u32 {
        self.tourney_buyin.unwrap_or(0)
    }

    pub fn clear_tourney_buyin(&mut self) {
        self.tourney_buyin = ::std::option::Option::None;
    }

    pub fn has_tourney_buyin(&self) -> bool {
        self.tourney_buyin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_buyin(&mut self, v: u32) {
        self.tourney_buyin = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_prevent_until = 9;

    pub fn tourney_prevent_until(&self) -> u32 {
        self.tourney_prevent_until.unwrap_or(0)
    }

    pub fn clear_tourney_prevent_until(&mut self) {
        self.tourney_prevent_until = ::std::option::Option::None;
    }

    pub fn has_tourney_prevent_until(&self) -> bool {
        self.tourney_prevent_until.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_prevent_until(&mut self, v: u32) {
        self.tourney_prevent_until = ::std::option::Option::Some(v);
    }

    // optional bool mm_data_valid = 13;

    pub fn mm_data_valid(&self) -> bool {
        self.mm_data_valid.unwrap_or(false)
    }

    pub fn clear_mm_data_valid(&mut self) {
        self.mm_data_valid = ::std::option::Option::None;
    }

    pub fn has_mm_data_valid(&self) -> bool {
        self.mm_data_valid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mm_data_valid(&mut self, v: bool) {
        self.mm_data_valid = ::std::option::Option::Some(v);
    }

    // optional uint32 lane_selection_flags = 11;

    pub fn lane_selection_flags(&self) -> u32 {
        self.lane_selection_flags.unwrap_or(0)
    }

    pub fn clear_lane_selection_flags(&mut self) {
        self.lane_selection_flags = ::std::option::Option::None;
    }

    pub fn has_lane_selection_flags(&self) -> bool {
        self.lane_selection_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lane_selection_flags(&mut self, v: u32) {
        self.lane_selection_flags = ::std::option::Option::Some(v);
    }

    // optional bool high_priority_disabled = 14;

    pub fn high_priority_disabled(&self) -> bool {
        self.high_priority_disabled.unwrap_or(false)
    }

    pub fn clear_high_priority_disabled(&mut self) {
        self.high_priority_disabled = ::std::option::Option::None;
    }

    pub fn has_high_priority_disabled(&self) -> bool {
        self.high_priority_disabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_high_priority_disabled(&mut self, v: bool) {
        self.high_priority_disabled = ::std::option::Option::Some(v);
    }

    // optional bool has_hp_resource = 15;

    pub fn has_hp_resource(&self) -> bool {
        self.has_hp_resource.unwrap_or(false)
    }

    pub fn clear_has_hp_resource(&mut self) {
        self.has_hp_resource = ::std::option::Option::None;
    }

    pub fn has_has_hp_resource(&self) -> bool {
        self.has_hp_resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_hp_resource(&mut self, v: bool) {
        self.has_hp_resource = ::std::option::Option::Some(v);
    }

    // optional bool joined_from_partyfinder = 12;

    pub fn joined_from_partyfinder(&self) -> bool {
        self.joined_from_partyfinder.unwrap_or(false)
    }

    pub fn clear_joined_from_partyfinder(&mut self) {
        self.joined_from_partyfinder = ::std::option::Option::None;
    }

    pub fn has_joined_from_partyfinder(&self) -> bool {
        self.joined_from_partyfinder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_joined_from_partyfinder(&mut self, v: bool) {
        self.joined_from_partyfinder = ::std::option::Option::Some(v);
    }

    // optional bool is_steam_china = 16;

    pub fn is_steam_china(&self) -> bool {
        self.is_steam_china.unwrap_or(false)
    }

    pub fn clear_is_steam_china(&mut self) {
        self.is_steam_china = ::std::option::Option::None;
    }

    pub fn has_is_steam_china(&self) -> bool {
        self.is_steam_china.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_steam_china(&mut self, v: bool) {
        self.is_steam_china = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_coach",
            |m: &CSODOTAPartyMember| { &m.is_coach },
            |m: &mut CSODOTAPartyMember| { &mut m.is_coach },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "region_ping_codes",
            |m: &CSODOTAPartyMember| { &m.region_ping_codes },
            |m: &mut CSODOTAPartyMember| { &mut m.region_ping_codes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "region_ping_times",
            |m: &CSODOTAPartyMember| { &m.region_ping_times },
            |m: &mut CSODOTAPartyMember| { &mut m.region_ping_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "region_ping_failed_bitmask",
            |m: &CSODOTAPartyMember| { &m.region_ping_failed_bitmask },
            |m: &mut CSODOTAPartyMember| { &mut m.region_ping_failed_bitmask },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_plus_subscriber",
            |m: &CSODOTAPartyMember| { &m.is_plus_subscriber },
            |m: &mut CSODOTAPartyMember| { &mut m.is_plus_subscriber },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tourney_skill_level",
            |m: &CSODOTAPartyMember| { &m.tourney_skill_level },
            |m: &mut CSODOTAPartyMember| { &mut m.tourney_skill_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tourney_buyin",
            |m: &CSODOTAPartyMember| { &m.tourney_buyin },
            |m: &mut CSODOTAPartyMember| { &mut m.tourney_buyin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tourney_prevent_until",
            |m: &CSODOTAPartyMember| { &m.tourney_prevent_until },
            |m: &mut CSODOTAPartyMember| { &mut m.tourney_prevent_until },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mm_data_valid",
            |m: &CSODOTAPartyMember| { &m.mm_data_valid },
            |m: &mut CSODOTAPartyMember| { &mut m.mm_data_valid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lane_selection_flags",
            |m: &CSODOTAPartyMember| { &m.lane_selection_flags },
            |m: &mut CSODOTAPartyMember| { &mut m.lane_selection_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "high_priority_disabled",
            |m: &CSODOTAPartyMember| { &m.high_priority_disabled },
            |m: &mut CSODOTAPartyMember| { &mut m.high_priority_disabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_hp_resource",
            |m: &CSODOTAPartyMember| { &m.has_hp_resource },
            |m: &mut CSODOTAPartyMember| { &mut m.has_hp_resource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "joined_from_partyfinder",
            |m: &CSODOTAPartyMember| { &m.joined_from_partyfinder },
            |m: &mut CSODOTAPartyMember| { &mut m.joined_from_partyfinder },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_steam_china",
            |m: &CSODOTAPartyMember| { &m.is_steam_china },
            |m: &mut CSODOTAPartyMember| { &mut m.is_steam_china },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSODOTAPartyMember>(
            "CSODOTAPartyMember",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSODOTAPartyMember {
    const NAME: &'static str = "CSODOTAPartyMember";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.is_coach = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.region_ping_codes)?;
                },
                32 => {
                    self.region_ping_codes.push(is.read_uint32()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.region_ping_times)?;
                },
                40 => {
                    self.region_ping_times.push(is.read_uint32()?);
                },
                48 => {
                    self.region_ping_failed_bitmask = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.is_plus_subscriber = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.tourney_skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.tourney_buyin = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.tourney_prevent_until = ::std::option::Option::Some(is.read_uint32()?);
                },
                104 => {
                    self.mm_data_valid = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.lane_selection_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                112 => {
                    self.high_priority_disabled = ::std::option::Option::Some(is.read_bool()?);
                },
                120 => {
                    self.has_hp_resource = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.joined_from_partyfinder = ::std::option::Option::Some(is.read_bool()?);
                },
                128 => {
                    self.is_steam_china = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_coach {
            my_size += 1 + 1;
        }
        for value in &self.region_ping_codes {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        for value in &self.region_ping_times {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        if let Some(v) = self.region_ping_failed_bitmask {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.is_plus_subscriber {
            my_size += 1 + 1;
        }
        if let Some(v) = self.tourney_skill_level {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.tourney_buyin {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.tourney_prevent_until {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.mm_data_valid {
            my_size += 1 + 1;
        }
        if let Some(v) = self.lane_selection_flags {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.high_priority_disabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.has_hp_resource {
            my_size += 1 + 1;
        }
        if let Some(v) = self.joined_from_partyfinder {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_steam_china {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.is_coach {
            os.write_bool(2, v)?;
        }
        for v in &self.region_ping_codes {
            os.write_uint32(4, *v)?;
        };
        for v in &self.region_ping_times {
            os.write_uint32(5, *v)?;
        };
        if let Some(v) = self.region_ping_failed_bitmask {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.is_plus_subscriber {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.tourney_skill_level {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.tourney_buyin {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.tourney_prevent_until {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.mm_data_valid {
            os.write_bool(13, v)?;
        }
        if let Some(v) = self.lane_selection_flags {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.high_priority_disabled {
            os.write_bool(14, v)?;
        }
        if let Some(v) = self.has_hp_resource {
            os.write_bool(15, v)?;
        }
        if let Some(v) = self.joined_from_partyfinder {
            os.write_bool(12, v)?;
        }
        if let Some(v) = self.is_steam_china {
            os.write_bool(16, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSODOTAPartyMember {
        CSODOTAPartyMember::new()
    }

    fn clear(&mut self) {
        self.is_coach = ::std::option::Option::None;
        self.region_ping_codes.clear();
        self.region_ping_times.clear();
        self.region_ping_failed_bitmask = ::std::option::Option::None;
        self.is_plus_subscriber = ::std::option::Option::None;
        self.tourney_skill_level = ::std::option::Option::None;
        self.tourney_buyin = ::std::option::Option::None;
        self.tourney_prevent_until = ::std::option::Option::None;
        self.mm_data_valid = ::std::option::Option::None;
        self.lane_selection_flags = ::std::option::Option::None;
        self.high_priority_disabled = ::std::option::Option::None;
        self.has_hp_resource = ::std::option::Option::None;
        self.joined_from_partyfinder = ::std::option::Option::None;
        self.is_steam_china = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSODOTAPartyMember {
        static instance: CSODOTAPartyMember = CSODOTAPartyMember {
            is_coach: ::std::option::Option::None,
            region_ping_codes: ::std::vec::Vec::new(),
            region_ping_times: ::std::vec::Vec::new(),
            region_ping_failed_bitmask: ::std::option::Option::None,
            is_plus_subscriber: ::std::option::Option::None,
            tourney_skill_level: ::std::option::Option::None,
            tourney_buyin: ::std::option::Option::None,
            tourney_prevent_until: ::std::option::Option::None,
            mm_data_valid: ::std::option::Option::None,
            lane_selection_flags: ::std::option::Option::None,
            high_priority_disabled: ::std::option::Option::None,
            has_hp_resource: ::std::option::Option::None,
            joined_from_partyfinder: ::std::option::Option::None,
            is_steam_china: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSODOTAPartyMember {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSODOTAPartyMember").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSODOTAPartyMember {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSODOTAPartyMember {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CSODOTAParty)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSODOTAParty {
    // message fields
    // @@protoc_insertion_point(field:dota.CSODOTAParty.party_id)
    pub party_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.leader_id)
    pub leader_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.member_ids)
    pub member_ids: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.game_modes)
    pub game_modes: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.state)
    pub state: ::std::option::Option<::protobuf::EnumOrUnknown<csodotaparty::State>>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.effective_started_matchmaking_time)
    pub effective_started_matchmaking_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.raw_started_matchmaking_time)
    pub raw_started_matchmaking_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.attempt_start_time)
    pub attempt_start_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.attempt_num)
    pub attempt_num: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.matchgroups)
    pub matchgroups: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.low_priority_account_id)
    pub low_priority_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.match_type)
    pub match_type: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_shared_enums::MatchType>>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.team_name)
    pub team_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.team_ui_logo)
    pub team_ui_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.team_base_logo)
    pub team_base_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.match_disabled_until_date)
    pub match_disabled_until_date: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.match_disabled_account_id)
    pub match_disabled_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.matchmaking_max_range_minutes)
    pub matchmaking_max_range_minutes: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.matchlanguages)
    pub matchlanguages: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.members)
    pub members: ::std::vec::Vec<CSODOTAPartyMember>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.low_priority_games_remaining)
    pub low_priority_games_remaining: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.open_for_join_requests)
    pub open_for_join_requests: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.sent_invites)
    pub sent_invites: ::std::vec::Vec<CSODOTAPartyInvite>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.recv_invites)
    pub recv_invites: ::std::vec::Vec<CSODOTAPartyInvite>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.account_flags)
    pub account_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.region_select_flags)
    pub region_select_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.exclusive_tournament_id)
    pub exclusive_tournament_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.tourney_division_id)
    pub tourney_division_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.tourney_schedule_time)
    pub tourney_schedule_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.tourney_skill_level)
    pub tourney_skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.tourney_bracket_round)
    pub tourney_bracket_round: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.tourney_queue_deadline_time)
    pub tourney_queue_deadline_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.tourney_queue_deadline_state)
    pub tourney_queue_deadline_state: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_shared_enums::ETourneyQueueDeadlineState>>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.party_builder_slots_to_fill)
    pub party_builder_slots_to_fill: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.party_builder_match_groups)
    pub party_builder_match_groups: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.party_builder_start_time)
    pub party_builder_start_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.solo_queue)
    pub solo_queue: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.steam_clan_account_id)
    pub steam_clan_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.ready_check)
    pub ready_check: ::protobuf::MessageField<CMsgReadyCheckStatus>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.custom_game_disabled_until_date)
    pub custom_game_disabled_until_date: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.custom_game_disabled_account_id)
    pub custom_game_disabled_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.is_challenge_match)
    pub is_challenge_match: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.party_search_beacon_active)
    pub party_search_beacon_active: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.matchmaking_flags)
    pub matchmaking_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.high_priority_state)
    pub high_priority_state: ::std::option::Option<::protobuf::EnumOrUnknown<EHighPriorityMMState>>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.lane_selections_enabled)
    pub lane_selections_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.custom_game_difficulty_mask)
    pub custom_game_difficulty_mask: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.is_steam_china)
    pub is_steam_china: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.bot_difficulty_mask)
    pub bot_difficulty_mask: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAParty.bot_script_index_mask)
    pub bot_script_index_mask: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CSODOTAParty.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSODOTAParty {
    fn default() -> &'a CSODOTAParty {
        <CSODOTAParty as ::protobuf::Message>::default_instance()
    }
}

impl CSODOTAParty {
    pub fn new() -> CSODOTAParty {
        ::std::default::Default::default()
    }

    // optional uint64 party_id = 1;

    pub fn party_id(&self) -> u64 {
        self.party_id.unwrap_or(0)
    }

    pub fn clear_party_id(&mut self) {
        self.party_id = ::std::option::Option::None;
    }

    pub fn has_party_id(&self) -> bool {
        self.party_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_party_id(&mut self, v: u64) {
        self.party_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 leader_id = 2;

    pub fn leader_id(&self) -> u64 {
        self.leader_id.unwrap_or(0)
    }

    pub fn clear_leader_id(&mut self) {
        self.leader_id = ::std::option::Option::None;
    }

    pub fn has_leader_id(&self) -> bool {
        self.leader_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: u64) {
        self.leader_id = ::std::option::Option::Some(v);
    }

    // optional uint32 game_modes = 4;

    pub fn game_modes(&self) -> u32 {
        self.game_modes.unwrap_or(0)
    }

    pub fn clear_game_modes(&mut self) {
        self.game_modes = ::std::option::Option::None;
    }

    pub fn has_game_modes(&self) -> bool {
        self.game_modes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_modes(&mut self, v: u32) {
        self.game_modes = ::std::option::Option::Some(v);
    }

    // optional .dota.CSODOTAParty.State state = 6;

    pub fn state(&self) -> csodotaparty::State {
        match self.state {
            Some(e) => e.enum_value_or(csodotaparty::State::UI),
            None => csodotaparty::State::UI,
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: csodotaparty::State) {
        self.state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 effective_started_matchmaking_time = 7;

    pub fn effective_started_matchmaking_time(&self) -> u32 {
        self.effective_started_matchmaking_time.unwrap_or(0)
    }

    pub fn clear_effective_started_matchmaking_time(&mut self) {
        self.effective_started_matchmaking_time = ::std::option::Option::None;
    }

    pub fn has_effective_started_matchmaking_time(&self) -> bool {
        self.effective_started_matchmaking_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_effective_started_matchmaking_time(&mut self, v: u32) {
        self.effective_started_matchmaking_time = ::std::option::Option::Some(v);
    }

    // optional uint32 raw_started_matchmaking_time = 32;

    pub fn raw_started_matchmaking_time(&self) -> u32 {
        self.raw_started_matchmaking_time.unwrap_or(0)
    }

    pub fn clear_raw_started_matchmaking_time(&mut self) {
        self.raw_started_matchmaking_time = ::std::option::Option::None;
    }

    pub fn has_raw_started_matchmaking_time(&self) -> bool {
        self.raw_started_matchmaking_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw_started_matchmaking_time(&mut self, v: u32) {
        self.raw_started_matchmaking_time = ::std::option::Option::Some(v);
    }

    // optional uint32 attempt_start_time = 33;

    pub fn attempt_start_time(&self) -> u32 {
        self.attempt_start_time.unwrap_or(0)
    }

    pub fn clear_attempt_start_time(&mut self) {
        self.attempt_start_time = ::std::option::Option::None;
    }

    pub fn has_attempt_start_time(&self) -> bool {
        self.attempt_start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attempt_start_time(&mut self, v: u32) {
        self.attempt_start_time = ::std::option::Option::Some(v);
    }

    // optional uint32 attempt_num = 34;

    pub fn attempt_num(&self) -> u32 {
        self.attempt_num.unwrap_or(0)
    }

    pub fn clear_attempt_num(&mut self) {
        self.attempt_num = ::std::option::Option::None;
    }

    pub fn has_attempt_num(&self) -> bool {
        self.attempt_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attempt_num(&mut self, v: u32) {
        self.attempt_num = ::std::option::Option::Some(v);
    }

    // optional uint32 matchgroups = 11;

    pub fn matchgroups(&self) -> u32 {
        self.matchgroups.unwrap_or(0)
    }

    pub fn clear_matchgroups(&mut self) {
        self.matchgroups = ::std::option::Option::None;
    }

    pub fn has_matchgroups(&self) -> bool {
        self.matchgroups.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchgroups(&mut self, v: u32) {
        self.matchgroups = ::std::option::Option::Some(v);
    }

    // optional uint32 low_priority_account_id = 19;

    pub fn low_priority_account_id(&self) -> u32 {
        self.low_priority_account_id.unwrap_or(0)
    }

    pub fn clear_low_priority_account_id(&mut self) {
        self.low_priority_account_id = ::std::option::Option::None;
    }

    pub fn has_low_priority_account_id(&self) -> bool {
        self.low_priority_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_priority_account_id(&mut self, v: u32) {
        self.low_priority_account_id = ::std::option::Option::Some(v);
    }

    // optional .dota.MatchType match_type = 21;

    pub fn match_type(&self) -> super::dota_shared_enums::MatchType {
        match self.match_type {
            Some(e) => e.enum_value_or(super::dota_shared_enums::MatchType::MATCH_TYPE_CASUAL),
            None => super::dota_shared_enums::MatchType::MATCH_TYPE_CASUAL,
        }
    }

    pub fn clear_match_type(&mut self) {
        self.match_type = ::std::option::Option::None;
    }

    pub fn has_match_type(&self) -> bool {
        self.match_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_type(&mut self, v: super::dota_shared_enums::MatchType) {
        self.match_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 team_id = 23;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional string team_name = 51;

    pub fn team_name(&self) -> &str {
        match self.team_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name(&mut self) {
        self.team_name = ::std::option::Option::None;
    }

    pub fn has_team_name(&self) -> bool {
        self.team_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name(&mut self, v: ::std::string::String) {
        self.team_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
        if self.team_name.is_none() {
            self.team_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name(&mut self) -> ::std::string::String {
        self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 team_ui_logo = 52;

    pub fn team_ui_logo(&self) -> u64 {
        self.team_ui_logo.unwrap_or(0)
    }

    pub fn clear_team_ui_logo(&mut self) {
        self.team_ui_logo = ::std::option::Option::None;
    }

    pub fn has_team_ui_logo(&self) -> bool {
        self.team_ui_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_ui_logo(&mut self, v: u64) {
        self.team_ui_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 team_base_logo = 53;

    pub fn team_base_logo(&self) -> u64 {
        self.team_base_logo.unwrap_or(0)
    }

    pub fn clear_team_base_logo(&mut self) {
        self.team_base_logo = ::std::option::Option::None;
    }

    pub fn has_team_base_logo(&self) -> bool {
        self.team_base_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_base_logo(&mut self, v: u64) {
        self.team_base_logo = ::std::option::Option::Some(v);
    }

    // optional uint32 match_disabled_until_date = 24;

    pub fn match_disabled_until_date(&self) -> u32 {
        self.match_disabled_until_date.unwrap_or(0)
    }

    pub fn clear_match_disabled_until_date(&mut self) {
        self.match_disabled_until_date = ::std::option::Option::None;
    }

    pub fn has_match_disabled_until_date(&self) -> bool {
        self.match_disabled_until_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_disabled_until_date(&mut self, v: u32) {
        self.match_disabled_until_date = ::std::option::Option::Some(v);
    }

    // optional uint32 match_disabled_account_id = 25;

    pub fn match_disabled_account_id(&self) -> u32 {
        self.match_disabled_account_id.unwrap_or(0)
    }

    pub fn clear_match_disabled_account_id(&mut self) {
        self.match_disabled_account_id = ::std::option::Option::None;
    }

    pub fn has_match_disabled_account_id(&self) -> bool {
        self.match_disabled_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_disabled_account_id(&mut self, v: u32) {
        self.match_disabled_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 matchmaking_max_range_minutes = 26;

    pub fn matchmaking_max_range_minutes(&self) -> u32 {
        self.matchmaking_max_range_minutes.unwrap_or(0)
    }

    pub fn clear_matchmaking_max_range_minutes(&mut self) {
        self.matchmaking_max_range_minutes = ::std::option::Option::None;
    }

    pub fn has_matchmaking_max_range_minutes(&self) -> bool {
        self.matchmaking_max_range_minutes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchmaking_max_range_minutes(&mut self, v: u32) {
        self.matchmaking_max_range_minutes = ::std::option::Option::Some(v);
    }

    // optional uint32 matchlanguages = 27;

    pub fn matchlanguages(&self) -> u32 {
        self.matchlanguages.unwrap_or(0)
    }

    pub fn clear_matchlanguages(&mut self) {
        self.matchlanguages = ::std::option::Option::None;
    }

    pub fn has_matchlanguages(&self) -> bool {
        self.matchlanguages.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchlanguages(&mut self, v: u32) {
        self.matchlanguages = ::std::option::Option::Some(v);
    }

    // optional uint32 low_priority_games_remaining = 35;

    pub fn low_priority_games_remaining(&self) -> u32 {
        self.low_priority_games_remaining.unwrap_or(0)
    }

    pub fn clear_low_priority_games_remaining(&mut self) {
        self.low_priority_games_remaining = ::std::option::Option::None;
    }

    pub fn has_low_priority_games_remaining(&self) -> bool {
        self.low_priority_games_remaining.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_priority_games_remaining(&mut self, v: u32) {
        self.low_priority_games_remaining = ::std::option::Option::Some(v);
    }

    // optional bool open_for_join_requests = 40;

    pub fn open_for_join_requests(&self) -> bool {
        self.open_for_join_requests.unwrap_or(false)
    }

    pub fn clear_open_for_join_requests(&mut self) {
        self.open_for_join_requests = ::std::option::Option::None;
    }

    pub fn has_open_for_join_requests(&self) -> bool {
        self.open_for_join_requests.is_some()
    }

    // Param is passed by value, moved
    pub fn set_open_for_join_requests(&mut self, v: bool) {
        self.open_for_join_requests = ::std::option::Option::Some(v);
    }

    // optional uint32 account_flags = 43;

    pub fn account_flags(&self) -> u32 {
        self.account_flags.unwrap_or(0)
    }

    pub fn clear_account_flags(&mut self) {
        self.account_flags = ::std::option::Option::None;
    }

    pub fn has_account_flags(&self) -> bool {
        self.account_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_flags(&mut self, v: u32) {
        self.account_flags = ::std::option::Option::Some(v);
    }

    // optional uint32 region_select_flags = 44;

    pub fn region_select_flags(&self) -> u32 {
        self.region_select_flags.unwrap_or(0)
    }

    pub fn clear_region_select_flags(&mut self) {
        self.region_select_flags = ::std::option::Option::None;
    }

    pub fn has_region_select_flags(&self) -> bool {
        self.region_select_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_region_select_flags(&mut self, v: u32) {
        self.region_select_flags = ::std::option::Option::Some(v);
    }

    // optional uint32 exclusive_tournament_id = 45;

    pub fn exclusive_tournament_id(&self) -> u32 {
        self.exclusive_tournament_id.unwrap_or(0)
    }

    pub fn clear_exclusive_tournament_id(&mut self) {
        self.exclusive_tournament_id = ::std::option::Option::None;
    }

    pub fn has_exclusive_tournament_id(&self) -> bool {
        self.exclusive_tournament_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exclusive_tournament_id(&mut self, v: u32) {
        self.exclusive_tournament_id = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_division_id = 47;

    pub fn tourney_division_id(&self) -> u32 {
        self.tourney_division_id.unwrap_or(0)
    }

    pub fn clear_tourney_division_id(&mut self) {
        self.tourney_division_id = ::std::option::Option::None;
    }

    pub fn has_tourney_division_id(&self) -> bool {
        self.tourney_division_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_division_id(&mut self, v: u32) {
        self.tourney_division_id = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_schedule_time = 48;

    pub fn tourney_schedule_time(&self) -> u32 {
        self.tourney_schedule_time.unwrap_or(0)
    }

    pub fn clear_tourney_schedule_time(&mut self) {
        self.tourney_schedule_time = ::std::option::Option::None;
    }

    pub fn has_tourney_schedule_time(&self) -> bool {
        self.tourney_schedule_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_schedule_time(&mut self, v: u32) {
        self.tourney_schedule_time = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_skill_level = 49;

    pub fn tourney_skill_level(&self) -> u32 {
        self.tourney_skill_level.unwrap_or(0)
    }

    pub fn clear_tourney_skill_level(&mut self) {
        self.tourney_skill_level = ::std::option::Option::None;
    }

    pub fn has_tourney_skill_level(&self) -> bool {
        self.tourney_skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_skill_level(&mut self, v: u32) {
        self.tourney_skill_level = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_bracket_round = 50;

    pub fn tourney_bracket_round(&self) -> u32 {
        self.tourney_bracket_round.unwrap_or(0)
    }

    pub fn clear_tourney_bracket_round(&mut self) {
        self.tourney_bracket_round = ::std::option::Option::None;
    }

    pub fn has_tourney_bracket_round(&self) -> bool {
        self.tourney_bracket_round.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_bracket_round(&mut self, v: u32) {
        self.tourney_bracket_round = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_queue_deadline_time = 54;

    pub fn tourney_queue_deadline_time(&self) -> u32 {
        self.tourney_queue_deadline_time.unwrap_or(0)
    }

    pub fn clear_tourney_queue_deadline_time(&mut self) {
        self.tourney_queue_deadline_time = ::std::option::Option::None;
    }

    pub fn has_tourney_queue_deadline_time(&self) -> bool {
        self.tourney_queue_deadline_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_queue_deadline_time(&mut self, v: u32) {
        self.tourney_queue_deadline_time = ::std::option::Option::Some(v);
    }

    // optional .dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55;

    pub fn tourney_queue_deadline_state(&self) -> super::dota_shared_enums::ETourneyQueueDeadlineState {
        match self.tourney_queue_deadline_state {
            Some(e) => e.enum_value_or(super::dota_shared_enums::ETourneyQueueDeadlineState::k_ETourneyQueueDeadlineState_Normal),
            None => super::dota_shared_enums::ETourneyQueueDeadlineState::k_ETourneyQueueDeadlineState_Normal,
        }
    }

    pub fn clear_tourney_queue_deadline_state(&mut self) {
        self.tourney_queue_deadline_state = ::std::option::Option::None;
    }

    pub fn has_tourney_queue_deadline_state(&self) -> bool {
        self.tourney_queue_deadline_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_queue_deadline_state(&mut self, v: super::dota_shared_enums::ETourneyQueueDeadlineState) {
        self.tourney_queue_deadline_state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 party_builder_slots_to_fill = 56;

    pub fn party_builder_slots_to_fill(&self) -> u32 {
        self.party_builder_slots_to_fill.unwrap_or(0)
    }

    pub fn clear_party_builder_slots_to_fill(&mut self) {
        self.party_builder_slots_to_fill = ::std::option::Option::None;
    }

    pub fn has_party_builder_slots_to_fill(&self) -> bool {
        self.party_builder_slots_to_fill.is_some()
    }

    // Param is passed by value, moved
    pub fn set_party_builder_slots_to_fill(&mut self, v: u32) {
        self.party_builder_slots_to_fill = ::std::option::Option::Some(v);
    }

    // optional uint32 party_builder_match_groups = 57;

    pub fn party_builder_match_groups(&self) -> u32 {
        self.party_builder_match_groups.unwrap_or(0)
    }

    pub fn clear_party_builder_match_groups(&mut self) {
        self.party_builder_match_groups = ::std::option::Option::None;
    }

    pub fn has_party_builder_match_groups(&self) -> bool {
        self.party_builder_match_groups.is_some()
    }

    // Param is passed by value, moved
    pub fn set_party_builder_match_groups(&mut self, v: u32) {
        self.party_builder_match_groups = ::std::option::Option::Some(v);
    }

    // optional uint32 party_builder_start_time = 58;

    pub fn party_builder_start_time(&self) -> u32 {
        self.party_builder_start_time.unwrap_or(0)
    }

    pub fn clear_party_builder_start_time(&mut self) {
        self.party_builder_start_time = ::std::option::Option::None;
    }

    pub fn has_party_builder_start_time(&self) -> bool {
        self.party_builder_start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_party_builder_start_time(&mut self, v: u32) {
        self.party_builder_start_time = ::std::option::Option::Some(v);
    }

    // optional bool solo_queue = 59;

    pub fn solo_queue(&self) -> bool {
        self.solo_queue.unwrap_or(false)
    }

    pub fn clear_solo_queue(&mut self) {
        self.solo_queue = ::std::option::Option::None;
    }

    pub fn has_solo_queue(&self) -> bool {
        self.solo_queue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_solo_queue(&mut self, v: bool) {
        self.solo_queue = ::std::option::Option::Some(v);
    }

    // optional uint32 steam_clan_account_id = 61;

    pub fn steam_clan_account_id(&self) -> u32 {
        self.steam_clan_account_id.unwrap_or(0)
    }

    pub fn clear_steam_clan_account_id(&mut self) {
        self.steam_clan_account_id = ::std::option::Option::None;
    }

    pub fn has_steam_clan_account_id(&self) -> bool {
        self.steam_clan_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_clan_account_id(&mut self, v: u32) {
        self.steam_clan_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 custom_game_disabled_until_date = 63;

    pub fn custom_game_disabled_until_date(&self) -> u32 {
        self.custom_game_disabled_until_date.unwrap_or(0)
    }

    pub fn clear_custom_game_disabled_until_date(&mut self) {
        self.custom_game_disabled_until_date = ::std::option::Option::None;
    }

    pub fn has_custom_game_disabled_until_date(&self) -> bool {
        self.custom_game_disabled_until_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_game_disabled_until_date(&mut self, v: u32) {
        self.custom_game_disabled_until_date = ::std::option::Option::Some(v);
    }

    // optional uint32 custom_game_disabled_account_id = 64;

    pub fn custom_game_disabled_account_id(&self) -> u32 {
        self.custom_game_disabled_account_id.unwrap_or(0)
    }

    pub fn clear_custom_game_disabled_account_id(&mut self) {
        self.custom_game_disabled_account_id = ::std::option::Option::None;
    }

    pub fn has_custom_game_disabled_account_id(&self) -> bool {
        self.custom_game_disabled_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_game_disabled_account_id(&mut self, v: u32) {
        self.custom_game_disabled_account_id = ::std::option::Option::Some(v);
    }

    // optional bool is_challenge_match = 65;

    pub fn is_challenge_match(&self) -> bool {
        self.is_challenge_match.unwrap_or(false)
    }

    pub fn clear_is_challenge_match(&mut self) {
        self.is_challenge_match = ::std::option::Option::None;
    }

    pub fn has_is_challenge_match(&self) -> bool {
        self.is_challenge_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_challenge_match(&mut self, v: bool) {
        self.is_challenge_match = ::std::option::Option::Some(v);
    }

    // optional bool party_search_beacon_active = 66;

    pub fn party_search_beacon_active(&self) -> bool {
        self.party_search_beacon_active.unwrap_or(false)
    }

    pub fn clear_party_search_beacon_active(&mut self) {
        self.party_search_beacon_active = ::std::option::Option::None;
    }

    pub fn has_party_search_beacon_active(&self) -> bool {
        self.party_search_beacon_active.is_some()
    }

    // Param is passed by value, moved
    pub fn set_party_search_beacon_active(&mut self, v: bool) {
        self.party_search_beacon_active = ::std::option::Option::Some(v);
    }

    // optional uint32 matchmaking_flags = 67;

    pub fn matchmaking_flags(&self) -> u32 {
        self.matchmaking_flags.unwrap_or(0)
    }

    pub fn clear_matchmaking_flags(&mut self) {
        self.matchmaking_flags = ::std::option::Option::None;
    }

    pub fn has_matchmaking_flags(&self) -> bool {
        self.matchmaking_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchmaking_flags(&mut self, v: u32) {
        self.matchmaking_flags = ::std::option::Option::Some(v);
    }

    // optional .dota.EHighPriorityMMState high_priority_state = 68;

    pub fn high_priority_state(&self) -> EHighPriorityMMState {
        match self.high_priority_state {
            Some(e) => e.enum_value_or(EHighPriorityMMState::k_EHighPriorityMM_Unknown),
            None => EHighPriorityMMState::k_EHighPriorityMM_Unknown,
        }
    }

    pub fn clear_high_priority_state(&mut self) {
        self.high_priority_state = ::std::option::Option::None;
    }

    pub fn has_high_priority_state(&self) -> bool {
        self.high_priority_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_high_priority_state(&mut self, v: EHighPriorityMMState) {
        self.high_priority_state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool lane_selections_enabled = 69;

    pub fn lane_selections_enabled(&self) -> bool {
        self.lane_selections_enabled.unwrap_or(false)
    }

    pub fn clear_lane_selections_enabled(&mut self) {
        self.lane_selections_enabled = ::std::option::Option::None;
    }

    pub fn has_lane_selections_enabled(&self) -> bool {
        self.lane_selections_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lane_selections_enabled(&mut self, v: bool) {
        self.lane_selections_enabled = ::std::option::Option::Some(v);
    }

    // optional uint32 custom_game_difficulty_mask = 70;

    pub fn custom_game_difficulty_mask(&self) -> u32 {
        self.custom_game_difficulty_mask.unwrap_or(0)
    }

    pub fn clear_custom_game_difficulty_mask(&mut self) {
        self.custom_game_difficulty_mask = ::std::option::Option::None;
    }

    pub fn has_custom_game_difficulty_mask(&self) -> bool {
        self.custom_game_difficulty_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_game_difficulty_mask(&mut self, v: u32) {
        self.custom_game_difficulty_mask = ::std::option::Option::Some(v);
    }

    // optional bool is_steam_china = 71;

    pub fn is_steam_china(&self) -> bool {
        self.is_steam_china.unwrap_or(false)
    }

    pub fn clear_is_steam_china(&mut self) {
        self.is_steam_china = ::std::option::Option::None;
    }

    pub fn has_is_steam_china(&self) -> bool {
        self.is_steam_china.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_steam_china(&mut self, v: bool) {
        self.is_steam_china = ::std::option::Option::Some(v);
    }

    // optional uint32 bot_difficulty_mask = 72;

    pub fn bot_difficulty_mask(&self) -> u32 {
        self.bot_difficulty_mask.unwrap_or(0)
    }

    pub fn clear_bot_difficulty_mask(&mut self) {
        self.bot_difficulty_mask = ::std::option::Option::None;
    }

    pub fn has_bot_difficulty_mask(&self) -> bool {
        self.bot_difficulty_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bot_difficulty_mask(&mut self, v: u32) {
        self.bot_difficulty_mask = ::std::option::Option::Some(v);
    }

    // optional uint32 bot_script_index_mask = 73;

    pub fn bot_script_index_mask(&self) -> u32 {
        self.bot_script_index_mask.unwrap_or(0)
    }

    pub fn clear_bot_script_index_mask(&mut self) {
        self.bot_script_index_mask = ::std::option::Option::None;
    }

    pub fn has_bot_script_index_mask(&self) -> bool {
        self.bot_script_index_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bot_script_index_mask(&mut self, v: u32) {
        self.bot_script_index_mask = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(51);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "party_id",
            |m: &CSODOTAParty| { &m.party_id },
            |m: &mut CSODOTAParty| { &mut m.party_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "leader_id",
            |m: &CSODOTAParty| { &m.leader_id },
            |m: &mut CSODOTAParty| { &mut m.leader_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "member_ids",
            |m: &CSODOTAParty| { &m.member_ids },
            |m: &mut CSODOTAParty| { &mut m.member_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_modes",
            |m: &CSODOTAParty| { &m.game_modes },
            |m: &mut CSODOTAParty| { &mut m.game_modes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CSODOTAParty| { &m.state },
            |m: &mut CSODOTAParty| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "effective_started_matchmaking_time",
            |m: &CSODOTAParty| { &m.effective_started_matchmaking_time },
            |m: &mut CSODOTAParty| { &mut m.effective_started_matchmaking_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "raw_started_matchmaking_time",
            |m: &CSODOTAParty| { &m.raw_started_matchmaking_time },
            |m: &mut CSODOTAParty| { &mut m.raw_started_matchmaking_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attempt_start_time",
            |m: &CSODOTAParty| { &m.attempt_start_time },
            |m: &mut CSODOTAParty| { &mut m.attempt_start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attempt_num",
            |m: &CSODOTAParty| { &m.attempt_num },
            |m: &mut CSODOTAParty| { &mut m.attempt_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "matchgroups",
            |m: &CSODOTAParty| { &m.matchgroups },
            |m: &mut CSODOTAParty| { &mut m.matchgroups },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "low_priority_account_id",
            |m: &CSODOTAParty| { &m.low_priority_account_id },
            |m: &mut CSODOTAParty| { &mut m.low_priority_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "match_type",
            |m: &CSODOTAParty| { &m.match_type },
            |m: &mut CSODOTAParty| { &mut m.match_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CSODOTAParty| { &m.team_id },
            |m: &mut CSODOTAParty| { &mut m.team_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_name",
            |m: &CSODOTAParty| { &m.team_name },
            |m: &mut CSODOTAParty| { &mut m.team_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_ui_logo",
            |m: &CSODOTAParty| { &m.team_ui_logo },
            |m: &mut CSODOTAParty| { &mut m.team_ui_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_base_logo",
            |m: &CSODOTAParty| { &m.team_base_logo },
            |m: &mut CSODOTAParty| { &mut m.team_base_logo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "match_disabled_until_date",
            |m: &CSODOTAParty| { &m.match_disabled_until_date },
            |m: &mut CSODOTAParty| { &mut m.match_disabled_until_date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "match_disabled_account_id",
            |m: &CSODOTAParty| { &m.match_disabled_account_id },
            |m: &mut CSODOTAParty| { &mut m.match_disabled_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "matchmaking_max_range_minutes",
            |m: &CSODOTAParty| { &m.matchmaking_max_range_minutes },
            |m: &mut CSODOTAParty| { &mut m.matchmaking_max_range_minutes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "matchlanguages",
            |m: &CSODOTAParty| { &m.matchlanguages },
            |m: &mut CSODOTAParty| { &mut m.matchlanguages },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "members",
            |m: &CSODOTAParty| { &m.members },
            |m: &mut CSODOTAParty| { &mut m.members },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "low_priority_games_remaining",
            |m: &CSODOTAParty| { &m.low_priority_games_remaining },
            |m: &mut CSODOTAParty| { &mut m.low_priority_games_remaining },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "open_for_join_requests",
            |m: &CSODOTAParty| { &m.open_for_join_requests },
            |m: &mut CSODOTAParty| { &mut m.open_for_join_requests },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sent_invites",
            |m: &CSODOTAParty| { &m.sent_invites },
            |m: &mut CSODOTAParty| { &mut m.sent_invites },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "recv_invites",
            |m: &CSODOTAParty| { &m.recv_invites },
            |m: &mut CSODOTAParty| { &mut m.recv_invites },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_flags",
            |m: &CSODOTAParty| { &m.account_flags },
            |m: &mut CSODOTAParty| { &mut m.account_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "region_select_flags",
            |m: &CSODOTAParty| { &m.region_select_flags },
            |m: &mut CSODOTAParty| { &mut m.region_select_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "exclusive_tournament_id",
            |m: &CSODOTAParty| { &m.exclusive_tournament_id },
            |m: &mut CSODOTAParty| { &mut m.exclusive_tournament_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tourney_division_id",
            |m: &CSODOTAParty| { &m.tourney_division_id },
            |m: &mut CSODOTAParty| { &mut m.tourney_division_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tourney_schedule_time",
            |m: &CSODOTAParty| { &m.tourney_schedule_time },
            |m: &mut CSODOTAParty| { &mut m.tourney_schedule_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tourney_skill_level",
            |m: &CSODOTAParty| { &m.tourney_skill_level },
            |m: &mut CSODOTAParty| { &mut m.tourney_skill_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tourney_bracket_round",
            |m: &CSODOTAParty| { &m.tourney_bracket_round },
            |m: &mut CSODOTAParty| { &mut m.tourney_bracket_round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tourney_queue_deadline_time",
            |m: &CSODOTAParty| { &m.tourney_queue_deadline_time },
            |m: &mut CSODOTAParty| { &mut m.tourney_queue_deadline_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tourney_queue_deadline_state",
            |m: &CSODOTAParty| { &m.tourney_queue_deadline_state },
            |m: &mut CSODOTAParty| { &mut m.tourney_queue_deadline_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "party_builder_slots_to_fill",
            |m: &CSODOTAParty| { &m.party_builder_slots_to_fill },
            |m: &mut CSODOTAParty| { &mut m.party_builder_slots_to_fill },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "party_builder_match_groups",
            |m: &CSODOTAParty| { &m.party_builder_match_groups },
            |m: &mut CSODOTAParty| { &mut m.party_builder_match_groups },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "party_builder_start_time",
            |m: &CSODOTAParty| { &m.party_builder_start_time },
            |m: &mut CSODOTAParty| { &mut m.party_builder_start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "solo_queue",
            |m: &CSODOTAParty| { &m.solo_queue },
            |m: &mut CSODOTAParty| { &mut m.solo_queue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_clan_account_id",
            |m: &CSODOTAParty| { &m.steam_clan_account_id },
            |m: &mut CSODOTAParty| { &mut m.steam_clan_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgReadyCheckStatus>(
            "ready_check",
            |m: &CSODOTAParty| { &m.ready_check },
            |m: &mut CSODOTAParty| { &mut m.ready_check },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "custom_game_disabled_until_date",
            |m: &CSODOTAParty| { &m.custom_game_disabled_until_date },
            |m: &mut CSODOTAParty| { &mut m.custom_game_disabled_until_date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "custom_game_disabled_account_id",
            |m: &CSODOTAParty| { &m.custom_game_disabled_account_id },
            |m: &mut CSODOTAParty| { &mut m.custom_game_disabled_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_challenge_match",
            |m: &CSODOTAParty| { &m.is_challenge_match },
            |m: &mut CSODOTAParty| { &mut m.is_challenge_match },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "party_search_beacon_active",
            |m: &CSODOTAParty| { &m.party_search_beacon_active },
            |m: &mut CSODOTAParty| { &mut m.party_search_beacon_active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "matchmaking_flags",
            |m: &CSODOTAParty| { &m.matchmaking_flags },
            |m: &mut CSODOTAParty| { &mut m.matchmaking_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "high_priority_state",
            |m: &CSODOTAParty| { &m.high_priority_state },
            |m: &mut CSODOTAParty| { &mut m.high_priority_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lane_selections_enabled",
            |m: &CSODOTAParty| { &m.lane_selections_enabled },
            |m: &mut CSODOTAParty| { &mut m.lane_selections_enabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "custom_game_difficulty_mask",
            |m: &CSODOTAParty| { &m.custom_game_difficulty_mask },
            |m: &mut CSODOTAParty| { &mut m.custom_game_difficulty_mask },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_steam_china",
            |m: &CSODOTAParty| { &m.is_steam_china },
            |m: &mut CSODOTAParty| { &mut m.is_steam_china },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bot_difficulty_mask",
            |m: &CSODOTAParty| { &m.bot_difficulty_mask },
            |m: &mut CSODOTAParty| { &mut m.bot_difficulty_mask },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bot_script_index_mask",
            |m: &CSODOTAParty| { &m.bot_script_index_mask },
            |m: &mut CSODOTAParty| { &mut m.bot_script_index_mask },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSODOTAParty>(
            "CSODOTAParty",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSODOTAParty {
    const NAME: &'static str = "CSODOTAParty";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.party_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.leader_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    is.read_repeated_packed_fixed64_into(&mut self.member_ids)?;
                },
                25 => {
                    self.member_ids.push(is.read_fixed64()?);
                },
                32 => {
                    self.game_modes = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                56 => {
                    self.effective_started_matchmaking_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                256 => {
                    self.raw_started_matchmaking_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                264 => {
                    self.attempt_start_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                272 => {
                    self.attempt_num = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.matchgroups = ::std::option::Option::Some(is.read_uint32()?);
                },
                152 => {
                    self.low_priority_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                168 => {
                    self.match_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                184 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                410 => {
                    self.team_name = ::std::option::Option::Some(is.read_string()?);
                },
                416 => {
                    self.team_ui_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                424 => {
                    self.team_base_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                192 => {
                    self.match_disabled_until_date = ::std::option::Option::Some(is.read_uint32()?);
                },
                200 => {
                    self.match_disabled_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                208 => {
                    self.matchmaking_max_range_minutes = ::std::option::Option::Some(is.read_uint32()?);
                },
                216 => {
                    self.matchlanguages = ::std::option::Option::Some(is.read_uint32()?);
                },
                234 => {
                    self.members.push(is.read_message()?);
                },
                280 => {
                    self.low_priority_games_remaining = ::std::option::Option::Some(is.read_uint32()?);
                },
                320 => {
                    self.open_for_join_requests = ::std::option::Option::Some(is.read_bool()?);
                },
                330 => {
                    self.sent_invites.push(is.read_message()?);
                },
                338 => {
                    self.recv_invites.push(is.read_message()?);
                },
                344 => {
                    self.account_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                352 => {
                    self.region_select_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                360 => {
                    self.exclusive_tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                376 => {
                    self.tourney_division_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                384 => {
                    self.tourney_schedule_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                392 => {
                    self.tourney_skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                400 => {
                    self.tourney_bracket_round = ::std::option::Option::Some(is.read_uint32()?);
                },
                432 => {
                    self.tourney_queue_deadline_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                440 => {
                    self.tourney_queue_deadline_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                448 => {
                    self.party_builder_slots_to_fill = ::std::option::Option::Some(is.read_uint32()?);
                },
                456 => {
                    self.party_builder_match_groups = ::std::option::Option::Some(is.read_uint32()?);
                },
                464 => {
                    self.party_builder_start_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                472 => {
                    self.solo_queue = ::std::option::Option::Some(is.read_bool()?);
                },
                488 => {
                    self.steam_clan_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                498 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ready_check)?;
                },
                504 => {
                    self.custom_game_disabled_until_date = ::std::option::Option::Some(is.read_uint32()?);
                },
                512 => {
                    self.custom_game_disabled_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                520 => {
                    self.is_challenge_match = ::std::option::Option::Some(is.read_bool()?);
                },
                528 => {
                    self.party_search_beacon_active = ::std::option::Option::Some(is.read_bool()?);
                },
                536 => {
                    self.matchmaking_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                544 => {
                    self.high_priority_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                552 => {
                    self.lane_selections_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                560 => {
                    self.custom_game_difficulty_mask = ::std::option::Option::Some(is.read_uint32()?);
                },
                568 => {
                    self.is_steam_china = ::std::option::Option::Some(is.read_bool()?);
                },
                576 => {
                    self.bot_difficulty_mask = ::std::option::Option::Some(is.read_uint32()?);
                },
                584 => {
                    self.bot_script_index_mask = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.party_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.leader_id {
            my_size += 1 + 8;
        }
        my_size += 9 * self.member_ids.len() as u64;
        if let Some(v) = self.game_modes {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::int32_size(6, v.value());
        }
        if let Some(v) = self.effective_started_matchmaking_time {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.raw_started_matchmaking_time {
            my_size += ::protobuf::rt::uint32_size(32, v);
        }
        if let Some(v) = self.attempt_start_time {
            my_size += ::protobuf::rt::uint32_size(33, v);
        }
        if let Some(v) = self.attempt_num {
            my_size += ::protobuf::rt::uint32_size(34, v);
        }
        if let Some(v) = self.matchgroups {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.low_priority_account_id {
            my_size += ::protobuf::rt::uint32_size(19, v);
        }
        if let Some(v) = self.match_type {
            my_size += ::protobuf::rt::int32_size(21, v.value());
        }
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(23, v);
        }
        if let Some(v) = self.team_name.as_ref() {
            my_size += ::protobuf::rt::string_size(51, &v);
        }
        if let Some(v) = self.team_ui_logo {
            my_size += ::protobuf::rt::uint64_size(52, v);
        }
        if let Some(v) = self.team_base_logo {
            my_size += ::protobuf::rt::uint64_size(53, v);
        }
        if let Some(v) = self.match_disabled_until_date {
            my_size += ::protobuf::rt::uint32_size(24, v);
        }
        if let Some(v) = self.match_disabled_account_id {
            my_size += ::protobuf::rt::uint32_size(25, v);
        }
        if let Some(v) = self.matchmaking_max_range_minutes {
            my_size += ::protobuf::rt::uint32_size(26, v);
        }
        if let Some(v) = self.matchlanguages {
            my_size += ::protobuf::rt::uint32_size(27, v);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.low_priority_games_remaining {
            my_size += ::protobuf::rt::uint32_size(35, v);
        }
        if let Some(v) = self.open_for_join_requests {
            my_size += 2 + 1;
        }
        for value in &self.sent_invites {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.recv_invites {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.account_flags {
            my_size += ::protobuf::rt::uint32_size(43, v);
        }
        if let Some(v) = self.region_select_flags {
            my_size += ::protobuf::rt::uint32_size(44, v);
        }
        if let Some(v) = self.exclusive_tournament_id {
            my_size += ::protobuf::rt::uint32_size(45, v);
        }
        if let Some(v) = self.tourney_division_id {
            my_size += ::protobuf::rt::uint32_size(47, v);
        }
        if let Some(v) = self.tourney_schedule_time {
            my_size += ::protobuf::rt::uint32_size(48, v);
        }
        if let Some(v) = self.tourney_skill_level {
            my_size += ::protobuf::rt::uint32_size(49, v);
        }
        if let Some(v) = self.tourney_bracket_round {
            my_size += ::protobuf::rt::uint32_size(50, v);
        }
        if let Some(v) = self.tourney_queue_deadline_time {
            my_size += ::protobuf::rt::uint32_size(54, v);
        }
        if let Some(v) = self.tourney_queue_deadline_state {
            my_size += ::protobuf::rt::int32_size(55, v.value());
        }
        if let Some(v) = self.party_builder_slots_to_fill {
            my_size += ::protobuf::rt::uint32_size(56, v);
        }
        if let Some(v) = self.party_builder_match_groups {
            my_size += ::protobuf::rt::uint32_size(57, v);
        }
        if let Some(v) = self.party_builder_start_time {
            my_size += ::protobuf::rt::uint32_size(58, v);
        }
        if let Some(v) = self.solo_queue {
            my_size += 2 + 1;
        }
        if let Some(v) = self.steam_clan_account_id {
            my_size += ::protobuf::rt::uint32_size(61, v);
        }
        if let Some(v) = self.ready_check.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.custom_game_disabled_until_date {
            my_size += ::protobuf::rt::uint32_size(63, v);
        }
        if let Some(v) = self.custom_game_disabled_account_id {
            my_size += ::protobuf::rt::uint32_size(64, v);
        }
        if let Some(v) = self.is_challenge_match {
            my_size += 2 + 1;
        }
        if let Some(v) = self.party_search_beacon_active {
            my_size += 2 + 1;
        }
        if let Some(v) = self.matchmaking_flags {
            my_size += ::protobuf::rt::uint32_size(67, v);
        }
        if let Some(v) = self.high_priority_state {
            my_size += ::protobuf::rt::int32_size(68, v.value());
        }
        if let Some(v) = self.lane_selections_enabled {
            my_size += 2 + 1;
        }
        if let Some(v) = self.custom_game_difficulty_mask {
            my_size += ::protobuf::rt::uint32_size(70, v);
        }
        if let Some(v) = self.is_steam_china {
            my_size += 2 + 1;
        }
        if let Some(v) = self.bot_difficulty_mask {
            my_size += ::protobuf::rt::uint32_size(72, v);
        }
        if let Some(v) = self.bot_script_index_mask {
            my_size += ::protobuf::rt::uint32_size(73, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.party_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.leader_id {
            os.write_fixed64(2, v)?;
        }
        for v in &self.member_ids {
            os.write_fixed64(3, *v)?;
        };
        if let Some(v) = self.game_modes {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.state {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.effective_started_matchmaking_time {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.raw_started_matchmaking_time {
            os.write_uint32(32, v)?;
        }
        if let Some(v) = self.attempt_start_time {
            os.write_uint32(33, v)?;
        }
        if let Some(v) = self.attempt_num {
            os.write_uint32(34, v)?;
        }
        if let Some(v) = self.matchgroups {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.low_priority_account_id {
            os.write_uint32(19, v)?;
        }
        if let Some(v) = self.match_type {
            os.write_enum(21, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(23, v)?;
        }
        if let Some(v) = self.team_name.as_ref() {
            os.write_string(51, v)?;
        }
        if let Some(v) = self.team_ui_logo {
            os.write_uint64(52, v)?;
        }
        if let Some(v) = self.team_base_logo {
            os.write_uint64(53, v)?;
        }
        if let Some(v) = self.match_disabled_until_date {
            os.write_uint32(24, v)?;
        }
        if let Some(v) = self.match_disabled_account_id {
            os.write_uint32(25, v)?;
        }
        if let Some(v) = self.matchmaking_max_range_minutes {
            os.write_uint32(26, v)?;
        }
        if let Some(v) = self.matchlanguages {
            os.write_uint32(27, v)?;
        }
        for v in &self.members {
            ::protobuf::rt::write_message_field_with_cached_size(29, v, os)?;
        };
        if let Some(v) = self.low_priority_games_remaining {
            os.write_uint32(35, v)?;
        }
        if let Some(v) = self.open_for_join_requests {
            os.write_bool(40, v)?;
        }
        for v in &self.sent_invites {
            ::protobuf::rt::write_message_field_with_cached_size(41, v, os)?;
        };
        for v in &self.recv_invites {
            ::protobuf::rt::write_message_field_with_cached_size(42, v, os)?;
        };
        if let Some(v) = self.account_flags {
            os.write_uint32(43, v)?;
        }
        if let Some(v) = self.region_select_flags {
            os.write_uint32(44, v)?;
        }
        if let Some(v) = self.exclusive_tournament_id {
            os.write_uint32(45, v)?;
        }
        if let Some(v) = self.tourney_division_id {
            os.write_uint32(47, v)?;
        }
        if let Some(v) = self.tourney_schedule_time {
            os.write_uint32(48, v)?;
        }
        if let Some(v) = self.tourney_skill_level {
            os.write_uint32(49, v)?;
        }
        if let Some(v) = self.tourney_bracket_round {
            os.write_uint32(50, v)?;
        }
        if let Some(v) = self.tourney_queue_deadline_time {
            os.write_uint32(54, v)?;
        }
        if let Some(v) = self.tourney_queue_deadline_state {
            os.write_enum(55, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.party_builder_slots_to_fill {
            os.write_uint32(56, v)?;
        }
        if let Some(v) = self.party_builder_match_groups {
            os.write_uint32(57, v)?;
        }
        if let Some(v) = self.party_builder_start_time {
            os.write_uint32(58, v)?;
        }
        if let Some(v) = self.solo_queue {
            os.write_bool(59, v)?;
        }
        if let Some(v) = self.steam_clan_account_id {
            os.write_uint32(61, v)?;
        }
        if let Some(v) = self.ready_check.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(62, v, os)?;
        }
        if let Some(v) = self.custom_game_disabled_until_date {
            os.write_uint32(63, v)?;
        }
        if let Some(v) = self.custom_game_disabled_account_id {
            os.write_uint32(64, v)?;
        }
        if let Some(v) = self.is_challenge_match {
            os.write_bool(65, v)?;
        }
        if let Some(v) = self.party_search_beacon_active {
            os.write_bool(66, v)?;
        }
        if let Some(v) = self.matchmaking_flags {
            os.write_uint32(67, v)?;
        }
        if let Some(v) = self.high_priority_state {
            os.write_enum(68, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.lane_selections_enabled {
            os.write_bool(69, v)?;
        }
        if let Some(v) = self.custom_game_difficulty_mask {
            os.write_uint32(70, v)?;
        }
        if let Some(v) = self.is_steam_china {
            os.write_bool(71, v)?;
        }
        if let Some(v) = self.bot_difficulty_mask {
            os.write_uint32(72, v)?;
        }
        if let Some(v) = self.bot_script_index_mask {
            os.write_uint32(73, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSODOTAParty {
        CSODOTAParty::new()
    }

    fn clear(&mut self) {
        self.party_id = ::std::option::Option::None;
        self.leader_id = ::std::option::Option::None;
        self.member_ids.clear();
        self.game_modes = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.effective_started_matchmaking_time = ::std::option::Option::None;
        self.raw_started_matchmaking_time = ::std::option::Option::None;
        self.attempt_start_time = ::std::option::Option::None;
        self.attempt_num = ::std::option::Option::None;
        self.matchgroups = ::std::option::Option::None;
        self.low_priority_account_id = ::std::option::Option::None;
        self.match_type = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.team_name = ::std::option::Option::None;
        self.team_ui_logo = ::std::option::Option::None;
        self.team_base_logo = ::std::option::Option::None;
        self.match_disabled_until_date = ::std::option::Option::None;
        self.match_disabled_account_id = ::std::option::Option::None;
        self.matchmaking_max_range_minutes = ::std::option::Option::None;
        self.matchlanguages = ::std::option::Option::None;
        self.members.clear();
        self.low_priority_games_remaining = ::std::option::Option::None;
        self.open_for_join_requests = ::std::option::Option::None;
        self.sent_invites.clear();
        self.recv_invites.clear();
        self.account_flags = ::std::option::Option::None;
        self.region_select_flags = ::std::option::Option::None;
        self.exclusive_tournament_id = ::std::option::Option::None;
        self.tourney_division_id = ::std::option::Option::None;
        self.tourney_schedule_time = ::std::option::Option::None;
        self.tourney_skill_level = ::std::option::Option::None;
        self.tourney_bracket_round = ::std::option::Option::None;
        self.tourney_queue_deadline_time = ::std::option::Option::None;
        self.tourney_queue_deadline_state = ::std::option::Option::None;
        self.party_builder_slots_to_fill = ::std::option::Option::None;
        self.party_builder_match_groups = ::std::option::Option::None;
        self.party_builder_start_time = ::std::option::Option::None;
        self.solo_queue = ::std::option::Option::None;
        self.steam_clan_account_id = ::std::option::Option::None;
        self.ready_check.clear();
        self.custom_game_disabled_until_date = ::std::option::Option::None;
        self.custom_game_disabled_account_id = ::std::option::Option::None;
        self.is_challenge_match = ::std::option::Option::None;
        self.party_search_beacon_active = ::std::option::Option::None;
        self.matchmaking_flags = ::std::option::Option::None;
        self.high_priority_state = ::std::option::Option::None;
        self.lane_selections_enabled = ::std::option::Option::None;
        self.custom_game_difficulty_mask = ::std::option::Option::None;
        self.is_steam_china = ::std::option::Option::None;
        self.bot_difficulty_mask = ::std::option::Option::None;
        self.bot_script_index_mask = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSODOTAParty {
        static instance: CSODOTAParty = CSODOTAParty {
            party_id: ::std::option::Option::None,
            leader_id: ::std::option::Option::None,
            member_ids: ::std::vec::Vec::new(),
            game_modes: ::std::option::Option::None,
            state: ::std::option::Option::None,
            effective_started_matchmaking_time: ::std::option::Option::None,
            raw_started_matchmaking_time: ::std::option::Option::None,
            attempt_start_time: ::std::option::Option::None,
            attempt_num: ::std::option::Option::None,
            matchgroups: ::std::option::Option::None,
            low_priority_account_id: ::std::option::Option::None,
            match_type: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            team_name: ::std::option::Option::None,
            team_ui_logo: ::std::option::Option::None,
            team_base_logo: ::std::option::Option::None,
            match_disabled_until_date: ::std::option::Option::None,
            match_disabled_account_id: ::std::option::Option::None,
            matchmaking_max_range_minutes: ::std::option::Option::None,
            matchlanguages: ::std::option::Option::None,
            members: ::std::vec::Vec::new(),
            low_priority_games_remaining: ::std::option::Option::None,
            open_for_join_requests: ::std::option::Option::None,
            sent_invites: ::std::vec::Vec::new(),
            recv_invites: ::std::vec::Vec::new(),
            account_flags: ::std::option::Option::None,
            region_select_flags: ::std::option::Option::None,
            exclusive_tournament_id: ::std::option::Option::None,
            tourney_division_id: ::std::option::Option::None,
            tourney_schedule_time: ::std::option::Option::None,
            tourney_skill_level: ::std::option::Option::None,
            tourney_bracket_round: ::std::option::Option::None,
            tourney_queue_deadline_time: ::std::option::Option::None,
            tourney_queue_deadline_state: ::std::option::Option::None,
            party_builder_slots_to_fill: ::std::option::Option::None,
            party_builder_match_groups: ::std::option::Option::None,
            party_builder_start_time: ::std::option::Option::None,
            solo_queue: ::std::option::Option::None,
            steam_clan_account_id: ::std::option::Option::None,
            ready_check: ::protobuf::MessageField::none(),
            custom_game_disabled_until_date: ::std::option::Option::None,
            custom_game_disabled_account_id: ::std::option::Option::None,
            is_challenge_match: ::std::option::Option::None,
            party_search_beacon_active: ::std::option::Option::None,
            matchmaking_flags: ::std::option::Option::None,
            high_priority_state: ::std::option::Option::None,
            lane_selections_enabled: ::std::option::Option::None,
            custom_game_difficulty_mask: ::std::option::Option::None,
            is_steam_china: ::std::option::Option::None,
            bot_difficulty_mask: ::std::option::Option::None,
            bot_script_index_mask: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSODOTAParty {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSODOTAParty").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSODOTAParty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSODOTAParty {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CSODOTAParty`
pub mod csodotaparty {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dota.CSODOTAParty.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:dota.CSODOTAParty.State.UI)
        UI = 0,
        // @@protoc_insertion_point(enum_value:dota.CSODOTAParty.State.FINDING_MATCH)
        FINDING_MATCH = 1,
        // @@protoc_insertion_point(enum_value:dota.CSODOTAParty.State.IN_MATCH)
        IN_MATCH = 2,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::UI),
                1 => ::std::option::Option::Some(State::FINDING_MATCH),
                2 => ::std::option::Option::Some(State::IN_MATCH),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<State> {
            match str {
                "UI" => ::std::option::Option::Some(State::UI),
                "FINDING_MATCH" => ::std::option::Option::Some(State::FINDING_MATCH),
                "IN_MATCH" => ::std::option::Option::Some(State::IN_MATCH),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::UI,
            State::FINDING_MATCH,
            State::IN_MATCH,
        ];
    }

    impl ::protobuf::EnumFull for State {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CSODOTAParty.State").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::UI
        }
    }

    impl State {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("CSODOTAParty.State")
        }
    }
}

// @@protoc_insertion_point(message:dota.CSODOTAPartyInvite)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSODOTAPartyInvite {
    // message fields
    // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.group_id)
    pub group_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.sender_id)
    pub sender_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.sender_name)
    pub sender_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.members)
    pub members: ::std::vec::Vec<csodotaparty_invite::PartyMember>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.low_priority_status)
    pub low_priority_status: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.as_coach)
    pub as_coach: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.invite_gid)
    pub invite_gid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CSODOTAPartyInvite.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSODOTAPartyInvite {
    fn default() -> &'a CSODOTAPartyInvite {
        <CSODOTAPartyInvite as ::protobuf::Message>::default_instance()
    }
}

impl CSODOTAPartyInvite {
    pub fn new() -> CSODOTAPartyInvite {
        ::std::default::Default::default()
    }

    // optional uint64 group_id = 1;

    pub fn group_id(&self) -> u64 {
        self.group_id.unwrap_or(0)
    }

    pub fn clear_group_id(&mut self) {
        self.group_id = ::std::option::Option::None;
    }

    pub fn has_group_id(&self) -> bool {
        self.group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: u64) {
        self.group_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 sender_id = 2;

    pub fn sender_id(&self) -> u64 {
        self.sender_id.unwrap_or(0)
    }

    pub fn clear_sender_id(&mut self) {
        self.sender_id = ::std::option::Option::None;
    }

    pub fn has_sender_id(&self) -> bool {
        self.sender_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_id(&mut self, v: u64) {
        self.sender_id = ::std::option::Option::Some(v);
    }

    // optional string sender_name = 3;

    pub fn sender_name(&self) -> &str {
        match self.sender_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sender_name(&mut self) {
        self.sender_name = ::std::option::Option::None;
    }

    pub fn has_sender_name(&self) -> bool {
        self.sender_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_name(&mut self, v: ::std::string::String) {
        self.sender_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_name(&mut self) -> &mut ::std::string::String {
        if self.sender_name.is_none() {
            self.sender_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sender_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender_name(&mut self) -> ::std::string::String {
        self.sender_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 team_id = 5;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional bool low_priority_status = 6;

    pub fn low_priority_status(&self) -> bool {
        self.low_priority_status.unwrap_or(false)
    }

    pub fn clear_low_priority_status(&mut self) {
        self.low_priority_status = ::std::option::Option::None;
    }

    pub fn has_low_priority_status(&self) -> bool {
        self.low_priority_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_priority_status(&mut self, v: bool) {
        self.low_priority_status = ::std::option::Option::Some(v);
    }

    // optional bool as_coach = 7;

    pub fn as_coach(&self) -> bool {
        self.as_coach.unwrap_or(false)
    }

    pub fn clear_as_coach(&mut self) {
        self.as_coach = ::std::option::Option::None;
    }

    pub fn has_as_coach(&self) -> bool {
        self.as_coach.is_some()
    }

    // Param is passed by value, moved
    pub fn set_as_coach(&mut self, v: bool) {
        self.as_coach = ::std::option::Option::Some(v);
    }

    // optional fixed64 invite_gid = 8;

    pub fn invite_gid(&self) -> u64 {
        self.invite_gid.unwrap_or(0)
    }

    pub fn clear_invite_gid(&mut self) {
        self.invite_gid = ::std::option::Option::None;
    }

    pub fn has_invite_gid(&self) -> bool {
        self.invite_gid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_gid(&mut self, v: u64) {
        self.invite_gid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "group_id",
            |m: &CSODOTAPartyInvite| { &m.group_id },
            |m: &mut CSODOTAPartyInvite| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sender_id",
            |m: &CSODOTAPartyInvite| { &m.sender_id },
            |m: &mut CSODOTAPartyInvite| { &mut m.sender_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sender_name",
            |m: &CSODOTAPartyInvite| { &m.sender_name },
            |m: &mut CSODOTAPartyInvite| { &mut m.sender_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "members",
            |m: &CSODOTAPartyInvite| { &m.members },
            |m: &mut CSODOTAPartyInvite| { &mut m.members },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CSODOTAPartyInvite| { &m.team_id },
            |m: &mut CSODOTAPartyInvite| { &mut m.team_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "low_priority_status",
            |m: &CSODOTAPartyInvite| { &m.low_priority_status },
            |m: &mut CSODOTAPartyInvite| { &mut m.low_priority_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "as_coach",
            |m: &CSODOTAPartyInvite| { &m.as_coach },
            |m: &mut CSODOTAPartyInvite| { &mut m.as_coach },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_gid",
            |m: &CSODOTAPartyInvite| { &m.invite_gid },
            |m: &mut CSODOTAPartyInvite| { &mut m.invite_gid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSODOTAPartyInvite>(
            "CSODOTAPartyInvite",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSODOTAPartyInvite {
    const NAME: &'static str = "CSODOTAPartyInvite";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.group_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.sender_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.sender_name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.members.push(is.read_message()?);
                },
                40 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.low_priority_status = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.as_coach = ::std::option::Option::Some(is.read_bool()?);
                },
                65 => {
                    self.invite_gid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.group_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.sender_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.sender_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.low_priority_status {
            my_size += 1 + 1;
        }
        if let Some(v) = self.as_coach {
            my_size += 1 + 1;
        }
        if let Some(v) = self.invite_gid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.group_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.sender_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.sender_name.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.members {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.team_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.low_priority_status {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.as_coach {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.invite_gid {
            os.write_fixed64(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSODOTAPartyInvite {
        CSODOTAPartyInvite::new()
    }

    fn clear(&mut self) {
        self.group_id = ::std::option::Option::None;
        self.sender_id = ::std::option::Option::None;
        self.sender_name = ::std::option::Option::None;
        self.members.clear();
        self.team_id = ::std::option::Option::None;
        self.low_priority_status = ::std::option::Option::None;
        self.as_coach = ::std::option::Option::None;
        self.invite_gid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSODOTAPartyInvite {
        static instance: CSODOTAPartyInvite = CSODOTAPartyInvite {
            group_id: ::std::option::Option::None,
            sender_id: ::std::option::Option::None,
            sender_name: ::std::option::Option::None,
            members: ::std::vec::Vec::new(),
            team_id: ::std::option::Option::None,
            low_priority_status: ::std::option::Option::None,
            as_coach: ::std::option::Option::None,
            invite_gid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSODOTAPartyInvite {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSODOTAPartyInvite").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSODOTAPartyInvite {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSODOTAPartyInvite {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CSODOTAPartyInvite`
pub mod csodotaparty_invite {
    // @@protoc_insertion_point(message:dota.CSODOTAPartyInvite.PartyMember)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PartyMember {
        // message fields
        // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.PartyMember.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.PartyMember.steam_id)
        pub steam_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CSODOTAPartyInvite.PartyMember.is_coach)
        pub is_coach: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CSODOTAPartyInvite.PartyMember.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PartyMember {
        fn default() -> &'a PartyMember {
            <PartyMember as ::protobuf::Message>::default_instance()
        }
    }

    impl PartyMember {
        pub fn new() -> PartyMember {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional fixed64 steam_id = 2;

        pub fn steam_id(&self) -> u64 {
            self.steam_id.unwrap_or(0)
        }

        pub fn clear_steam_id(&mut self) {
            self.steam_id = ::std::option::Option::None;
        }

        pub fn has_steam_id(&self) -> bool {
            self.steam_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steam_id(&mut self, v: u64) {
            self.steam_id = ::std::option::Option::Some(v);
        }

        // optional bool is_coach = 4;

        pub fn is_coach(&self) -> bool {
            self.is_coach.unwrap_or(false)
        }

        pub fn clear_is_coach(&mut self) {
            self.is_coach = ::std::option::Option::None;
        }

        pub fn has_is_coach(&self) -> bool {
            self.is_coach.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_coach(&mut self, v: bool) {
            self.is_coach = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &PartyMember| { &m.name },
                |m: &mut PartyMember| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "steam_id",
                |m: &PartyMember| { &m.steam_id },
                |m: &mut PartyMember| { &mut m.steam_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_coach",
                |m: &PartyMember| { &m.is_coach },
                |m: &mut PartyMember| { &mut m.is_coach },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PartyMember>(
                "CSODOTAPartyInvite.PartyMember",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PartyMember {
        const NAME: &'static str = "PartyMember";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    17 => {
                        self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    32 => {
                        self.is_coach = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.steam_id {
                my_size += 1 + 8;
            }
            if let Some(v) = self.is_coach {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.steam_id {
                os.write_fixed64(2, v)?;
            }
            if let Some(v) = self.is_coach {
                os.write_bool(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PartyMember {
            PartyMember::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.steam_id = ::std::option::Option::None;
            self.is_coach = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PartyMember {
            static instance: PartyMember = PartyMember {
                name: ::std::option::Option::None,
                steam_id: ::std::option::Option::None,
                is_coach: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PartyMember {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CSODOTAPartyInvite.PartyMember").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PartyMember {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PartyMember {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgLeaverState)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgLeaverState {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgLeaverState.lobby_state)
    pub lobby_state: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgLeaverState.game_state)
    pub game_state: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_shared_enums::DOTA_GameState>>,
    // @@protoc_insertion_point(field:dota.CMsgLeaverState.leaver_detected)
    pub leaver_detected: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgLeaverState.first_blood_happened)
    pub first_blood_happened: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgLeaverState.discard_match_results)
    pub discard_match_results: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgLeaverState.mass_disconnect)
    pub mass_disconnect: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgLeaverState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgLeaverState {
    fn default() -> &'a CMsgLeaverState {
        <CMsgLeaverState as ::protobuf::Message>::default_instance()
    }
}

impl CMsgLeaverState {
    pub fn new() -> CMsgLeaverState {
        ::std::default::Default::default()
    }

    // optional uint32 lobby_state = 1;

    pub fn lobby_state(&self) -> u32 {
        self.lobby_state.unwrap_or(0)
    }

    pub fn clear_lobby_state(&mut self) {
        self.lobby_state = ::std::option::Option::None;
    }

    pub fn has_lobby_state(&self) -> bool {
        self.lobby_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby_state(&mut self, v: u32) {
        self.lobby_state = ::std::option::Option::Some(v);
    }

    // optional .dota.DOTA_GameState game_state = 2;

    pub fn game_state(&self) -> super::dota_shared_enums::DOTA_GameState {
        match self.game_state {
            Some(e) => e.enum_value_or(super::dota_shared_enums::DOTA_GameState::DOTA_GAMERULES_STATE_INIT),
            None => super::dota_shared_enums::DOTA_GameState::DOTA_GAMERULES_STATE_INIT,
        }
    }

    pub fn clear_game_state(&mut self) {
        self.game_state = ::std::option::Option::None;
    }

    pub fn has_game_state(&self) -> bool {
        self.game_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_state(&mut self, v: super::dota_shared_enums::DOTA_GameState) {
        self.game_state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool leaver_detected = 3;

    pub fn leaver_detected(&self) -> bool {
        self.leaver_detected.unwrap_or(false)
    }

    pub fn clear_leaver_detected(&mut self) {
        self.leaver_detected = ::std::option::Option::None;
    }

    pub fn has_leaver_detected(&self) -> bool {
        self.leaver_detected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leaver_detected(&mut self, v: bool) {
        self.leaver_detected = ::std::option::Option::Some(v);
    }

    // optional bool first_blood_happened = 4;

    pub fn first_blood_happened(&self) -> bool {
        self.first_blood_happened.unwrap_or(false)
    }

    pub fn clear_first_blood_happened(&mut self) {
        self.first_blood_happened = ::std::option::Option::None;
    }

    pub fn has_first_blood_happened(&self) -> bool {
        self.first_blood_happened.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_blood_happened(&mut self, v: bool) {
        self.first_blood_happened = ::std::option::Option::Some(v);
    }

    // optional bool discard_match_results = 5;

    pub fn discard_match_results(&self) -> bool {
        self.discard_match_results.unwrap_or(false)
    }

    pub fn clear_discard_match_results(&mut self) {
        self.discard_match_results = ::std::option::Option::None;
    }

    pub fn has_discard_match_results(&self) -> bool {
        self.discard_match_results.is_some()
    }

    // Param is passed by value, moved
    pub fn set_discard_match_results(&mut self, v: bool) {
        self.discard_match_results = ::std::option::Option::Some(v);
    }

    // optional bool mass_disconnect = 6;

    pub fn mass_disconnect(&self) -> bool {
        self.mass_disconnect.unwrap_or(false)
    }

    pub fn clear_mass_disconnect(&mut self) {
        self.mass_disconnect = ::std::option::Option::None;
    }

    pub fn has_mass_disconnect(&self) -> bool {
        self.mass_disconnect.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mass_disconnect(&mut self, v: bool) {
        self.mass_disconnect = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lobby_state",
            |m: &CMsgLeaverState| { &m.lobby_state },
            |m: &mut CMsgLeaverState| { &mut m.lobby_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_state",
            |m: &CMsgLeaverState| { &m.game_state },
            |m: &mut CMsgLeaverState| { &mut m.game_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "leaver_detected",
            |m: &CMsgLeaverState| { &m.leaver_detected },
            |m: &mut CMsgLeaverState| { &mut m.leaver_detected },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "first_blood_happened",
            |m: &CMsgLeaverState| { &m.first_blood_happened },
            |m: &mut CMsgLeaverState| { &mut m.first_blood_happened },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "discard_match_results",
            |m: &CMsgLeaverState| { &m.discard_match_results },
            |m: &mut CMsgLeaverState| { &mut m.discard_match_results },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mass_disconnect",
            |m: &CMsgLeaverState| { &m.mass_disconnect },
            |m: &mut CMsgLeaverState| { &mut m.mass_disconnect },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgLeaverState>(
            "CMsgLeaverState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgLeaverState {
    const NAME: &'static str = "CMsgLeaverState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.lobby_state = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.game_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.leaver_detected = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.first_blood_happened = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.discard_match_results = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.mass_disconnect = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.lobby_state {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.game_state {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.leaver_detected {
            my_size += 1 + 1;
        }
        if let Some(v) = self.first_blood_happened {
            my_size += 1 + 1;
        }
        if let Some(v) = self.discard_match_results {
            my_size += 1 + 1;
        }
        if let Some(v) = self.mass_disconnect {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.lobby_state {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.game_state {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.leaver_detected {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.first_blood_happened {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.discard_match_results {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.mass_disconnect {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgLeaverState {
        CMsgLeaverState::new()
    }

    fn clear(&mut self) {
        self.lobby_state = ::std::option::Option::None;
        self.game_state = ::std::option::Option::None;
        self.leaver_detected = ::std::option::Option::None;
        self.first_blood_happened = ::std::option::Option::None;
        self.discard_match_results = ::std::option::Option::None;
        self.mass_disconnect = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgLeaverState {
        static instance: CMsgLeaverState = CMsgLeaverState {
            lobby_state: ::std::option::Option::None,
            game_state: ::std::option::Option::None,
            leaver_detected: ::std::option::Option::None,
            first_blood_happened: ::std::option::Option::None,
            discard_match_results: ::std::option::Option::None,
            mass_disconnect: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgLeaverState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgLeaverState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgLeaverState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgLeaverState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgReadyCheckStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgReadyCheckStatus {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgReadyCheckStatus.start_timestamp)
    pub start_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgReadyCheckStatus.finish_timestamp)
    pub finish_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgReadyCheckStatus.initiator_account_id)
    pub initiator_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgReadyCheckStatus.ready_members)
    pub ready_members: ::std::vec::Vec<cmsg_ready_check_status::ReadyMember>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgReadyCheckStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgReadyCheckStatus {
    fn default() -> &'a CMsgReadyCheckStatus {
        <CMsgReadyCheckStatus as ::protobuf::Message>::default_instance()
    }
}

impl CMsgReadyCheckStatus {
    pub fn new() -> CMsgReadyCheckStatus {
        ::std::default::Default::default()
    }

    // optional uint32 start_timestamp = 1;

    pub fn start_timestamp(&self) -> u32 {
        self.start_timestamp.unwrap_or(0)
    }

    pub fn clear_start_timestamp(&mut self) {
        self.start_timestamp = ::std::option::Option::None;
    }

    pub fn has_start_timestamp(&self) -> bool {
        self.start_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_timestamp(&mut self, v: u32) {
        self.start_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 finish_timestamp = 2;

    pub fn finish_timestamp(&self) -> u32 {
        self.finish_timestamp.unwrap_or(0)
    }

    pub fn clear_finish_timestamp(&mut self) {
        self.finish_timestamp = ::std::option::Option::None;
    }

    pub fn has_finish_timestamp(&self) -> bool {
        self.finish_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_timestamp(&mut self, v: u32) {
        self.finish_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 initiator_account_id = 3;

    pub fn initiator_account_id(&self) -> u32 {
        self.initiator_account_id.unwrap_or(0)
    }

    pub fn clear_initiator_account_id(&mut self) {
        self.initiator_account_id = ::std::option::Option::None;
    }

    pub fn has_initiator_account_id(&self) -> bool {
        self.initiator_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initiator_account_id(&mut self, v: u32) {
        self.initiator_account_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "start_timestamp",
            |m: &CMsgReadyCheckStatus| { &m.start_timestamp },
            |m: &mut CMsgReadyCheckStatus| { &mut m.start_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "finish_timestamp",
            |m: &CMsgReadyCheckStatus| { &m.finish_timestamp },
            |m: &mut CMsgReadyCheckStatus| { &mut m.finish_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "initiator_account_id",
            |m: &CMsgReadyCheckStatus| { &m.initiator_account_id },
            |m: &mut CMsgReadyCheckStatus| { &mut m.initiator_account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ready_members",
            |m: &CMsgReadyCheckStatus| { &m.ready_members },
            |m: &mut CMsgReadyCheckStatus| { &mut m.ready_members },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgReadyCheckStatus>(
            "CMsgReadyCheckStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgReadyCheckStatus {
    const NAME: &'static str = "CMsgReadyCheckStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.start_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.finish_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.initiator_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.ready_members.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.start_timestamp {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.finish_timestamp {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.initiator_account_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.ready_members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.start_timestamp {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.finish_timestamp {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.initiator_account_id {
            os.write_uint32(3, v)?;
        }
        for v in &self.ready_members {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgReadyCheckStatus {
        CMsgReadyCheckStatus::new()
    }

    fn clear(&mut self) {
        self.start_timestamp = ::std::option::Option::None;
        self.finish_timestamp = ::std::option::Option::None;
        self.initiator_account_id = ::std::option::Option::None;
        self.ready_members.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgReadyCheckStatus {
        static instance: CMsgReadyCheckStatus = CMsgReadyCheckStatus {
            start_timestamp: ::std::option::Option::None,
            finish_timestamp: ::std::option::Option::None,
            initiator_account_id: ::std::option::Option::None,
            ready_members: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgReadyCheckStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgReadyCheckStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgReadyCheckStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgReadyCheckStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgReadyCheckStatus`
pub mod cmsg_ready_check_status {
    // @@protoc_insertion_point(message:dota.CMsgReadyCheckStatus.ReadyMember)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ReadyMember {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgReadyCheckStatus.ReadyMember.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgReadyCheckStatus.ReadyMember.ready_status)
        pub ready_status: ::std::option::Option<::protobuf::EnumOrUnknown<super::EReadyCheckStatus>>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgReadyCheckStatus.ReadyMember.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ReadyMember {
        fn default() -> &'a ReadyMember {
            <ReadyMember as ::protobuf::Message>::default_instance()
        }
    }

    impl ReadyMember {
        pub fn new() -> ReadyMember {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional .dota.EReadyCheckStatus ready_status = 2;

        pub fn ready_status(&self) -> super::EReadyCheckStatus {
            match self.ready_status {
                Some(e) => e.enum_value_or(super::EReadyCheckStatus::k_EReadyCheckStatus_Unknown),
                None => super::EReadyCheckStatus::k_EReadyCheckStatus_Unknown,
            }
        }

        pub fn clear_ready_status(&mut self) {
            self.ready_status = ::std::option::Option::None;
        }

        pub fn has_ready_status(&self) -> bool {
            self.ready_status.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ready_status(&mut self, v: super::EReadyCheckStatus) {
            self.ready_status = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account_id",
                |m: &ReadyMember| { &m.account_id },
                |m: &mut ReadyMember| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "ready_status",
                |m: &ReadyMember| { &m.ready_status },
                |m: &mut ReadyMember| { &mut m.ready_status },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadyMember>(
                "CMsgReadyCheckStatus.ReadyMember",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ReadyMember {
        const NAME: &'static str = "ReadyMember";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.ready_status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.ready_status {
                my_size += ::protobuf::rt::int32_size(2, v.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.ready_status {
                os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ReadyMember {
            ReadyMember::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.ready_status = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ReadyMember {
            static instance: ReadyMember = ReadyMember {
                account_id: ::std::option::Option::None,
                ready_status: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ReadyMember {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgReadyCheckStatus.ReadyMember").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ReadyMember {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ReadyMember {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgPartyReadyCheckRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPartyReadyCheckRequest {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgPartyReadyCheckRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPartyReadyCheckRequest {
    fn default() -> &'a CMsgPartyReadyCheckRequest {
        <CMsgPartyReadyCheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgPartyReadyCheckRequest {
    pub fn new() -> CMsgPartyReadyCheckRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgPartyReadyCheckRequest>(
            "CMsgPartyReadyCheckRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgPartyReadyCheckRequest {
    const NAME: &'static str = "CMsgPartyReadyCheckRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPartyReadyCheckRequest {
        CMsgPartyReadyCheckRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPartyReadyCheckRequest {
        static instance: CMsgPartyReadyCheckRequest = CMsgPartyReadyCheckRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgPartyReadyCheckRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgPartyReadyCheckRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgPartyReadyCheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgPartyReadyCheckRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgPartyReadyCheckResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPartyReadyCheckResponse {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgPartyReadyCheckResponse.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<EReadyCheckRequestResult>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgPartyReadyCheckResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPartyReadyCheckResponse {
    fn default() -> &'a CMsgPartyReadyCheckResponse {
        <CMsgPartyReadyCheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgPartyReadyCheckResponse {
    pub fn new() -> CMsgPartyReadyCheckResponse {
        ::std::default::Default::default()
    }

    // optional .dota.EReadyCheckRequestResult result = 1;

    pub fn result(&self) -> EReadyCheckRequestResult {
        match self.result {
            Some(e) => e.enum_value_or(EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success),
            None => EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: EReadyCheckRequestResult) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CMsgPartyReadyCheckResponse| { &m.result },
            |m: &mut CMsgPartyReadyCheckResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgPartyReadyCheckResponse>(
            "CMsgPartyReadyCheckResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgPartyReadyCheckResponse {
    const NAME: &'static str = "CMsgPartyReadyCheckResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPartyReadyCheckResponse {
        CMsgPartyReadyCheckResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPartyReadyCheckResponse {
        static instance: CMsgPartyReadyCheckResponse = CMsgPartyReadyCheckResponse {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgPartyReadyCheckResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgPartyReadyCheckResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgPartyReadyCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgPartyReadyCheckResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgPartyReadyCheckAcknowledge)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPartyReadyCheckAcknowledge {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgPartyReadyCheckAcknowledge.ready_status)
    pub ready_status: ::std::option::Option<::protobuf::EnumOrUnknown<EReadyCheckStatus>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgPartyReadyCheckAcknowledge.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPartyReadyCheckAcknowledge {
    fn default() -> &'a CMsgPartyReadyCheckAcknowledge {
        <CMsgPartyReadyCheckAcknowledge as ::protobuf::Message>::default_instance()
    }
}

impl CMsgPartyReadyCheckAcknowledge {
    pub fn new() -> CMsgPartyReadyCheckAcknowledge {
        ::std::default::Default::default()
    }

    // optional .dota.EReadyCheckStatus ready_status = 1;

    pub fn ready_status(&self) -> EReadyCheckStatus {
        match self.ready_status {
            Some(e) => e.enum_value_or(EReadyCheckStatus::k_EReadyCheckStatus_Unknown),
            None => EReadyCheckStatus::k_EReadyCheckStatus_Unknown,
        }
    }

    pub fn clear_ready_status(&mut self) {
        self.ready_status = ::std::option::Option::None;
    }

    pub fn has_ready_status(&self) -> bool {
        self.ready_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ready_status(&mut self, v: EReadyCheckStatus) {
        self.ready_status = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ready_status",
            |m: &CMsgPartyReadyCheckAcknowledge| { &m.ready_status },
            |m: &mut CMsgPartyReadyCheckAcknowledge| { &mut m.ready_status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgPartyReadyCheckAcknowledge>(
            "CMsgPartyReadyCheckAcknowledge",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgPartyReadyCheckAcknowledge {
    const NAME: &'static str = "CMsgPartyReadyCheckAcknowledge";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ready_status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ready_status {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ready_status {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPartyReadyCheckAcknowledge {
        CMsgPartyReadyCheckAcknowledge::new()
    }

    fn clear(&mut self) {
        self.ready_status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPartyReadyCheckAcknowledge {
        static instance: CMsgPartyReadyCheckAcknowledge = CMsgPartyReadyCheckAcknowledge {
            ready_status: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgPartyReadyCheckAcknowledge {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgPartyReadyCheckAcknowledge").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgPartyReadyCheckAcknowledge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgPartyReadyCheckAcknowledge {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgLobbyEventGameDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgLobbyEventGameDetails {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgLobbyEventGameDetails.kv_data)
    pub kv_data: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgLobbyEventGameDetails.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgLobbyEventGameDetails {
    fn default() -> &'a CMsgLobbyEventGameDetails {
        <CMsgLobbyEventGameDetails as ::protobuf::Message>::default_instance()
    }
}

impl CMsgLobbyEventGameDetails {
    pub fn new() -> CMsgLobbyEventGameDetails {
        ::std::default::Default::default()
    }

    // optional bytes kv_data = 1;

    pub fn kv_data(&self) -> &[u8] {
        match self.kv_data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_kv_data(&mut self) {
        self.kv_data = ::std::option::Option::None;
    }

    pub fn has_kv_data(&self) -> bool {
        self.kv_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kv_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.kv_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kv_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.kv_data.is_none() {
            self.kv_data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.kv_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_kv_data(&mut self) -> ::std::vec::Vec<u8> {
        self.kv_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "kv_data",
            |m: &CMsgLobbyEventGameDetails| { &m.kv_data },
            |m: &mut CMsgLobbyEventGameDetails| { &mut m.kv_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgLobbyEventGameDetails>(
            "CMsgLobbyEventGameDetails",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgLobbyEventGameDetails {
    const NAME: &'static str = "CMsgLobbyEventGameDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.kv_data = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.kv_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.kv_data.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgLobbyEventGameDetails {
        CMsgLobbyEventGameDetails::new()
    }

    fn clear(&mut self) {
        self.kv_data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgLobbyEventGameDetails {
        static instance: CMsgLobbyEventGameDetails = CMsgLobbyEventGameDetails {
            kv_data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgLobbyEventGameDetails {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgLobbyEventGameDetails").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgLobbyEventGameDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgLobbyEventGameDetails {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgMatchMatchmakingStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgMatchMatchmakingStats {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgMatchMatchmakingStats.average_queue_time)
    pub average_queue_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgMatchMatchmakingStats.maximum_queue_time)
    pub maximum_queue_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgMatchMatchmakingStats.behavior_score_variance)
    pub behavior_score_variance: ::std::option::Option<::protobuf::EnumOrUnknown<EMatchBehaviorScoreVariance>>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgMatchMatchmakingStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgMatchMatchmakingStats {
    fn default() -> &'a CMsgMatchMatchmakingStats {
        <CMsgMatchMatchmakingStats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgMatchMatchmakingStats {
    pub fn new() -> CMsgMatchMatchmakingStats {
        ::std::default::Default::default()
    }

    // optional uint32 average_queue_time = 1;

    pub fn average_queue_time(&self) -> u32 {
        self.average_queue_time.unwrap_or(0)
    }

    pub fn clear_average_queue_time(&mut self) {
        self.average_queue_time = ::std::option::Option::None;
    }

    pub fn has_average_queue_time(&self) -> bool {
        self.average_queue_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_average_queue_time(&mut self, v: u32) {
        self.average_queue_time = ::std::option::Option::Some(v);
    }

    // optional uint32 maximum_queue_time = 2;

    pub fn maximum_queue_time(&self) -> u32 {
        self.maximum_queue_time.unwrap_or(0)
    }

    pub fn clear_maximum_queue_time(&mut self) {
        self.maximum_queue_time = ::std::option::Option::None;
    }

    pub fn has_maximum_queue_time(&self) -> bool {
        self.maximum_queue_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_maximum_queue_time(&mut self, v: u32) {
        self.maximum_queue_time = ::std::option::Option::Some(v);
    }

    // optional .dota.EMatchBehaviorScoreVariance behavior_score_variance = 3;

    pub fn behavior_score_variance(&self) -> EMatchBehaviorScoreVariance {
        match self.behavior_score_variance {
            Some(e) => e.enum_value_or(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid),
            None => EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid,
        }
    }

    pub fn clear_behavior_score_variance(&mut self) {
        self.behavior_score_variance = ::std::option::Option::None;
    }

    pub fn has_behavior_score_variance(&self) -> bool {
        self.behavior_score_variance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_behavior_score_variance(&mut self, v: EMatchBehaviorScoreVariance) {
        self.behavior_score_variance = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "average_queue_time",
            |m: &CMsgMatchMatchmakingStats| { &m.average_queue_time },
            |m: &mut CMsgMatchMatchmakingStats| { &mut m.average_queue_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "maximum_queue_time",
            |m: &CMsgMatchMatchmakingStats| { &m.maximum_queue_time },
            |m: &mut CMsgMatchMatchmakingStats| { &mut m.maximum_queue_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "behavior_score_variance",
            |m: &CMsgMatchMatchmakingStats| { &m.behavior_score_variance },
            |m: &mut CMsgMatchMatchmakingStats| { &mut m.behavior_score_variance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgMatchMatchmakingStats>(
            "CMsgMatchMatchmakingStats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgMatchMatchmakingStats {
    const NAME: &'static str = "CMsgMatchMatchmakingStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.average_queue_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.maximum_queue_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.behavior_score_variance = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.average_queue_time {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.maximum_queue_time {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.behavior_score_variance {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.average_queue_time {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.maximum_queue_time {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.behavior_score_variance {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgMatchMatchmakingStats {
        CMsgMatchMatchmakingStats::new()
    }

    fn clear(&mut self) {
        self.average_queue_time = ::std::option::Option::None;
        self.maximum_queue_time = ::std::option::Option::None;
        self.behavior_score_variance = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgMatchMatchmakingStats {
        static instance: CMsgMatchMatchmakingStats = CMsgMatchMatchmakingStats {
            average_queue_time: ::std::option::Option::None,
            maximum_queue_time: ::std::option::Option::None,
            behavior_score_variance: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgMatchMatchmakingStats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgMatchMatchmakingStats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgMatchMatchmakingStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgMatchMatchmakingStats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMvpData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMvpData {
    // message fields
    // @@protoc_insertion_point(field:dota.CMvpData.mvps)
    pub mvps: ::std::vec::Vec<cmvp_data::MvpDatum>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMvpData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMvpData {
    fn default() -> &'a CMvpData {
        <CMvpData as ::protobuf::Message>::default_instance()
    }
}

impl CMvpData {
    pub fn new() -> CMvpData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mvps",
            |m: &CMvpData| { &m.mvps },
            |m: &mut CMvpData| { &mut m.mvps },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMvpData>(
            "CMvpData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMvpData {
    const NAME: &'static str = "CMvpData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mvps.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.mvps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.mvps {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMvpData {
        CMvpData::new()
    }

    fn clear(&mut self) {
        self.mvps.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMvpData {
        static instance: CMvpData = CMvpData {
            mvps: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMvpData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMvpData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMvpData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMvpData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMvpData`
pub mod cmvp_data {
    // @@protoc_insertion_point(message:dota.CMvpData.MvpDatum)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MvpDatum {
        // message fields
        // @@protoc_insertion_point(field:dota.CMvpData.MvpDatum.player_slot)
        pub player_slot: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMvpData.MvpDatum.accolades)
        pub accolades: ::std::vec::Vec<mvp_datum::MvpAccolade>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMvpData.MvpDatum.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MvpDatum {
        fn default() -> &'a MvpDatum {
            <MvpDatum as ::protobuf::Message>::default_instance()
        }
    }

    impl MvpDatum {
        pub fn new() -> MvpDatum {
            ::std::default::Default::default()
        }

        // optional uint32 player_slot = 1;

        pub fn player_slot(&self) -> u32 {
            self.player_slot.unwrap_or(0)
        }

        pub fn clear_player_slot(&mut self) {
            self.player_slot = ::std::option::Option::None;
        }

        pub fn has_player_slot(&self) -> bool {
            self.player_slot.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_slot(&mut self, v: u32) {
            self.player_slot = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "player_slot",
                |m: &MvpDatum| { &m.player_slot },
                |m: &mut MvpDatum| { &mut m.player_slot },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "accolades",
                |m: &MvpDatum| { &m.accolades },
                |m: &mut MvpDatum| { &mut m.accolades },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MvpDatum>(
                "CMvpData.MvpDatum",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for MvpDatum {
        const NAME: &'static str = "MvpDatum";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.player_slot = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.accolades.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.player_slot {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            for value in &self.accolades {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.player_slot {
                os.write_uint32(1, v)?;
            }
            for v in &self.accolades {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MvpDatum {
            MvpDatum::new()
        }

        fn clear(&mut self) {
            self.player_slot = ::std::option::Option::None;
            self.accolades.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MvpDatum {
            static instance: MvpDatum = MvpDatum {
                player_slot: ::std::option::Option::None,
                accolades: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for MvpDatum {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMvpData.MvpDatum").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for MvpDatum {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for MvpDatum {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `MvpDatum`
    pub mod mvp_datum {
        // @@protoc_insertion_point(message:dota.CMvpData.MvpDatum.MvpAccolade)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct MvpAccolade {
            // message fields
            // @@protoc_insertion_point(field:dota.CMvpData.MvpDatum.MvpAccolade.type)
            pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<mvp_accolade::MvpAccoladeType>>,
            // @@protoc_insertion_point(field:dota.CMvpData.MvpDatum.MvpAccolade.detail_value)
            pub detail_value: ::std::option::Option<f32>,
            // special fields
            // @@protoc_insertion_point(special_field:dota.CMvpData.MvpDatum.MvpAccolade.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a MvpAccolade {
            fn default() -> &'a MvpAccolade {
                <MvpAccolade as ::protobuf::Message>::default_instance()
            }
        }

        impl MvpAccolade {
            pub fn new() -> MvpAccolade {
                ::std::default::Default::default()
            }

            // optional .dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1;

            pub fn type_(&self) -> mvp_accolade::MvpAccoladeType {
                match self.type_ {
                    Some(e) => e.enum_value_or(mvp_accolade::MvpAccoladeType::kills),
                    None => mvp_accolade::MvpAccoladeType::kills,
                }
            }

            pub fn clear_type_(&mut self) {
                self.type_ = ::std::option::Option::None;
            }

            pub fn has_type(&self) -> bool {
                self.type_.is_some()
            }

            // Param is passed by value, moved
            pub fn set_type(&mut self, v: mvp_accolade::MvpAccoladeType) {
                self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
            }

            // optional float detail_value = 2;

            pub fn detail_value(&self) -> f32 {
                self.detail_value.unwrap_or(0.)
            }

            pub fn clear_detail_value(&mut self) {
                self.detail_value = ::std::option::Option::None;
            }

            pub fn has_detail_value(&self) -> bool {
                self.detail_value.is_some()
            }

            // Param is passed by value, moved
            pub fn set_detail_value(&mut self, v: f32) {
                self.detail_value = ::std::option::Option::Some(v);
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "type",
                    |m: &MvpAccolade| { &m.type_ },
                    |m: &mut MvpAccolade| { &mut m.type_ },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "detail_value",
                    |m: &MvpAccolade| { &m.detail_value },
                    |m: &mut MvpAccolade| { &mut m.detail_value },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MvpAccolade>(
                    "CMvpData.MvpDatum.MvpAccolade",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for MvpAccolade {
            const NAME: &'static str = "MvpAccolade";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                        },
                        21 => {
                            self.detail_value = ::std::option::Option::Some(is.read_float()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.type_ {
                    my_size += ::protobuf::rt::int32_size(1, v.value());
                }
                if let Some(v) = self.detail_value {
                    my_size += 1 + 4;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.type_ {
                    os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
                }
                if let Some(v) = self.detail_value {
                    os.write_float(2, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> MvpAccolade {
                MvpAccolade::new()
            }

            fn clear(&mut self) {
                self.type_ = ::std::option::Option::None;
                self.detail_value = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static MvpAccolade {
                static instance: MvpAccolade = MvpAccolade {
                    type_: ::std::option::Option::None,
                    detail_value: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for MvpAccolade {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("CMvpData.MvpDatum.MvpAccolade").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for MvpAccolade {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for MvpAccolade {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// Nested message and enums of message `MvpAccolade`
        pub mod mvp_accolade {
            #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
            // @@protoc_insertion_point(enum:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType)
            pub enum MvpAccoladeType {
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kills)
                kills = 1,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.deaths)
                deaths = 2,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.assists)
                assists = 3,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.net_worth)
                net_worth = 5,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.item_value)
                item_value = 6,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.support_gold_spent)
                support_gold_spent = 7,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.wards_placed)
                wards_placed = 8,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.dewards)
                dewards = 9,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.camps_stacked)
                camps_stacked = 10,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.last_hits)
                last_hits = 11,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.denies)
                denies = 12,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Killing_Sprees)
                kKillEaterEvent_Killing_Sprees = 13,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Godlike)
                kKillEaterEvent_Godlike = 14,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Towers_Destroyed)
                kKillEaterEvent_Towers_Destroyed = 15,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_SunstrikeKills)
                kKillEaterEventType_Invoker_SunstrikeKills = 16,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Axe_Culls)
                kKillEaterEventType_Axe_Culls = 17,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Axe_BattleHungerKills)
                kKillEaterEventType_Axe_BattleHungerKills = 18,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_LowHealthKills)
                kKillEaterEventType_LowHealthKills = 19,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_TornadoKills)
                kKillEaterEventType_Invoker_TornadoKills = 20,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sven_DoubleStuns)
                kKillEaterEventType_Sven_DoubleStuns = 21,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sven_WarcryAssists)
                kKillEaterEventType_Sven_WarcryAssists = 22,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sven_CleaveDoubleKills)
                kKillEaterEventType_Sven_CleaveDoubleKills = 23,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sven_TeleportInterrupts)
                kKillEaterEventType_Sven_TeleportInterrupts = 24,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Faceless_MultiChrono)
                kKillEaterEventType_Faceless_MultiChrono = 25,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Faceless_ChronoKills)
                kKillEaterEventType_Faceless_ChronoKills = 26,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Ursa_MultiShocks)
                kKillEaterEventType_Ursa_MultiShocks = 27,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_RoshanKills)
                kKillEaterEventType_RoshanKills = 28,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lion_FingerKills)
                kKillEaterEventType_Lion_FingerKills = 29,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Riki_SmokedHeroKills)
                kKillEaterEventType_Riki_SmokedHeroKills = 32,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_HeroesRevealedWithDust)
                kKillEaterEventType_HeroesRevealedWithDust = 33,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SkeletonKing_ReincarnationKills)
                kKillEaterEventType_SkeletonKing_ReincarnationKills = 34,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Skywrath_FlareKills)
                kKillEaterEventType_Skywrath_FlareKills = 35,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Leshrac_SplitEarthStuns)
                kKillEaterEventType_Leshrac_SplitEarthStuns = 36,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mirana_MaxStunArrows)
                kKillEaterEventType_Mirana_MaxStunArrows = 37,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits)
                kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits = 38,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_PhantomAssassin_DaggerCrits)
                kKillEaterEventType_PhantomAssassin_DaggerCrits = 39,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Meepo_Earthbinds)
                kKillEaterEventType_Meepo_Earthbinds = 40,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Bloodseeker_RuptureKills)
                kKillEaterEventType_Bloodseeker_RuptureKills = 41,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Slark_LeashedEnemies)
                kKillEaterEventType_Slark_LeashedEnemies = 42,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Disruptor_FountainGlimpses)
                kKillEaterEventType_Disruptor_FountainGlimpses = 43,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Rubick_SpellsStolen)
                kKillEaterEventType_Rubick_SpellsStolen = 44,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Rubick_UltimatesStolen)
                kKillEaterEventType_Rubick_UltimatesStolen = 45,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Doom_EnemiesDoomed)
                kKillEaterEventType_Doom_EnemiesDoomed = 46,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Omniknight_Purifications)
                kKillEaterEventType_Omniknight_Purifications = 47,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Omniknight_AlliesRepelled)
                kKillEaterEventType_Omniknight_AlliesRepelled = 48,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Omniknight_EnemiesRepelled)
                kKillEaterEventType_Omniknight_EnemiesRepelled = 49,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Warlock_FiveHeroFatalBonds)
                kKillEaterEventType_Warlock_FiveHeroFatalBonds = 50,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_CrystalMaiden_FrostbittenEnemies)
                kKillEaterEventType_CrystalMaiden_FrostbittenEnemies = 51,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_CrystalMaiden_CrystalNovas)
                kKillEaterEventType_CrystalMaiden_CrystalNovas = 52,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Kunkka_DoubleHeroTorrents)
                kKillEaterEventType_Kunkka_DoubleHeroTorrents = 53,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Kunkka_TripleHeroGhostShips)
                kKillEaterEventType_Kunkka_TripleHeroGhostShips = 54,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NagaSiren_EnemiesEnsnared)
                kKillEaterEventType_NagaSiren_EnemiesEnsnared = 55,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NagaSiren_TripleHeroRipTides)
                kKillEaterEventType_NagaSiren_TripleHeroRipTides = 56,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lycan_KillsDuringShapeshift)
                kKillEaterEventType_Lycan_KillsDuringShapeshift = 57,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pudge_DismemberKills)
                kKillEaterEventType_Pudge_DismemberKills = 58,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pudge_EnemyHeroesHooked)
                kKillEaterEventType_Pudge_EnemyHeroesHooked = 59,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pudge_HookKills)
                kKillEaterEventType_Pudge_HookKills = 60,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked)
                kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked = 61,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DrowRanger_EnemiesSilenced)
                kKillEaterEventType_DrowRanger_EnemiesSilenced = 62,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DrowRanger_MultiHeroSilences)
                kKillEaterEventType_DrowRanger_MultiHeroSilences = 63,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DrowRanger_SilencedKills)
                kKillEaterEventType_DrowRanger_SilencedKills = 64,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DrowRanger_FrostArrowKills)
                kKillEaterEventType_DrowRanger_FrostArrowKills = 65,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DragonKnight_KillsInDragonForm)
                kKillEaterEventType_DragonKnight_KillsInDragonForm = 66,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DragonKnight_BreatheFireKills)
                kKillEaterEventType_DragonKnight_BreatheFireKills = 67,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DragonKnight_SplashKills)
                kKillEaterEventType_DragonKnight_SplashKills = 68,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WitchDoctor_CaskStuns)
                kKillEaterEventType_WitchDoctor_CaskStuns = 69,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WitchDoctor_MaledictKills)
                kKillEaterEventType_WitchDoctor_MaledictKills = 70,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WitchDoctor_MultiHeroMaledicts)
                kKillEaterEventType_WitchDoctor_MultiHeroMaledicts = 71,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WitchDoctor_DeathWardKills)
                kKillEaterEventType_WitchDoctor_DeathWardKills = 72,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Disruptor_ThunderStrikeKills)
                kKillEaterEventType_Disruptor_ThunderStrikeKills = 73,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Disruptor_HeroesGlimpsed)
                kKillEaterEventType_Disruptor_HeroesGlimpsed = 74,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_CrystalMaiden_FreezingFieldKills)
                kKillEaterEventType_CrystalMaiden_FreezingFieldKills = 75,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Medusa_EnemiesPetrified)
                kKillEaterEventType_Medusa_EnemiesPetrified = 77,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Warlock_FatalBondsKills)
                kKillEaterEventType_Warlock_FatalBondsKills = 78,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Warlock_GolemKills)
                kKillEaterEventType_Warlock_GolemKills = 79,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Tusk_WalrusPunches)
                kKillEaterEventType_Tusk_WalrusPunches = 80,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Tusk_SnowballStuns)
                kKillEaterEventType_Tusk_SnowballStuns = 81,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_FissureStuns)
                kKillEaterEventType_Earthshaker_FissureStuns = 82,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_3HeroEchoslams)
                kKillEaterEventType_Earthshaker_3HeroEchoslams = 83,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SandKing_BurrowstrikeStuns)
                kKillEaterEventType_SandKing_BurrowstrikeStuns = 84,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SandKing_EpicenterKills)
                kKillEaterEventType_SandKing_EpicenterKills = 85,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SkywrathMage_AncientSealKills)
                kKillEaterEventType_SkywrathMage_AncientSealKills = 86,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SkywrathMage_ConcussiveShotKills)
                kKillEaterEventType_SkywrathMage_ConcussiveShotKills = 87,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Luna_LucentBeamKills)
                kKillEaterEventType_Luna_LucentBeamKills = 88,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Luna_EclipseKills)
                kKillEaterEventType_Luna_EclipseKills = 89,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_KeeperOfTheLight_IlluminateKills)
                kKillEaterEventType_KeeperOfTheLight_IlluminateKills = 90,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns)
                kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns = 91,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled)
                kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled = 92,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_LegionCommander_DuelsWon)
                kKillEaterEventType_LegionCommander_DuelsWon = 93,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Beastmaster_RoarKills)
                kKillEaterEventType_Beastmaster_RoarKills = 94,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Beastmaster_RoarMultiKills)
                kKillEaterEventType_Beastmaster_RoarMultiKills = 95,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Windrunner_FocusFireBuildings)
                kKillEaterEventType_Windrunner_FocusFireBuildings = 96,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Windrunner_PowershotKills)
                kKillEaterEventType_Windrunner_PowershotKills = 97,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_PhantomAssassin_DaggerLastHits)
                kKillEaterEventType_PhantomAssassin_DaggerLastHits = 98,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_PhantomAssassin_PhantomStrikeKills)
                kKillEaterEventType_PhantomAssassin_PhantomStrikeKills = 99,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_CryptSwarmKills)
                kKillEaterEventType_DeathProphet_CryptSwarmKills = 100,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_ExorcismBuildingKills)
                kKillEaterEventType_DeathProphet_ExorcismBuildingKills = 101,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned)
                kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned = 102,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_MultiHeroSilences)
                kKillEaterEventType_DeathProphet_MultiHeroSilences = 103,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Abaddon_MistCoilKills)
                kKillEaterEventType_Abaddon_MistCoilKills = 104,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Abaddon_MistCoilHealed)
                kKillEaterEventType_Abaddon_MistCoilHealed = 105,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Abaddon_AphoticShieldKills)
                kKillEaterEventType_Abaddon_AphoticShieldKills = 106,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lich_ChainFrostTripleKills)
                kKillEaterEventType_Lich_ChainFrostTripleKills = 107,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lich_ChainFrostMultiKills)
                kKillEaterEventType_Lich_ChainFrostMultiKills = 108,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lich_ChainFrostBounces)
                kKillEaterEventType_Lich_ChainFrostBounces = 109,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Ursa_EnragedKills)
                kKillEaterEventType_Ursa_EnragedKills = 110,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Ursa_EarthshockKills)
                kKillEaterEventType_Ursa_EarthshockKills = 111,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lina_LagunaBladeKills)
                kKillEaterEventType_Lina_LagunaBladeKills = 112,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lina_DragonSlaveKills)
                kKillEaterEventType_Lina_DragonSlaveKills = 113,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lina_LightStrikeArrayStuns)
                kKillEaterEventType_Lina_LightStrikeArrayStuns = 114,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Barracks_Destroyed)
                kKillEaterEvent_Barracks_Destroyed = 115,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_TemplarAssassin_MeldKills)
                kKillEaterEvent_TemplarAssassin_MeldKills = 116,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_TemplarAssassin_HeroesSlowed)
                kKillEaterEvent_TemplarAssassin_HeroesSlowed = 117,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Sniper_AssassinationKills)
                kKillEaterEvent_Sniper_AssassinationKills = 118,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Sniper_HeadshotStuns)
                kKillEaterEvent_Sniper_HeadshotStuns = 119,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_EarthSpirit_SmashStuns)
                kKillEaterEvent_EarthSpirit_SmashStuns = 120,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_EarthSpirit_GripSilences)
                kKillEaterEvent_EarthSpirit_GripSilences = 121,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowShaman_ShackleKills)
                kKillEaterEvent_ShadowShaman_ShackleKills = 122,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowShaman_HexKills)
                kKillEaterEvent_ShadowShaman_HexKills = 123,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Centaur_EnemiesStomped)
                kKillEaterEvent_Centaur_EnemiesStomped = 124,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Centaur_DoubleEdgeKills)
                kKillEaterEvent_Centaur_DoubleEdgeKills = 125,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Centaur_ReturnKills)
                kKillEaterEvent_Centaur_ReturnKills = 126,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_EmberSpirit_EnemiesChained)
                kKillEaterEvent_EmberSpirit_EnemiesChained = 127,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills)
                kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills = 128,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Puck_OrbKills)
                kKillEaterEvent_Puck_OrbKills = 129,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_VengefulSpirit_EnemiesStunned)
                kKillEaterEvent_VengefulSpirit_EnemiesStunned = 130,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Lifestealer_RageKills)
                kKillEaterEvent_Lifestealer_RageKills = 131,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Lifestealer_OpenWoundsKills)
                kKillEaterEvent_Lifestealer_OpenWoundsKills = 132,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Lifestealer_InfestKills)
                kKillEaterEvent_Lifestealer_InfestKills = 133,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ElderTitan_SpiritKills)
                kKillEaterEvent_ElderTitan_SpiritKills = 134,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ElderTitan_GoodStomps)
                kKillEaterEvent_ElderTitan_GoodStomps = 135,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Clockwerk_RocketKills)
                kKillEaterEvent_Clockwerk_RocketKills = 136,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Clockwerk_BlindRocketKills)
                kKillEaterEvent_Clockwerk_BlindRocketKills = 137,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_StormSpirit_BallKills)
                kKillEaterEvent_StormSpirit_BallKills = 138,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_StormSpirit_DoubleRemnantKills)
                kKillEaterEvent_StormSpirit_DoubleRemnantKills = 139,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_StormSpirit_VortexKills)
                kKillEaterEvent_StormSpirit_VortexKills = 140,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Tinker_DoubleMissileKills)
                kKillEaterEvent_Tinker_DoubleMissileKills = 141,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Tinker_LaserKills)
                kKillEaterEvent_Tinker_LaserKills = 142,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Techies_SuicideKills)
                kKillEaterEvent_Techies_SuicideKills = 143,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Techies_LandMineKills)
                kKillEaterEvent_Techies_LandMineKills = 144,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Techies_StatisTrapStuns)
                kKillEaterEvent_Techies_StatisTrapStuns = 145,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Techies_RemoteMineKills)
                kKillEaterEvent_Techies_RemoteMineKills = 146,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowFiend_TripleRazeKills)
                kKillEaterEvent_ShadowFiend_TripleRazeKills = 147,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowFiend_RequiemMultiKills)
                kKillEaterEvent_ShadowFiend_RequiemMultiKills = 148,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowFiend_QRazeKills)
                kKillEaterEvent_ShadowFiend_QRazeKills = 149,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowFiend_WRazeKills)
                kKillEaterEvent_ShadowFiend_WRazeKills = 150,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowFiend_ERazeKills)
                kKillEaterEvent_ShadowFiend_ERazeKills = 151,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Oracle_FatesEdictKills)
                kKillEaterEvent_Oracle_FatesEdictKills = 152,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Oracle_FalsePromiseSaves)
                kKillEaterEvent_Oracle_FalsePromiseSaves = 153,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Juggernaut_OmnislashKills)
                kKillEaterEvent_Juggernaut_OmnislashKills = 154,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SkeletonKing_SkeletonHeroKills)
                kKillEaterEventType_SkeletonKing_SkeletonHeroKills = 157,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DarkWillow_CursedCrownTripleStuns)
                kKillEaterEventType_DarkWillow_CursedCrownTripleStuns = 158,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Dazzle_ShallowGraveSaves)
                kKillEaterEventType_Dazzle_ShallowGraveSaves = 159,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Dazzle_PoisonTouchKills)
                kKillEaterEventType_Dazzle_PoisonTouchKills = 160,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ThreeManMeks)
                kKillEaterEventType_ThreeManMeks = 161,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Viper_PoisonAttackKills)
                kKillEaterEventType_Viper_PoisonAttackKills = 162,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Viper_CorrosiveSkinKills)
                kKillEaterEventType_Viper_CorrosiveSkinKills = 163,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ThreeHeroVeils)
                kKillEaterEventType_ThreeHeroVeils = 164,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Viper_KillsDuringViperStrike)
                kKillEaterEventType_Viper_KillsDuringViperStrike = 165,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SolarCrestKills)
                kKillEaterEventType_SolarCrestKills = 166,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Tiny_TreeThrowKills)
                kKillEaterEventType_Tiny_TreeThrowKills = 167,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Riki_BackstabKills)
                kKillEaterEventType_Riki_BackstabKills = 168,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns)
                kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns = 169,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Terrorblade_MetamorphosisKills)
                kKillEaterEventType_Terrorblade_MetamorphosisKills = 170,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lion_GreatFingerKills)
                kKillEaterEventType_Lion_GreatFingerKills = 171,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Antimage_SpellsBlockedWithAghanims)
                kKillEaterEventType_Antimage_SpellsBlockedWithAghanims = 172,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Antimage_ThreeManManaVoids)
                kKillEaterEventType_Antimage_ThreeManManaVoids = 173,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ArcWarden_TempestDoubleKills)
                kKillEaterEventType_ArcWarden_TempestDoubleKills = 174,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ArcWarden_SparkWraithKills)
                kKillEaterEventType_ArcWarden_SparkWraithKills = 175,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Bane_BrainSapKills)
                kKillEaterEventType_Bane_BrainSapKills = 176,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Bane_FiendsGripKills)
                kKillEaterEventType_Bane_FiendsGripKills = 177,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Batrider_TripleHeroFlamebreaks)
                kKillEaterEventType_Batrider_TripleHeroFlamebreaks = 178,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Batrider_DoubleHeroLassoes)
                kKillEaterEventType_Batrider_DoubleHeroLassoes = 179,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit)
                kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit = 180,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks)
                kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks = 181,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Bristleback_TripleHeroNasalGoo)
                kKillEaterEventType_Bristleback_TripleHeroNasalGoo = 182,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Broodmother_SpiderlingHeroKills)
                kKillEaterEventType_Broodmother_SpiderlingHeroKills = 183,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Broodmother_KillsInsideWeb)
                kKillEaterEventType_Broodmother_KillsInsideWeb = 184,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Centaur_ThreeHeroStampede)
                kKillEaterEventType_Centaur_ThreeHeroStampede = 185,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ChaosKnight_RealityRiftKills)
                kKillEaterEventType_ChaosKnight_RealityRiftKills = 186,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Chen_KillsWithPenitence)
                kKillEaterEventType_Chen_KillsWithPenitence = 187,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas)
                kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas = 188,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields)
                kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields = 189,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Dazzle_ShadowWaveKills)
                kKillEaterEventType_Dazzle_ShadowWaveKills = 190,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_SiphonKills)
                kKillEaterEventType_DeathProphet_SiphonKills = 191,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls)
                kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls = 192,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm)
                kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm = 193,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Doom_InfernalBladeBurnKills)
                kKillEaterEventType_Doom_InfernalBladeBurnKills = 194,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills)
                kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills = 195,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_EmberSpirit_RemnantKills)
                kKillEaterEventType_EmberSpirit_RemnantKills = 196,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_EmberSpirit_SleightOfFistKills)
                kKillEaterEventType_EmberSpirit_SleightOfFistKills = 197,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos)
                kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos = 198,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Enigma_ThreeManBlackHoles)
                kKillEaterEventType_Enigma_ThreeManBlackHoles = 199,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation)
                kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation = 200,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon)
                kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon = 201,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Gyrocopter_HomingMissileKills)
                kKillEaterEventType_Gyrocopter_HomingMissileKills = 202,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Gyrocopter_RocketBarrageKills)
                kKillEaterEventType_Gyrocopter_RocketBarrageKills = 203,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Huskar_KillsDuringLifeBreak)
                kKillEaterEventType_Huskar_KillsDuringLifeBreak = 204,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Huskar_BurningSpearKills)
                kKillEaterEventType_Huskar_BurningSpearKills = 205,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_MultiHeroIceWall)
                kKillEaterEventType_Invoker_MultiHeroIceWall = 206,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_ThreeHeroEMP)
                kKillEaterEventType_Invoker_ThreeHeroEMP = 207,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast)
                kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast = 208,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_MultiHeroChaosMeteor)
                kKillEaterEventType_Invoker_MultiHeroChaosMeteor = 209,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Jakiro_MultiHeroDualBreath)
                kKillEaterEventType_Jakiro_MultiHeroDualBreath = 210,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Jakiro_IcePathMacropyreCombos)
                kKillEaterEventType_Jakiro_IcePathMacropyreCombos = 211,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Leshrac_PulseNovaKills)
                kKillEaterEventType_Leshrac_PulseNovaKills = 212,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Leshrac_ThreeHeroLightningStorm)
                kKillEaterEventType_Leshrac_ThreeHeroLightningStorm = 213,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lion_ThreeHeroFingerOfDeath)
                kKillEaterEventType_Lion_ThreeHeroFingerOfDeath = 214,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Meepo_PoofKills)
                kKillEaterEventType_Meepo_PoofKills = 215,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Meepo_MultiHeroEarthbinds)
                kKillEaterEventType_Meepo_MultiHeroEarthbinds = 216,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NightStalker_NighttimeKills)
                kKillEaterEventType_NightStalker_NighttimeKills = 217,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Morphling_KillsDuringReplicate)
                kKillEaterEventType_Morphling_KillsDuringReplicate = 218,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_OgreMagi_FireblastKills)
                kKillEaterEventType_OgreMagi_FireblastKills = 219,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_OgreMagi_IgniteKills)
                kKillEaterEventType_OgreMagi_IgniteKills = 220,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DominatingKillStreaks)
                kKillEaterEventType_DominatingKillStreaks = 221,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_MegaKillStreaks)
                kKillEaterEventType_MegaKillStreaks = 222,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Alchemist_AghanimsGiven)
                kKillEaterEventType_Alchemist_AghanimsGiven = 223,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_VeilsLeadingToKills)
                kKillEaterEventType_VeilsLeadingToKills = 224,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DustLeadingToKills)
                kKillEaterEventType_DustLeadingToKills = 225,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns)
                kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns = 226,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Weaver_ShukuchiKills)
                kKillEaterEventType_Weaver_ShukuchiKills = 227,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Windrunner_ShackleFocusFireKills)
                kKillEaterEventType_Windrunner_ShackleFocusFireKills = 228,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills)
                kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills = 229,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Tusk_WalrusPunchKills)
                kKillEaterEventType_Tusk_WalrusPunchKills = 230,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Tinker_MultiHeroLasers)
                kKillEaterEventType_Tinker_MultiHeroLasers = 231,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades)
                kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades = 232,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sven_KillsDuringGodsStrength)
                kKillEaterEventType_Sven_KillsDuringGodsStrength = 233,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sniper_ThreeHeroShrapnels)
                kKillEaterEventType_Sniper_ThreeHeroShrapnels = 234,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Slark_KillsDuringShadowDance)
                kKillEaterEventType_Slark_KillsDuringShadowDance = 235,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks)
                kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks = 236,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ShadowShaman_SerpentWardShackleKills)
                kKillEaterEventType_ShadowShaman_SerpentWardShackleKills = 237,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade)
                kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade = 238,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Razor_EyeOfTheStormKills)
                kKillEaterEventType_Razor_EyeOfTheStormKills = 239,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pugna_LifeDrainKills)
                kKillEaterEventType_Pugna_LifeDrainKills = 240,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills)
                kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills = 241,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Oracle_MultiHeroFortunesEnd)
                kKillEaterEventType_Oracle_MultiHeroFortunesEnd = 242,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Omniknight_PurificationKills)
                kKillEaterEventType_Omniknight_PurificationKills = 243,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear)
                kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear = 244,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Warlock_ThreeHeroFatalBonds)
                kKillEaterEventType_Warlock_ThreeHeroFatalBonds = 245,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Riki_TricksOfTheTradeKills)
                kKillEaterEventType_Riki_TricksOfTheTradeKills = 246,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_AftershockHits10)
                kKillEaterEventType_Earthshaker_AftershockHits10 = 247,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_5HeroEchoslams)
                kKillEaterEventType_Earthshaker_5HeroEchoslams = 248,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lina_LagunaBladeHeroKills)
                kKillEaterEventType_Lina_LagunaBladeHeroKills = 249,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lina_LightStrikeHeroStuns)
                kKillEaterEventType_Lina_LightStrikeHeroStuns = 250,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_FissureMultiStuns)
                kKillEaterEventType_Earthshaker_FissureMultiStuns = 251,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_TotemKills)
                kKillEaterEventType_Earthshaker_TotemKills = 252,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pangolier_SwashbuckleKills)
                kKillEaterEventType_Pangolier_SwashbuckleKills = 253,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Furion_EnemyHeroesTrapped)
                kKillEaterEventType_Furion_EnemyHeroesTrapped = 254,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pangolier_HeartpiercerKills)
                kKillEaterEventType_Pangolier_HeartpiercerKills = 255,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Medusa_MultiHeroStoneGaze)
                kKillEaterEventType_Medusa_MultiHeroStoneGaze = 256,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Medusa_SplitShotKills)
                kKillEaterEventType_Medusa_SplitShotKills = 257,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mirana_MultiHeroStarstorm)
                kKillEaterEventType_Mirana_MultiHeroStarstorm = 258,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mirana_KillsFromMoonlightShadow)
                kKillEaterEventType_Mirana_KillsFromMoonlightShadow = 259,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Magnus_MultiHeroSkewers)
                kKillEaterEventType_Magnus_MultiHeroSkewers = 260,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Magnus_MultiHeroReversePolarity)
                kKillEaterEventType_Magnus_MultiHeroReversePolarity = 261,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Magnus_HeroesSlowedWithShockwave)
                kKillEaterEventType_Magnus_HeroesSlowedWithShockwave = 262,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NagaSiren_MultiHeroSong)
                kKillEaterEventType_NagaSiren_MultiHeroSong = 263,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NagaSiren_AlliesHealedBySong)
                kKillEaterEventType_NagaSiren_AlliesHealedBySong = 264,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_LoneDruid_MultiHeroRoar)
                kKillEaterEventType_LoneDruid_MultiHeroRoar = 265,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_LoneDruid_BattleCryKills)
                kKillEaterEventType_LoneDruid_BattleCryKills = 266,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WinterWyvern_ThreeHeroCurses)
                kKillEaterEventType_WinterWyvern_ThreeHeroCurses = 267,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell)
                kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell = 268,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mars_EnemiesKilledInArena)
                kKillEaterEventType_Mars_EnemiesKilledInArena = 269,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mars_MultiHeroGodsRebuke)
                kKillEaterEventType_Mars_MultiHeroGodsRebuke = 270,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mars_GodsRebukeKills)
                kKillEaterEventType_Mars_GodsRebukeKills = 271,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Snapfire_LizardBlobsKills)
                kKillEaterEventType_Snapfire_LizardBlobsKills = 272,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Snapfire_TwoHeroCookieStuns)
                kKillEaterEventType_Snapfire_TwoHeroCookieStuns = 273,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.Custom_KillStreak)
                Custom_KillStreak = 274,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Muerta_DeadShotKills)
                kKillEaterEventType_Muerta_DeadShotKills = 275,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Muerta_PierceTheVeilKills)
                kKillEaterEventType_Muerta_PierceTheVeilKills = 276,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Muerta_MultiHeroDeadShot)
                kKillEaterEventType_Muerta_MultiHeroDeadShot = 277,
                // @@protoc_insertion_point(enum_value:dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Muerta_DeadShotsIntoTheCalling)
                kKillEaterEventType_Muerta_DeadShotsIntoTheCalling = 278,
            }

            impl ::protobuf::Enum for MvpAccoladeType {
                const NAME: &'static str = "MvpAccoladeType";

                fn value(&self) -> i32 {
                    *self as i32
                }

                fn from_i32(value: i32) -> ::std::option::Option<MvpAccoladeType> {
                    match value {
                        1 => ::std::option::Option::Some(MvpAccoladeType::kills),
                        2 => ::std::option::Option::Some(MvpAccoladeType::deaths),
                        3 => ::std::option::Option::Some(MvpAccoladeType::assists),
                        5 => ::std::option::Option::Some(MvpAccoladeType::net_worth),
                        6 => ::std::option::Option::Some(MvpAccoladeType::item_value),
                        7 => ::std::option::Option::Some(MvpAccoladeType::support_gold_spent),
                        8 => ::std::option::Option::Some(MvpAccoladeType::wards_placed),
                        9 => ::std::option::Option::Some(MvpAccoladeType::dewards),
                        10 => ::std::option::Option::Some(MvpAccoladeType::camps_stacked),
                        11 => ::std::option::Option::Some(MvpAccoladeType::last_hits),
                        12 => ::std::option::Option::Some(MvpAccoladeType::denies),
                        13 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Killing_Sprees),
                        14 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Godlike),
                        15 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Towers_Destroyed),
                        16 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_SunstrikeKills),
                        17 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Axe_Culls),
                        18 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Axe_BattleHungerKills),
                        19 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LowHealthKills),
                        20 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_TornadoKills),
                        21 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_DoubleStuns),
                        22 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_WarcryAssists),
                        23 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_CleaveDoubleKills),
                        24 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_TeleportInterrupts),
                        25 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Faceless_MultiChrono),
                        26 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Faceless_ChronoKills),
                        27 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_MultiShocks),
                        28 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_RoshanKills),
                        29 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_FingerKills),
                        32 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_SmokedHeroKills),
                        33 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_HeroesRevealedWithDust),
                        34 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkeletonKing_ReincarnationKills),
                        35 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Skywrath_FlareKills),
                        36 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_SplitEarthStuns),
                        37 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_MaxStunArrows),
                        38 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits),
                        39 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerCrits),
                        40 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_Earthbinds),
                        41 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bloodseeker_RuptureKills),
                        42 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Slark_LeashedEnemies),
                        43 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_FountainGlimpses),
                        44 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Rubick_SpellsStolen),
                        45 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Rubick_UltimatesStolen),
                        46 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Doom_EnemiesDoomed),
                        47 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_Purifications),
                        48 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_AlliesRepelled),
                        49 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_EnemiesRepelled),
                        50 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_FiveHeroFatalBonds),
                        51 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FrostbittenEnemies),
                        52 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_CrystalNovas),
                        53 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Kunkka_DoubleHeroTorrents),
                        54 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Kunkka_TripleHeroGhostShips),
                        55 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_EnemiesEnsnared),
                        56 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_TripleHeroRipTides),
                        57 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lycan_KillsDuringShapeshift),
                        58 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_DismemberKills),
                        59 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_EnemyHeroesHooked),
                        60 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_HookKills),
                        61 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked),
                        62 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_EnemiesSilenced),
                        63 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_MultiHeroSilences),
                        64 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_SilencedKills),
                        65 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_FrostArrowKills),
                        66 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_KillsInDragonForm),
                        67 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_BreatheFireKills),
                        68 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_SplashKills),
                        69 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_CaskStuns),
                        70 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MaledictKills),
                        71 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroMaledicts),
                        72 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_DeathWardKills),
                        73 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_ThunderStrikeKills),
                        74 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_HeroesGlimpsed),
                        75 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FreezingFieldKills),
                        77 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_EnemiesPetrified),
                        78 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_FatalBondsKills),
                        79 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_GolemKills),
                        80 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunches),
                        81 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_SnowballStuns),
                        82 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureStuns),
                        83 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_3HeroEchoslams),
                        84 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SandKing_BurrowstrikeStuns),
                        85 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SandKing_EpicenterKills),
                        86 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkywrathMage_AncientSealKills),
                        87 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkywrathMage_ConcussiveShotKills),
                        88 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Luna_LucentBeamKills),
                        89 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Luna_EclipseKills),
                        90 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_IlluminateKills),
                        91 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns),
                        92 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled),
                        93 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LegionCommander_DuelsWon),
                        94 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarKills),
                        95 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarMultiKills),
                        96 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_FocusFireBuildings),
                        97 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_PowershotKills),
                        98 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerLastHits),
                        99 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_PhantomStrikeKills),
                        100 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_CryptSwarmKills),
                        101 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismBuildingKills),
                        102 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned),
                        103 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_MultiHeroSilences),
                        104 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilKills),
                        105 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilHealed),
                        106 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_AphoticShieldKills),
                        107 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostTripleKills),
                        108 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostMultiKills),
                        109 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostBounces),
                        110 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_EnragedKills),
                        111 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_EarthshockKills),
                        112 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeKills),
                        113 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_DragonSlaveKills),
                        114 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeArrayStuns),
                        115 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Barracks_Destroyed),
                        116 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_TemplarAssassin_MeldKills),
                        117 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_TemplarAssassin_HeroesSlowed),
                        118 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Sniper_AssassinationKills),
                        119 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Sniper_HeadshotStuns),
                        120 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EarthSpirit_SmashStuns),
                        121 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EarthSpirit_GripSilences),
                        122 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowShaman_ShackleKills),
                        123 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowShaman_HexKills),
                        124 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_EnemiesStomped),
                        125 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_DoubleEdgeKills),
                        126 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_ReturnKills),
                        127 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EmberSpirit_EnemiesChained),
                        128 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills),
                        129 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Puck_OrbKills),
                        130 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_VengefulSpirit_EnemiesStunned),
                        131 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_RageKills),
                        132 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_OpenWoundsKills),
                        133 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_InfestKills),
                        134 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ElderTitan_SpiritKills),
                        135 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ElderTitan_GoodStomps),
                        136 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Clockwerk_RocketKills),
                        137 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Clockwerk_BlindRocketKills),
                        138 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_BallKills),
                        139 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_DoubleRemnantKills),
                        140 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_VortexKills),
                        141 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Tinker_DoubleMissileKills),
                        142 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Tinker_LaserKills),
                        143 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_SuicideKills),
                        144 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_LandMineKills),
                        145 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_StatisTrapStuns),
                        146 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_RemoteMineKills),
                        147 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_TripleRazeKills),
                        148 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_RequiemMultiKills),
                        149 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_QRazeKills),
                        150 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_WRazeKills),
                        151 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_ERazeKills),
                        152 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Oracle_FatesEdictKills),
                        153 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Oracle_FalsePromiseSaves),
                        154 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Juggernaut_OmnislashKills),
                        157 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkeletonKing_SkeletonHeroKills),
                        158 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DarkWillow_CursedCrownTripleStuns),
                        159 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_ShallowGraveSaves),
                        160 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_PoisonTouchKills),
                        161 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ThreeManMeks),
                        162 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_PoisonAttackKills),
                        163 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_CorrosiveSkinKills),
                        164 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ThreeHeroVeils),
                        165 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_KillsDuringViperStrike),
                        166 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SolarCrestKills),
                        167 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tiny_TreeThrowKills),
                        168 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_BackstabKills),
                        169 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns),
                        170 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Terrorblade_MetamorphosisKills),
                        171 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_GreatFingerKills),
                        172 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithAghanims),
                        173 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_ThreeManManaVoids),
                        174 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ArcWarden_TempestDoubleKills),
                        175 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ArcWarden_SparkWraithKills),
                        176 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bane_BrainSapKills),
                        177 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bane_FiendsGripKills),
                        178 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Batrider_TripleHeroFlamebreaks),
                        179 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Batrider_DoubleHeroLassoes),
                        180 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit),
                        181 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks),
                        182 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bristleback_TripleHeroNasalGoo),
                        183 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Broodmother_SpiderlingHeroKills),
                        184 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Broodmother_KillsInsideWeb),
                        185 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Centaur_ThreeHeroStampede),
                        186 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ChaosKnight_RealityRiftKills),
                        187 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Chen_KillsWithPenitence),
                        188 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas),
                        189 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields),
                        190 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_ShadowWaveKills),
                        191 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_SiphonKills),
                        192 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls),
                        193 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm),
                        194 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Doom_InfernalBladeBurnKills),
                        195 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills),
                        196 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_EmberSpirit_RemnantKills),
                        197 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_EmberSpirit_SleightOfFistKills),
                        198 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos),
                        199 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Enigma_ThreeManBlackHoles),
                        200 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation),
                        201 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon),
                        202 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_HomingMissileKills),
                        203 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_RocketBarrageKills),
                        204 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Huskar_KillsDuringLifeBreak),
                        205 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Huskar_BurningSpearKills),
                        206 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroIceWall),
                        207 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroEMP),
                        208 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast),
                        209 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroChaosMeteor),
                        210 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Jakiro_MultiHeroDualBreath),
                        211 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Jakiro_IcePathMacropyreCombos),
                        212 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_PulseNovaKills),
                        213 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_ThreeHeroLightningStorm),
                        214 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_ThreeHeroFingerOfDeath),
                        215 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_PoofKills),
                        216 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_MultiHeroEarthbinds),
                        217 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NightStalker_NighttimeKills),
                        218 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Morphling_KillsDuringReplicate),
                        219 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_OgreMagi_FireblastKills),
                        220 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_OgreMagi_IgniteKills),
                        221 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DominatingKillStreaks),
                        222 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_MegaKillStreaks),
                        223 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Alchemist_AghanimsGiven),
                        224 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_VeilsLeadingToKills),
                        225 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DustLeadingToKills),
                        226 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns),
                        227 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Weaver_ShukuchiKills),
                        228 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_ShackleFocusFireKills),
                        229 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills),
                        230 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunchKills),
                        231 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tinker_MultiHeroLasers),
                        232 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades),
                        233 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_KillsDuringGodsStrength),
                        234 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sniper_ThreeHeroShrapnels),
                        235 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Slark_KillsDuringShadowDance),
                        236 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks),
                        237 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ShadowShaman_SerpentWardShackleKills),
                        238 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade),
                        239 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Razor_EyeOfTheStormKills),
                        240 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pugna_LifeDrainKills),
                        241 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills),
                        242 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Oracle_MultiHeroFortunesEnd),
                        243 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_PurificationKills),
                        244 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear),
                        245 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_ThreeHeroFatalBonds),
                        246 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_TricksOfTheTradeKills),
                        247 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_AftershockHits10),
                        248 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_5HeroEchoslams),
                        249 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeHeroKills),
                        250 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeHeroStuns),
                        251 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureMultiStuns),
                        252 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_TotemKills),
                        253 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pangolier_SwashbuckleKills),
                        254 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Furion_EnemyHeroesTrapped),
                        255 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pangolier_HeartpiercerKills),
                        256 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_MultiHeroStoneGaze),
                        257 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_SplitShotKills),
                        258 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_MultiHeroStarstorm),
                        259 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_KillsFromMoonlightShadow),
                        260 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroSkewers),
                        261 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroReversePolarity),
                        262 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_HeroesSlowedWithShockwave),
                        263 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_MultiHeroSong),
                        264 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_AlliesHealedBySong),
                        265 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LoneDruid_MultiHeroRoar),
                        266 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LoneDruid_BattleCryKills),
                        267 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WinterWyvern_ThreeHeroCurses),
                        268 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell),
                        269 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_EnemiesKilledInArena),
                        270 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_MultiHeroGodsRebuke),
                        271 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_GodsRebukeKills),
                        272 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Snapfire_LizardBlobsKills),
                        273 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Snapfire_TwoHeroCookieStuns),
                        274 => ::std::option::Option::Some(MvpAccoladeType::Custom_KillStreak),
                        275 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotKills),
                        276 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_PierceTheVeilKills),
                        277 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_MultiHeroDeadShot),
                        278 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotsIntoTheCalling),
                        _ => ::std::option::Option::None
                    }
                }

                fn from_str(str: &str) -> ::std::option::Option<MvpAccoladeType> {
                    match str {
                        "kills" => ::std::option::Option::Some(MvpAccoladeType::kills),
                        "deaths" => ::std::option::Option::Some(MvpAccoladeType::deaths),
                        "assists" => ::std::option::Option::Some(MvpAccoladeType::assists),
                        "net_worth" => ::std::option::Option::Some(MvpAccoladeType::net_worth),
                        "item_value" => ::std::option::Option::Some(MvpAccoladeType::item_value),
                        "support_gold_spent" => ::std::option::Option::Some(MvpAccoladeType::support_gold_spent),
                        "wards_placed" => ::std::option::Option::Some(MvpAccoladeType::wards_placed),
                        "dewards" => ::std::option::Option::Some(MvpAccoladeType::dewards),
                        "camps_stacked" => ::std::option::Option::Some(MvpAccoladeType::camps_stacked),
                        "last_hits" => ::std::option::Option::Some(MvpAccoladeType::last_hits),
                        "denies" => ::std::option::Option::Some(MvpAccoladeType::denies),
                        "kKillEaterEvent_Killing_Sprees" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Killing_Sprees),
                        "kKillEaterEvent_Godlike" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Godlike),
                        "kKillEaterEvent_Towers_Destroyed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Towers_Destroyed),
                        "kKillEaterEventType_Invoker_SunstrikeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_SunstrikeKills),
                        "kKillEaterEventType_Axe_Culls" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Axe_Culls),
                        "kKillEaterEventType_Axe_BattleHungerKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Axe_BattleHungerKills),
                        "kKillEaterEventType_LowHealthKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LowHealthKills),
                        "kKillEaterEventType_Invoker_TornadoKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_TornadoKills),
                        "kKillEaterEventType_Sven_DoubleStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_DoubleStuns),
                        "kKillEaterEventType_Sven_WarcryAssists" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_WarcryAssists),
                        "kKillEaterEventType_Sven_CleaveDoubleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_CleaveDoubleKills),
                        "kKillEaterEventType_Sven_TeleportInterrupts" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_TeleportInterrupts),
                        "kKillEaterEventType_Faceless_MultiChrono" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Faceless_MultiChrono),
                        "kKillEaterEventType_Faceless_ChronoKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Faceless_ChronoKills),
                        "kKillEaterEventType_Ursa_MultiShocks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_MultiShocks),
                        "kKillEaterEventType_RoshanKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_RoshanKills),
                        "kKillEaterEventType_Lion_FingerKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_FingerKills),
                        "kKillEaterEventType_Riki_SmokedHeroKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_SmokedHeroKills),
                        "kKillEaterEventType_HeroesRevealedWithDust" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_HeroesRevealedWithDust),
                        "kKillEaterEventType_SkeletonKing_ReincarnationKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkeletonKing_ReincarnationKills),
                        "kKillEaterEventType_Skywrath_FlareKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Skywrath_FlareKills),
                        "kKillEaterEventType_Leshrac_SplitEarthStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_SplitEarthStuns),
                        "kKillEaterEventType_Mirana_MaxStunArrows" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_MaxStunArrows),
                        "kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits),
                        "kKillEaterEventType_PhantomAssassin_DaggerCrits" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerCrits),
                        "kKillEaterEventType_Meepo_Earthbinds" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_Earthbinds),
                        "kKillEaterEventType_Bloodseeker_RuptureKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bloodseeker_RuptureKills),
                        "kKillEaterEventType_Slark_LeashedEnemies" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Slark_LeashedEnemies),
                        "kKillEaterEventType_Disruptor_FountainGlimpses" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_FountainGlimpses),
                        "kKillEaterEventType_Rubick_SpellsStolen" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Rubick_SpellsStolen),
                        "kKillEaterEventType_Rubick_UltimatesStolen" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Rubick_UltimatesStolen),
                        "kKillEaterEventType_Doom_EnemiesDoomed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Doom_EnemiesDoomed),
                        "kKillEaterEventType_Omniknight_Purifications" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_Purifications),
                        "kKillEaterEventType_Omniknight_AlliesRepelled" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_AlliesRepelled),
                        "kKillEaterEventType_Omniknight_EnemiesRepelled" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_EnemiesRepelled),
                        "kKillEaterEventType_Warlock_FiveHeroFatalBonds" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_FiveHeroFatalBonds),
                        "kKillEaterEventType_CrystalMaiden_FrostbittenEnemies" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FrostbittenEnemies),
                        "kKillEaterEventType_CrystalMaiden_CrystalNovas" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_CrystalNovas),
                        "kKillEaterEventType_Kunkka_DoubleHeroTorrents" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Kunkka_DoubleHeroTorrents),
                        "kKillEaterEventType_Kunkka_TripleHeroGhostShips" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Kunkka_TripleHeroGhostShips),
                        "kKillEaterEventType_NagaSiren_EnemiesEnsnared" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_EnemiesEnsnared),
                        "kKillEaterEventType_NagaSiren_TripleHeroRipTides" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_TripleHeroRipTides),
                        "kKillEaterEventType_Lycan_KillsDuringShapeshift" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lycan_KillsDuringShapeshift),
                        "kKillEaterEventType_Pudge_DismemberKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_DismemberKills),
                        "kKillEaterEventType_Pudge_EnemyHeroesHooked" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_EnemyHeroesHooked),
                        "kKillEaterEventType_Pudge_HookKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_HookKills),
                        "kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked),
                        "kKillEaterEventType_DrowRanger_EnemiesSilenced" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_EnemiesSilenced),
                        "kKillEaterEventType_DrowRanger_MultiHeroSilences" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_MultiHeroSilences),
                        "kKillEaterEventType_DrowRanger_SilencedKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_SilencedKills),
                        "kKillEaterEventType_DrowRanger_FrostArrowKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_FrostArrowKills),
                        "kKillEaterEventType_DragonKnight_KillsInDragonForm" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_KillsInDragonForm),
                        "kKillEaterEventType_DragonKnight_BreatheFireKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_BreatheFireKills),
                        "kKillEaterEventType_DragonKnight_SplashKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_SplashKills),
                        "kKillEaterEventType_WitchDoctor_CaskStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_CaskStuns),
                        "kKillEaterEventType_WitchDoctor_MaledictKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MaledictKills),
                        "kKillEaterEventType_WitchDoctor_MultiHeroMaledicts" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroMaledicts),
                        "kKillEaterEventType_WitchDoctor_DeathWardKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_DeathWardKills),
                        "kKillEaterEventType_Disruptor_ThunderStrikeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_ThunderStrikeKills),
                        "kKillEaterEventType_Disruptor_HeroesGlimpsed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_HeroesGlimpsed),
                        "kKillEaterEventType_CrystalMaiden_FreezingFieldKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FreezingFieldKills),
                        "kKillEaterEventType_Medusa_EnemiesPetrified" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_EnemiesPetrified),
                        "kKillEaterEventType_Warlock_FatalBondsKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_FatalBondsKills),
                        "kKillEaterEventType_Warlock_GolemKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_GolemKills),
                        "kKillEaterEventType_Tusk_WalrusPunches" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunches),
                        "kKillEaterEventType_Tusk_SnowballStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_SnowballStuns),
                        "kKillEaterEventType_Earthshaker_FissureStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureStuns),
                        "kKillEaterEventType_Earthshaker_3HeroEchoslams" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_3HeroEchoslams),
                        "kKillEaterEventType_SandKing_BurrowstrikeStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SandKing_BurrowstrikeStuns),
                        "kKillEaterEventType_SandKing_EpicenterKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SandKing_EpicenterKills),
                        "kKillEaterEventType_SkywrathMage_AncientSealKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkywrathMage_AncientSealKills),
                        "kKillEaterEventType_SkywrathMage_ConcussiveShotKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkywrathMage_ConcussiveShotKills),
                        "kKillEaterEventType_Luna_LucentBeamKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Luna_LucentBeamKills),
                        "kKillEaterEventType_Luna_EclipseKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Luna_EclipseKills),
                        "kKillEaterEventType_KeeperOfTheLight_IlluminateKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_IlluminateKills),
                        "kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns),
                        "kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled),
                        "kKillEaterEventType_LegionCommander_DuelsWon" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LegionCommander_DuelsWon),
                        "kKillEaterEventType_Beastmaster_RoarKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarKills),
                        "kKillEaterEventType_Beastmaster_RoarMultiKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarMultiKills),
                        "kKillEaterEventType_Windrunner_FocusFireBuildings" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_FocusFireBuildings),
                        "kKillEaterEventType_Windrunner_PowershotKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_PowershotKills),
                        "kKillEaterEventType_PhantomAssassin_DaggerLastHits" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerLastHits),
                        "kKillEaterEventType_PhantomAssassin_PhantomStrikeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_PhantomStrikeKills),
                        "kKillEaterEventType_DeathProphet_CryptSwarmKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_CryptSwarmKills),
                        "kKillEaterEventType_DeathProphet_ExorcismBuildingKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismBuildingKills),
                        "kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned),
                        "kKillEaterEventType_DeathProphet_MultiHeroSilences" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_MultiHeroSilences),
                        "kKillEaterEventType_Abaddon_MistCoilKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilKills),
                        "kKillEaterEventType_Abaddon_MistCoilHealed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilHealed),
                        "kKillEaterEventType_Abaddon_AphoticShieldKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_AphoticShieldKills),
                        "kKillEaterEventType_Lich_ChainFrostTripleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostTripleKills),
                        "kKillEaterEventType_Lich_ChainFrostMultiKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostMultiKills),
                        "kKillEaterEventType_Lich_ChainFrostBounces" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostBounces),
                        "kKillEaterEventType_Ursa_EnragedKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_EnragedKills),
                        "kKillEaterEventType_Ursa_EarthshockKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_EarthshockKills),
                        "kKillEaterEventType_Lina_LagunaBladeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeKills),
                        "kKillEaterEventType_Lina_DragonSlaveKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_DragonSlaveKills),
                        "kKillEaterEventType_Lina_LightStrikeArrayStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeArrayStuns),
                        "kKillEaterEvent_Barracks_Destroyed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Barracks_Destroyed),
                        "kKillEaterEvent_TemplarAssassin_MeldKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_TemplarAssassin_MeldKills),
                        "kKillEaterEvent_TemplarAssassin_HeroesSlowed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_TemplarAssassin_HeroesSlowed),
                        "kKillEaterEvent_Sniper_AssassinationKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Sniper_AssassinationKills),
                        "kKillEaterEvent_Sniper_HeadshotStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Sniper_HeadshotStuns),
                        "kKillEaterEvent_EarthSpirit_SmashStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EarthSpirit_SmashStuns),
                        "kKillEaterEvent_EarthSpirit_GripSilences" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EarthSpirit_GripSilences),
                        "kKillEaterEvent_ShadowShaman_ShackleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowShaman_ShackleKills),
                        "kKillEaterEvent_ShadowShaman_HexKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowShaman_HexKills),
                        "kKillEaterEvent_Centaur_EnemiesStomped" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_EnemiesStomped),
                        "kKillEaterEvent_Centaur_DoubleEdgeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_DoubleEdgeKills),
                        "kKillEaterEvent_Centaur_ReturnKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_ReturnKills),
                        "kKillEaterEvent_EmberSpirit_EnemiesChained" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EmberSpirit_EnemiesChained),
                        "kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills),
                        "kKillEaterEvent_Puck_OrbKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Puck_OrbKills),
                        "kKillEaterEvent_VengefulSpirit_EnemiesStunned" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_VengefulSpirit_EnemiesStunned),
                        "kKillEaterEvent_Lifestealer_RageKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_RageKills),
                        "kKillEaterEvent_Lifestealer_OpenWoundsKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_OpenWoundsKills),
                        "kKillEaterEvent_Lifestealer_InfestKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_InfestKills),
                        "kKillEaterEvent_ElderTitan_SpiritKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ElderTitan_SpiritKills),
                        "kKillEaterEvent_ElderTitan_GoodStomps" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ElderTitan_GoodStomps),
                        "kKillEaterEvent_Clockwerk_RocketKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Clockwerk_RocketKills),
                        "kKillEaterEvent_Clockwerk_BlindRocketKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Clockwerk_BlindRocketKills),
                        "kKillEaterEvent_StormSpirit_BallKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_BallKills),
                        "kKillEaterEvent_StormSpirit_DoubleRemnantKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_DoubleRemnantKills),
                        "kKillEaterEvent_StormSpirit_VortexKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_VortexKills),
                        "kKillEaterEvent_Tinker_DoubleMissileKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Tinker_DoubleMissileKills),
                        "kKillEaterEvent_Tinker_LaserKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Tinker_LaserKills),
                        "kKillEaterEvent_Techies_SuicideKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_SuicideKills),
                        "kKillEaterEvent_Techies_LandMineKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_LandMineKills),
                        "kKillEaterEvent_Techies_StatisTrapStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_StatisTrapStuns),
                        "kKillEaterEvent_Techies_RemoteMineKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_RemoteMineKills),
                        "kKillEaterEvent_ShadowFiend_TripleRazeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_TripleRazeKills),
                        "kKillEaterEvent_ShadowFiend_RequiemMultiKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_RequiemMultiKills),
                        "kKillEaterEvent_ShadowFiend_QRazeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_QRazeKills),
                        "kKillEaterEvent_ShadowFiend_WRazeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_WRazeKills),
                        "kKillEaterEvent_ShadowFiend_ERazeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_ERazeKills),
                        "kKillEaterEvent_Oracle_FatesEdictKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Oracle_FatesEdictKills),
                        "kKillEaterEvent_Oracle_FalsePromiseSaves" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Oracle_FalsePromiseSaves),
                        "kKillEaterEvent_Juggernaut_OmnislashKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Juggernaut_OmnislashKills),
                        "kKillEaterEventType_SkeletonKing_SkeletonHeroKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkeletonKing_SkeletonHeroKills),
                        "kKillEaterEventType_DarkWillow_CursedCrownTripleStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DarkWillow_CursedCrownTripleStuns),
                        "kKillEaterEventType_Dazzle_ShallowGraveSaves" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_ShallowGraveSaves),
                        "kKillEaterEventType_Dazzle_PoisonTouchKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_PoisonTouchKills),
                        "kKillEaterEventType_ThreeManMeks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ThreeManMeks),
                        "kKillEaterEventType_Viper_PoisonAttackKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_PoisonAttackKills),
                        "kKillEaterEventType_Viper_CorrosiveSkinKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_CorrosiveSkinKills),
                        "kKillEaterEventType_ThreeHeroVeils" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ThreeHeroVeils),
                        "kKillEaterEventType_Viper_KillsDuringViperStrike" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_KillsDuringViperStrike),
                        "kKillEaterEventType_SolarCrestKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SolarCrestKills),
                        "kKillEaterEventType_Tiny_TreeThrowKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tiny_TreeThrowKills),
                        "kKillEaterEventType_Riki_BackstabKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_BackstabKills),
                        "kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns),
                        "kKillEaterEventType_Terrorblade_MetamorphosisKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Terrorblade_MetamorphosisKills),
                        "kKillEaterEventType_Lion_GreatFingerKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_GreatFingerKills),
                        "kKillEaterEventType_Antimage_SpellsBlockedWithAghanims" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithAghanims),
                        "kKillEaterEventType_Antimage_ThreeManManaVoids" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_ThreeManManaVoids),
                        "kKillEaterEventType_ArcWarden_TempestDoubleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ArcWarden_TempestDoubleKills),
                        "kKillEaterEventType_ArcWarden_SparkWraithKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ArcWarden_SparkWraithKills),
                        "kKillEaterEventType_Bane_BrainSapKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bane_BrainSapKills),
                        "kKillEaterEventType_Bane_FiendsGripKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bane_FiendsGripKills),
                        "kKillEaterEventType_Batrider_TripleHeroFlamebreaks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Batrider_TripleHeroFlamebreaks),
                        "kKillEaterEventType_Batrider_DoubleHeroLassoes" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Batrider_DoubleHeroLassoes),
                        "kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit),
                        "kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks),
                        "kKillEaterEventType_Bristleback_TripleHeroNasalGoo" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bristleback_TripleHeroNasalGoo),
                        "kKillEaterEventType_Broodmother_SpiderlingHeroKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Broodmother_SpiderlingHeroKills),
                        "kKillEaterEventType_Broodmother_KillsInsideWeb" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Broodmother_KillsInsideWeb),
                        "kKillEaterEventType_Centaur_ThreeHeroStampede" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Centaur_ThreeHeroStampede),
                        "kKillEaterEventType_ChaosKnight_RealityRiftKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ChaosKnight_RealityRiftKills),
                        "kKillEaterEventType_Chen_KillsWithPenitence" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Chen_KillsWithPenitence),
                        "kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas),
                        "kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields),
                        "kKillEaterEventType_Dazzle_ShadowWaveKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_ShadowWaveKills),
                        "kKillEaterEventType_DeathProphet_SiphonKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_SiphonKills),
                        "kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls),
                        "kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm),
                        "kKillEaterEventType_Doom_InfernalBladeBurnKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Doom_InfernalBladeBurnKills),
                        "kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills),
                        "kKillEaterEventType_EmberSpirit_RemnantKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_EmberSpirit_RemnantKills),
                        "kKillEaterEventType_EmberSpirit_SleightOfFistKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_EmberSpirit_SleightOfFistKills),
                        "kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos),
                        "kKillEaterEventType_Enigma_ThreeManBlackHoles" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Enigma_ThreeManBlackHoles),
                        "kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation),
                        "kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon),
                        "kKillEaterEventType_Gyrocopter_HomingMissileKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_HomingMissileKills),
                        "kKillEaterEventType_Gyrocopter_RocketBarrageKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_RocketBarrageKills),
                        "kKillEaterEventType_Huskar_KillsDuringLifeBreak" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Huskar_KillsDuringLifeBreak),
                        "kKillEaterEventType_Huskar_BurningSpearKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Huskar_BurningSpearKills),
                        "kKillEaterEventType_Invoker_MultiHeroIceWall" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroIceWall),
                        "kKillEaterEventType_Invoker_ThreeHeroEMP" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroEMP),
                        "kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast),
                        "kKillEaterEventType_Invoker_MultiHeroChaosMeteor" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroChaosMeteor),
                        "kKillEaterEventType_Jakiro_MultiHeroDualBreath" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Jakiro_MultiHeroDualBreath),
                        "kKillEaterEventType_Jakiro_IcePathMacropyreCombos" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Jakiro_IcePathMacropyreCombos),
                        "kKillEaterEventType_Leshrac_PulseNovaKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_PulseNovaKills),
                        "kKillEaterEventType_Leshrac_ThreeHeroLightningStorm" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_ThreeHeroLightningStorm),
                        "kKillEaterEventType_Lion_ThreeHeroFingerOfDeath" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_ThreeHeroFingerOfDeath),
                        "kKillEaterEventType_Meepo_PoofKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_PoofKills),
                        "kKillEaterEventType_Meepo_MultiHeroEarthbinds" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_MultiHeroEarthbinds),
                        "kKillEaterEventType_NightStalker_NighttimeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NightStalker_NighttimeKills),
                        "kKillEaterEventType_Morphling_KillsDuringReplicate" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Morphling_KillsDuringReplicate),
                        "kKillEaterEventType_OgreMagi_FireblastKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_OgreMagi_FireblastKills),
                        "kKillEaterEventType_OgreMagi_IgniteKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_OgreMagi_IgniteKills),
                        "kKillEaterEventType_DominatingKillStreaks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DominatingKillStreaks),
                        "kKillEaterEventType_MegaKillStreaks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_MegaKillStreaks),
                        "kKillEaterEventType_Alchemist_AghanimsGiven" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Alchemist_AghanimsGiven),
                        "kKillEaterEventType_VeilsLeadingToKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_VeilsLeadingToKills),
                        "kKillEaterEventType_DustLeadingToKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DustLeadingToKills),
                        "kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns),
                        "kKillEaterEventType_Weaver_ShukuchiKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Weaver_ShukuchiKills),
                        "kKillEaterEventType_Windrunner_ShackleFocusFireKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_ShackleFocusFireKills),
                        "kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills),
                        "kKillEaterEventType_Tusk_WalrusPunchKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunchKills),
                        "kKillEaterEventType_Tinker_MultiHeroLasers" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tinker_MultiHeroLasers),
                        "kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades),
                        "kKillEaterEventType_Sven_KillsDuringGodsStrength" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_KillsDuringGodsStrength),
                        "kKillEaterEventType_Sniper_ThreeHeroShrapnels" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sniper_ThreeHeroShrapnels),
                        "kKillEaterEventType_Slark_KillsDuringShadowDance" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Slark_KillsDuringShadowDance),
                        "kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks),
                        "kKillEaterEventType_ShadowShaman_SerpentWardShackleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ShadowShaman_SerpentWardShackleKills),
                        "kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade),
                        "kKillEaterEventType_Razor_EyeOfTheStormKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Razor_EyeOfTheStormKills),
                        "kKillEaterEventType_Pugna_LifeDrainKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pugna_LifeDrainKills),
                        "kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills),
                        "kKillEaterEventType_Oracle_MultiHeroFortunesEnd" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Oracle_MultiHeroFortunesEnd),
                        "kKillEaterEventType_Omniknight_PurificationKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_PurificationKills),
                        "kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear),
                        "kKillEaterEventType_Warlock_ThreeHeroFatalBonds" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_ThreeHeroFatalBonds),
                        "kKillEaterEventType_Riki_TricksOfTheTradeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_TricksOfTheTradeKills),
                        "kKillEaterEventType_Earthshaker_AftershockHits10" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_AftershockHits10),
                        "kKillEaterEventType_Earthshaker_5HeroEchoslams" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_5HeroEchoslams),
                        "kKillEaterEventType_Lina_LagunaBladeHeroKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeHeroKills),
                        "kKillEaterEventType_Lina_LightStrikeHeroStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeHeroStuns),
                        "kKillEaterEventType_Earthshaker_FissureMultiStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureMultiStuns),
                        "kKillEaterEventType_Earthshaker_TotemKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_TotemKills),
                        "kKillEaterEventType_Pangolier_SwashbuckleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pangolier_SwashbuckleKills),
                        "kKillEaterEventType_Furion_EnemyHeroesTrapped" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Furion_EnemyHeroesTrapped),
                        "kKillEaterEventType_Pangolier_HeartpiercerKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pangolier_HeartpiercerKills),
                        "kKillEaterEventType_Medusa_MultiHeroStoneGaze" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_MultiHeroStoneGaze),
                        "kKillEaterEventType_Medusa_SplitShotKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_SplitShotKills),
                        "kKillEaterEventType_Mirana_MultiHeroStarstorm" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_MultiHeroStarstorm),
                        "kKillEaterEventType_Mirana_KillsFromMoonlightShadow" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_KillsFromMoonlightShadow),
                        "kKillEaterEventType_Magnus_MultiHeroSkewers" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroSkewers),
                        "kKillEaterEventType_Magnus_MultiHeroReversePolarity" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroReversePolarity),
                        "kKillEaterEventType_Magnus_HeroesSlowedWithShockwave" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_HeroesSlowedWithShockwave),
                        "kKillEaterEventType_NagaSiren_MultiHeroSong" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_MultiHeroSong),
                        "kKillEaterEventType_NagaSiren_AlliesHealedBySong" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_AlliesHealedBySong),
                        "kKillEaterEventType_LoneDruid_MultiHeroRoar" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LoneDruid_MultiHeroRoar),
                        "kKillEaterEventType_LoneDruid_BattleCryKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LoneDruid_BattleCryKills),
                        "kKillEaterEventType_WinterWyvern_ThreeHeroCurses" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WinterWyvern_ThreeHeroCurses),
                        "kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell),
                        "kKillEaterEventType_Mars_EnemiesKilledInArena" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_EnemiesKilledInArena),
                        "kKillEaterEventType_Mars_MultiHeroGodsRebuke" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_MultiHeroGodsRebuke),
                        "kKillEaterEventType_Mars_GodsRebukeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_GodsRebukeKills),
                        "kKillEaterEventType_Snapfire_LizardBlobsKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Snapfire_LizardBlobsKills),
                        "kKillEaterEventType_Snapfire_TwoHeroCookieStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Snapfire_TwoHeroCookieStuns),
                        "Custom_KillStreak" => ::std::option::Option::Some(MvpAccoladeType::Custom_KillStreak),
                        "kKillEaterEventType_Muerta_DeadShotKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotKills),
                        "kKillEaterEventType_Muerta_PierceTheVeilKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_PierceTheVeilKills),
                        "kKillEaterEventType_Muerta_MultiHeroDeadShot" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_MultiHeroDeadShot),
                        "kKillEaterEventType_Muerta_DeadShotsIntoTheCalling" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotsIntoTheCalling),
                        _ => ::std::option::Option::None
                    }
                }

                const VALUES: &'static [MvpAccoladeType] = &[
                    MvpAccoladeType::kills,
                    MvpAccoladeType::deaths,
                    MvpAccoladeType::assists,
                    MvpAccoladeType::net_worth,
                    MvpAccoladeType::item_value,
                    MvpAccoladeType::support_gold_spent,
                    MvpAccoladeType::wards_placed,
                    MvpAccoladeType::dewards,
                    MvpAccoladeType::camps_stacked,
                    MvpAccoladeType::last_hits,
                    MvpAccoladeType::denies,
                    MvpAccoladeType::kKillEaterEvent_Killing_Sprees,
                    MvpAccoladeType::kKillEaterEvent_Godlike,
                    MvpAccoladeType::kKillEaterEvent_Towers_Destroyed,
                    MvpAccoladeType::kKillEaterEventType_Invoker_SunstrikeKills,
                    MvpAccoladeType::kKillEaterEventType_Axe_Culls,
                    MvpAccoladeType::kKillEaterEventType_Axe_BattleHungerKills,
                    MvpAccoladeType::kKillEaterEventType_LowHealthKills,
                    MvpAccoladeType::kKillEaterEventType_Invoker_TornadoKills,
                    MvpAccoladeType::kKillEaterEventType_Sven_DoubleStuns,
                    MvpAccoladeType::kKillEaterEventType_Sven_WarcryAssists,
                    MvpAccoladeType::kKillEaterEventType_Sven_CleaveDoubleKills,
                    MvpAccoladeType::kKillEaterEventType_Sven_TeleportInterrupts,
                    MvpAccoladeType::kKillEaterEventType_Faceless_MultiChrono,
                    MvpAccoladeType::kKillEaterEventType_Faceless_ChronoKills,
                    MvpAccoladeType::kKillEaterEventType_Ursa_MultiShocks,
                    MvpAccoladeType::kKillEaterEventType_RoshanKills,
                    MvpAccoladeType::kKillEaterEventType_Lion_FingerKills,
                    MvpAccoladeType::kKillEaterEventType_Riki_SmokedHeroKills,
                    MvpAccoladeType::kKillEaterEventType_HeroesRevealedWithDust,
                    MvpAccoladeType::kKillEaterEventType_SkeletonKing_ReincarnationKills,
                    MvpAccoladeType::kKillEaterEventType_Skywrath_FlareKills,
                    MvpAccoladeType::kKillEaterEventType_Leshrac_SplitEarthStuns,
                    MvpAccoladeType::kKillEaterEventType_Mirana_MaxStunArrows,
                    MvpAccoladeType::kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits,
                    MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerCrits,
                    MvpAccoladeType::kKillEaterEventType_Meepo_Earthbinds,
                    MvpAccoladeType::kKillEaterEventType_Bloodseeker_RuptureKills,
                    MvpAccoladeType::kKillEaterEventType_Slark_LeashedEnemies,
                    MvpAccoladeType::kKillEaterEventType_Disruptor_FountainGlimpses,
                    MvpAccoladeType::kKillEaterEventType_Rubick_SpellsStolen,
                    MvpAccoladeType::kKillEaterEventType_Rubick_UltimatesStolen,
                    MvpAccoladeType::kKillEaterEventType_Doom_EnemiesDoomed,
                    MvpAccoladeType::kKillEaterEventType_Omniknight_Purifications,
                    MvpAccoladeType::kKillEaterEventType_Omniknight_AlliesRepelled,
                    MvpAccoladeType::kKillEaterEventType_Omniknight_EnemiesRepelled,
                    MvpAccoladeType::kKillEaterEventType_Warlock_FiveHeroFatalBonds,
                    MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FrostbittenEnemies,
                    MvpAccoladeType::kKillEaterEventType_CrystalMaiden_CrystalNovas,
                    MvpAccoladeType::kKillEaterEventType_Kunkka_DoubleHeroTorrents,
                    MvpAccoladeType::kKillEaterEventType_Kunkka_TripleHeroGhostShips,
                    MvpAccoladeType::kKillEaterEventType_NagaSiren_EnemiesEnsnared,
                    MvpAccoladeType::kKillEaterEventType_NagaSiren_TripleHeroRipTides,
                    MvpAccoladeType::kKillEaterEventType_Lycan_KillsDuringShapeshift,
                    MvpAccoladeType::kKillEaterEventType_Pudge_DismemberKills,
                    MvpAccoladeType::kKillEaterEventType_Pudge_EnemyHeroesHooked,
                    MvpAccoladeType::kKillEaterEventType_Pudge_HookKills,
                    MvpAccoladeType::kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked,
                    MvpAccoladeType::kKillEaterEventType_DrowRanger_EnemiesSilenced,
                    MvpAccoladeType::kKillEaterEventType_DrowRanger_MultiHeroSilences,
                    MvpAccoladeType::kKillEaterEventType_DrowRanger_SilencedKills,
                    MvpAccoladeType::kKillEaterEventType_DrowRanger_FrostArrowKills,
                    MvpAccoladeType::kKillEaterEventType_DragonKnight_KillsInDragonForm,
                    MvpAccoladeType::kKillEaterEventType_DragonKnight_BreatheFireKills,
                    MvpAccoladeType::kKillEaterEventType_DragonKnight_SplashKills,
                    MvpAccoladeType::kKillEaterEventType_WitchDoctor_CaskStuns,
                    MvpAccoladeType::kKillEaterEventType_WitchDoctor_MaledictKills,
                    MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroMaledicts,
                    MvpAccoladeType::kKillEaterEventType_WitchDoctor_DeathWardKills,
                    MvpAccoladeType::kKillEaterEventType_Disruptor_ThunderStrikeKills,
                    MvpAccoladeType::kKillEaterEventType_Disruptor_HeroesGlimpsed,
                    MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FreezingFieldKills,
                    MvpAccoladeType::kKillEaterEventType_Medusa_EnemiesPetrified,
                    MvpAccoladeType::kKillEaterEventType_Warlock_FatalBondsKills,
                    MvpAccoladeType::kKillEaterEventType_Warlock_GolemKills,
                    MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunches,
                    MvpAccoladeType::kKillEaterEventType_Tusk_SnowballStuns,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureStuns,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_3HeroEchoslams,
                    MvpAccoladeType::kKillEaterEventType_SandKing_BurrowstrikeStuns,
                    MvpAccoladeType::kKillEaterEventType_SandKing_EpicenterKills,
                    MvpAccoladeType::kKillEaterEventType_SkywrathMage_AncientSealKills,
                    MvpAccoladeType::kKillEaterEventType_SkywrathMage_ConcussiveShotKills,
                    MvpAccoladeType::kKillEaterEventType_Luna_LucentBeamKills,
                    MvpAccoladeType::kKillEaterEventType_Luna_EclipseKills,
                    MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_IlluminateKills,
                    MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns,
                    MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled,
                    MvpAccoladeType::kKillEaterEventType_LegionCommander_DuelsWon,
                    MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarKills,
                    MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarMultiKills,
                    MvpAccoladeType::kKillEaterEventType_Windrunner_FocusFireBuildings,
                    MvpAccoladeType::kKillEaterEventType_Windrunner_PowershotKills,
                    MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerLastHits,
                    MvpAccoladeType::kKillEaterEventType_PhantomAssassin_PhantomStrikeKills,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_CryptSwarmKills,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismBuildingKills,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_MultiHeroSilences,
                    MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilKills,
                    MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilHealed,
                    MvpAccoladeType::kKillEaterEventType_Abaddon_AphoticShieldKills,
                    MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostTripleKills,
                    MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostMultiKills,
                    MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostBounces,
                    MvpAccoladeType::kKillEaterEventType_Ursa_EnragedKills,
                    MvpAccoladeType::kKillEaterEventType_Ursa_EarthshockKills,
                    MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeKills,
                    MvpAccoladeType::kKillEaterEventType_Lina_DragonSlaveKills,
                    MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeArrayStuns,
                    MvpAccoladeType::kKillEaterEvent_Barracks_Destroyed,
                    MvpAccoladeType::kKillEaterEvent_TemplarAssassin_MeldKills,
                    MvpAccoladeType::kKillEaterEvent_TemplarAssassin_HeroesSlowed,
                    MvpAccoladeType::kKillEaterEvent_Sniper_AssassinationKills,
                    MvpAccoladeType::kKillEaterEvent_Sniper_HeadshotStuns,
                    MvpAccoladeType::kKillEaterEvent_EarthSpirit_SmashStuns,
                    MvpAccoladeType::kKillEaterEvent_EarthSpirit_GripSilences,
                    MvpAccoladeType::kKillEaterEvent_ShadowShaman_ShackleKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowShaman_HexKills,
                    MvpAccoladeType::kKillEaterEvent_Centaur_EnemiesStomped,
                    MvpAccoladeType::kKillEaterEvent_Centaur_DoubleEdgeKills,
                    MvpAccoladeType::kKillEaterEvent_Centaur_ReturnKills,
                    MvpAccoladeType::kKillEaterEvent_EmberSpirit_EnemiesChained,
                    MvpAccoladeType::kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills,
                    MvpAccoladeType::kKillEaterEvent_Puck_OrbKills,
                    MvpAccoladeType::kKillEaterEvent_VengefulSpirit_EnemiesStunned,
                    MvpAccoladeType::kKillEaterEvent_Lifestealer_RageKills,
                    MvpAccoladeType::kKillEaterEvent_Lifestealer_OpenWoundsKills,
                    MvpAccoladeType::kKillEaterEvent_Lifestealer_InfestKills,
                    MvpAccoladeType::kKillEaterEvent_ElderTitan_SpiritKills,
                    MvpAccoladeType::kKillEaterEvent_ElderTitan_GoodStomps,
                    MvpAccoladeType::kKillEaterEvent_Clockwerk_RocketKills,
                    MvpAccoladeType::kKillEaterEvent_Clockwerk_BlindRocketKills,
                    MvpAccoladeType::kKillEaterEvent_StormSpirit_BallKills,
                    MvpAccoladeType::kKillEaterEvent_StormSpirit_DoubleRemnantKills,
                    MvpAccoladeType::kKillEaterEvent_StormSpirit_VortexKills,
                    MvpAccoladeType::kKillEaterEvent_Tinker_DoubleMissileKills,
                    MvpAccoladeType::kKillEaterEvent_Tinker_LaserKills,
                    MvpAccoladeType::kKillEaterEvent_Techies_SuicideKills,
                    MvpAccoladeType::kKillEaterEvent_Techies_LandMineKills,
                    MvpAccoladeType::kKillEaterEvent_Techies_StatisTrapStuns,
                    MvpAccoladeType::kKillEaterEvent_Techies_RemoteMineKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowFiend_TripleRazeKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowFiend_RequiemMultiKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowFiend_QRazeKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowFiend_WRazeKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowFiend_ERazeKills,
                    MvpAccoladeType::kKillEaterEvent_Oracle_FatesEdictKills,
                    MvpAccoladeType::kKillEaterEvent_Oracle_FalsePromiseSaves,
                    MvpAccoladeType::kKillEaterEvent_Juggernaut_OmnislashKills,
                    MvpAccoladeType::kKillEaterEventType_SkeletonKing_SkeletonHeroKills,
                    MvpAccoladeType::kKillEaterEventType_DarkWillow_CursedCrownTripleStuns,
                    MvpAccoladeType::kKillEaterEventType_Dazzle_ShallowGraveSaves,
                    MvpAccoladeType::kKillEaterEventType_Dazzle_PoisonTouchKills,
                    MvpAccoladeType::kKillEaterEventType_ThreeManMeks,
                    MvpAccoladeType::kKillEaterEventType_Viper_PoisonAttackKills,
                    MvpAccoladeType::kKillEaterEventType_Viper_CorrosiveSkinKills,
                    MvpAccoladeType::kKillEaterEventType_ThreeHeroVeils,
                    MvpAccoladeType::kKillEaterEventType_Viper_KillsDuringViperStrike,
                    MvpAccoladeType::kKillEaterEventType_SolarCrestKills,
                    MvpAccoladeType::kKillEaterEventType_Tiny_TreeThrowKills,
                    MvpAccoladeType::kKillEaterEventType_Riki_BackstabKills,
                    MvpAccoladeType::kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns,
                    MvpAccoladeType::kKillEaterEventType_Terrorblade_MetamorphosisKills,
                    MvpAccoladeType::kKillEaterEventType_Lion_GreatFingerKills,
                    MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithAghanims,
                    MvpAccoladeType::kKillEaterEventType_Antimage_ThreeManManaVoids,
                    MvpAccoladeType::kKillEaterEventType_ArcWarden_TempestDoubleKills,
                    MvpAccoladeType::kKillEaterEventType_ArcWarden_SparkWraithKills,
                    MvpAccoladeType::kKillEaterEventType_Bane_BrainSapKills,
                    MvpAccoladeType::kKillEaterEventType_Bane_FiendsGripKills,
                    MvpAccoladeType::kKillEaterEventType_Batrider_TripleHeroFlamebreaks,
                    MvpAccoladeType::kKillEaterEventType_Batrider_DoubleHeroLassoes,
                    MvpAccoladeType::kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit,
                    MvpAccoladeType::kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks,
                    MvpAccoladeType::kKillEaterEventType_Bristleback_TripleHeroNasalGoo,
                    MvpAccoladeType::kKillEaterEventType_Broodmother_SpiderlingHeroKills,
                    MvpAccoladeType::kKillEaterEventType_Broodmother_KillsInsideWeb,
                    MvpAccoladeType::kKillEaterEventType_Centaur_ThreeHeroStampede,
                    MvpAccoladeType::kKillEaterEventType_ChaosKnight_RealityRiftKills,
                    MvpAccoladeType::kKillEaterEventType_Chen_KillsWithPenitence,
                    MvpAccoladeType::kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas,
                    MvpAccoladeType::kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields,
                    MvpAccoladeType::kKillEaterEventType_Dazzle_ShadowWaveKills,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_SiphonKills,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls,
                    MvpAccoladeType::kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm,
                    MvpAccoladeType::kKillEaterEventType_Doom_InfernalBladeBurnKills,
                    MvpAccoladeType::kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills,
                    MvpAccoladeType::kKillEaterEventType_EmberSpirit_RemnantKills,
                    MvpAccoladeType::kKillEaterEventType_EmberSpirit_SleightOfFistKills,
                    MvpAccoladeType::kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos,
                    MvpAccoladeType::kKillEaterEventType_Enigma_ThreeManBlackHoles,
                    MvpAccoladeType::kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation,
                    MvpAccoladeType::kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon,
                    MvpAccoladeType::kKillEaterEventType_Gyrocopter_HomingMissileKills,
                    MvpAccoladeType::kKillEaterEventType_Gyrocopter_RocketBarrageKills,
                    MvpAccoladeType::kKillEaterEventType_Huskar_KillsDuringLifeBreak,
                    MvpAccoladeType::kKillEaterEventType_Huskar_BurningSpearKills,
                    MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroIceWall,
                    MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroEMP,
                    MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast,
                    MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroChaosMeteor,
                    MvpAccoladeType::kKillEaterEventType_Jakiro_MultiHeroDualBreath,
                    MvpAccoladeType::kKillEaterEventType_Jakiro_IcePathMacropyreCombos,
                    MvpAccoladeType::kKillEaterEventType_Leshrac_PulseNovaKills,
                    MvpAccoladeType::kKillEaterEventType_Leshrac_ThreeHeroLightningStorm,
                    MvpAccoladeType::kKillEaterEventType_Lion_ThreeHeroFingerOfDeath,
                    MvpAccoladeType::kKillEaterEventType_Meepo_PoofKills,
                    MvpAccoladeType::kKillEaterEventType_Meepo_MultiHeroEarthbinds,
                    MvpAccoladeType::kKillEaterEventType_NightStalker_NighttimeKills,
                    MvpAccoladeType::kKillEaterEventType_Morphling_KillsDuringReplicate,
                    MvpAccoladeType::kKillEaterEventType_OgreMagi_FireblastKills,
                    MvpAccoladeType::kKillEaterEventType_OgreMagi_IgniteKills,
                    MvpAccoladeType::kKillEaterEventType_DominatingKillStreaks,
                    MvpAccoladeType::kKillEaterEventType_MegaKillStreaks,
                    MvpAccoladeType::kKillEaterEventType_Alchemist_AghanimsGiven,
                    MvpAccoladeType::kKillEaterEventType_VeilsLeadingToKills,
                    MvpAccoladeType::kKillEaterEventType_DustLeadingToKills,
                    MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns,
                    MvpAccoladeType::kKillEaterEventType_Weaver_ShukuchiKills,
                    MvpAccoladeType::kKillEaterEventType_Windrunner_ShackleFocusFireKills,
                    MvpAccoladeType::kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills,
                    MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunchKills,
                    MvpAccoladeType::kKillEaterEventType_Tinker_MultiHeroLasers,
                    MvpAccoladeType::kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades,
                    MvpAccoladeType::kKillEaterEventType_Sven_KillsDuringGodsStrength,
                    MvpAccoladeType::kKillEaterEventType_Sniper_ThreeHeroShrapnels,
                    MvpAccoladeType::kKillEaterEventType_Slark_KillsDuringShadowDance,
                    MvpAccoladeType::kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks,
                    MvpAccoladeType::kKillEaterEventType_ShadowShaman_SerpentWardShackleKills,
                    MvpAccoladeType::kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade,
                    MvpAccoladeType::kKillEaterEventType_Razor_EyeOfTheStormKills,
                    MvpAccoladeType::kKillEaterEventType_Pugna_LifeDrainKills,
                    MvpAccoladeType::kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills,
                    MvpAccoladeType::kKillEaterEventType_Oracle_MultiHeroFortunesEnd,
                    MvpAccoladeType::kKillEaterEventType_Omniknight_PurificationKills,
                    MvpAccoladeType::kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear,
                    MvpAccoladeType::kKillEaterEventType_Warlock_ThreeHeroFatalBonds,
                    MvpAccoladeType::kKillEaterEventType_Riki_TricksOfTheTradeKills,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_AftershockHits10,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_5HeroEchoslams,
                    MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeHeroKills,
                    MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeHeroStuns,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureMultiStuns,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_TotemKills,
                    MvpAccoladeType::kKillEaterEventType_Pangolier_SwashbuckleKills,
                    MvpAccoladeType::kKillEaterEventType_Furion_EnemyHeroesTrapped,
                    MvpAccoladeType::kKillEaterEventType_Pangolier_HeartpiercerKills,
                    MvpAccoladeType::kKillEaterEventType_Medusa_MultiHeroStoneGaze,
                    MvpAccoladeType::kKillEaterEventType_Medusa_SplitShotKills,
                    MvpAccoladeType::kKillEaterEventType_Mirana_MultiHeroStarstorm,
                    MvpAccoladeType::kKillEaterEventType_Mirana_KillsFromMoonlightShadow,
                    MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroSkewers,
                    MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroReversePolarity,
                    MvpAccoladeType::kKillEaterEventType_Magnus_HeroesSlowedWithShockwave,
                    MvpAccoladeType::kKillEaterEventType_NagaSiren_MultiHeroSong,
                    MvpAccoladeType::kKillEaterEventType_NagaSiren_AlliesHealedBySong,
                    MvpAccoladeType::kKillEaterEventType_LoneDruid_MultiHeroRoar,
                    MvpAccoladeType::kKillEaterEventType_LoneDruid_BattleCryKills,
                    MvpAccoladeType::kKillEaterEventType_WinterWyvern_ThreeHeroCurses,
                    MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell,
                    MvpAccoladeType::kKillEaterEventType_Mars_EnemiesKilledInArena,
                    MvpAccoladeType::kKillEaterEventType_Mars_MultiHeroGodsRebuke,
                    MvpAccoladeType::kKillEaterEventType_Mars_GodsRebukeKills,
                    MvpAccoladeType::kKillEaterEventType_Snapfire_LizardBlobsKills,
                    MvpAccoladeType::kKillEaterEventType_Snapfire_TwoHeroCookieStuns,
                    MvpAccoladeType::Custom_KillStreak,
                    MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotKills,
                    MvpAccoladeType::kKillEaterEventType_Muerta_PierceTheVeilKills,
                    MvpAccoladeType::kKillEaterEventType_Muerta_MultiHeroDeadShot,
                    MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotsIntoTheCalling,
                ];
            }

            impl ::protobuf::EnumFull for MvpAccoladeType {
                fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().enum_by_package_relative_name("CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType").unwrap()).clone()
                }

                fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                    let index = match self {
                        MvpAccoladeType::kills => 0,
                        MvpAccoladeType::deaths => 1,
                        MvpAccoladeType::assists => 2,
                        MvpAccoladeType::net_worth => 3,
                        MvpAccoladeType::item_value => 4,
                        MvpAccoladeType::support_gold_spent => 5,
                        MvpAccoladeType::wards_placed => 6,
                        MvpAccoladeType::dewards => 7,
                        MvpAccoladeType::camps_stacked => 8,
                        MvpAccoladeType::last_hits => 9,
                        MvpAccoladeType::denies => 10,
                        MvpAccoladeType::kKillEaterEvent_Killing_Sprees => 11,
                        MvpAccoladeType::kKillEaterEvent_Godlike => 12,
                        MvpAccoladeType::kKillEaterEvent_Towers_Destroyed => 13,
                        MvpAccoladeType::kKillEaterEventType_Invoker_SunstrikeKills => 14,
                        MvpAccoladeType::kKillEaterEventType_Axe_Culls => 15,
                        MvpAccoladeType::kKillEaterEventType_Axe_BattleHungerKills => 16,
                        MvpAccoladeType::kKillEaterEventType_LowHealthKills => 17,
                        MvpAccoladeType::kKillEaterEventType_Invoker_TornadoKills => 18,
                        MvpAccoladeType::kKillEaterEventType_Sven_DoubleStuns => 19,
                        MvpAccoladeType::kKillEaterEventType_Sven_WarcryAssists => 20,
                        MvpAccoladeType::kKillEaterEventType_Sven_CleaveDoubleKills => 21,
                        MvpAccoladeType::kKillEaterEventType_Sven_TeleportInterrupts => 22,
                        MvpAccoladeType::kKillEaterEventType_Faceless_MultiChrono => 23,
                        MvpAccoladeType::kKillEaterEventType_Faceless_ChronoKills => 24,
                        MvpAccoladeType::kKillEaterEventType_Ursa_MultiShocks => 25,
                        MvpAccoladeType::kKillEaterEventType_RoshanKills => 26,
                        MvpAccoladeType::kKillEaterEventType_Lion_FingerKills => 27,
                        MvpAccoladeType::kKillEaterEventType_Riki_SmokedHeroKills => 28,
                        MvpAccoladeType::kKillEaterEventType_HeroesRevealedWithDust => 29,
                        MvpAccoladeType::kKillEaterEventType_SkeletonKing_ReincarnationKills => 30,
                        MvpAccoladeType::kKillEaterEventType_Skywrath_FlareKills => 31,
                        MvpAccoladeType::kKillEaterEventType_Leshrac_SplitEarthStuns => 32,
                        MvpAccoladeType::kKillEaterEventType_Mirana_MaxStunArrows => 33,
                        MvpAccoladeType::kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits => 34,
                        MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerCrits => 35,
                        MvpAccoladeType::kKillEaterEventType_Meepo_Earthbinds => 36,
                        MvpAccoladeType::kKillEaterEventType_Bloodseeker_RuptureKills => 37,
                        MvpAccoladeType::kKillEaterEventType_Slark_LeashedEnemies => 38,
                        MvpAccoladeType::kKillEaterEventType_Disruptor_FountainGlimpses => 39,
                        MvpAccoladeType::kKillEaterEventType_Rubick_SpellsStolen => 40,
                        MvpAccoladeType::kKillEaterEventType_Rubick_UltimatesStolen => 41,
                        MvpAccoladeType::kKillEaterEventType_Doom_EnemiesDoomed => 42,
                        MvpAccoladeType::kKillEaterEventType_Omniknight_Purifications => 43,
                        MvpAccoladeType::kKillEaterEventType_Omniknight_AlliesRepelled => 44,
                        MvpAccoladeType::kKillEaterEventType_Omniknight_EnemiesRepelled => 45,
                        MvpAccoladeType::kKillEaterEventType_Warlock_FiveHeroFatalBonds => 46,
                        MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FrostbittenEnemies => 47,
                        MvpAccoladeType::kKillEaterEventType_CrystalMaiden_CrystalNovas => 48,
                        MvpAccoladeType::kKillEaterEventType_Kunkka_DoubleHeroTorrents => 49,
                        MvpAccoladeType::kKillEaterEventType_Kunkka_TripleHeroGhostShips => 50,
                        MvpAccoladeType::kKillEaterEventType_NagaSiren_EnemiesEnsnared => 51,
                        MvpAccoladeType::kKillEaterEventType_NagaSiren_TripleHeroRipTides => 52,
                        MvpAccoladeType::kKillEaterEventType_Lycan_KillsDuringShapeshift => 53,
                        MvpAccoladeType::kKillEaterEventType_Pudge_DismemberKills => 54,
                        MvpAccoladeType::kKillEaterEventType_Pudge_EnemyHeroesHooked => 55,
                        MvpAccoladeType::kKillEaterEventType_Pudge_HookKills => 56,
                        MvpAccoladeType::kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked => 57,
                        MvpAccoladeType::kKillEaterEventType_DrowRanger_EnemiesSilenced => 58,
                        MvpAccoladeType::kKillEaterEventType_DrowRanger_MultiHeroSilences => 59,
                        MvpAccoladeType::kKillEaterEventType_DrowRanger_SilencedKills => 60,
                        MvpAccoladeType::kKillEaterEventType_DrowRanger_FrostArrowKills => 61,
                        MvpAccoladeType::kKillEaterEventType_DragonKnight_KillsInDragonForm => 62,
                        MvpAccoladeType::kKillEaterEventType_DragonKnight_BreatheFireKills => 63,
                        MvpAccoladeType::kKillEaterEventType_DragonKnight_SplashKills => 64,
                        MvpAccoladeType::kKillEaterEventType_WitchDoctor_CaskStuns => 65,
                        MvpAccoladeType::kKillEaterEventType_WitchDoctor_MaledictKills => 66,
                        MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroMaledicts => 67,
                        MvpAccoladeType::kKillEaterEventType_WitchDoctor_DeathWardKills => 68,
                        MvpAccoladeType::kKillEaterEventType_Disruptor_ThunderStrikeKills => 69,
                        MvpAccoladeType::kKillEaterEventType_Disruptor_HeroesGlimpsed => 70,
                        MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FreezingFieldKills => 71,
                        MvpAccoladeType::kKillEaterEventType_Medusa_EnemiesPetrified => 72,
                        MvpAccoladeType::kKillEaterEventType_Warlock_FatalBondsKills => 73,
                        MvpAccoladeType::kKillEaterEventType_Warlock_GolemKills => 74,
                        MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunches => 75,
                        MvpAccoladeType::kKillEaterEventType_Tusk_SnowballStuns => 76,
                        MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureStuns => 77,
                        MvpAccoladeType::kKillEaterEventType_Earthshaker_3HeroEchoslams => 78,
                        MvpAccoladeType::kKillEaterEventType_SandKing_BurrowstrikeStuns => 79,
                        MvpAccoladeType::kKillEaterEventType_SandKing_EpicenterKills => 80,
                        MvpAccoladeType::kKillEaterEventType_SkywrathMage_AncientSealKills => 81,
                        MvpAccoladeType::kKillEaterEventType_SkywrathMage_ConcussiveShotKills => 82,
                        MvpAccoladeType::kKillEaterEventType_Luna_LucentBeamKills => 83,
                        MvpAccoladeType::kKillEaterEventType_Luna_EclipseKills => 84,
                        MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_IlluminateKills => 85,
                        MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns => 86,
                        MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled => 87,
                        MvpAccoladeType::kKillEaterEventType_LegionCommander_DuelsWon => 88,
                        MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarKills => 89,
                        MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarMultiKills => 90,
                        MvpAccoladeType::kKillEaterEventType_Windrunner_FocusFireBuildings => 91,
                        MvpAccoladeType::kKillEaterEventType_Windrunner_PowershotKills => 92,
                        MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerLastHits => 93,
                        MvpAccoladeType::kKillEaterEventType_PhantomAssassin_PhantomStrikeKills => 94,
                        MvpAccoladeType::kKillEaterEventType_DeathProphet_CryptSwarmKills => 95,
                        MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismBuildingKills => 96,
                        MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned => 97,
                        MvpAccoladeType::kKillEaterEventType_DeathProphet_MultiHeroSilences => 98,
                        MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilKills => 99,
                        MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilHealed => 100,
                        MvpAccoladeType::kKillEaterEventType_Abaddon_AphoticShieldKills => 101,
                        MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostTripleKills => 102,
                        MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostMultiKills => 103,
                        MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostBounces => 104,
                        MvpAccoladeType::kKillEaterEventType_Ursa_EnragedKills => 105,
                        MvpAccoladeType::kKillEaterEventType_Ursa_EarthshockKills => 106,
                        MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeKills => 107,
                        MvpAccoladeType::kKillEaterEventType_Lina_DragonSlaveKills => 108,
                        MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeArrayStuns => 109,
                        MvpAccoladeType::kKillEaterEvent_Barracks_Destroyed => 110,
                        MvpAccoladeType::kKillEaterEvent_TemplarAssassin_MeldKills => 111,
                        MvpAccoladeType::kKillEaterEvent_TemplarAssassin_HeroesSlowed => 112,
                        MvpAccoladeType::kKillEaterEvent_Sniper_AssassinationKills => 113,
                        MvpAccoladeType::kKillEaterEvent_Sniper_HeadshotStuns => 114,
                        MvpAccoladeType::kKillEaterEvent_EarthSpirit_SmashStuns => 115,
                        MvpAccoladeType::kKillEaterEvent_EarthSpirit_GripSilences => 116,
                        MvpAccoladeType::kKillEaterEvent_ShadowShaman_ShackleKills => 117,
                        MvpAccoladeType::kKillEaterEvent_ShadowShaman_HexKills => 118,
                        MvpAccoladeType::kKillEaterEvent_Centaur_EnemiesStomped => 119,
                        MvpAccoladeType::kKillEaterEvent_Centaur_DoubleEdgeKills => 120,
                        MvpAccoladeType::kKillEaterEvent_Centaur_ReturnKills => 121,
                        MvpAccoladeType::kKillEaterEvent_EmberSpirit_EnemiesChained => 122,
                        MvpAccoladeType::kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills => 123,
                        MvpAccoladeType::kKillEaterEvent_Puck_OrbKills => 124,
                        MvpAccoladeType::kKillEaterEvent_VengefulSpirit_EnemiesStunned => 125,
                        MvpAccoladeType::kKillEaterEvent_Lifestealer_RageKills => 126,
                        MvpAccoladeType::kKillEaterEvent_Lifestealer_OpenWoundsKills => 127,
                        MvpAccoladeType::kKillEaterEvent_Lifestealer_InfestKills => 128,
                        MvpAccoladeType::kKillEaterEvent_ElderTitan_SpiritKills => 129,
                        MvpAccoladeType::kKillEaterEvent_ElderTitan_GoodStomps => 130,
                        MvpAccoladeType::kKillEaterEvent_Clockwerk_RocketKills => 131,
                        MvpAccoladeType::kKillEaterEvent_Clockwerk_BlindRocketKills => 132,
                        MvpAccoladeType::kKillEaterEvent_StormSpirit_BallKills => 133,
                        MvpAccoladeType::kKillEaterEvent_StormSpirit_DoubleRemnantKills => 134,
                        MvpAccoladeType::kKillEaterEvent_StormSpirit_VortexKills => 135,
                        MvpAccoladeType::kKillEaterEvent_Tinker_DoubleMissileKills => 136,
                        MvpAccoladeType::kKillEaterEvent_Tinker_LaserKills => 137,
                        MvpAccoladeType::kKillEaterEvent_Techies_SuicideKills => 138,
                        MvpAccoladeType::kKillEaterEvent_Techies_LandMineKills => 139,
                        MvpAccoladeType::kKillEaterEvent_Techies_StatisTrapStuns => 140,
                        MvpAccoladeType::kKillEaterEvent_Techies_RemoteMineKills => 141,
                        MvpAccoladeType::kKillEaterEvent_ShadowFiend_TripleRazeKills => 142,
                        MvpAccoladeType::kKillEaterEvent_ShadowFiend_RequiemMultiKills => 143,
                        MvpAccoladeType::kKillEaterEvent_ShadowFiend_QRazeKills => 144,
                        MvpAccoladeType::kKillEaterEvent_ShadowFiend_WRazeKills => 145,
                        MvpAccoladeType::kKillEaterEvent_ShadowFiend_ERazeKills => 146,
                        MvpAccoladeType::kKillEaterEvent_Oracle_FatesEdictKills => 147,
                        MvpAccoladeType::kKillEaterEvent_Oracle_FalsePromiseSaves => 148,
                        MvpAccoladeType::kKillEaterEvent_Juggernaut_OmnislashKills => 149,
                        MvpAccoladeType::kKillEaterEventType_SkeletonKing_SkeletonHeroKills => 150,
                        MvpAccoladeType::kKillEaterEventType_DarkWillow_CursedCrownTripleStuns => 151,
                        MvpAccoladeType::kKillEaterEventType_Dazzle_ShallowGraveSaves => 152,
                        MvpAccoladeType::kKillEaterEventType_Dazzle_PoisonTouchKills => 153,
                        MvpAccoladeType::kKillEaterEventType_ThreeManMeks => 154,
                        MvpAccoladeType::kKillEaterEventType_Viper_PoisonAttackKills => 155,
                        MvpAccoladeType::kKillEaterEventType_Viper_CorrosiveSkinKills => 156,
                        MvpAccoladeType::kKillEaterEventType_ThreeHeroVeils => 157,
                        MvpAccoladeType::kKillEaterEventType_Viper_KillsDuringViperStrike => 158,
                        MvpAccoladeType::kKillEaterEventType_SolarCrestKills => 159,
                        MvpAccoladeType::kKillEaterEventType_Tiny_TreeThrowKills => 160,
                        MvpAccoladeType::kKillEaterEventType_Riki_BackstabKills => 161,
                        MvpAccoladeType::kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns => 162,
                        MvpAccoladeType::kKillEaterEventType_Terrorblade_MetamorphosisKills => 163,
                        MvpAccoladeType::kKillEaterEventType_Lion_GreatFingerKills => 164,
                        MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithAghanims => 165,
                        MvpAccoladeType::kKillEaterEventType_Antimage_ThreeManManaVoids => 166,
                        MvpAccoladeType::kKillEaterEventType_ArcWarden_TempestDoubleKills => 167,
                        MvpAccoladeType::kKillEaterEventType_ArcWarden_SparkWraithKills => 168,
                        MvpAccoladeType::kKillEaterEventType_Bane_BrainSapKills => 169,
                        MvpAccoladeType::kKillEaterEventType_Bane_FiendsGripKills => 170,
                        MvpAccoladeType::kKillEaterEventType_Batrider_TripleHeroFlamebreaks => 171,
                        MvpAccoladeType::kKillEaterEventType_Batrider_DoubleHeroLassoes => 172,
                        MvpAccoladeType::kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit => 173,
                        MvpAccoladeType::kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks => 174,
                        MvpAccoladeType::kKillEaterEventType_Bristleback_TripleHeroNasalGoo => 175,
                        MvpAccoladeType::kKillEaterEventType_Broodmother_SpiderlingHeroKills => 176,
                        MvpAccoladeType::kKillEaterEventType_Broodmother_KillsInsideWeb => 177,
                        MvpAccoladeType::kKillEaterEventType_Centaur_ThreeHeroStampede => 178,
                        MvpAccoladeType::kKillEaterEventType_ChaosKnight_RealityRiftKills => 179,
                        MvpAccoladeType::kKillEaterEventType_Chen_KillsWithPenitence => 180,
                        MvpAccoladeType::kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas => 181,
                        MvpAccoladeType::kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields => 182,
                        MvpAccoladeType::kKillEaterEventType_Dazzle_ShadowWaveKills => 183,
                        MvpAccoladeType::kKillEaterEventType_DeathProphet_SiphonKills => 184,
                        MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls => 185,
                        MvpAccoladeType::kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm => 186,
                        MvpAccoladeType::kKillEaterEventType_Doom_InfernalBladeBurnKills => 187,
                        MvpAccoladeType::kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills => 188,
                        MvpAccoladeType::kKillEaterEventType_EmberSpirit_RemnantKills => 189,
                        MvpAccoladeType::kKillEaterEventType_EmberSpirit_SleightOfFistKills => 190,
                        MvpAccoladeType::kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos => 191,
                        MvpAccoladeType::kKillEaterEventType_Enigma_ThreeManBlackHoles => 192,
                        MvpAccoladeType::kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation => 193,
                        MvpAccoladeType::kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon => 194,
                        MvpAccoladeType::kKillEaterEventType_Gyrocopter_HomingMissileKills => 195,
                        MvpAccoladeType::kKillEaterEventType_Gyrocopter_RocketBarrageKills => 196,
                        MvpAccoladeType::kKillEaterEventType_Huskar_KillsDuringLifeBreak => 197,
                        MvpAccoladeType::kKillEaterEventType_Huskar_BurningSpearKills => 198,
                        MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroIceWall => 199,
                        MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroEMP => 200,
                        MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast => 201,
                        MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroChaosMeteor => 202,
                        MvpAccoladeType::kKillEaterEventType_Jakiro_MultiHeroDualBreath => 203,
                        MvpAccoladeType::kKillEaterEventType_Jakiro_IcePathMacropyreCombos => 204,
                        MvpAccoladeType::kKillEaterEventType_Leshrac_PulseNovaKills => 205,
                        MvpAccoladeType::kKillEaterEventType_Leshrac_ThreeHeroLightningStorm => 206,
                        MvpAccoladeType::kKillEaterEventType_Lion_ThreeHeroFingerOfDeath => 207,
                        MvpAccoladeType::kKillEaterEventType_Meepo_PoofKills => 208,
                        MvpAccoladeType::kKillEaterEventType_Meepo_MultiHeroEarthbinds => 209,
                        MvpAccoladeType::kKillEaterEventType_NightStalker_NighttimeKills => 210,
                        MvpAccoladeType::kKillEaterEventType_Morphling_KillsDuringReplicate => 211,
                        MvpAccoladeType::kKillEaterEventType_OgreMagi_FireblastKills => 212,
                        MvpAccoladeType::kKillEaterEventType_OgreMagi_IgniteKills => 213,
                        MvpAccoladeType::kKillEaterEventType_DominatingKillStreaks => 214,
                        MvpAccoladeType::kKillEaterEventType_MegaKillStreaks => 215,
                        MvpAccoladeType::kKillEaterEventType_Alchemist_AghanimsGiven => 216,
                        MvpAccoladeType::kKillEaterEventType_VeilsLeadingToKills => 217,
                        MvpAccoladeType::kKillEaterEventType_DustLeadingToKills => 218,
                        MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns => 219,
                        MvpAccoladeType::kKillEaterEventType_Weaver_ShukuchiKills => 220,
                        MvpAccoladeType::kKillEaterEventType_Windrunner_ShackleFocusFireKills => 221,
                        MvpAccoladeType::kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills => 222,
                        MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunchKills => 223,
                        MvpAccoladeType::kKillEaterEventType_Tinker_MultiHeroLasers => 224,
                        MvpAccoladeType::kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades => 225,
                        MvpAccoladeType::kKillEaterEventType_Sven_KillsDuringGodsStrength => 226,
                        MvpAccoladeType::kKillEaterEventType_Sniper_ThreeHeroShrapnels => 227,
                        MvpAccoladeType::kKillEaterEventType_Slark_KillsDuringShadowDance => 228,
                        MvpAccoladeType::kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks => 229,
                        MvpAccoladeType::kKillEaterEventType_ShadowShaman_SerpentWardShackleKills => 230,
                        MvpAccoladeType::kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade => 231,
                        MvpAccoladeType::kKillEaterEventType_Razor_EyeOfTheStormKills => 232,
                        MvpAccoladeType::kKillEaterEventType_Pugna_LifeDrainKills => 233,
                        MvpAccoladeType::kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills => 234,
                        MvpAccoladeType::kKillEaterEventType_Oracle_MultiHeroFortunesEnd => 235,
                        MvpAccoladeType::kKillEaterEventType_Omniknight_PurificationKills => 236,
                        MvpAccoladeType::kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear => 237,
                        MvpAccoladeType::kKillEaterEventType_Warlock_ThreeHeroFatalBonds => 238,
                        MvpAccoladeType::kKillEaterEventType_Riki_TricksOfTheTradeKills => 239,
                        MvpAccoladeType::kKillEaterEventType_Earthshaker_AftershockHits10 => 240,
                        MvpAccoladeType::kKillEaterEventType_Earthshaker_5HeroEchoslams => 241,
                        MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeHeroKills => 242,
                        MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeHeroStuns => 243,
                        MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureMultiStuns => 244,
                        MvpAccoladeType::kKillEaterEventType_Earthshaker_TotemKills => 245,
                        MvpAccoladeType::kKillEaterEventType_Pangolier_SwashbuckleKills => 246,
                        MvpAccoladeType::kKillEaterEventType_Furion_EnemyHeroesTrapped => 247,
                        MvpAccoladeType::kKillEaterEventType_Pangolier_HeartpiercerKills => 248,
                        MvpAccoladeType::kKillEaterEventType_Medusa_MultiHeroStoneGaze => 249,
                        MvpAccoladeType::kKillEaterEventType_Medusa_SplitShotKills => 250,
                        MvpAccoladeType::kKillEaterEventType_Mirana_MultiHeroStarstorm => 251,
                        MvpAccoladeType::kKillEaterEventType_Mirana_KillsFromMoonlightShadow => 252,
                        MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroSkewers => 253,
                        MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroReversePolarity => 254,
                        MvpAccoladeType::kKillEaterEventType_Magnus_HeroesSlowedWithShockwave => 255,
                        MvpAccoladeType::kKillEaterEventType_NagaSiren_MultiHeroSong => 256,
                        MvpAccoladeType::kKillEaterEventType_NagaSiren_AlliesHealedBySong => 257,
                        MvpAccoladeType::kKillEaterEventType_LoneDruid_MultiHeroRoar => 258,
                        MvpAccoladeType::kKillEaterEventType_LoneDruid_BattleCryKills => 259,
                        MvpAccoladeType::kKillEaterEventType_WinterWyvern_ThreeHeroCurses => 260,
                        MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell => 261,
                        MvpAccoladeType::kKillEaterEventType_Mars_EnemiesKilledInArena => 262,
                        MvpAccoladeType::kKillEaterEventType_Mars_MultiHeroGodsRebuke => 263,
                        MvpAccoladeType::kKillEaterEventType_Mars_GodsRebukeKills => 264,
                        MvpAccoladeType::kKillEaterEventType_Snapfire_LizardBlobsKills => 265,
                        MvpAccoladeType::kKillEaterEventType_Snapfire_TwoHeroCookieStuns => 266,
                        MvpAccoladeType::Custom_KillStreak => 267,
                        MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotKills => 268,
                        MvpAccoladeType::kKillEaterEventType_Muerta_PierceTheVeilKills => 269,
                        MvpAccoladeType::kKillEaterEventType_Muerta_MultiHeroDeadShot => 270,
                        MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotsIntoTheCalling => 271,
                    };
                    Self::enum_descriptor().value_by_index(index)
                }
            }

            // Note, `Default` is implemented although default value is not 0
            impl ::std::default::Default for MvpAccoladeType {
                fn default() -> Self {
                    MvpAccoladeType::kills
                }
            }

            impl MvpAccoladeType {
                pub(in super::super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                    ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MvpAccoladeType>("CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType")
                }
            }
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.ELaneSelection)
pub enum ELaneSelection {
    // @@protoc_insertion_point(enum_value:dota.ELaneSelection.k_ELaneSelection_SAFELANE)
    k_ELaneSelection_SAFELANE = 0,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelection.k_ELaneSelection_OFFLANE)
    k_ELaneSelection_OFFLANE = 1,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelection.k_ELaneSelection_MIDLANE)
    k_ELaneSelection_MIDLANE = 2,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelection.k_ELaneSelection_SUPPORT_SOFT)
    k_ELaneSelection_SUPPORT_SOFT = 3,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelection.k_ELaneSelection_SUPPORT_HARD)
    k_ELaneSelection_SUPPORT_HARD = 4,
}

impl ::protobuf::Enum for ELaneSelection {
    const NAME: &'static str = "ELaneSelection";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ELaneSelection> {
        match value {
            0 => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_SAFELANE),
            1 => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_OFFLANE),
            2 => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_MIDLANE),
            3 => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_SUPPORT_SOFT),
            4 => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_SUPPORT_HARD),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ELaneSelection> {
        match str {
            "k_ELaneSelection_SAFELANE" => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_SAFELANE),
            "k_ELaneSelection_OFFLANE" => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_OFFLANE),
            "k_ELaneSelection_MIDLANE" => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_MIDLANE),
            "k_ELaneSelection_SUPPORT_SOFT" => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_SUPPORT_SOFT),
            "k_ELaneSelection_SUPPORT_HARD" => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_SUPPORT_HARD),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ELaneSelection] = &[
        ELaneSelection::k_ELaneSelection_SAFELANE,
        ELaneSelection::k_ELaneSelection_OFFLANE,
        ELaneSelection::k_ELaneSelection_MIDLANE,
        ELaneSelection::k_ELaneSelection_SUPPORT_SOFT,
        ELaneSelection::k_ELaneSelection_SUPPORT_HARD,
    ];
}

impl ::protobuf::EnumFull for ELaneSelection {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ELaneSelection").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ELaneSelection {
    fn default() -> Self {
        ELaneSelection::k_ELaneSelection_SAFELANE
    }
}

impl ELaneSelection {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ELaneSelection>("ELaneSelection")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.ELaneSelectionFlags)
pub enum ELaneSelectionFlags {
    // @@protoc_insertion_point(enum_value:dota.ELaneSelectionFlags.k_ELaneSelectionFlags_None)
    k_ELaneSelectionFlags_None = 0,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelectionFlags.k_ELaneSelectionFlags_SAFELANE)
    k_ELaneSelectionFlags_SAFELANE = 1,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelectionFlags.k_ELaneSelectionFlags_OFFLANE)
    k_ELaneSelectionFlags_OFFLANE = 2,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelectionFlags.k_ELaneSelectionFlags_MIDLANE)
    k_ELaneSelectionFlags_MIDLANE = 4,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelectionFlags.k_ELaneSelectionFlags_SUPPORT_SOFT)
    k_ELaneSelectionFlags_SUPPORT_SOFT = 8,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelectionFlags.k_ELaneSelectionFlags_SUPPORT_HARD)
    k_ELaneSelectionFlags_SUPPORT_HARD = 16,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelectionFlags.k_ELaneSelectionFlags_CORE)
    k_ELaneSelectionFlags_CORE = 7,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelectionFlags.k_ELaneSelectionFlags_SUPPORT)
    k_ELaneSelectionFlags_SUPPORT = 24,
    // @@protoc_insertion_point(enum_value:dota.ELaneSelectionFlags.k_ELaneSelectionFlags_ALL)
    k_ELaneSelectionFlags_ALL = 31,
}

impl ::protobuf::Enum for ELaneSelectionFlags {
    const NAME: &'static str = "ELaneSelectionFlags";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ELaneSelectionFlags> {
        match value {
            0 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_None),
            1 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SAFELANE),
            2 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_OFFLANE),
            4 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_MIDLANE),
            8 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT_SOFT),
            16 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT_HARD),
            7 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_CORE),
            24 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT),
            31 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_ALL),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ELaneSelectionFlags> {
        match str {
            "k_ELaneSelectionFlags_None" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_None),
            "k_ELaneSelectionFlags_SAFELANE" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SAFELANE),
            "k_ELaneSelectionFlags_OFFLANE" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_OFFLANE),
            "k_ELaneSelectionFlags_MIDLANE" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_MIDLANE),
            "k_ELaneSelectionFlags_SUPPORT_SOFT" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT_SOFT),
            "k_ELaneSelectionFlags_SUPPORT_HARD" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT_HARD),
            "k_ELaneSelectionFlags_CORE" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_CORE),
            "k_ELaneSelectionFlags_SUPPORT" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT),
            "k_ELaneSelectionFlags_ALL" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_ALL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ELaneSelectionFlags] = &[
        ELaneSelectionFlags::k_ELaneSelectionFlags_None,
        ELaneSelectionFlags::k_ELaneSelectionFlags_SAFELANE,
        ELaneSelectionFlags::k_ELaneSelectionFlags_OFFLANE,
        ELaneSelectionFlags::k_ELaneSelectionFlags_MIDLANE,
        ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT_SOFT,
        ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT_HARD,
        ELaneSelectionFlags::k_ELaneSelectionFlags_CORE,
        ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT,
        ELaneSelectionFlags::k_ELaneSelectionFlags_ALL,
    ];
}

impl ::protobuf::EnumFull for ELaneSelectionFlags {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ELaneSelectionFlags").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ELaneSelectionFlags::k_ELaneSelectionFlags_None => 0,
            ELaneSelectionFlags::k_ELaneSelectionFlags_SAFELANE => 1,
            ELaneSelectionFlags::k_ELaneSelectionFlags_OFFLANE => 2,
            ELaneSelectionFlags::k_ELaneSelectionFlags_MIDLANE => 3,
            ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT_SOFT => 4,
            ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT_HARD => 5,
            ELaneSelectionFlags::k_ELaneSelectionFlags_CORE => 6,
            ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT => 7,
            ELaneSelectionFlags::k_ELaneSelectionFlags_ALL => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ELaneSelectionFlags {
    fn default() -> Self {
        ELaneSelectionFlags::k_ELaneSelectionFlags_None
    }
}

impl ELaneSelectionFlags {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ELaneSelectionFlags>("ELaneSelectionFlags")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EPartyMatchmakingFlags)
pub enum EPartyMatchmakingFlags {
    // @@protoc_insertion_point(enum_value:dota.EPartyMatchmakingFlags.k_EPartyMatchmakingFlags_None)
    k_EPartyMatchmakingFlags_None = 0,
    // @@protoc_insertion_point(enum_value:dota.EPartyMatchmakingFlags.k_EPartyMatchmakingFlags_LargeRankSpread)
    k_EPartyMatchmakingFlags_LargeRankSpread = 1,
}

impl ::protobuf::Enum for EPartyMatchmakingFlags {
    const NAME: &'static str = "EPartyMatchmakingFlags";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EPartyMatchmakingFlags> {
        match value {
            0 => ::std::option::Option::Some(EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_None),
            1 => ::std::option::Option::Some(EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_LargeRankSpread),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EPartyMatchmakingFlags> {
        match str {
            "k_EPartyMatchmakingFlags_None" => ::std::option::Option::Some(EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_None),
            "k_EPartyMatchmakingFlags_LargeRankSpread" => ::std::option::Option::Some(EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_LargeRankSpread),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EPartyMatchmakingFlags] = &[
        EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_None,
        EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_LargeRankSpread,
    ];
}

impl ::protobuf::EnumFull for EPartyMatchmakingFlags {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EPartyMatchmakingFlags").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EPartyMatchmakingFlags {
    fn default() -> Self {
        EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_None
    }
}

impl EPartyMatchmakingFlags {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EPartyMatchmakingFlags>("EPartyMatchmakingFlags")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EHighPriorityMMState)
pub enum EHighPriorityMMState {
    // @@protoc_insertion_point(enum_value:dota.EHighPriorityMMState.k_EHighPriorityMM_Unknown)
    k_EHighPriorityMM_Unknown = 0,
    // @@protoc_insertion_point(enum_value:dota.EHighPriorityMMState.k_EHighPriorityMM_MissingMMData)
    k_EHighPriorityMM_MissingMMData = 1,
    // @@protoc_insertion_point(enum_value:dota.EHighPriorityMMState.k_EHighPriorityMM_ResourceMissing)
    k_EHighPriorityMM_ResourceMissing = 2,
    // @@protoc_insertion_point(enum_value:dota.EHighPriorityMMState.k_EHighPriorityMM_ManuallyDisabled)
    k_EHighPriorityMM_ManuallyDisabled = 3,
    // @@protoc_insertion_point(enum_value:dota.EHighPriorityMMState.k_EHighPriorityMM_Min_Enabled)
    k_EHighPriorityMM_Min_Enabled = 64,
    // @@protoc_insertion_point(enum_value:dota.EHighPriorityMMState.k_EHighPriorityMM_AllRolesSelected)
    k_EHighPriorityMM_AllRolesSelected = 65,
    // @@protoc_insertion_point(enum_value:dota.EHighPriorityMMState.k_EHighPriorityMM_UsingResource)
    k_EHighPriorityMM_UsingResource = 66,
    // @@protoc_insertion_point(enum_value:dota.EHighPriorityMMState.k_EHighPriorityMM_FiveStack)
    k_EHighPriorityMM_FiveStack = 67,
    // @@protoc_insertion_point(enum_value:dota.EHighPriorityMMState.k_EHighPriorityMM_HighDemand)
    k_EHighPriorityMM_HighDemand = 68,
}

impl ::protobuf::Enum for EHighPriorityMMState {
    const NAME: &'static str = "EHighPriorityMMState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EHighPriorityMMState> {
        match value {
            0 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_Unknown),
            1 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_MissingMMData),
            2 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_ResourceMissing),
            3 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_ManuallyDisabled),
            64 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_Min_Enabled),
            65 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_AllRolesSelected),
            66 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_UsingResource),
            67 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_FiveStack),
            68 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_HighDemand),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EHighPriorityMMState> {
        match str {
            "k_EHighPriorityMM_Unknown" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_Unknown),
            "k_EHighPriorityMM_MissingMMData" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_MissingMMData),
            "k_EHighPriorityMM_ResourceMissing" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_ResourceMissing),
            "k_EHighPriorityMM_ManuallyDisabled" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_ManuallyDisabled),
            "k_EHighPriorityMM_Min_Enabled" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_Min_Enabled),
            "k_EHighPriorityMM_AllRolesSelected" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_AllRolesSelected),
            "k_EHighPriorityMM_UsingResource" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_UsingResource),
            "k_EHighPriorityMM_FiveStack" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_FiveStack),
            "k_EHighPriorityMM_HighDemand" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_HighDemand),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EHighPriorityMMState] = &[
        EHighPriorityMMState::k_EHighPriorityMM_Unknown,
        EHighPriorityMMState::k_EHighPriorityMM_MissingMMData,
        EHighPriorityMMState::k_EHighPriorityMM_ResourceMissing,
        EHighPriorityMMState::k_EHighPriorityMM_ManuallyDisabled,
        EHighPriorityMMState::k_EHighPriorityMM_Min_Enabled,
        EHighPriorityMMState::k_EHighPriorityMM_AllRolesSelected,
        EHighPriorityMMState::k_EHighPriorityMM_UsingResource,
        EHighPriorityMMState::k_EHighPriorityMM_FiveStack,
        EHighPriorityMMState::k_EHighPriorityMM_HighDemand,
    ];
}

impl ::protobuf::EnumFull for EHighPriorityMMState {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EHighPriorityMMState").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EHighPriorityMMState::k_EHighPriorityMM_Unknown => 0,
            EHighPriorityMMState::k_EHighPriorityMM_MissingMMData => 1,
            EHighPriorityMMState::k_EHighPriorityMM_ResourceMissing => 2,
            EHighPriorityMMState::k_EHighPriorityMM_ManuallyDisabled => 3,
            EHighPriorityMMState::k_EHighPriorityMM_Min_Enabled => 4,
            EHighPriorityMMState::k_EHighPriorityMM_AllRolesSelected => 5,
            EHighPriorityMMState::k_EHighPriorityMM_UsingResource => 6,
            EHighPriorityMMState::k_EHighPriorityMM_FiveStack => 7,
            EHighPriorityMMState::k_EHighPriorityMM_HighDemand => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EHighPriorityMMState {
    fn default() -> Self {
        EHighPriorityMMState::k_EHighPriorityMM_Unknown
    }
}

impl EHighPriorityMMState {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EHighPriorityMMState>("EHighPriorityMMState")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EReadyCheckStatus)
pub enum EReadyCheckStatus {
    // @@protoc_insertion_point(enum_value:dota.EReadyCheckStatus.k_EReadyCheckStatus_Unknown)
    k_EReadyCheckStatus_Unknown = 0,
    // @@protoc_insertion_point(enum_value:dota.EReadyCheckStatus.k_EReadyCheckStatus_NotReady)
    k_EReadyCheckStatus_NotReady = 1,
    // @@protoc_insertion_point(enum_value:dota.EReadyCheckStatus.k_EReadyCheckStatus_Ready)
    k_EReadyCheckStatus_Ready = 2,
}

impl ::protobuf::Enum for EReadyCheckStatus {
    const NAME: &'static str = "EReadyCheckStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EReadyCheckStatus> {
        match value {
            0 => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_Unknown),
            1 => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_NotReady),
            2 => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_Ready),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EReadyCheckStatus> {
        match str {
            "k_EReadyCheckStatus_Unknown" => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_Unknown),
            "k_EReadyCheckStatus_NotReady" => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_NotReady),
            "k_EReadyCheckStatus_Ready" => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_Ready),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EReadyCheckStatus] = &[
        EReadyCheckStatus::k_EReadyCheckStatus_Unknown,
        EReadyCheckStatus::k_EReadyCheckStatus_NotReady,
        EReadyCheckStatus::k_EReadyCheckStatus_Ready,
    ];
}

impl ::protobuf::EnumFull for EReadyCheckStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EReadyCheckStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EReadyCheckStatus {
    fn default() -> Self {
        EReadyCheckStatus::k_EReadyCheckStatus_Unknown
    }
}

impl EReadyCheckStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EReadyCheckStatus>("EReadyCheckStatus")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EReadyCheckRequestResult)
pub enum EReadyCheckRequestResult {
    // @@protoc_insertion_point(enum_value:dota.EReadyCheckRequestResult.k_EReadyCheckRequestResult_Success)
    k_EReadyCheckRequestResult_Success = 0,
    // @@protoc_insertion_point(enum_value:dota.EReadyCheckRequestResult.k_EReadyCheckRequestResult_AlreadyInProgress)
    k_EReadyCheckRequestResult_AlreadyInProgress = 1,
    // @@protoc_insertion_point(enum_value:dota.EReadyCheckRequestResult.k_EReadyCheckRequestResult_NotInParty)
    k_EReadyCheckRequestResult_NotInParty = 2,
    // @@protoc_insertion_point(enum_value:dota.EReadyCheckRequestResult.k_EReadyCheckRequestResult_SendError)
    k_EReadyCheckRequestResult_SendError = 3,
    // @@protoc_insertion_point(enum_value:dota.EReadyCheckRequestResult.k_EReadyCheckRequestResult_UnknownError)
    k_EReadyCheckRequestResult_UnknownError = 4,
}

impl ::protobuf::Enum for EReadyCheckRequestResult {
    const NAME: &'static str = "EReadyCheckRequestResult";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EReadyCheckRequestResult> {
        match value {
            0 => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success),
            1 => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_AlreadyInProgress),
            2 => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_NotInParty),
            3 => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_SendError),
            4 => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_UnknownError),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EReadyCheckRequestResult> {
        match str {
            "k_EReadyCheckRequestResult_Success" => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success),
            "k_EReadyCheckRequestResult_AlreadyInProgress" => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_AlreadyInProgress),
            "k_EReadyCheckRequestResult_NotInParty" => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_NotInParty),
            "k_EReadyCheckRequestResult_SendError" => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_SendError),
            "k_EReadyCheckRequestResult_UnknownError" => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_UnknownError),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EReadyCheckRequestResult] = &[
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success,
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_AlreadyInProgress,
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_NotInParty,
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_SendError,
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_UnknownError,
    ];
}

impl ::protobuf::EnumFull for EReadyCheckRequestResult {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EReadyCheckRequestResult").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EReadyCheckRequestResult {
    fn default() -> Self {
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success
    }
}

impl EReadyCheckRequestResult {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EReadyCheckRequestResult>("EReadyCheckRequestResult")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EMatchBehaviorScoreVariance)
pub enum EMatchBehaviorScoreVariance {
    // @@protoc_insertion_point(enum_value:dota.EMatchBehaviorScoreVariance.k_EMatchBehaviorScoreVariance_Invalid)
    k_EMatchBehaviorScoreVariance_Invalid = 0,
    // @@protoc_insertion_point(enum_value:dota.EMatchBehaviorScoreVariance.k_EMatchBehaviorScoreVariance_Low)
    k_EMatchBehaviorScoreVariance_Low = 1,
    // @@protoc_insertion_point(enum_value:dota.EMatchBehaviorScoreVariance.k_EMatchBehaviorScoreVariance_Medium)
    k_EMatchBehaviorScoreVariance_Medium = 2,
    // @@protoc_insertion_point(enum_value:dota.EMatchBehaviorScoreVariance.k_EMatchBehaviorScoreVariance_High)
    k_EMatchBehaviorScoreVariance_High = 3,
}

impl ::protobuf::Enum for EMatchBehaviorScoreVariance {
    const NAME: &'static str = "EMatchBehaviorScoreVariance";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EMatchBehaviorScoreVariance> {
        match value {
            0 => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid),
            1 => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Low),
            2 => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Medium),
            3 => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_High),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EMatchBehaviorScoreVariance> {
        match str {
            "k_EMatchBehaviorScoreVariance_Invalid" => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid),
            "k_EMatchBehaviorScoreVariance_Low" => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Low),
            "k_EMatchBehaviorScoreVariance_Medium" => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Medium),
            "k_EMatchBehaviorScoreVariance_High" => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_High),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EMatchBehaviorScoreVariance] = &[
        EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid,
        EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Low,
        EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Medium,
        EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_High,
    ];
}

impl ::protobuf::EnumFull for EMatchBehaviorScoreVariance {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EMatchBehaviorScoreVariance").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EMatchBehaviorScoreVariance {
    fn default() -> Self {
        EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid
    }
}

impl EMatchBehaviorScoreVariance {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EMatchBehaviorScoreVariance>("EMatchBehaviorScoreVariance")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-dota_gcmessages_common_match_management.proto\x12\x04dota\x1a\x13stea\
    mmessages.proto\x1a\x16gcsdk_gcmessages.proto\x1a\x17dota_shared_enums.p\
    roto\"\x8d\x05\n\x12CSODOTAPartyMember\x12\x19\n\x08is_coach\x18\x02\x20\
    \x01(\x08R\x07isCoach\x12*\n\x11region_ping_codes\x18\x04\x20\x03(\rR\
    \x0fregionPingCodes\x12*\n\x11region_ping_times\x18\x05\x20\x03(\rR\x0fr\
    egionPingTimes\x12;\n\x1aregion_ping_failed_bitmask\x18\x06\x20\x01(\rR\
    \x17regionPingFailedBitmask\x12,\n\x12is_plus_subscriber\x18\n\x20\x01(\
    \x08R\x10isPlusSubscriber\x12.\n\x13tourney_skill_level\x18\x07\x20\x01(\
    \rR\x11tourneySkillLevel\x12#\n\rtourney_buyin\x18\x08\x20\x01(\rR\x0cto\
    urneyBuyin\x122\n\x15tourney_prevent_until\x18\t\x20\x01(\rR\x13tourneyP\
    reventUntil\x12\"\n\rmm_data_valid\x18\r\x20\x01(\x08R\x0bmmDataValid\
    \x120\n\x14lane_selection_flags\x18\x0b\x20\x01(\rR\x12laneSelectionFlag\
    s\x124\n\x16high_priority_disabled\x18\x0e\x20\x01(\x08R\x14highPriority\
    Disabled\x12&\n\x0fhas_hp_resource\x18\x0f\x20\x01(\x08R\rhasHpResource\
    \x126\n\x17joined_from_partyfinder\x18\x0c\x20\x01(\x08R\x15joinedFromPa\
    rtyfinder\x12$\n\x0eis_steam_china\x18\x10\x20\x01(\x08R\x0cisSteamChina\
    \"\xf9\x14\n\x0cCSODOTAParty\x12\x19\n\x08party_id\x18\x01\x20\x01(\x04R\
    \x07partyId\x12\x1b\n\tleader_id\x18\x02\x20\x01(\x06R\x08leaderId\x12\
    \x1d\n\nmember_ids\x18\x03\x20\x03(\x06R\tmemberIds\x12\x1d\n\ngame_mode\
    s\x18\x04\x20\x01(\rR\tgameModes\x12.\n\x05state\x18\x06\x20\x01(\x0e2\
    \x18.dota.CSODOTAParty.StateR\x05state\x12K\n\"effective_started_matchma\
    king_time\x18\x07\x20\x01(\rR\x1feffectiveStartedMatchmakingTime\x12?\n\
    \x1craw_started_matchmaking_time\x18\x20\x20\x01(\rR\x19rawStartedMatchm\
    akingTime\x12,\n\x12attempt_start_time\x18!\x20\x01(\rR\x10attemptStartT\
    ime\x12\x1f\n\x0battempt_num\x18\"\x20\x01(\rR\nattemptNum\x12\x20\n\x0b\
    matchgroups\x18\x0b\x20\x01(\rR\x0bmatchgroups\x125\n\x17low_priority_ac\
    count_id\x18\x13\x20\x01(\rR\x14lowPriorityAccountId\x12.\n\nmatch_type\
    \x18\x15\x20\x01(\x0e2\x0f.dota.MatchTypeR\tmatchType\x12\x17\n\x07team_\
    id\x18\x17\x20\x01(\rR\x06teamId\x12\x1b\n\tteam_name\x183\x20\x01(\tR\
    \x08teamName\x12\x20\n\x0cteam_ui_logo\x184\x20\x01(\x04R\nteamUiLogo\
    \x12$\n\x0eteam_base_logo\x185\x20\x01(\x04R\x0cteamBaseLogo\x129\n\x19m\
    atch_disabled_until_date\x18\x18\x20\x01(\rR\x16matchDisabledUntilDate\
    \x129\n\x19match_disabled_account_id\x18\x19\x20\x01(\rR\x16matchDisable\
    dAccountId\x12A\n\x1dmatchmaking_max_range_minutes\x18\x1a\x20\x01(\rR\
    \x1amatchmakingMaxRangeMinutes\x12&\n\x0ematchlanguages\x18\x1b\x20\x01(\
    \rR\x0ematchlanguages\x122\n\x07members\x18\x1d\x20\x03(\x0b2\x18.dota.C\
    SODOTAPartyMemberR\x07members\x12?\n\x1clow_priority_games_remaining\x18\
    #\x20\x01(\rR\x19lowPriorityGamesRemaining\x123\n\x16open_for_join_reque\
    sts\x18(\x20\x01(\x08R\x13openForJoinRequests\x12;\n\x0csent_invites\x18\
    )\x20\x03(\x0b2\x18.dota.CSODOTAPartyInviteR\x0bsentInvites\x12;\n\x0cre\
    cv_invites\x18*\x20\x03(\x0b2\x18.dota.CSODOTAPartyInviteR\x0brecvInvite\
    s\x12#\n\raccount_flags\x18+\x20\x01(\rR\x0caccountFlags\x12.\n\x13regio\
    n_select_flags\x18,\x20\x01(\rR\x11regionSelectFlags\x126\n\x17exclusive\
    _tournament_id\x18-\x20\x01(\rR\x15exclusiveTournamentId\x12.\n\x13tourn\
    ey_division_id\x18/\x20\x01(\rR\x11tourneyDivisionId\x122\n\x15tourney_s\
    chedule_time\x180\x20\x01(\rR\x13tourneyScheduleTime\x12.\n\x13tourney_s\
    kill_level\x181\x20\x01(\rR\x11tourneySkillLevel\x122\n\x15tourney_brack\
    et_round\x182\x20\x01(\rR\x13tourneyBracketRound\x12=\n\x1btourney_queue\
    _deadline_time\x186\x20\x01(\rR\x18tourneyQueueDeadlineTime\x12a\n\x1cto\
    urney_queue_deadline_state\x187\x20\x01(\x0e2\x20.dota.ETourneyQueueDead\
    lineStateR\x19tourneyQueueDeadlineState\x12<\n\x1bparty_builder_slots_to\
    _fill\x188\x20\x01(\rR\x17partyBuilderSlotsToFill\x12;\n\x1aparty_builde\
    r_match_groups\x189\x20\x01(\rR\x17partyBuilderMatchGroups\x127\n\x18par\
    ty_builder_start_time\x18:\x20\x01(\rR\x15partyBuilderStartTime\x12\x1d\
    \n\nsolo_queue\x18;\x20\x01(\x08R\tsoloQueue\x121\n\x15steam_clan_accoun\
    t_id\x18=\x20\x01(\rR\x12steamClanAccountId\x12;\n\x0bready_check\x18>\
    \x20\x01(\x0b2\x1a.dota.CMsgReadyCheckStatusR\nreadyCheck\x12D\n\x1fcust\
    om_game_disabled_until_date\x18?\x20\x01(\rR\x1bcustomGameDisabledUntilD\
    ate\x12D\n\x1fcustom_game_disabled_account_id\x18@\x20\x01(\rR\x1bcustom\
    GameDisabledAccountId\x12,\n\x12is_challenge_match\x18A\x20\x01(\x08R\
    \x10isChallengeMatch\x12;\n\x1aparty_search_beacon_active\x18B\x20\x01(\
    \x08R\x17partySearchBeaconActive\x12+\n\x11matchmaking_flags\x18C\x20\
    \x01(\rR\x10matchmakingFlags\x12J\n\x13high_priority_state\x18D\x20\x01(\
    \x0e2\x1a.dota.EHighPriorityMMStateR\x11highPriorityState\x126\n\x17lane\
    _selections_enabled\x18E\x20\x01(\x08R\x15laneSelectionsEnabled\x12=\n\
    \x1bcustom_game_difficulty_mask\x18F\x20\x01(\rR\x18customGameDifficulty\
    Mask\x12$\n\x0eis_steam_china\x18G\x20\x01(\x08R\x0cisSteamChina\x12.\n\
    \x13bot_difficulty_mask\x18H\x20\x01(\rR\x11botDifficultyMask\x121\n\x15\
    bot_script_index_mask\x18I\x20\x01(\rR\x12botScriptIndexMask\"0\n\x05Sta\
    te\x12\x06\n\x02UI\x10\0\x12\x11\n\rFINDING_MATCH\x10\x01\x12\x0c\n\x08I\
    N_MATCH\x10\x02\"\x89\x03\n\x12CSODOTAPartyInvite\x12\x19\n\x08group_id\
    \x18\x01\x20\x01(\x04R\x07groupId\x12\x1b\n\tsender_id\x18\x02\x20\x01(\
    \x06R\x08senderId\x12\x1f\n\x0bsender_name\x18\x03\x20\x01(\tR\nsenderNa\
    me\x12>\n\x07members\x18\x04\x20\x03(\x0b2$.dota.CSODOTAPartyInvite.Part\
    yMemberR\x07members\x12\x17\n\x07team_id\x18\x05\x20\x01(\rR\x06teamId\
    \x12.\n\x13low_priority_status\x18\x06\x20\x01(\x08R\x11lowPriorityStatu\
    s\x12\x19\n\x08as_coach\x18\x07\x20\x01(\x08R\x07asCoach\x12\x1d\n\ninvi\
    te_gid\x18\x08\x20\x01(\x06R\tinviteGid\x1aW\n\x0bPartyMember\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12\x19\n\x08steam_id\x18\x02\x20\
    \x01(\x06R\x07steamId\x12\x19\n\x08is_coach\x18\x04\x20\x01(\x08R\x07isC\
    oach\"\x9f\x02\n\x0fCMsgLeaverState\x12\x1f\n\x0blobby_state\x18\x01\x20\
    \x01(\rR\nlobbyState\x123\n\ngame_state\x18\x02\x20\x01(\x0e2\x14.dota.D\
    OTA_GameStateR\tgameState\x12'\n\x0fleaver_detected\x18\x03\x20\x01(\x08\
    R\x0eleaverDetected\x120\n\x14first_blood_happened\x18\x04\x20\x01(\x08R\
    \x12firstBloodHappened\x122\n\x15discard_match_results\x18\x05\x20\x01(\
    \x08R\x13discardMatchResults\x12'\n\x0fmass_disconnect\x18\x06\x20\x01(\
    \x08R\x0emassDisconnect\"\xd3\x02\n\x14CMsgReadyCheckStatus\x12'\n\x0fst\
    art_timestamp\x18\x01\x20\x01(\rR\x0estartTimestamp\x12)\n\x10finish_tim\
    estamp\x18\x02\x20\x01(\rR\x0ffinishTimestamp\x120\n\x14initiator_accoun\
    t_id\x18\x03\x20\x01(\rR\x12initiatorAccountId\x12K\n\rready_members\x18\
    \x04\x20\x03(\x0b2&.dota.CMsgReadyCheckStatus.ReadyMemberR\x0creadyMembe\
    rs\x1ah\n\x0bReadyMember\x12\x1d\n\naccount_id\x18\x01\x20\x01(\rR\tacco\
    untId\x12:\n\x0cready_status\x18\x02\x20\x01(\x0e2\x17.dota.EReadyCheckS\
    tatusR\x0breadyStatus\"\x1c\n\x1aCMsgPartyReadyCheckRequest\"U\n\x1bCMsg\
    PartyReadyCheckResponse\x126\n\x06result\x18\x01\x20\x01(\x0e2\x1e.dota.\
    EReadyCheckRequestResultR\x06result\"\\\n\x1eCMsgPartyReadyCheckAcknowle\
    dge\x12:\n\x0cready_status\x18\x01\x20\x01(\x0e2\x17.dota.EReadyCheckSta\
    tusR\x0breadyStatus\"4\n\x19CMsgLobbyEventGameDetails\x12\x17\n\x07kv_da\
    ta\x18\x01\x20\x01(\x0cR\x06kvData\"\xd2\x01\n\x19CMsgMatchMatchmakingSt\
    ats\x12,\n\x12average_queue_time\x18\x01\x20\x01(\rR\x10averageQueueTime\
    \x12,\n\x12maximum_queue_time\x18\x02\x20\x01(\rR\x10maximumQueueTime\
    \x12Y\n\x17behavior_score_variance\x18\x03\x20\x01(\x0e2!.dota.EMatchBeh\
    aviorScoreVarianceR\x15behaviorScoreVariance\"\x9fk\n\x08CMvpData\x12+\n\
    \x04mvps\x18\x01\x20\x03(\x0b2\x17.dota.CMvpData.MvpDatumR\x04mvps\x1a\
    \xe5j\n\x08MvpDatum\x12\x1f\n\x0bplayer_slot\x18\x01\x20\x01(\rR\nplayer\
    Slot\x12A\n\taccolades\x18\x02\x20\x03(\x0b2#.dota.CMvpData.MvpDatum.Mvp\
    AccoladeR\taccolades\x1a\xf4i\n\x0bMvpAccolade\x12G\n\x04type\x18\x01\
    \x20\x01(\x0e23.dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeTypeR\x04t\
    ype\x12!\n\x0cdetail_value\x18\x02\x20\x01(\x02R\x0bdetailValue\"\xf8h\n\
    \x0fMvpAccoladeType\x12\t\n\x05kills\x10\x01\x12\n\n\x06deaths\x10\x02\
    \x12\x0b\n\x07assists\x10\x03\x12\r\n\tnet_worth\x10\x05\x12\x0e\n\nitem\
    _value\x10\x06\x12\x16\n\x12support_gold_spent\x10\x07\x12\x10\n\x0cward\
    s_placed\x10\x08\x12\x0b\n\x07dewards\x10\t\x12\x11\n\rcamps_stacked\x10\
    \n\x12\r\n\tlast_hits\x10\x0b\x12\n\n\x06denies\x10\x0c\x12\"\n\x1ekKill\
    EaterEvent_Killing_Sprees\x10\r\x12\x1b\n\x17kKillEaterEvent_Godlike\x10\
    \x0e\x12$\n\x20kKillEaterEvent_Towers_Destroyed\x10\x0f\x12.\n*kKillEate\
    rEventType_Invoker_SunstrikeKills\x10\x10\x12!\n\x1dkKillEaterEventType_\
    Axe_Culls\x10\x11\x12-\n)kKillEaterEventType_Axe_BattleHungerKills\x10\
    \x12\x12&\n\"kKillEaterEventType_LowHealthKills\x10\x13\x12,\n(kKillEate\
    rEventType_Invoker_TornadoKills\x10\x14\x12(\n$kKillEaterEventType_Sven_\
    DoubleStuns\x10\x15\x12*\n&kKillEaterEventType_Sven_WarcryAssists\x10\
    \x16\x12.\n*kKillEaterEventType_Sven_CleaveDoubleKills\x10\x17\x12/\n+kK\
    illEaterEventType_Sven_TeleportInterrupts\x10\x18\x12,\n(kKillEaterEvent\
    Type_Faceless_MultiChrono\x10\x19\x12,\n(kKillEaterEventType_Faceless_Ch\
    ronoKills\x10\x1a\x12(\n$kKillEaterEventType_Ursa_MultiShocks\x10\x1b\
    \x12#\n\x1fkKillEaterEventType_RoshanKills\x10\x1c\x12(\n$kKillEaterEven\
    tType_Lion_FingerKills\x10\x1d\x12,\n(kKillEaterEventType_Riki_SmokedHer\
    oKills\x10\x20\x12.\n*kKillEaterEventType_HeroesRevealedWithDust\x10!\
    \x127\n3kKillEaterEventType_SkeletonKing_ReincarnationKills\x10\"\x12+\n\
    'kKillEaterEventType_Skywrath_FlareKills\x10#\x12/\n+kKillEaterEventType\
    _Leshrac_SplitEarthStuns\x10$\x12,\n(kKillEaterEventType_Mirana_MaxStunA\
    rrows\x10%\x128\n4kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits\
    \x10&\x123\n/kKillEaterEventType_PhantomAssassin_DaggerCrits\x10'\x12(\n\
    $kKillEaterEventType_Meepo_Earthbinds\x10(\x120\n,kKillEaterEventType_Bl\
    oodseeker_RuptureKills\x10)\x12,\n(kKillEaterEventType_Slark_LeashedEnem\
    ies\x10*\x122\n.kKillEaterEventType_Disruptor_FountainGlimpses\x10+\x12+\
    \n'kKillEaterEventType_Rubick_SpellsStolen\x10,\x12.\n*kKillEaterEventTy\
    pe_Rubick_UltimatesStolen\x10-\x12*\n&kKillEaterEventType_Doom_EnemiesDo\
    omed\x10.\x120\n,kKillEaterEventType_Omniknight_Purifications\x10/\x121\
    \n-kKillEaterEventType_Omniknight_AlliesRepelled\x100\x122\n.kKillEaterE\
    ventType_Omniknight_EnemiesRepelled\x101\x122\n.kKillEaterEventType_Warl\
    ock_FiveHeroFatalBonds\x102\x128\n4kKillEaterEventType_CrystalMaiden_Fro\
    stbittenEnemies\x103\x122\n.kKillEaterEventType_CrystalMaiden_CrystalNov\
    as\x104\x121\n-kKillEaterEventType_Kunkka_DoubleHeroTorrents\x105\x123\n\
    /kKillEaterEventType_Kunkka_TripleHeroGhostShips\x106\x121\n-kKillEaterE\
    ventType_NagaSiren_EnemiesEnsnared\x107\x124\n0kKillEaterEventType_NagaS\
    iren_TripleHeroRipTides\x108\x123\n/kKillEaterEventType_Lycan_KillsDurin\
    gShapeshift\x109\x12,\n(kKillEaterEventType_Pudge_DismemberKills\x10:\
    \x12/\n+kKillEaterEventType_Pudge_EnemyHeroesHooked\x10;\x12'\n#kKillEat\
    erEventType_Pudge_HookKills\x10<\x125\n1kKillEaterEventType_Pudge_Unseen\
    EnemyHeroesHooked\x10=\x122\n.kKillEaterEventType_DrowRanger_EnemiesSile\
    nced\x10>\x124\n0kKillEaterEventType_DrowRanger_MultiHeroSilences\x10?\
    \x120\n,kKillEaterEventType_DrowRanger_SilencedKills\x10@\x122\n.kKillEa\
    terEventType_DrowRanger_FrostArrowKills\x10A\x126\n2kKillEaterEventType_\
    DragonKnight_KillsInDragonForm\x10B\x125\n1kKillEaterEventType_DragonKni\
    ght_BreatheFireKills\x10C\x120\n,kKillEaterEventType_DragonKnight_Splash\
    Kills\x10D\x12-\n)kKillEaterEventType_WitchDoctor_CaskStuns\x10E\x121\n-\
    kKillEaterEventType_WitchDoctor_MaledictKills\x10F\x126\n2kKillEaterEven\
    tType_WitchDoctor_MultiHeroMaledicts\x10G\x122\n.kKillEaterEventType_Wit\
    chDoctor_DeathWardKills\x10H\x124\n0kKillEaterEventType_Disruptor_Thunde\
    rStrikeKills\x10I\x120\n,kKillEaterEventType_Disruptor_HeroesGlimpsed\
    \x10J\x128\n4kKillEaterEventType_CrystalMaiden_FreezingFieldKills\x10K\
    \x12/\n+kKillEaterEventType_Medusa_EnemiesPetrified\x10M\x12/\n+kKillEat\
    erEventType_Warlock_FatalBondsKills\x10N\x12*\n&kKillEaterEventType_Warl\
    ock_GolemKills\x10O\x12*\n&kKillEaterEventType_Tusk_WalrusPunches\x10P\
    \x12*\n&kKillEaterEventType_Tusk_SnowballStuns\x10Q\x120\n,kKillEaterEve\
    ntType_Earthshaker_FissureStuns\x10R\x122\n.kKillEaterEventType_Earthsha\
    ker_3HeroEchoslams\x10S\x122\n.kKillEaterEventType_SandKing_Burrowstrike\
    Stuns\x10T\x12/\n+kKillEaterEventType_SandKing_EpicenterKills\x10U\x125\
    \n1kKillEaterEventType_SkywrathMage_AncientSealKills\x10V\x128\n4kKillEa\
    terEventType_SkywrathMage_ConcussiveShotKills\x10W\x12,\n(kKillEaterEven\
    tType_Luna_LucentBeamKills\x10X\x12)\n%kKillEaterEventType_Luna_EclipseK\
    ills\x10Y\x128\n4kKillEaterEventType_KeeperOfTheLight_IlluminateKills\
    \x10Z\x126\n2kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns\x10[\x12\
    :\n6kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled\x10\\\x120\n,\
    kKillEaterEventType_LegionCommander_DuelsWon\x10]\x12-\n)kKillEaterEvent\
    Type_Beastmaster_RoarKills\x10^\x122\n.kKillEaterEventType_Beastmaster_R\
    oarMultiKills\x10_\x125\n1kKillEaterEventType_Windrunner_FocusFireBuildi\
    ngs\x10`\x121\n-kKillEaterEventType_Windrunner_PowershotKills\x10a\x126\
    \n2kKillEaterEventType_PhantomAssassin_DaggerLastHits\x10b\x12:\n6kKillE\
    aterEventType_PhantomAssassin_PhantomStrikeKills\x10c\x124\n0kKillEaterE\
    ventType_DeathProphet_CryptSwarmKills\x10d\x12:\n6kKillEaterEventType_De\
    athProphet_ExorcismBuildingKills\x10e\x12<\n8kKillEaterEventType_DeathPr\
    ophet_ExorcismSpiritsSummoned\x10f\x126\n2kKillEaterEventType_DeathProph\
    et_MultiHeroSilences\x10g\x12-\n)kKillEaterEventType_Abaddon_MistCoilKil\
    ls\x10h\x12.\n*kKillEaterEventType_Abaddon_MistCoilHealed\x10i\x122\n.kK\
    illEaterEventType_Abaddon_AphoticShieldKills\x10j\x122\n.kKillEaterEvent\
    Type_Lich_ChainFrostTripleKills\x10k\x121\n-kKillEaterEventType_Lich_Cha\
    inFrostMultiKills\x10l\x12.\n*kKillEaterEventType_Lich_ChainFrostBounces\
    \x10m\x12)\n%kKillEaterEventType_Ursa_EnragedKills\x10n\x12,\n(kKillEate\
    rEventType_Ursa_EarthshockKills\x10o\x12-\n)kKillEaterEventType_Lina_Lag\
    unaBladeKills\x10p\x12-\n)kKillEaterEventType_Lina_DragonSlaveKills\x10q\
    \x122\n.kKillEaterEventType_Lina_LightStrikeArrayStuns\x10r\x12&\n\"kKil\
    lEaterEvent_Barracks_Destroyed\x10s\x12-\n)kKillEaterEvent_TemplarAssass\
    in_MeldKills\x10t\x120\n,kKillEaterEvent_TemplarAssassin_HeroesSlowed\
    \x10u\x12-\n)kKillEaterEvent_Sniper_AssassinationKills\x10v\x12(\n$kKill\
    EaterEvent_Sniper_HeadshotStuns\x10w\x12*\n&kKillEaterEvent_EarthSpirit_\
    SmashStuns\x10x\x12,\n(kKillEaterEvent_EarthSpirit_GripSilences\x10y\x12\
    -\n)kKillEaterEvent_ShadowShaman_ShackleKills\x10z\x12)\n%kKillEaterEven\
    t_ShadowShaman_HexKills\x10{\x12*\n&kKillEaterEvent_Centaur_EnemiesStomp\
    ed\x10|\x12+\n'kKillEaterEvent_Centaur_DoubleEdgeKills\x10}\x12'\n#kKill\
    EaterEvent_Centaur_ReturnKills\x10~\x12.\n*kKillEaterEvent_EmberSpirit_E\
    nemiesChained\x10\x7f\x128\n3kKillEaterEvent_EmberSpirit_SleightOfFistMu\
    ltiKills\x10\x80\x01\x12\"\n\x1dkKillEaterEvent_Puck_OrbKills\x10\x81\
    \x01\x122\n-kKillEaterEvent_VengefulSpirit_EnemiesStunned\x10\x82\x01\
    \x12*\n%kKillEaterEvent_Lifestealer_RageKills\x10\x83\x01\x120\n+kKillEa\
    terEvent_Lifestealer_OpenWoundsKills\x10\x84\x01\x12,\n'kKillEaterEvent_\
    Lifestealer_InfestKills\x10\x85\x01\x12+\n&kKillEaterEvent_ElderTitan_Sp\
    iritKills\x10\x86\x01\x12*\n%kKillEaterEvent_ElderTitan_GoodStomps\x10\
    \x87\x01\x12*\n%kKillEaterEvent_Clockwerk_RocketKills\x10\x88\x01\x12/\n\
    *kKillEaterEvent_Clockwerk_BlindRocketKills\x10\x89\x01\x12*\n%kKillEate\
    rEvent_StormSpirit_BallKills\x10\x8a\x01\x123\n.kKillEaterEvent_StormSpi\
    rit_DoubleRemnantKills\x10\x8b\x01\x12,\n'kKillEaterEvent_StormSpirit_Vo\
    rtexKills\x10\x8c\x01\x12.\n)kKillEaterEvent_Tinker_DoubleMissileKills\
    \x10\x8d\x01\x12&\n!kKillEaterEvent_Tinker_LaserKills\x10\x8e\x01\x12)\n\
    $kKillEaterEvent_Techies_SuicideKills\x10\x8f\x01\x12*\n%kKillEaterEvent\
    _Techies_LandMineKills\x10\x90\x01\x12,\n'kKillEaterEvent_Techies_Statis\
    TrapStuns\x10\x91\x01\x12,\n'kKillEaterEvent_Techies_RemoteMineKills\x10\
    \x92\x01\x120\n+kKillEaterEvent_ShadowFiend_TripleRazeKills\x10\x93\x01\
    \x122\n-kKillEaterEvent_ShadowFiend_RequiemMultiKills\x10\x94\x01\x12+\n\
    &kKillEaterEvent_ShadowFiend_QRazeKills\x10\x95\x01\x12+\n&kKillEaterEve\
    nt_ShadowFiend_WRazeKills\x10\x96\x01\x12+\n&kKillEaterEvent_ShadowFiend\
    _ERazeKills\x10\x97\x01\x12+\n&kKillEaterEvent_Oracle_FatesEdictKills\
    \x10\x98\x01\x12-\n(kKillEaterEvent_Oracle_FalsePromiseSaves\x10\x99\x01\
    \x12.\n)kKillEaterEvent_Juggernaut_OmnislashKills\x10\x9a\x01\x127\n2kKi\
    llEaterEventType_SkeletonKing_SkeletonHeroKills\x10\x9d\x01\x12:\n5kKill\
    EaterEventType_DarkWillow_CursedCrownTripleStuns\x10\x9e\x01\x121\n,kKil\
    lEaterEventType_Dazzle_ShallowGraveSaves\x10\x9f\x01\x120\n+kKillEaterEv\
    entType_Dazzle_PoisonTouchKills\x10\xa0\x01\x12%\n\x20kKillEaterEventTyp\
    e_ThreeManMeks\x10\xa1\x01\x120\n+kKillEaterEventType_Viper_PoisonAttack\
    Kills\x10\xa2\x01\x121\n,kKillEaterEventType_Viper_CorrosiveSkinKills\
    \x10\xa3\x01\x12'\n\"kKillEaterEventType_ThreeHeroVeils\x10\xa4\x01\x125\
    \n0kKillEaterEventType_Viper_KillsDuringViperStrike\x10\xa5\x01\x12(\n#k\
    KillEaterEventType_SolarCrestKills\x10\xa6\x01\x12,\n'kKillEaterEventTyp\
    e_Tiny_TreeThrowKills\x10\xa7\x01\x12+\n&kKillEaterEventType_Riki_Backst\
    abKills\x10\xa8\x01\x128\n3kKillEaterEventType_Phoenix_ThreeHeroSupernov\
    aStuns\x10\xa9\x01\x127\n2kKillEaterEventType_Terrorblade_MetamorphosisK\
    ills\x10\xaa\x01\x12.\n)kKillEaterEventType_Lion_GreatFingerKills\x10\
    \xab\x01\x12;\n6kKillEaterEventType_Antimage_SpellsBlockedWithAghanims\
    \x10\xac\x01\x123\n.kKillEaterEventType_Antimage_ThreeManManaVoids\x10\
    \xad\x01\x125\n0kKillEaterEventType_ArcWarden_TempestDoubleKills\x10\xae\
    \x01\x123\n.kKillEaterEventType_ArcWarden_SparkWraithKills\x10\xaf\x01\
    \x12+\n&kKillEaterEventType_Bane_BrainSapKills\x10\xb0\x01\x12-\n(kKillE\
    aterEventType_Bane_FiendsGripKills\x10\xb1\x01\x127\n2kKillEaterEventTyp\
    e_Batrider_TripleHeroFlamebreaks\x10\xb2\x01\x123\n.kKillEaterEventType_\
    Batrider_DoubleHeroLassoes\x10\xb3\x01\x12:\n5kKillEaterEventType_Brewma\
    ster_KillsDuringPrimalSplit\x10\xb4\x01\x12>\n9kKillEaterEventType_Brist\
    leback_KillsUnderFourQuillStacks\x10\xb5\x01\x127\n2kKillEaterEventType_\
    Bristleback_TripleHeroNasalGoo\x10\xb6\x01\x128\n3kKillEaterEventType_Br\
    oodmother_SpiderlingHeroKills\x10\xb7\x01\x123\n.kKillEaterEventType_Bro\
    odmother_KillsInsideWeb\x10\xb8\x01\x122\n-kKillEaterEventType_Centaur_T\
    hreeHeroStampede\x10\xb9\x01\x125\n0kKillEaterEventType_ChaosKnight_Real\
    ityRiftKills\x10\xba\x01\x120\n+kKillEaterEventType_Chen_KillsWithPenite\
    nce\x10\xbb\x01\x12:\n5kKillEaterEventType_CrystalMaiden_TwoHeroCrystalN\
    ovas\x10\xbc\x01\x12>\n9kKillEaterEventType_CrystalMaiden_ThreeHeroFreez\
    ingFields\x10\xbd\x01\x12/\n*kKillEaterEventType_Dazzle_ShadowWaveKills\
    \x10\xbe\x01\x121\n,kKillEaterEventType_DeathProphet_SiphonKills\x10\xbf\
    \x01\x12=\n8kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls\x10\
    \xc0\x01\x12C\n>kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStati\
    cStorm\x10\xc1\x01\x124\n/kKillEaterEventType_Doom_InfernalBladeBurnKill\
    s\x10\xc2\x01\x12@\n;kKillEaterEventType_DrowRanger_PrecisionAuraCreepTo\
    werKills\x10\xc3\x01\x121\n,kKillEaterEventType_EmberSpirit_RemnantKills\
    \x10\xc4\x01\x127\n2kKillEaterEventType_EmberSpirit_SleightOfFistKills\
    \x10\xc5\x01\x12<\n7kKillEaterEventType_Enigma_MidnightPulseBlackHoleCom\
    bos\x10\xc6\x01\x122\n-kKillEaterEventType_Enigma_ThreeManBlackHoles\x10\
    \xc7\x01\x12;\n6kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation\
    \x10\xc8\x01\x127\n2kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon\
    \x10\xc9\x01\x126\n1kKillEaterEventType_Gyrocopter_HomingMissileKills\
    \x10\xca\x01\x126\n1kKillEaterEventType_Gyrocopter_RocketBarrageKills\
    \x10\xcb\x01\x124\n/kKillEaterEventType_Huskar_KillsDuringLifeBreak\x10\
    \xcc\x01\x121\n,kKillEaterEventType_Huskar_BurningSpearKills\x10\xcd\x01\
    \x121\n,kKillEaterEventType_Invoker_MultiHeroIceWall\x10\xce\x01\x12-\n(\
    kKillEaterEventType_Invoker_ThreeHeroEMP\x10\xcf\x01\x128\n3kKillEaterEv\
    entType_Invoker_ThreeHeroDeafeningBlast\x10\xd0\x01\x125\n0kKillEaterEve\
    ntType_Invoker_MultiHeroChaosMeteor\x10\xd1\x01\x123\n.kKillEaterEventTy\
    pe_Jakiro_MultiHeroDualBreath\x10\xd2\x01\x126\n1kKillEaterEventType_Jak\
    iro_IcePathMacropyreCombos\x10\xd3\x01\x12/\n*kKillEaterEventType_Leshra\
    c_PulseNovaKills\x10\xd4\x01\x128\n3kKillEaterEventType_Leshrac_ThreeHer\
    oLightningStorm\x10\xd5\x01\x124\n/kKillEaterEventType_Lion_ThreeHeroFin\
    gerOfDeath\x10\xd6\x01\x12(\n#kKillEaterEventType_Meepo_PoofKills\x10\
    \xd7\x01\x122\n-kKillEaterEventType_Meepo_MultiHeroEarthbinds\x10\xd8\
    \x01\x124\n/kKillEaterEventType_NightStalker_NighttimeKills\x10\xd9\x01\
    \x127\n2kKillEaterEventType_Morphling_KillsDuringReplicate\x10\xda\x01\
    \x120\n+kKillEaterEventType_OgreMagi_FireblastKills\x10\xdb\x01\x12-\n(k\
    KillEaterEventType_OgreMagi_IgniteKills\x10\xdc\x01\x12.\n)kKillEaterEve\
    ntType_DominatingKillStreaks\x10\xdd\x01\x12(\n#kKillEaterEventType_Mega\
    KillStreaks\x10\xde\x01\x120\n+kKillEaterEventType_Alchemist_AghanimsGiv\
    en\x10\xdf\x01\x12,\n'kKillEaterEventType_VeilsLeadingToKills\x10\xe0\
    \x01\x12+\n&kKillEaterEventType_DustLeadingToKills\x10\xe1\x01\x127\n2kK\
    illEaterEventType_WitchDoctor_MultiHeroCaskStuns\x10\xe2\x01\x12-\n(kKil\
    lEaterEventType_Weaver_ShukuchiKills\x10\xe3\x01\x129\n4kKillEaterEventT\
    ype_Windrunner_ShackleFocusFireKills\x10\xe4\x01\x12B\n=kKillEaterEventT\
    ype_VengefulSpirit_VengeanceAuraIllusionKills\x10\xe5\x01\x12.\n)kKillEa\
    terEventType_Tusk_WalrusPunchKills\x10\xe6\x01\x12/\n*kKillEaterEventTyp\
    e_Tinker_MultiHeroLasers\x10\xe7\x01\x12;\n6kKillEaterEventType_TemplarA\
    ssassin_MultiHeroPsiBlades\x10\xe8\x01\x125\n0kKillEaterEventType_Sven_K\
    illsDuringGodsStrength\x10\xe9\x01\x122\n-kKillEaterEventType_Sniper_Thr\
    eeHeroShrapnels\x10\xea\x01\x125\n0kKillEaterEventType_Slark_KillsDuring\
    ShadowDance\x10\xeb\x01\x12:\n5kKillEaterEventType_ShadowShaman_MultiHer\
    oEtherShocks\x10\xec\x01\x12=\n8kKillEaterEventType_ShadowShaman_Serpent\
    WardShackleKills\x10\xed\x01\x127\n2kKillEaterEventType_Riki_ThreeHeroTr\
    icksOfTheTrade\x10\xee\x01\x121\n,kKillEaterEventType_Razor_EyeOfTheStor\
    mKills\x10\xef\x01\x12-\n(kKillEaterEventType_Pugna_LifeDrainKills\x10\
    \xf0\x01\x12>\n9kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKill\
    s\x10\xf1\x01\x124\n/kKillEaterEventType_Oracle_MultiHeroFortunesEnd\x10\
    \xf2\x01\x125\n0kKillEaterEventType_Omniknight_PurificationKills\x10\xf3\
    \x01\x12C\n>kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFe\
    ar\x10\xf4\x01\x124\n/kKillEaterEventType_Warlock_ThreeHeroFatalBonds\
    \x10\xf5\x01\x123\n.kKillEaterEventType_Riki_TricksOfTheTradeKills\x10\
    \xf6\x01\x125\n0kKillEaterEventType_Earthshaker_AftershockHits10\x10\xf7\
    \x01\x123\n.kKillEaterEventType_Earthshaker_5HeroEchoslams\x10\xf8\x01\
    \x122\n-kKillEaterEventType_Lina_LagunaBladeHeroKills\x10\xf9\x01\x122\n\
    -kKillEaterEventType_Lina_LightStrikeHeroStuns\x10\xfa\x01\x126\n1kKillE\
    aterEventType_Earthshaker_FissureMultiStuns\x10\xfb\x01\x12/\n*kKillEate\
    rEventType_Earthshaker_TotemKills\x10\xfc\x01\x123\n.kKillEaterEventType\
    _Pangolier_SwashbuckleKills\x10\xfd\x01\x122\n-kKillEaterEventType_Furio\
    n_EnemyHeroesTrapped\x10\xfe\x01\x124\n/kKillEaterEventType_Pangolier_He\
    artpiercerKills\x10\xff\x01\x122\n-kKillEaterEventType_Medusa_MultiHeroS\
    toneGaze\x10\x80\x02\x12.\n)kKillEaterEventType_Medusa_SplitShotKills\
    \x10\x81\x02\x122\n-kKillEaterEventType_Mirana_MultiHeroStarstorm\x10\
    \x82\x02\x128\n3kKillEaterEventType_Mirana_KillsFromMoonlightShadow\x10\
    \x83\x02\x120\n+kKillEaterEventType_Magnus_MultiHeroSkewers\x10\x84\x02\
    \x128\n3kKillEaterEventType_Magnus_MultiHeroReversePolarity\x10\x85\x02\
    \x129\n4kKillEaterEventType_Magnus_HeroesSlowedWithShockwave\x10\x86\x02\
    \x120\n+kKillEaterEventType_NagaSiren_MultiHeroSong\x10\x87\x02\x125\n0k\
    KillEaterEventType_NagaSiren_AlliesHealedBySong\x10\x88\x02\x120\n+kKill\
    EaterEventType_LoneDruid_MultiHeroRoar\x10\x89\x02\x121\n,kKillEaterEven\
    tType_LoneDruid_BattleCryKills\x10\x8a\x02\x125\n0kKillEaterEventType_Wi\
    nterWyvern_ThreeHeroCurses\x10\x8b\x02\x12?\n:kKillEaterEventType_Antima\
    ge_SpellsBlockedWithCounterspell\x10\x8c\x02\x122\n-kKillEaterEventType_\
    Mars_EnemiesKilledInArena\x10\x8d\x02\x121\n,kKillEaterEventType_Mars_Mu\
    ltiHeroGodsRebuke\x10\x8e\x02\x12-\n(kKillEaterEventType_Mars_GodsRebuke\
    Kills\x10\x8f\x02\x122\n-kKillEaterEventType_Snapfire_LizardBlobsKills\
    \x10\x90\x02\x124\n/kKillEaterEventType_Snapfire_TwoHeroCookieStuns\x10\
    \x91\x02\x12\x16\n\x11Custom_KillStreak\x10\x92\x02\x12-\n(kKillEaterEve\
    ntType_Muerta_DeadShotKills\x10\x93\x02\x122\n-kKillEaterEventType_Muert\
    a_PierceTheVeilKills\x10\x94\x02\x121\n,kKillEaterEventType_Muerta_Multi\
    HeroDeadShot\x10\x95\x02\x127\n2kKillEaterEventType_Muerta_DeadShotsInto\
    TheCalling\x10\x96\x02*\xb1\x01\n\x0eELaneSelection\x12\x1d\n\x19k_ELane\
    Selection_SAFELANE\x10\0\x12\x1c\n\x18k_ELaneSelection_OFFLANE\x10\x01\
    \x12\x1c\n\x18k_ELaneSelection_MIDLANE\x10\x02\x12!\n\x1dk_ELaneSelectio\
    n_SUPPORT_SOFT\x10\x03\x12!\n\x1dk_ELaneSelection_SUPPORT_HARD\x10\x04*\
    \xd1\x02\n\x13ELaneSelectionFlags\x12\x1e\n\x1ak_ELaneSelectionFlags_Non\
    e\x10\0\x12\"\n\x1ek_ELaneSelectionFlags_SAFELANE\x10\x01\x12!\n\x1dk_EL\
    aneSelectionFlags_OFFLANE\x10\x02\x12!\n\x1dk_ELaneSelectionFlags_MIDLAN\
    E\x10\x04\x12&\n\"k_ELaneSelectionFlags_SUPPORT_SOFT\x10\x08\x12&\n\"k_E\
    LaneSelectionFlags_SUPPORT_HARD\x10\x10\x12\x1e\n\x1ak_ELaneSelectionFla\
    gs_CORE\x10\x07\x12!\n\x1dk_ELaneSelectionFlags_SUPPORT\x10\x18\x12\x1d\
    \n\x19k_ELaneSelectionFlags_ALL\x10\x1f*i\n\x16EPartyMatchmakingFlags\
    \x12!\n\x1dk_EPartyMatchmakingFlags_None\x10\0\x12,\n(k_EPartyMatchmakin\
    gFlags_LargeRankSpread\x10\x01*\xdc\x02\n\x14EHighPriorityMMState\x12\
    \x1d\n\x19k_EHighPriorityMM_Unknown\x10\0\x12#\n\x1fk_EHighPriorityMM_Mi\
    ssingMMData\x10\x01\x12%\n!k_EHighPriorityMM_ResourceMissing\x10\x02\x12\
    &\n\"k_EHighPriorityMM_ManuallyDisabled\x10\x03\x12!\n\x1dk_EHighPriorit\
    yMM_Min_Enabled\x10@\x12&\n\"k_EHighPriorityMM_AllRolesSelected\x10A\x12\
    #\n\x1fk_EHighPriorityMM_UsingResource\x10B\x12\x1f\n\x1bk_EHighPriority\
    MM_FiveStack\x10C\x12\x20\n\x1ck_EHighPriorityMM_HighDemand\x10D*u\n\x11\
    EReadyCheckStatus\x12\x1f\n\x1bk_EReadyCheckStatus_Unknown\x10\0\x12\x20\
    \n\x1ck_EReadyCheckStatus_NotReady\x10\x01\x12\x1d\n\x19k_EReadyCheckSta\
    tus_Ready\x10\x02*\xf6\x01\n\x18EReadyCheckRequestResult\x12&\n\"k_ERead\
    yCheckRequestResult_Success\x10\0\x120\n,k_EReadyCheckRequestResult_Alre\
    adyInProgress\x10\x01\x12)\n%k_EReadyCheckRequestResult_NotInParty\x10\
    \x02\x12(\n$k_EReadyCheckRequestResult_SendError\x10\x03\x12+\n'k_EReady\
    CheckRequestResult_UnknownError\x10\x04*\xc1\x01\n\x1bEMatchBehaviorScor\
    eVariance\x12)\n%k_EMatchBehaviorScoreVariance_Invalid\x10\0\x12%\n!k_EM\
    atchBehaviorScoreVariance_Low\x10\x01\x12(\n$k_EMatchBehaviorScoreVarian\
    ce_Medium\x10\x02\x12&\n\"k_EMatchBehaviorScoreVariance_High\x10\x03B%Z#\
    github.com/dotabuff/manta/dota;dotaJ\xf9\xd1\x01\n\x07\x12\x05\0\0\xea\
    \x03\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\
    \x0c\n\x08\n\x01\x08\x12\x03\x03\0:\n\t\n\x02\x08\x0b\x12\x03\x03\0:\n\t\
    \n\x02\x03\0\x12\x03\x05\x07\x1c\n\t\n\x02\x03\x01\x12\x03\x06\x07\x1f\n\
    \t\n\x02\x03\x02\x12\x03\x07\x07\x20\n\n\n\x02\x05\0\x12\x04\t\0\x0f\x01\
    \n\n\n\x03\x05\0\x01\x12\x03\t\x05\x13\n\x0b\n\x04\x05\0\x02\0\x12\x03\n\
    \x08&\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\n\x08!\n\x0c\n\x05\x05\0\x02\0\
    \x02\x12\x03\n$%\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x0b\x08%\n\x0c\n\x05\
    \x05\0\x02\x01\x01\x12\x03\x0b\x08\x20\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03\x0b#$\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x0c\x08%\n\x0c\n\x05\x05\0\
    \x02\x02\x01\x12\x03\x0c\x08\x20\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\
    \x0c#$\n\x0b\n\x04\x05\0\x02\x03\x12\x03\r\x08*\n\x0c\n\x05\x05\0\x02\
    \x03\x01\x12\x03\r\x08%\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\r()\n\x0b\
    \n\x04\x05\0\x02\x04\x12\x03\x0e\x08*\n\x0c\n\x05\x05\0\x02\x04\x01\x12\
    \x03\x0e\x08%\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x0e()\n\n\n\x02\x05\
    \x01\x12\x04\x11\0\x1b\x01\n\n\n\x03\x05\x01\x01\x12\x03\x11\x05\x18\n\
    \x0b\n\x04\x05\x01\x02\0\x12\x03\x12\x08'\n\x0c\n\x05\x05\x01\x02\0\x01\
    \x12\x03\x12\x08\"\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x12%&\n\x0b\n\
    \x04\x05\x01\x02\x01\x12\x03\x13\x08+\n\x0c\n\x05\x05\x01\x02\x01\x01\
    \x12\x03\x13\x08&\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x13)*\n\x0b\n\
    \x04\x05\x01\x02\x02\x12\x03\x14\x08*\n\x0c\n\x05\x05\x01\x02\x02\x01\
    \x12\x03\x14\x08%\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x14()\n\x0b\n\
    \x04\x05\x01\x02\x03\x12\x03\x15\x08*\n\x0c\n\x05\x05\x01\x02\x03\x01\
    \x12\x03\x15\x08%\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x15()\n\x0b\n\
    \x04\x05\x01\x02\x04\x12\x03\x16\x08/\n\x0c\n\x05\x05\x01\x02\x04\x01\
    \x12\x03\x16\x08*\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x16-.\n\x0b\n\
    \x04\x05\x01\x02\x05\x12\x03\x17\x080\n\x0c\n\x05\x05\x01\x02\x05\x01\
    \x12\x03\x17\x08*\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03\x17-/\n\x0b\n\
    \x04\x05\x01\x02\x06\x12\x03\x18\x08'\n\x0c\n\x05\x05\x01\x02\x06\x01\
    \x12\x03\x18\x08\"\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\x03\x18%&\n\x0b\n\
    \x04\x05\x01\x02\x07\x12\x03\x19\x08+\n\x0c\n\x05\x05\x01\x02\x07\x01\
    \x12\x03\x19\x08%\n\x0c\n\x05\x05\x01\x02\x07\x02\x12\x03\x19(*\n\x0b\n\
    \x04\x05\x01\x02\x08\x12\x03\x1a\x08'\n\x0c\n\x05\x05\x01\x02\x08\x01\
    \x12\x03\x1a\x08!\n\x0c\n\x05\x05\x01\x02\x08\x02\x12\x03\x1a$&\n\n\n\
    \x02\x05\x02\x12\x04\x1d\0\x20\x01\n\n\n\x03\x05\x02\x01\x12\x03\x1d\x05\
    \x1b\n\x0b\n\x04\x05\x02\x02\0\x12\x03\x1e\x08*\n\x0c\n\x05\x05\x02\x02\
    \0\x01\x12\x03\x1e\x08%\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03\x1e()\n\
    \x0b\n\x04\x05\x02\x02\x01\x12\x03\x1f\x085\n\x0c\n\x05\x05\x02\x02\x01\
    \x01\x12\x03\x1f\x080\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03\x1f34\n\n\
    \n\x02\x05\x03\x12\x04\"\0,\x01\n\n\n\x03\x05\x03\x01\x12\x03\"\x05\x19\
    \n\x0b\n\x04\x05\x03\x02\0\x12\x03#\x08&\n\x0c\n\x05\x05\x03\x02\0\x01\
    \x12\x03#\x08!\n\x0c\n\x05\x05\x03\x02\0\x02\x12\x03#$%\n\x0b\n\x04\x05\
    \x03\x02\x01\x12\x03$\x08,\n\x0c\n\x05\x05\x03\x02\x01\x01\x12\x03$\x08'\
    \n\x0c\n\x05\x05\x03\x02\x01\x02\x12\x03$*+\n\x0b\n\x04\x05\x03\x02\x02\
    \x12\x03%\x08.\n\x0c\n\x05\x05\x03\x02\x02\x01\x12\x03%\x08)\n\x0c\n\x05\
    \x05\x03\x02\x02\x02\x12\x03%,-\n\x0b\n\x04\x05\x03\x02\x03\x12\x03&\x08\
    /\n\x0c\n\x05\x05\x03\x02\x03\x01\x12\x03&\x08*\n\x0c\n\x05\x05\x03\x02\
    \x03\x02\x12\x03&-.\n\x0b\n\x04\x05\x03\x02\x04\x12\x03'\x08+\n\x0c\n\
    \x05\x05\x03\x02\x04\x01\x12\x03'\x08%\n\x0c\n\x05\x05\x03\x02\x04\x02\
    \x12\x03'(*\n\x0b\n\x04\x05\x03\x02\x05\x12\x03(\x080\n\x0c\n\x05\x05\
    \x03\x02\x05\x01\x12\x03(\x08*\n\x0c\n\x05\x05\x03\x02\x05\x02\x12\x03(-\
    /\n\x0b\n\x04\x05\x03\x02\x06\x12\x03)\x08-\n\x0c\n\x05\x05\x03\x02\x06\
    \x01\x12\x03)\x08'\n\x0c\n\x05\x05\x03\x02\x06\x02\x12\x03)*,\n\x0b\n\
    \x04\x05\x03\x02\x07\x12\x03*\x08)\n\x0c\n\x05\x05\x03\x02\x07\x01\x12\
    \x03*\x08#\n\x0c\n\x05\x05\x03\x02\x07\x02\x12\x03*&(\n\x0b\n\x04\x05\
    \x03\x02\x08\x12\x03+\x08*\n\x0c\n\x05\x05\x03\x02\x08\x01\x12\x03+\x08$\
    \n\x0c\n\x05\x05\x03\x02\x08\x02\x12\x03+')\n\n\n\x02\x05\x04\x12\x04.\0\
    2\x01\n\n\n\x03\x05\x04\x01\x12\x03.\x05\x16\n\x0b\n\x04\x05\x04\x02\0\
    \x12\x03/\x08(\n\x0c\n\x05\x05\x04\x02\0\x01\x12\x03/\x08#\n\x0c\n\x05\
    \x05\x04\x02\0\x02\x12\x03/&'\n\x0b\n\x04\x05\x04\x02\x01\x12\x030\x08)\
    \n\x0c\n\x05\x05\x04\x02\x01\x01\x12\x030\x08$\n\x0c\n\x05\x05\x04\x02\
    \x01\x02\x12\x030'(\n\x0b\n\x04\x05\x04\x02\x02\x12\x031\x08&\n\x0c\n\
    \x05\x05\x04\x02\x02\x01\x12\x031\x08!\n\x0c\n\x05\x05\x04\x02\x02\x02\
    \x12\x031$%\n\n\n\x02\x05\x05\x12\x044\0:\x01\n\n\n\x03\x05\x05\x01\x12\
    \x034\x05\x1d\n\x0b\n\x04\x05\x05\x02\0\x12\x035\x08/\n\x0c\n\x05\x05\
    \x05\x02\0\x01\x12\x035\x08*\n\x0c\n\x05\x05\x05\x02\0\x02\x12\x035-.\n\
    \x0b\n\x04\x05\x05\x02\x01\x12\x036\x089\n\x0c\n\x05\x05\x05\x02\x01\x01\
    \x12\x036\x084\n\x0c\n\x05\x05\x05\x02\x01\x02\x12\x03678\n\x0b\n\x04\
    \x05\x05\x02\x02\x12\x037\x082\n\x0c\n\x05\x05\x05\x02\x02\x01\x12\x037\
    \x08-\n\x0c\n\x05\x05\x05\x02\x02\x02\x12\x03701\n\x0b\n\x04\x05\x05\x02\
    \x03\x12\x038\x081\n\x0c\n\x05\x05\x05\x02\x03\x01\x12\x038\x08,\n\x0c\n\
    \x05\x05\x05\x02\x03\x02\x12\x038/0\n\x0b\n\x04\x05\x05\x02\x04\x12\x039\
    \x084\n\x0c\n\x05\x05\x05\x02\x04\x01\x12\x039\x08/\n\x0c\n\x05\x05\x05\
    \x02\x04\x02\x12\x03923\n\n\n\x02\x05\x06\x12\x04<\0A\x01\n\n\n\x03\x05\
    \x06\x01\x12\x03<\x05\x20\n\x0b\n\x04\x05\x06\x02\0\x12\x03=\x082\n\x0c\
    \n\x05\x05\x06\x02\0\x01\x12\x03=\x08-\n\x0c\n\x05\x05\x06\x02\0\x02\x12\
    \x03=01\n\x0b\n\x04\x05\x06\x02\x01\x12\x03>\x08.\n\x0c\n\x05\x05\x06\
    \x02\x01\x01\x12\x03>\x08)\n\x0c\n\x05\x05\x06\x02\x01\x02\x12\x03>,-\n\
    \x0b\n\x04\x05\x06\x02\x02\x12\x03?\x081\n\x0c\n\x05\x05\x06\x02\x02\x01\
    \x12\x03?\x08,\n\x0c\n\x05\x05\x06\x02\x02\x02\x12\x03?/0\n\x0b\n\x04\
    \x05\x06\x02\x03\x12\x03@\x08/\n\x0c\n\x05\x05\x06\x02\x03\x01\x12\x03@\
    \x08*\n\x0c\n\x05\x05\x06\x02\x03\x02\x12\x03@-.\n\n\n\x02\x04\0\x12\x04\
    C\0R\x01\n\n\n\x03\x04\0\x01\x12\x03C\x08\x1a\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03D\x08#\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03D\x08\x10\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03D\x11\x15\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03D\
    \x16\x1e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03D!\"\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03E\x08.\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03E\x08\x10\n\x0c\
    \n\x05\x04\0\x02\x01\x05\x12\x03E\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03E\x18)\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03E,-\n\x0b\n\x04\x04\
    \0\x02\x02\x12\x03F\x08.\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03F\x08\x10\
    \n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03F\x11\x17\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03F\x18)\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03F,-\n\x0b\n\
    \x04\x04\0\x02\x03\x12\x03G\x087\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03G\
    \x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03G\x11\x17\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03G\x182\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03G56\n\
    \x0b\n\x04\x04\0\x02\x04\x12\x03H\x08.\n\x0c\n\x05\x04\0\x02\x04\x04\x12\
    \x03H\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03H\x11\x15\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03H\x16(\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03H+\
    -\n\x0b\n\x04\x04\0\x02\x05\x12\x03I\x080\n\x0c\n\x05\x04\0\x02\x05\x04\
    \x12\x03I\x08\x10\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03I\x11\x17\n\x0c\n\
    \x05\x04\0\x02\x05\x01\x12\x03I\x18+\n\x0c\n\x05\x04\0\x02\x05\x03\x12\
    \x03I./\n\x0b\n\x04\x04\0\x02\x06\x12\x03J\x08*\n\x0c\n\x05\x04\0\x02\
    \x06\x04\x12\x03J\x08\x10\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03J\x11\x17\
    \n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03J\x18%\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03J()\n\x0b\n\x04\x04\0\x02\x07\x12\x03K\x082\n\x0c\n\x05\x04\
    \0\x02\x07\x04\x12\x03K\x08\x10\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03K\
    \x11\x17\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03K\x18-\n\x0c\n\x05\x04\0\
    \x02\x07\x03\x12\x03K01\n\x0b\n\x04\x04\0\x02\x08\x12\x03L\x08)\n\x0c\n\
    \x05\x04\0\x02\x08\x04\x12\x03L\x08\x10\n\x0c\n\x05\x04\0\x02\x08\x05\
    \x12\x03L\x11\x15\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03L\x16#\n\x0c\n\
    \x05\x04\0\x02\x08\x03\x12\x03L&(\n\x0b\n\x04\x04\0\x02\t\x12\x03M\x082\
    \n\x0c\n\x05\x04\0\x02\t\x04\x12\x03M\x08\x10\n\x0c\n\x05\x04\0\x02\t\
    \x05\x12\x03M\x11\x17\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03M\x18,\n\x0c\n\
    \x05\x04\0\x02\t\x03\x12\x03M/1\n\x0b\n\x04\x04\0\x02\n\x12\x03N\x082\n\
    \x0c\n\x05\x04\0\x02\n\x04\x12\x03N\x08\x10\n\x0c\n\x05\x04\0\x02\n\x05\
    \x12\x03N\x11\x15\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03N\x16,\n\x0c\n\x05\
    \x04\0\x02\n\x03\x12\x03N/1\n\x0b\n\x04\x04\0\x02\x0b\x12\x03O\x08+\n\
    \x0c\n\x05\x04\0\x02\x0b\x04\x12\x03O\x08\x10\n\x0c\n\x05\x04\0\x02\x0b\
    \x05\x12\x03O\x11\x15\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03O\x16%\n\x0c\
    \n\x05\x04\0\x02\x0b\x03\x12\x03O(*\n\x0b\n\x04\x04\0\x02\x0c\x12\x03P\
    \x083\n\x0c\n\x05\x04\0\x02\x0c\x04\x12\x03P\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x0c\x05\x12\x03P\x11\x15\n\x0c\n\x05\x04\0\x02\x0c\x01\x12\x03P\x16\
    -\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03P02\n\x0b\n\x04\x04\0\x02\r\x12\
    \x03Q\x08*\n\x0c\n\x05\x04\0\x02\r\x04\x12\x03Q\x08\x10\n\x0c\n\x05\x04\
    \0\x02\r\x05\x12\x03Q\x11\x15\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03Q\x16$\
    \n\x0c\n\x05\x04\0\x02\r\x03\x12\x03Q')\n\x0b\n\x02\x04\x01\x12\x05T\0\
    \x8e\x01\x01\n\n\n\x03\x04\x01\x01\x12\x03T\x08\x14\n\x0c\n\x04\x04\x01\
    \x04\0\x12\x04U\x08Y\t\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03U\r\x12\n\r\
    \n\x06\x04\x01\x04\0\x02\0\x12\x03V\x10\x17\n\x0e\n\x07\x04\x01\x04\0\
    \x02\0\x01\x12\x03V\x10\x12\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03V\
    \x15\x16\n\r\n\x06\x04\x01\x04\0\x02\x01\x12\x03W\x10\"\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x01\x01\x12\x03W\x10\x1d\n\x0e\n\x07\x04\x01\x04\0\x02\
    \x01\x02\x12\x03W\x20!\n\r\n\x06\x04\x01\x04\0\x02\x02\x12\x03X\x10\x1d\
    \n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x03X\x10\x18\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x02\x02\x12\x03X\x1b\x1c\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03[\x08%\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03[\x08\x10\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03[\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03[\x18\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03[#$\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\\\x08'\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\\\
    \x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\\\x11\x18\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03\\\x19\"\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03\\%&\n\x0b\n\x04\x04\x01\x02\x02\x12\x03]\x08(\n\x0c\n\x05\x04\x01\
    \x02\x02\x04\x12\x03]\x08\x10\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03]\
    \x11\x18\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03]\x19#\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03]&'\n\x0b\n\x04\x04\x01\x02\x03\x12\x03^\x08'\n\
    \x0c\n\x05\x04\x01\x02\x03\x04\x12\x03^\x08\x10\n\x0c\n\x05\x04\x01\x02\
    \x03\x05\x12\x03^\x11\x17\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03^\x18\"\
    \n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03^%&\n\x0b\n\x04\x04\x01\x02\x04\
    \x12\x03_\x08.\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\x03_\x08\x10\n\x0c\n\
    \x05\x04\x01\x02\x04\x06\x12\x03_\x11#\n\x0c\n\x05\x04\x01\x02\x04\x01\
    \x12\x03_$)\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03_,-\n\x0b\n\x04\x04\
    \x01\x02\x05\x12\x03`\x08?\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03`\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03`\x11\x17\n\x0c\n\x05\x04\
    \x01\x02\x05\x01\x12\x03`\x18:\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03`=\
    >\n\x0b\n\x04\x04\x01\x02\x06\x12\x03a\x08:\n\x0c\n\x05\x04\x01\x02\x06\
    \x04\x12\x03a\x08\x10\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03a\x11\x17\n\
    \x0c\n\x05\x04\x01\x02\x06\x01\x12\x03a\x184\n\x0c\n\x05\x04\x01\x02\x06\
    \x03\x12\x03a79\n\x0b\n\x04\x04\x01\x02\x07\x12\x03b\x080\n\x0c\n\x05\
    \x04\x01\x02\x07\x04\x12\x03b\x08\x10\n\x0c\n\x05\x04\x01\x02\x07\x05\
    \x12\x03b\x11\x17\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x03b\x18*\n\x0c\n\
    \x05\x04\x01\x02\x07\x03\x12\x03b-/\n\x0b\n\x04\x04\x01\x02\x08\x12\x03c\
    \x08)\n\x0c\n\x05\x04\x01\x02\x08\x04\x12\x03c\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\x08\x05\x12\x03c\x11\x17\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\
    \x03c\x18#\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x03c&(\n\x0b\n\x04\x04\
    \x01\x02\t\x12\x03d\x08)\n\x0c\n\x05\x04\x01\x02\t\x04\x12\x03d\x08\x10\
    \n\x0c\n\x05\x04\x01\x02\t\x05\x12\x03d\x11\x17\n\x0c\n\x05\x04\x01\x02\
    \t\x01\x12\x03d\x18#\n\x0c\n\x05\x04\x01\x02\t\x03\x12\x03d&(\n\x0b\n\
    \x04\x04\x01\x02\n\x12\x03e\x085\n\x0c\n\x05\x04\x01\x02\n\x04\x12\x03e\
    \x08\x10\n\x0c\n\x05\x04\x01\x02\n\x05\x12\x03e\x11\x17\n\x0c\n\x05\x04\
    \x01\x02\n\x01\x12\x03e\x18/\n\x0c\n\x05\x04\x01\x02\n\x03\x12\x03e24\n\
    \x0b\n\x04\x04\x01\x02\x0b\x12\x03f\x08+\n\x0c\n\x05\x04\x01\x02\x0b\x04\
    \x12\x03f\x08\x10\n\x0c\n\x05\x04\x01\x02\x0b\x06\x12\x03f\x11\x1a\n\x0c\
    \n\x05\x04\x01\x02\x0b\x01\x12\x03f\x1b%\n\x0c\n\x05\x04\x01\x02\x0b\x03\
    \x12\x03f(*\n\x0b\n\x04\x04\x01\x02\x0c\x12\x03g\x08%\n\x0c\n\x05\x04\
    \x01\x02\x0c\x04\x12\x03g\x08\x10\n\x0c\n\x05\x04\x01\x02\x0c\x05\x12\
    \x03g\x11\x17\n\x0c\n\x05\x04\x01\x02\x0c\x01\x12\x03g\x18\x1f\n\x0c\n\
    \x05\x04\x01\x02\x0c\x03\x12\x03g\"$\n\x0b\n\x04\x04\x01\x02\r\x12\x03h\
    \x08'\n\x0c\n\x05\x04\x01\x02\r\x04\x12\x03h\x08\x10\n\x0c\n\x05\x04\x01\
    \x02\r\x05\x12\x03h\x11\x17\n\x0c\n\x05\x04\x01\x02\r\x01\x12\x03h\x18!\
    \n\x0c\n\x05\x04\x01\x02\r\x03\x12\x03h$&\n\x0b\n\x04\x04\x01\x02\x0e\
    \x12\x03i\x08*\n\x0c\n\x05\x04\x01\x02\x0e\x04\x12\x03i\x08\x10\n\x0c\n\
    \x05\x04\x01\x02\x0e\x05\x12\x03i\x11\x17\n\x0c\n\x05\x04\x01\x02\x0e\
    \x01\x12\x03i\x18$\n\x0c\n\x05\x04\x01\x02\x0e\x03\x12\x03i')\n\x0b\n\
    \x04\x04\x01\x02\x0f\x12\x03j\x08,\n\x0c\n\x05\x04\x01\x02\x0f\x04\x12\
    \x03j\x08\x10\n\x0c\n\x05\x04\x01\x02\x0f\x05\x12\x03j\x11\x17\n\x0c\n\
    \x05\x04\x01\x02\x0f\x01\x12\x03j\x18&\n\x0c\n\x05\x04\x01\x02\x0f\x03\
    \x12\x03j)+\n\x0b\n\x04\x04\x01\x02\x10\x12\x03k\x087\n\x0c\n\x05\x04\
    \x01\x02\x10\x04\x12\x03k\x08\x10\n\x0c\n\x05\x04\x01\x02\x10\x05\x12\
    \x03k\x11\x17\n\x0c\n\x05\x04\x01\x02\x10\x01\x12\x03k\x181\n\x0c\n\x05\
    \x04\x01\x02\x10\x03\x12\x03k46\n\x0b\n\x04\x04\x01\x02\x11\x12\x03l\x08\
    7\n\x0c\n\x05\x04\x01\x02\x11\x04\x12\x03l\x08\x10\n\x0c\n\x05\x04\x01\
    \x02\x11\x05\x12\x03l\x11\x17\n\x0c\n\x05\x04\x01\x02\x11\x01\x12\x03l\
    \x181\n\x0c\n\x05\x04\x01\x02\x11\x03\x12\x03l46\n\x0b\n\x04\x04\x01\x02\
    \x12\x12\x03m\x08;\n\x0c\n\x05\x04\x01\x02\x12\x04\x12\x03m\x08\x10\n\
    \x0c\n\x05\x04\x01\x02\x12\x05\x12\x03m\x11\x17\n\x0c\n\x05\x04\x01\x02\
    \x12\x01\x12\x03m\x185\n\x0c\n\x05\x04\x01\x02\x12\x03\x12\x03m8:\n\x0b\
    \n\x04\x04\x01\x02\x13\x12\x03n\x08,\n\x0c\n\x05\x04\x01\x02\x13\x04\x12\
    \x03n\x08\x10\n\x0c\n\x05\x04\x01\x02\x13\x05\x12\x03n\x11\x17\n\x0c\n\
    \x05\x04\x01\x02\x13\x01\x12\x03n\x18&\n\x0c\n\x05\x04\x01\x02\x13\x03\
    \x12\x03n)+\n\x0b\n\x04\x04\x01\x02\x14\x12\x03o\x081\n\x0c\n\x05\x04\
    \x01\x02\x14\x04\x12\x03o\x08\x10\n\x0c\n\x05\x04\x01\x02\x14\x06\x12\
    \x03o\x11#\n\x0c\n\x05\x04\x01\x02\x14\x01\x12\x03o$+\n\x0c\n\x05\x04\
    \x01\x02\x14\x03\x12\x03o.0\n\x0b\n\x04\x04\x01\x02\x15\x12\x03p\x08:\n\
    \x0c\n\x05\x04\x01\x02\x15\x04\x12\x03p\x08\x10\n\x0c\n\x05\x04\x01\x02\
    \x15\x05\x12\x03p\x11\x17\n\x0c\n\x05\x04\x01\x02\x15\x01\x12\x03p\x184\
    \n\x0c\n\x05\x04\x01\x02\x15\x03\x12\x03p79\n\x0b\n\x04\x04\x01\x02\x16\
    \x12\x03q\x082\n\x0c\n\x05\x04\x01\x02\x16\x04\x12\x03q\x08\x10\n\x0c\n\
    \x05\x04\x01\x02\x16\x05\x12\x03q\x11\x15\n\x0c\n\x05\x04\x01\x02\x16\
    \x01\x12\x03q\x16,\n\x0c\n\x05\x04\x01\x02\x16\x03\x12\x03q/1\n\x0b\n\
    \x04\x04\x01\x02\x17\x12\x03r\x086\n\x0c\n\x05\x04\x01\x02\x17\x04\x12\
    \x03r\x08\x10\n\x0c\n\x05\x04\x01\x02\x17\x06\x12\x03r\x11#\n\x0c\n\x05\
    \x04\x01\x02\x17\x01\x12\x03r$0\n\x0c\n\x05\x04\x01\x02\x17\x03\x12\x03r\
    35\n\x0b\n\x04\x04\x01\x02\x18\x12\x03s\x086\n\x0c\n\x05\x04\x01\x02\x18\
    \x04\x12\x03s\x08\x10\n\x0c\n\x05\x04\x01\x02\x18\x06\x12\x03s\x11#\n\
    \x0c\n\x05\x04\x01\x02\x18\x01\x12\x03s$0\n\x0c\n\x05\x04\x01\x02\x18\
    \x03\x12\x03s35\n\x0b\n\x04\x04\x01\x02\x19\x12\x03t\x08+\n\x0c\n\x05\
    \x04\x01\x02\x19\x04\x12\x03t\x08\x10\n\x0c\n\x05\x04\x01\x02\x19\x05\
    \x12\x03t\x11\x17\n\x0c\n\x05\x04\x01\x02\x19\x01\x12\x03t\x18%\n\x0c\n\
    \x05\x04\x01\x02\x19\x03\x12\x03t(*\n\x0b\n\x04\x04\x01\x02\x1a\x12\x03u\
    \x081\n\x0c\n\x05\x04\x01\x02\x1a\x04\x12\x03u\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\x1a\x05\x12\x03u\x11\x17\n\x0c\n\x05\x04\x01\x02\x1a\x01\x12\
    \x03u\x18+\n\x0c\n\x05\x04\x01\x02\x1a\x03\x12\x03u.0\n\x0b\n\x04\x04\
    \x01\x02\x1b\x12\x03v\x085\n\x0c\n\x05\x04\x01\x02\x1b\x04\x12\x03v\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\x1b\x05\x12\x03v\x11\x17\n\x0c\n\x05\x04\
    \x01\x02\x1b\x01\x12\x03v\x18/\n\x0c\n\x05\x04\x01\x02\x1b\x03\x12\x03v2\
    4\n\x0b\n\x04\x04\x01\x02\x1c\x12\x03w\x081\n\x0c\n\x05\x04\x01\x02\x1c\
    \x04\x12\x03w\x08\x10\n\x0c\n\x05\x04\x01\x02\x1c\x05\x12\x03w\x11\x17\n\
    \x0c\n\x05\x04\x01\x02\x1c\x01\x12\x03w\x18+\n\x0c\n\x05\x04\x01\x02\x1c\
    \x03\x12\x03w.0\n\x0b\n\x04\x04\x01\x02\x1d\x12\x03x\x083\n\x0c\n\x05\
    \x04\x01\x02\x1d\x04\x12\x03x\x08\x10\n\x0c\n\x05\x04\x01\x02\x1d\x05\
    \x12\x03x\x11\x17\n\x0c\n\x05\x04\x01\x02\x1d\x01\x12\x03x\x18-\n\x0c\n\
    \x05\x04\x01\x02\x1d\x03\x12\x03x02\n\x0b\n\x04\x04\x01\x02\x1e\x12\x03y\
    \x081\n\x0c\n\x05\x04\x01\x02\x1e\x04\x12\x03y\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\x1e\x05\x12\x03y\x11\x17\n\x0c\n\x05\x04\x01\x02\x1e\x01\x12\
    \x03y\x18+\n\x0c\n\x05\x04\x01\x02\x1e\x03\x12\x03y.0\n\x0b\n\x04\x04\
    \x01\x02\x1f\x12\x03z\x083\n\x0c\n\x05\x04\x01\x02\x1f\x04\x12\x03z\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\x1f\x05\x12\x03z\x11\x17\n\x0c\n\x05\x04\
    \x01\x02\x1f\x01\x12\x03z\x18-\n\x0c\n\x05\x04\x01\x02\x1f\x03\x12\x03z0\
    2\n\x0b\n\x04\x04\x01\x02\x20\x12\x03{\x089\n\x0c\n\x05\x04\x01\x02\x20\
    \x04\x12\x03{\x08\x10\n\x0c\n\x05\x04\x01\x02\x20\x05\x12\x03{\x11\x17\n\
    \x0c\n\x05\x04\x01\x02\x20\x01\x12\x03{\x183\n\x0c\n\x05\x04\x01\x02\x20\
    \x03\x12\x03{68\n\x0b\n\x04\x04\x01\x02!\x12\x03|\x08N\n\x0c\n\x05\x04\
    \x01\x02!\x04\x12\x03|\x08\x10\n\x0c\n\x05\x04\x01\x02!\x06\x12\x03|\x11\
    +\n\x0c\n\x05\x04\x01\x02!\x01\x12\x03|,H\n\x0c\n\x05\x04\x01\x02!\x03\
    \x12\x03|KM\n\x0b\n\x04\x04\x01\x02\"\x12\x03}\x089\n\x0c\n\x05\x04\x01\
    \x02\"\x04\x12\x03}\x08\x10\n\x0c\n\x05\x04\x01\x02\"\x05\x12\x03}\x11\
    \x17\n\x0c\n\x05\x04\x01\x02\"\x01\x12\x03}\x183\n\x0c\n\x05\x04\x01\x02\
    \"\x03\x12\x03}68\n\x0b\n\x04\x04\x01\x02#\x12\x03~\x088\n\x0c\n\x05\x04\
    \x01\x02#\x04\x12\x03~\x08\x10\n\x0c\n\x05\x04\x01\x02#\x05\x12\x03~\x11\
    \x17\n\x0c\n\x05\x04\x01\x02#\x01\x12\x03~\x182\n\x0c\n\x05\x04\x01\x02#\
    \x03\x12\x03~57\n\x0b\n\x04\x04\x01\x02$\x12\x03\x7f\x086\n\x0c\n\x05\
    \x04\x01\x02$\x04\x12\x03\x7f\x08\x10\n\x0c\n\x05\x04\x01\x02$\x05\x12\
    \x03\x7f\x11\x17\n\x0c\n\x05\x04\x01\x02$\x01\x12\x03\x7f\x180\n\x0c\n\
    \x05\x04\x01\x02$\x03\x12\x03\x7f35\n\x0c\n\x04\x04\x01\x02%\x12\x04\x80\
    \x01\x08&\n\r\n\x05\x04\x01\x02%\x04\x12\x04\x80\x01\x08\x10\n\r\n\x05\
    \x04\x01\x02%\x05\x12\x04\x80\x01\x11\x15\n\r\n\x05\x04\x01\x02%\x01\x12\
    \x04\x80\x01\x16\x20\n\r\n\x05\x04\x01\x02%\x03\x12\x04\x80\x01#%\n\x0c\
    \n\x04\x04\x01\x02&\x12\x04\x81\x01\x083\n\r\n\x05\x04\x01\x02&\x04\x12\
    \x04\x81\x01\x08\x10\n\r\n\x05\x04\x01\x02&\x05\x12\x04\x81\x01\x11\x17\
    \n\r\n\x05\x04\x01\x02&\x01\x12\x04\x81\x01\x18-\n\r\n\x05\x04\x01\x02&\
    \x03\x12\x04\x81\x0102\n\x0c\n\x04\x04\x01\x02'\x12\x04\x82\x01\x087\n\r\
    \n\x05\x04\x01\x02'\x04\x12\x04\x82\x01\x08\x10\n\r\n\x05\x04\x01\x02'\
    \x06\x12\x04\x82\x01\x11%\n\r\n\x05\x04\x01\x02'\x01\x12\x04\x82\x01&1\n\
    \r\n\x05\x04\x01\x02'\x03\x12\x04\x82\x0146\n\x0c\n\x04\x04\x01\x02(\x12\
    \x04\x83\x01\x08=\n\r\n\x05\x04\x01\x02(\x04\x12\x04\x83\x01\x08\x10\n\r\
    \n\x05\x04\x01\x02(\x05\x12\x04\x83\x01\x11\x17\n\r\n\x05\x04\x01\x02(\
    \x01\x12\x04\x83\x01\x187\n\r\n\x05\x04\x01\x02(\x03\x12\x04\x83\x01:<\n\
    \x0c\n\x04\x04\x01\x02)\x12\x04\x84\x01\x08=\n\r\n\x05\x04\x01\x02)\x04\
    \x12\x04\x84\x01\x08\x10\n\r\n\x05\x04\x01\x02)\x05\x12\x04\x84\x01\x11\
    \x17\n\r\n\x05\x04\x01\x02)\x01\x12\x04\x84\x01\x187\n\r\n\x05\x04\x01\
    \x02)\x03\x12\x04\x84\x01:<\n\x0c\n\x04\x04\x01\x02*\x12\x04\x85\x01\x08\
    .\n\r\n\x05\x04\x01\x02*\x04\x12\x04\x85\x01\x08\x10\n\r\n\x05\x04\x01\
    \x02*\x05\x12\x04\x85\x01\x11\x15\n\r\n\x05\x04\x01\x02*\x01\x12\x04\x85\
    \x01\x16(\n\r\n\x05\x04\x01\x02*\x03\x12\x04\x85\x01+-\n\x0c\n\x04\x04\
    \x01\x02+\x12\x04\x86\x01\x086\n\r\n\x05\x04\x01\x02+\x04\x12\x04\x86\
    \x01\x08\x10\n\r\n\x05\x04\x01\x02+\x05\x12\x04\x86\x01\x11\x15\n\r\n\
    \x05\x04\x01\x02+\x01\x12\x04\x86\x01\x160\n\r\n\x05\x04\x01\x02+\x03\
    \x12\x04\x86\x0135\n\x0c\n\x04\x04\x01\x02,\x12\x04\x87\x01\x08/\n\r\n\
    \x05\x04\x01\x02,\x04\x12\x04\x87\x01\x08\x10\n\r\n\x05\x04\x01\x02,\x05\
    \x12\x04\x87\x01\x11\x17\n\r\n\x05\x04\x01\x02,\x01\x12\x04\x87\x01\x18)\
    \n\r\n\x05\x04\x01\x02,\x03\x12\x04\x87\x01,.\n\x0c\n\x04\x04\x01\x02-\
    \x12\x04\x88\x01\x08?\n\r\n\x05\x04\x01\x02-\x04\x12\x04\x88\x01\x08\x10\
    \n\r\n\x05\x04\x01\x02-\x06\x12\x04\x88\x01\x11%\n\r\n\x05\x04\x01\x02-\
    \x01\x12\x04\x88\x01&9\n\r\n\x05\x04\x01\x02-\x03\x12\x04\x88\x01<>\n\
    \x0c\n\x04\x04\x01\x02.\x12\x04\x89\x01\x083\n\r\n\x05\x04\x01\x02.\x04\
    \x12\x04\x89\x01\x08\x10\n\r\n\x05\x04\x01\x02.\x05\x12\x04\x89\x01\x11\
    \x15\n\r\n\x05\x04\x01\x02.\x01\x12\x04\x89\x01\x16-\n\r\n\x05\x04\x01\
    \x02.\x03\x12\x04\x89\x0102\n\x0c\n\x04\x04\x01\x02/\x12\x04\x8a\x01\x08\
    9\n\r\n\x05\x04\x01\x02/\x04\x12\x04\x8a\x01\x08\x10\n\r\n\x05\x04\x01\
    \x02/\x05\x12\x04\x8a\x01\x11\x17\n\r\n\x05\x04\x01\x02/\x01\x12\x04\x8a\
    \x01\x183\n\r\n\x05\x04\x01\x02/\x03\x12\x04\x8a\x0168\n\x0c\n\x04\x04\
    \x01\x020\x12\x04\x8b\x01\x08*\n\r\n\x05\x04\x01\x020\x04\x12\x04\x8b\
    \x01\x08\x10\n\r\n\x05\x04\x01\x020\x05\x12\x04\x8b\x01\x11\x15\n\r\n\
    \x05\x04\x01\x020\x01\x12\x04\x8b\x01\x16$\n\r\n\x05\x04\x01\x020\x03\
    \x12\x04\x8b\x01')\n\x0c\n\x04\x04\x01\x021\x12\x04\x8c\x01\x081\n\r\n\
    \x05\x04\x01\x021\x04\x12\x04\x8c\x01\x08\x10\n\r\n\x05\x04\x01\x021\x05\
    \x12\x04\x8c\x01\x11\x17\n\r\n\x05\x04\x01\x021\x01\x12\x04\x8c\x01\x18+\
    \n\r\n\x05\x04\x01\x021\x03\x12\x04\x8c\x01.0\n\x0c\n\x04\x04\x01\x022\
    \x12\x04\x8d\x01\x083\n\r\n\x05\x04\x01\x022\x04\x12\x04\x8d\x01\x08\x10\
    \n\r\n\x05\x04\x01\x022\x05\x12\x04\x8d\x01\x11\x17\n\r\n\x05\x04\x01\
    \x022\x01\x12\x04\x8d\x01\x18-\n\r\n\x05\x04\x01\x022\x03\x12\x04\x8d\
    \x0102\n\x0c\n\x02\x04\x02\x12\x06\x90\x01\0\x9f\x01\x01\n\x0b\n\x03\x04\
    \x02\x01\x12\x04\x90\x01\x08\x1a\n\x0e\n\x04\x04\x02\x03\0\x12\x06\x91\
    \x01\x08\x95\x01\t\n\r\n\x05\x04\x02\x03\0\x01\x12\x04\x91\x01\x10\x1b\n\
    \x0e\n\x06\x04\x02\x03\0\x02\0\x12\x04\x92\x01\x10)\n\x0f\n\x07\x04\x02\
    \x03\0\x02\0\x04\x12\x04\x92\x01\x10\x18\n\x0f\n\x07\x04\x02\x03\0\x02\0\
    \x05\x12\x04\x92\x01\x19\x1f\n\x0f\n\x07\x04\x02\x03\0\x02\0\x01\x12\x04\
    \x92\x01\x20$\n\x0f\n\x07\x04\x02\x03\0\x02\0\x03\x12\x04\x92\x01'(\n\
    \x0e\n\x06\x04\x02\x03\0\x02\x01\x12\x04\x93\x01\x10.\n\x0f\n\x07\x04\
    \x02\x03\0\x02\x01\x04\x12\x04\x93\x01\x10\x18\n\x0f\n\x07\x04\x02\x03\0\
    \x02\x01\x05\x12\x04\x93\x01\x19\x20\n\x0f\n\x07\x04\x02\x03\0\x02\x01\
    \x01\x12\x04\x93\x01!)\n\x0f\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x04\x93\
    \x01,-\n\x0e\n\x06\x04\x02\x03\0\x02\x02\x12\x04\x94\x01\x10+\n\x0f\n\
    \x07\x04\x02\x03\0\x02\x02\x04\x12\x04\x94\x01\x10\x18\n\x0f\n\x07\x04\
    \x02\x03\0\x02\x02\x05\x12\x04\x94\x01\x19\x1d\n\x0f\n\x07\x04\x02\x03\0\
    \x02\x02\x01\x12\x04\x94\x01\x1e&\n\x0f\n\x07\x04\x02\x03\0\x02\x02\x03\
    \x12\x04\x94\x01)*\n\x0c\n\x04\x04\x02\x02\0\x12\x04\x97\x01\x08%\n\r\n\
    \x05\x04\x02\x02\0\x04\x12\x04\x97\x01\x08\x10\n\r\n\x05\x04\x02\x02\0\
    \x05\x12\x04\x97\x01\x11\x17\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\x97\x01\
    \x18\x20\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\x97\x01#$\n\x0c\n\x04\x04\
    \x02\x02\x01\x12\x04\x98\x01\x08'\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\
    \x98\x01\x08\x10\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\x98\x01\x11\x18\n\
    \r\n\x05\x04\x02\x02\x01\x01\x12\x04\x98\x01\x19\"\n\r\n\x05\x04\x02\x02\
    \x01\x03\x12\x04\x98\x01%&\n\x0c\n\x04\x04\x02\x02\x02\x12\x04\x99\x01\
    \x08(\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x99\x01\x08\x10\n\r\n\x05\
    \x04\x02\x02\x02\x05\x12\x04\x99\x01\x11\x17\n\r\n\x05\x04\x02\x02\x02\
    \x01\x12\x04\x99\x01\x18#\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\x99\x01&\
    '\n\x0c\n\x04\x04\x02\x02\x03\x12\x04\x9a\x01\x08<\n\r\n\x05\x04\x02\x02\
    \x03\x04\x12\x04\x9a\x01\x08\x10\n\r\n\x05\x04\x02\x02\x03\x06\x12\x04\
    \x9a\x01\x11/\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\x9a\x0107\n\r\n\x05\
    \x04\x02\x02\x03\x03\x12\x04\x9a\x01:;\n\x0c\n\x04\x04\x02\x02\x04\x12\
    \x04\x9b\x01\x08$\n\r\n\x05\x04\x02\x02\x04\x04\x12\x04\x9b\x01\x08\x10\
    \n\r\n\x05\x04\x02\x02\x04\x05\x12\x04\x9b\x01\x11\x17\n\r\n\x05\x04\x02\
    \x02\x04\x01\x12\x04\x9b\x01\x18\x1f\n\r\n\x05\x04\x02\x02\x04\x03\x12\
    \x04\x9b\x01\"#\n\x0c\n\x04\x04\x02\x02\x05\x12\x04\x9c\x01\x08.\n\r\n\
    \x05\x04\x02\x02\x05\x04\x12\x04\x9c\x01\x08\x10\n\r\n\x05\x04\x02\x02\
    \x05\x05\x12\x04\x9c\x01\x11\x15\n\r\n\x05\x04\x02\x02\x05\x01\x12\x04\
    \x9c\x01\x16)\n\r\n\x05\x04\x02\x02\x05\x03\x12\x04\x9c\x01,-\n\x0c\n\
    \x04\x04\x02\x02\x06\x12\x04\x9d\x01\x08#\n\r\n\x05\x04\x02\x02\x06\x04\
    \x12\x04\x9d\x01\x08\x10\n\r\n\x05\x04\x02\x02\x06\x05\x12\x04\x9d\x01\
    \x11\x15\n\r\n\x05\x04\x02\x02\x06\x01\x12\x04\x9d\x01\x16\x1e\n\r\n\x05\
    \x04\x02\x02\x06\x03\x12\x04\x9d\x01!\"\n\x0c\n\x04\x04\x02\x02\x07\x12\
    \x04\x9e\x01\x08(\n\r\n\x05\x04\x02\x02\x07\x04\x12\x04\x9e\x01\x08\x10\
    \n\r\n\x05\x04\x02\x02\x07\x05\x12\x04\x9e\x01\x11\x18\n\r\n\x05\x04\x02\
    \x02\x07\x01\x12\x04\x9e\x01\x19#\n\r\n\x05\x04\x02\x02\x07\x03\x12\x04\
    \x9e\x01&'\n\x0c\n\x02\x04\x03\x12\x06\xa1\x01\0\xa8\x01\x01\n\x0b\n\x03\
    \x04\x03\x01\x12\x04\xa1\x01\x08\x17\n\x0c\n\x04\x04\x03\x02\0\x12\x04\
    \xa2\x01\x08(\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\xa2\x01\x08\x10\n\r\n\
    \x05\x04\x03\x02\0\x05\x12\x04\xa2\x01\x11\x17\n\r\n\x05\x04\x03\x02\0\
    \x01\x12\x04\xa2\x01\x18#\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xa2\x01&'\
    \n\x0c\n\x04\x04\x03\x02\x01\x12\x04\xa3\x01\x08/\n\r\n\x05\x04\x03\x02\
    \x01\x04\x12\x04\xa3\x01\x08\x10\n\r\n\x05\x04\x03\x02\x01\x06\x12\x04\
    \xa3\x01\x11\x1f\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xa3\x01\x20*\n\r\
    \n\x05\x04\x03\x02\x01\x03\x12\x04\xa3\x01-.\n\x0c\n\x04\x04\x03\x02\x02\
    \x12\x04\xa4\x01\x08*\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\xa4\x01\x08\
    \x10\n\r\n\x05\x04\x03\x02\x02\x05\x12\x04\xa4\x01\x11\x15\n\r\n\x05\x04\
    \x03\x02\x02\x01\x12\x04\xa4\x01\x16%\n\r\n\x05\x04\x03\x02\x02\x03\x12\
    \x04\xa4\x01()\n\x0c\n\x04\x04\x03\x02\x03\x12\x04\xa5\x01\x08/\n\r\n\
    \x05\x04\x03\x02\x03\x04\x12\x04\xa5\x01\x08\x10\n\r\n\x05\x04\x03\x02\
    \x03\x05\x12\x04\xa5\x01\x11\x15\n\r\n\x05\x04\x03\x02\x03\x01\x12\x04\
    \xa5\x01\x16*\n\r\n\x05\x04\x03\x02\x03\x03\x12\x04\xa5\x01-.\n\x0c\n\
    \x04\x04\x03\x02\x04\x12\x04\xa6\x01\x080\n\r\n\x05\x04\x03\x02\x04\x04\
    \x12\x04\xa6\x01\x08\x10\n\r\n\x05\x04\x03\x02\x04\x05\x12\x04\xa6\x01\
    \x11\x15\n\r\n\x05\x04\x03\x02\x04\x01\x12\x04\xa6\x01\x16+\n\r\n\x05\
    \x04\x03\x02\x04\x03\x12\x04\xa6\x01./\n\x0c\n\x04\x04\x03\x02\x05\x12\
    \x04\xa7\x01\x08*\n\r\n\x05\x04\x03\x02\x05\x04\x12\x04\xa7\x01\x08\x10\
    \n\r\n\x05\x04\x03\x02\x05\x05\x12\x04\xa7\x01\x11\x15\n\r\n\x05\x04\x03\
    \x02\x05\x01\x12\x04\xa7\x01\x16%\n\r\n\x05\x04\x03\x02\x05\x03\x12\x04\
    \xa7\x01()\n\x0c\n\x02\x04\x04\x12\x06\xaa\x01\0\xb4\x01\x01\n\x0b\n\x03\
    \x04\x04\x01\x12\x04\xaa\x01\x08\x1c\n\x0e\n\x04\x04\x04\x03\0\x12\x06\
    \xab\x01\x08\xae\x01\t\n\r\n\x05\x04\x04\x03\0\x01\x12\x04\xab\x01\x10\
    \x1b\n\x0e\n\x06\x04\x04\x03\0\x02\0\x12\x04\xac\x01\x10/\n\x0f\n\x07\
    \x04\x04\x03\0\x02\0\x04\x12\x04\xac\x01\x10\x18\n\x0f\n\x07\x04\x04\x03\
    \0\x02\0\x05\x12\x04\xac\x01\x19\x1f\n\x0f\n\x07\x04\x04\x03\0\x02\0\x01\
    \x12\x04\xac\x01\x20*\n\x0f\n\x07\x04\x04\x03\0\x02\0\x03\x12\x04\xac\
    \x01-.\n\x0e\n\x06\x04\x04\x03\0\x02\x01\x12\x04\xad\x01\x10<\n\x0f\n\
    \x07\x04\x04\x03\0\x02\x01\x04\x12\x04\xad\x01\x10\x18\n\x0f\n\x07\x04\
    \x04\x03\0\x02\x01\x06\x12\x04\xad\x01\x19*\n\x0f\n\x07\x04\x04\x03\0\
    \x02\x01\x01\x12\x04\xad\x01+7\n\x0f\n\x07\x04\x04\x03\0\x02\x01\x03\x12\
    \x04\xad\x01:;\n\x0c\n\x04\x04\x04\x02\0\x12\x04\xb0\x01\x08,\n\r\n\x05\
    \x04\x04\x02\0\x04\x12\x04\xb0\x01\x08\x10\n\r\n\x05\x04\x04\x02\0\x05\
    \x12\x04\xb0\x01\x11\x17\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xb0\x01\x18\
    '\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xb0\x01*+\n\x0c\n\x04\x04\x04\x02\
    \x01\x12\x04\xb1\x01\x08-\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04\xb1\x01\
    \x08\x10\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\xb1\x01\x11\x17\n\r\n\x05\
    \x04\x04\x02\x01\x01\x12\x04\xb1\x01\x18(\n\r\n\x05\x04\x04\x02\x01\x03\
    \x12\x04\xb1\x01+,\n\x0c\n\x04\x04\x04\x02\x02\x12\x04\xb2\x01\x081\n\r\
    \n\x05\x04\x04\x02\x02\x04\x12\x04\xb2\x01\x08\x10\n\r\n\x05\x04\x04\x02\
    \x02\x05\x12\x04\xb2\x01\x11\x17\n\r\n\x05\x04\x04\x02\x02\x01\x12\x04\
    \xb2\x01\x18,\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\xb2\x01/0\n\x0c\n\
    \x04\x04\x04\x02\x03\x12\x04\xb3\x01\x08D\n\r\n\x05\x04\x04\x02\x03\x04\
    \x12\x04\xb3\x01\x08\x10\n\r\n\x05\x04\x04\x02\x03\x06\x12\x04\xb3\x01\
    \x111\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\xb3\x012?\n\r\n\x05\x04\x04\
    \x02\x03\x03\x12\x04\xb3\x01BC\n\x0c\n\x02\x04\x05\x12\x06\xb6\x01\0\xb7\
    \x01\x01\n\x0b\n\x03\x04\x05\x01\x12\x04\xb6\x01\x08\"\n\x0c\n\x02\x04\
    \x06\x12\x06\xb9\x01\0\xbb\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\x04\xb9\
    \x01\x08#\n\x0c\n\x04\x04\x06\x02\0\x12\x04\xba\x01\x085\n\r\n\x05\x04\
    \x06\x02\0\x04\x12\x04\xba\x01\x08\x10\n\r\n\x05\x04\x06\x02\0\x06\x12\
    \x04\xba\x01\x11)\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xba\x01*0\n\r\n\
    \x05\x04\x06\x02\0\x03\x12\x04\xba\x0134\n\x0c\n\x02\x04\x07\x12\x06\xbd\
    \x01\0\xbf\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\x04\xbd\x01\x08&\n\x0c\n\
    \x04\x04\x07\x02\0\x12\x04\xbe\x01\x084\n\r\n\x05\x04\x07\x02\0\x04\x12\
    \x04\xbe\x01\x08\x10\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\xbe\x01\x11\"\n\
    \r\n\x05\x04\x07\x02\0\x01\x12\x04\xbe\x01#/\n\r\n\x05\x04\x07\x02\0\x03\
    \x12\x04\xbe\x0123\n\x0c\n\x02\x04\x08\x12\x06\xc1\x01\0\xc3\x01\x01\n\
    \x0b\n\x03\x04\x08\x01\x12\x04\xc1\x01\x08!\n\x0c\n\x04\x04\x08\x02\0\
    \x12\x04\xc2\x01\x08#\n\r\n\x05\x04\x08\x02\0\x04\x12\x04\xc2\x01\x08\
    \x10\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xc2\x01\x11\x16\n\r\n\x05\x04\
    \x08\x02\0\x01\x12\x04\xc2\x01\x17\x1e\n\r\n\x05\x04\x08\x02\0\x03\x12\
    \x04\xc2\x01!\"\n\x0c\n\x02\x04\t\x12\x06\xc5\x01\0\xc9\x01\x01\n\x0b\n\
    \x03\x04\t\x01\x12\x04\xc5\x01\x08!\n\x0c\n\x04\x04\t\x02\0\x12\x04\xc6\
    \x01\x08/\n\r\n\x05\x04\t\x02\0\x04\x12\x04\xc6\x01\x08\x10\n\r\n\x05\
    \x04\t\x02\0\x05\x12\x04\xc6\x01\x11\x17\n\r\n\x05\x04\t\x02\0\x01\x12\
    \x04\xc6\x01\x18*\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xc6\x01-.\n\x0c\n\
    \x04\x04\t\x02\x01\x12\x04\xc7\x01\x08/\n\r\n\x05\x04\t\x02\x01\x04\x12\
    \x04\xc7\x01\x08\x10\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\xc7\x01\x11\x17\
    \n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xc7\x01\x18*\n\r\n\x05\x04\t\x02\
    \x01\x03\x12\x04\xc7\x01-.\n\x0c\n\x04\x04\t\x02\x02\x12\x04\xc8\x01\x08\
    I\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\xc8\x01\x08\x10\n\r\n\x05\x04\t\
    \x02\x02\x06\x12\x04\xc8\x01\x11,\n\r\n\x05\x04\t\x02\x02\x01\x12\x04\
    \xc8\x01-D\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\xc8\x01GH\n\x0c\n\x02\x04\
    \n\x12\x06\xcb\x01\0\xea\x03\x01\n\x0b\n\x03\x04\n\x01\x12\x04\xcb\x01\
    \x08\x10\n\x0e\n\x04\x04\n\x03\0\x12\x06\xcc\x01\x08\xe7\x03\t\n\r\n\x05\
    \x04\n\x03\0\x01\x12\x04\xcc\x01\x10\x18\n\x10\n\x06\x04\n\x03\0\x03\0\
    \x12\x06\xcd\x01\x10\xe3\x03\x11\n\x0f\n\x07\x04\n\x03\0\x03\0\x01\x12\
    \x04\xcd\x01\x18#\n\x12\n\x08\x04\n\x03\0\x03\0\x04\0\x12\x06\xce\x01\
    \x18\xdf\x03\x19\n\x11\n\t\x04\n\x03\0\x03\0\x04\0\x01\x12\x04\xce\x01\
    \x1d,\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\0\x12\x04\xcf\x01\x20*\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02\0\x01\x12\x04\xcf\x01\x20%\n\x13\n\
    \x0b\x04\n\x03\0\x03\0\x04\0\x02\0\x02\x12\x04\xcf\x01()\n\x12\n\n\x04\n\
    \x03\0\x03\0\x04\0\x02\x01\x12\x04\xd0\x01\x20+\n\x13\n\x0b\x04\n\x03\0\
    \x03\0\x04\0\x02\x01\x01\x12\x04\xd0\x01\x20&\n\x13\n\x0b\x04\n\x03\0\
    \x03\0\x04\0\x02\x01\x02\x12\x04\xd0\x01)*\n\x12\n\n\x04\n\x03\0\x03\0\
    \x04\0\x02\x02\x12\x04\xd1\x01\x20,\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x02\x01\x12\x04\xd1\x01\x20'\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x02\x02\x12\x04\xd1\x01*+\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x03\
    \x12\x04\xd2\x01\x20.\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x03\x01\
    \x12\x04\xd2\x01\x20)\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x03\x02\
    \x12\x04\xd2\x01,-\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x04\x12\x04\xd3\
    \x01\x20/\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x04\x01\x12\x04\xd3\
    \x01\x20*\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x04\x02\x12\x04\xd3\
    \x01-.\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x05\x12\x04\xd4\x01\x207\n\
    \x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x05\x01\x12\x04\xd4\x01\x202\n\
    \x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x05\x02\x12\x04\xd4\x0156\n\x12\n\
    \n\x04\n\x03\0\x03\0\x04\0\x02\x06\x12\x04\xd5\x01\x201\n\x13\n\x0b\x04\
    \n\x03\0\x03\0\x04\0\x02\x06\x01\x12\x04\xd5\x01\x20,\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02\x06\x02\x12\x04\xd5\x01/0\n\x12\n\n\x04\n\x03\0\
    \x03\0\x04\0\x02\x07\x12\x04\xd6\x01\x20,\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02\x07\x01\x12\x04\xd6\x01\x20'\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02\x07\x02\x12\x04\xd6\x01*+\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\
    \x02\x08\x12\x04\xd7\x01\x203\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\
    \x08\x01\x12\x04\xd7\x01\x20-\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\
    \x08\x02\x12\x04\xd7\x0102\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\t\x12\
    \x04\xd8\x01\x20/\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\t\x01\x12\x04\
    \xd8\x01\x20)\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\t\x02\x12\x04\xd8\
    \x01,.\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\n\x12\x04\xd9\x01\x20,\n\
    \x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\n\x01\x12\x04\xd9\x01\x20&\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02\n\x02\x12\x04\xd9\x01)+\n\x12\n\n\x04\
    \n\x03\0\x03\0\x04\0\x02\x0b\x12\x04\xda\x01\x20D\n\x13\n\x0b\x04\n\x03\
    \0\x03\0\x04\0\x02\x0b\x01\x12\x04\xda\x01\x20>\n\x13\n\x0b\x04\n\x03\0\
    \x03\0\x04\0\x02\x0b\x02\x12\x04\xda\x01AC\n\x12\n\n\x04\n\x03\0\x03\0\
    \x04\0\x02\x0c\x12\x04\xdb\x01\x20=\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x0c\x01\x12\x04\xdb\x01\x207\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x0c\x02\x12\x04\xdb\x01:<\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\r\
    \x12\x04\xdc\x01\x20F\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\r\x01\x12\
    \x04\xdc\x01\x20@\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\r\x02\x12\x04\
    \xdc\x01CE\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x0e\x12\x04\xdd\x01\x20\
    P\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x0e\x01\x12\x04\xdd\x01\x20J\n\
    \x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x0e\x02\x12\x04\xdd\x01MO\n\x12\n\
    \n\x04\n\x03\0\x03\0\x04\0\x02\x0f\x12\x04\xde\x01\x20C\n\x13\n\x0b\x04\
    \n\x03\0\x03\0\x04\0\x02\x0f\x01\x12\x04\xde\x01\x20=\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02\x0f\x02\x12\x04\xde\x01@B\n\x12\n\n\x04\n\x03\0\
    \x03\0\x04\0\x02\x10\x12\x04\xdf\x01\x20O\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02\x10\x01\x12\x04\xdf\x01\x20I\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02\x10\x02\x12\x04\xdf\x01LN\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\
    \x02\x11\x12\x04\xe0\x01\x20H\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\
    \x11\x01\x12\x04\xe0\x01\x20B\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\
    \x11\x02\x12\x04\xe0\x01EG\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x12\x12\
    \x04\xe1\x01\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x12\x01\x12\
    \x04\xe1\x01\x20H\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x12\x02\x12\
    \x04\xe1\x01KM\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x13\x12\x04\xe2\x01\
    \x20J\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x13\x01\x12\x04\xe2\x01\
    \x20D\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x13\x02\x12\x04\xe2\x01GI\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x14\x12\x04\xe3\x01\x20L\n\x13\n\
    \x0b\x04\n\x03\0\x03\0\x04\0\x02\x14\x01\x12\x04\xe3\x01\x20F\n\x13\n\
    \x0b\x04\n\x03\0\x03\0\x04\0\x02\x14\x02\x12\x04\xe3\x01IK\n\x12\n\n\x04\
    \n\x03\0\x03\0\x04\0\x02\x15\x12\x04\xe4\x01\x20P\n\x13\n\x0b\x04\n\x03\
    \0\x03\0\x04\0\x02\x15\x01\x12\x04\xe4\x01\x20J\n\x13\n\x0b\x04\n\x03\0\
    \x03\0\x04\0\x02\x15\x02\x12\x04\xe4\x01MO\n\x12\n\n\x04\n\x03\0\x03\0\
    \x04\0\x02\x16\x12\x04\xe5\x01\x20Q\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x16\x01\x12\x04\xe5\x01\x20K\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x16\x02\x12\x04\xe5\x01NP\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x17\
    \x12\x04\xe6\x01\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x17\x01\
    \x12\x04\xe6\x01\x20H\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x17\x02\
    \x12\x04\xe6\x01KM\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x18\x12\x04\xe7\
    \x01\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x18\x01\x12\x04\xe7\
    \x01\x20H\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x18\x02\x12\x04\xe7\
    \x01KM\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x19\x12\x04\xe8\x01\x20J\n\
    \x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x19\x01\x12\x04\xe8\x01\x20D\n\
    \x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x19\x02\x12\x04\xe8\x01GI\n\x12\n\
    \n\x04\n\x03\0\x03\0\x04\0\x02\x1a\x12\x04\xe9\x01\x20E\n\x13\n\x0b\x04\
    \n\x03\0\x03\0\x04\0\x02\x1a\x01\x12\x04\xe9\x01\x20?\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02\x1a\x02\x12\x04\xe9\x01BD\n\x12\n\n\x04\n\x03\0\
    \x03\0\x04\0\x02\x1b\x12\x04\xea\x01\x20J\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02\x1b\x01\x12\x04\xea\x01\x20D\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02\x1b\x02\x12\x04\xea\x01GI\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\
    \x02\x1c\x12\x04\xeb\x01\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\
    \x1c\x01\x12\x04\xeb\x01\x20H\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\
    \x1c\x02\x12\x04\xeb\x01KM\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x1d\x12\
    \x04\xec\x01\x20P\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x1d\x01\x12\
    \x04\xec\x01\x20J\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x1d\x02\x12\
    \x04\xec\x01MO\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x1e\x12\x04\xed\x01\
    \x20Y\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x1e\x01\x12\x04\xed\x01\
    \x20S\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x1e\x02\x12\x04\xed\x01VX\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x1f\x12\x04\xee\x01\x20M\n\x13\n\
    \x0b\x04\n\x03\0\x03\0\x04\0\x02\x1f\x01\x12\x04\xee\x01\x20G\n\x13\n\
    \x0b\x04\n\x03\0\x03\0\x04\0\x02\x1f\x02\x12\x04\xee\x01JL\n\x12\n\n\x04\
    \n\x03\0\x03\0\x04\0\x02\x20\x12\x04\xef\x01\x20Q\n\x13\n\x0b\x04\n\x03\
    \0\x03\0\x04\0\x02\x20\x01\x12\x04\xef\x01\x20K\n\x13\n\x0b\x04\n\x03\0\
    \x03\0\x04\0\x02\x20\x02\x12\x04\xef\x01NP\n\x12\n\n\x04\n\x03\0\x03\0\
    \x04\0\x02!\x12\x04\xf0\x01\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\
    !\x01\x12\x04\xf0\x01\x20H\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02!\x02\
    \x12\x04\xf0\x01KM\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\"\x12\x04\xf1\
    \x01\x20Z\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\"\x01\x12\x04\xf1\x01\
    \x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\"\x02\x12\x04\xf1\x01WY\n\
    \x12\n\n\x04\n\x03\0\x03\0\x04\0\x02#\x12\x04\xf2\x01\x20U\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02#\x01\x12\x04\xf2\x01\x20O\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02#\x02\x12\x04\xf2\x01RT\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02$\x12\x04\xf3\x01\x20J\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02$\x01\x12\x04\xf3\x01\x20D\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02$\
    \x02\x12\x04\xf3\x01GI\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02%\x12\x04\
    \xf4\x01\x20R\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02%\x01\x12\x04\xf4\
    \x01\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02%\x02\x12\x04\xf4\x01OQ\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02&\x12\x04\xf5\x01\x20N\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02&\x01\x12\x04\xf5\x01\x20H\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02&\x02\x12\x04\xf5\x01KM\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02'\x12\x04\xf6\x01\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02'\x01\x12\x04\xf6\x01\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02'\
    \x02\x12\x04\xf6\x01QS\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02(\x12\x04\
    \xf7\x01\x20M\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02(\x01\x12\x04\xf7\
    \x01\x20G\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02(\x02\x12\x04\xf7\x01JL\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02)\x12\x04\xf8\x01\x20P\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02)\x01\x12\x04\xf8\x01\x20J\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02)\x02\x12\x04\xf8\x01MO\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02*\x12\x04\xf9\x01\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02*\x01\x12\x04\xf9\x01\x20F\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02*\
    \x02\x12\x04\xf9\x01IK\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02+\x12\x04\
    \xfa\x01\x20R\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02+\x01\x12\x04\xfa\
    \x01\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02+\x02\x12\x04\xfa\x01OQ\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02,\x12\x04\xfb\x01\x20S\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02,\x01\x12\x04\xfb\x01\x20M\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02,\x02\x12\x04\xfb\x01PR\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02-\x12\x04\xfc\x01\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02-\x01\x12\x04\xfc\x01\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02-\
    \x02\x12\x04\xfc\x01QS\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02.\x12\x04\
    \xfd\x01\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02.\x01\x12\x04\xfd\
    \x01\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02.\x02\x12\x04\xfd\x01QS\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02/\x12\x04\xfe\x01\x20Z\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02/\x01\x12\x04\xfe\x01\x20T\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02/\x02\x12\x04\xfe\x01WY\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x020\x12\x04\xff\x01\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x020\x01\x12\x04\xff\x01\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x020\
    \x02\x12\x04\xff\x01QS\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x021\x12\x04\
    \x80\x02\x20S\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x021\x01\x12\x04\x80\
    \x02\x20M\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x021\x02\x12\x04\x80\x02PR\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x022\x12\x04\x81\x02\x20U\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x022\x01\x12\x04\x81\x02\x20O\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x022\x02\x12\x04\x81\x02RT\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x023\x12\x04\x82\x02\x20S\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x023\x01\x12\x04\x82\x02\x20M\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x023\
    \x02\x12\x04\x82\x02PR\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x024\x12\x04\
    \x83\x02\x20V\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x024\x01\x12\x04\x83\
    \x02\x20P\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x024\x02\x12\x04\x83\x02SU\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x025\x12\x04\x84\x02\x20U\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x025\x01\x12\x04\x84\x02\x20O\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x025\x02\x12\x04\x84\x02RT\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x026\x12\x04\x85\x02\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x026\x01\x12\x04\x85\x02\x20H\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x026\
    \x02\x12\x04\x85\x02KM\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x027\x12\x04\
    \x86\x02\x20Q\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x027\x01\x12\x04\x86\
    \x02\x20K\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x027\x02\x12\x04\x86\x02NP\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x028\x12\x04\x87\x02\x20I\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x028\x01\x12\x04\x87\x02\x20C\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x028\x02\x12\x04\x87\x02FH\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x029\x12\x04\x88\x02\x20W\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x029\x01\x12\x04\x88\x02\x20Q\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x029\
    \x02\x12\x04\x88\x02TV\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02:\x12\x04\
    \x89\x02\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02:\x01\x12\x04\x89\
    \x02\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02:\x02\x12\x04\x89\x02QS\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02;\x12\x04\x8a\x02\x20V\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02;\x01\x12\x04\x8a\x02\x20P\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02;\x02\x12\x04\x8a\x02SU\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02<\x12\x04\x8b\x02\x20R\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02<\x01\x12\x04\x8b\x02\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02<\
    \x02\x12\x04\x8b\x02OQ\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02=\x12\x04\
    \x8c\x02\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02=\x01\x12\x04\x8c\
    \x02\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02=\x02\x12\x04\x8c\x02QS\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02>\x12\x04\x8d\x02\x20X\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02>\x01\x12\x04\x8d\x02\x20R\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02>\x02\x12\x04\x8d\x02UW\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02?\x12\x04\x8e\x02\x20W\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02?\x01\x12\x04\x8e\x02\x20Q\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02?\
    \x02\x12\x04\x8e\x02TV\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02@\x12\x04\
    \x8f\x02\x20R\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02@\x01\x12\x04\x8f\
    \x02\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02@\x02\x12\x04\x8f\x02OQ\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02A\x12\x04\x90\x02\x20O\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02A\x01\x12\x04\x90\x02\x20I\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02A\x02\x12\x04\x90\x02LN\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02B\x12\x04\x91\x02\x20S\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02B\x01\x12\x04\x91\x02\x20M\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02B\
    \x02\x12\x04\x91\x02PR\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02C\x12\x04\
    \x92\x02\x20X\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02C\x01\x12\x04\x92\
    \x02\x20R\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02C\x02\x12\x04\x92\x02UW\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02D\x12\x04\x93\x02\x20T\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02D\x01\x12\x04\x93\x02\x20N\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02D\x02\x12\x04\x93\x02QS\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02E\x12\x04\x94\x02\x20V\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02E\x01\x12\x04\x94\x02\x20P\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02E\
    \x02\x12\x04\x94\x02SU\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02F\x12\x04\
    \x95\x02\x20R\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02F\x01\x12\x04\x95\
    \x02\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02F\x02\x12\x04\x95\x02OQ\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02G\x12\x04\x96\x02\x20Z\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02G\x01\x12\x04\x96\x02\x20T\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02G\x02\x12\x04\x96\x02WY\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02H\x12\x04\x97\x02\x20Q\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02H\x01\x12\x04\x97\x02\x20K\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02H\
    \x02\x12\x04\x97\x02NP\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02I\x12\x04\
    \x98\x02\x20Q\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02I\x01\x12\x04\x98\
    \x02\x20K\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02I\x02\x12\x04\x98\x02NP\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02J\x12\x04\x99\x02\x20L\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02J\x01\x12\x04\x99\x02\x20F\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02J\x02\x12\x04\x99\x02IK\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02K\x12\x04\x9a\x02\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02K\x01\x12\x04\x9a\x02\x20F\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02K\
    \x02\x12\x04\x9a\x02IK\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02L\x12\x04\
    \x9b\x02\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02L\x01\x12\x04\x9b\
    \x02\x20F\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02L\x02\x12\x04\x9b\x02IK\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02M\x12\x04\x9c\x02\x20R\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02M\x01\x12\x04\x9c\x02\x20L\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02M\x02\x12\x04\x9c\x02OQ\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02N\x12\x04\x9d\x02\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02N\x01\x12\x04\x9d\x02\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02N\
    \x02\x12\x04\x9d\x02QS\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02O\x12\x04\
    \x9e\x02\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02O\x01\x12\x04\x9e\
    \x02\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02O\x02\x12\x04\x9e\x02QS\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02P\x12\x04\x9f\x02\x20Q\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02P\x01\x12\x04\x9f\x02\x20K\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02P\x02\x12\x04\x9f\x02NP\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02Q\x12\x04\xa0\x02\x20W\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02Q\x01\x12\x04\xa0\x02\x20Q\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02Q\
    \x02\x12\x04\xa0\x02TV\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02R\x12\x04\
    \xa1\x02\x20Z\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02R\x01\x12\x04\xa1\
    \x02\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02R\x02\x12\x04\xa1\x02WY\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02S\x12\x04\xa2\x02\x20N\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02S\x01\x12\x04\xa2\x02\x20H\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02S\x02\x12\x04\xa2\x02KM\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02T\x12\x04\xa3\x02\x20K\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02T\x01\x12\x04\xa3\x02\x20E\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02T\
    \x02\x12\x04\xa3\x02HJ\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02U\x12\x04\
    \xa4\x02\x20Z\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02U\x01\x12\x04\xa4\
    \x02\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02U\x02\x12\x04\xa4\x02WY\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02V\x12\x04\xa5\x02\x20X\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02V\x01\x12\x04\xa5\x02\x20R\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02V\x02\x12\x04\xa5\x02UW\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02W\x12\x04\xa6\x02\x20\\\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02W\x01\x12\x04\xa6\x02\x20V\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02W\
    \x02\x12\x04\xa6\x02Y[\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02X\x12\x04\
    \xa7\x02\x20R\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02X\x01\x12\x04\xa7\
    \x02\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02X\x02\x12\x04\xa7\x02OQ\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02Y\x12\x04\xa8\x02\x20O\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02Y\x01\x12\x04\xa8\x02\x20I\n\x13\n\x0b\x04\n\
    \x03\0\x03\0\x04\0\x02Y\x02\x12\x04\xa8\x02LN\n\x12\n\n\x04\n\x03\0\x03\
    \0\x04\0\x02Z\x12\x04\xa9\x02\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02Z\x01\x12\x04\xa9\x02\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02Z\
    \x02\x12\x04\xa9\x02QS\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02[\x12\x04\
    \xaa\x02\x20W\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02[\x01\x12\x04\xaa\
    \x02\x20Q\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02[\x02\x12\x04\xaa\x02TV\
    \n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\\\x12\x04\xab\x02\x20S\n\x13\n\
    \x0b\x04\n\x03\0\x03\0\x04\0\x02\\\x01\x12\x04\xab\x02\x20M\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02\\\x02\x12\x04\xab\x02PR\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02]\x12\x04\xac\x02\x20X\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02]\x01\x12\x04\xac\x02\x20R\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02]\x02\x12\x04\xac\x02UW\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02^\x12\
    \x04\xad\x02\x20\\\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02^\x01\x12\x04\
    \xad\x02\x20V\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02^\x02\x12\x04\xad\
    \x02Y[\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02_\x12\x04\xae\x02\x20W\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02_\x01\x12\x04\xae\x02\x20P\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02_\x02\x12\x04\xae\x02SV\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02`\x12\x04\xaf\x02\x20]\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02`\x01\x12\x04\xaf\x02\x20V\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02`\x02\x12\x04\xaf\x02Y\\\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02a\x12\
    \x04\xb0\x02\x20_\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02a\x01\x12\x04\
    \xb0\x02\x20X\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02a\x02\x12\x04\xb0\
    \x02[^\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02b\x12\x04\xb1\x02\x20Y\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02b\x01\x12\x04\xb1\x02\x20R\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02b\x02\x12\x04\xb1\x02UX\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02c\x12\x04\xb2\x02\x20P\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02c\x01\x12\x04\xb2\x02\x20I\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02c\x02\x12\x04\xb2\x02LO\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02d\x12\
    \x04\xb3\x02\x20Q\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02d\x01\x12\x04\
    \xb3\x02\x20J\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02d\x02\x12\x04\xb3\
    \x02MP\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02e\x12\x04\xb4\x02\x20U\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02e\x01\x12\x04\xb4\x02\x20N\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02e\x02\x12\x04\xb4\x02QT\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02f\x12\x04\xb5\x02\x20U\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02f\x01\x12\x04\xb5\x02\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02f\x02\x12\x04\xb5\x02QT\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02g\x12\
    \x04\xb6\x02\x20T\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02g\x01\x12\x04\
    \xb6\x02\x20M\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02g\x02\x12\x04\xb6\
    \x02PS\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02h\x12\x04\xb7\x02\x20Q\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02h\x01\x12\x04\xb7\x02\x20J\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02h\x02\x12\x04\xb7\x02MP\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02i\x12\x04\xb8\x02\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02i\x01\x12\x04\xb8\x02\x20E\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02i\x02\x12\x04\xb8\x02HK\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02j\x12\
    \x04\xb9\x02\x20O\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02j\x01\x12\x04\
    \xb9\x02\x20H\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02j\x02\x12\x04\xb9\
    \x02KN\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02k\x12\x04\xba\x02\x20P\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02k\x01\x12\x04\xba\x02\x20I\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02k\x02\x12\x04\xba\x02LO\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02l\x12\x04\xbb\x02\x20P\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02l\x01\x12\x04\xbb\x02\x20I\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02l\x02\x12\x04\xbb\x02LO\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02m\x12\
    \x04\xbc\x02\x20U\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02m\x01\x12\x04\
    \xbc\x02\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02m\x02\x12\x04\xbc\
    \x02QT\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02n\x12\x04\xbd\x02\x20I\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02n\x01\x12\x04\xbd\x02\x20B\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02n\x02\x12\x04\xbd\x02EH\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02o\x12\x04\xbe\x02\x20P\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02o\x01\x12\x04\xbe\x02\x20I\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02o\x02\x12\x04\xbe\x02LO\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02p\x12\
    \x04\xbf\x02\x20S\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02p\x01\x12\x04\
    \xbf\x02\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02p\x02\x12\x04\xbf\
    \x02OR\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02q\x12\x04\xc0\x02\x20P\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02q\x01\x12\x04\xc0\x02\x20I\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02q\x02\x12\x04\xc0\x02LO\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02r\x12\x04\xc1\x02\x20K\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02r\x01\x12\x04\xc1\x02\x20D\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02r\x02\x12\x04\xc1\x02GJ\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02s\x12\
    \x04\xc2\x02\x20M\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02s\x01\x12\x04\
    \xc2\x02\x20F\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02s\x02\x12\x04\xc2\
    \x02IL\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02t\x12\x04\xc3\x02\x20O\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02t\x01\x12\x04\xc3\x02\x20H\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02t\x02\x12\x04\xc3\x02KN\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02u\x12\x04\xc4\x02\x20P\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02u\x01\x12\x04\xc4\x02\x20I\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02u\x02\x12\x04\xc4\x02LO\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02v\x12\
    \x04\xc5\x02\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02v\x01\x12\x04\
    \xc5\x02\x20E\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02v\x02\x12\x04\xc5\
    \x02HK\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02w\x12\x04\xc6\x02\x20M\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02w\x01\x12\x04\xc6\x02\x20F\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02w\x02\x12\x04\xc6\x02IL\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02x\x12\x04\xc7\x02\x20N\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02x\x01\x12\x04\xc7\x02\x20G\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02x\x02\x12\x04\xc7\x02JM\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02y\x12\
    \x04\xc8\x02\x20J\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02y\x01\x12\x04\
    \xc8\x02\x20C\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02y\x02\x12\x04\xc8\
    \x02FI\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02z\x12\x04\xc9\x02\x20Q\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02z\x01\x12\x04\xc9\x02\x20J\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02z\x02\x12\x04\xc9\x02MP\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02{\x12\x04\xca\x02\x20Z\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02{\x01\x12\x04\xca\x02\x20S\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02{\x02\x12\x04\xca\x02VY\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02|\x12\
    \x04\xcb\x02\x20D\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02|\x01\x12\x04\
    \xcb\x02\x20=\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02|\x02\x12\x04\xcb\
    \x02@C\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02}\x12\x04\xcc\x02\x20T\n\x13\
    \n\x0b\x04\n\x03\0\x03\0\x04\0\x02}\x01\x12\x04\xcc\x02\x20M\n\x13\n\x0b\
    \x04\n\x03\0\x03\0\x04\0\x02}\x02\x12\x04\xcc\x02PS\n\x12\n\n\x04\n\x03\
    \0\x03\0\x04\0\x02~\x12\x04\xcd\x02\x20L\n\x13\n\x0b\x04\n\x03\0\x03\0\
    \x04\0\x02~\x01\x12\x04\xcd\x02\x20E\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02~\x02\x12\x04\xcd\x02HK\n\x12\n\n\x04\n\x03\0\x03\0\x04\0\x02\x7f\
    \x12\x04\xce\x02\x20R\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x7f\x01\
    \x12\x04\xce\x02\x20K\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x7f\x02\
    \x12\x04\xce\x02NQ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x80\x01\x12\
    \x04\xcf\x02\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\x02\x80\x01\x01\
    \x12\x04\xcf\x02\x20G\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\x02\x80\x01\
    \x02\x12\x04\xcf\x02JM\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x81\x01\
    \x12\x04\xd0\x02\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\x02\x81\x01\
    \x01\x12\x04\xd0\x02\x20F\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\x02\x81\
    \x01\x02\x12\x04\xd0\x02IL\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\x82\
    \x01\x12\x04\xd1\x02\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\x02\x82\
    \x01\x01\x12\x04\xd1\x02\x20E\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\x02\
    \x82\x01\x02\x12\x04\xd1\x02HK\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\x02\
    \x83\x01\x12\x04\xd2\x02\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\x02\
    \x83\x01\x01\x12\x04\xd2\x02\x20E\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x83\x01\x02\x12\x04\xd2\x02HK\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x84\x01\x12\x04\xd3\x02\x20Q\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x84\x01\x01\x12\x04\xd3\x02\x20J\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x84\x01\x02\x12\x04\xd3\x02MP\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x85\x01\x12\x04\xd4\x02\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x85\x01\x01\x12\x04\xd4\x02\x20E\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x85\x01\x02\x12\x04\xd4\x02HK\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x86\x01\x12\x04\xd5\x02\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x86\x01\x01\x12\x04\xd5\x02\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x86\x01\x02\x12\x04\xd5\x02QT\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x87\x01\x12\x04\xd6\x02\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x87\x01\x01\x12\x04\xd6\x02\x20G\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x87\x01\x02\x12\x04\xd6\x02JM\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x88\x01\x12\x04\xd7\x02\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x88\x01\x01\x12\x04\xd7\x02\x20I\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x88\x01\x02\x12\x04\xd7\x02LO\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x89\x01\x12\x04\xd8\x02\x20H\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x89\x01\x01\x12\x04\xd8\x02\x20A\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x89\x01\x02\x12\x04\xd8\x02DG\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8a\x01\x12\x04\xd9\x02\x20K\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8a\x01\x01\x12\x04\xd9\x02\x20D\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8a\x01\x02\x12\x04\xd9\x02GJ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8b\x01\x12\x04\xda\x02\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8b\x01\x01\x12\x04\xda\x02\x20E\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8b\x01\x02\x12\x04\xda\x02HK\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8c\x01\x12\x04\xdb\x02\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8c\x01\x01\x12\x04\xdb\x02\x20G\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8c\x01\x02\x12\x04\xdb\x02JM\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8d\x01\x12\x04\xdc\x02\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8d\x01\x01\x12\x04\xdc\x02\x20G\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8d\x01\x02\x12\x04\xdc\x02JM\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8e\x01\x12\x04\xdd\x02\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8e\x01\x01\x12\x04\xdd\x02\x20K\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8e\x01\x02\x12\x04\xdd\x02NQ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8f\x01\x12\x04\xde\x02\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8f\x01\x01\x12\x04\xde\x02\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8f\x01\x02\x12\x04\xde\x02PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x90\x01\x12\x04\xdf\x02\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x90\x01\x01\x12\x04\xdf\x02\x20F\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x90\x01\x02\x12\x04\xdf\x02IL\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x91\x01\x12\x04\xe0\x02\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x91\x01\x01\x12\x04\xe0\x02\x20F\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x91\x01\x02\x12\x04\xe0\x02IL\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x92\x01\x12\x04\xe1\x02\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x92\x01\x01\x12\x04\xe1\x02\x20F\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x92\x01\x02\x12\x04\xe1\x02IL\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x93\x01\x12\x04\xe2\x02\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x93\x01\x01\x12\x04\xe2\x02\x20F\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x93\x01\x02\x12\x04\xe2\x02IL\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x94\x01\x12\x04\xe3\x02\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x94\x01\x01\x12\x04\xe3\x02\x20H\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x94\x01\x02\x12\x04\xe3\x02KN\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x95\x01\x12\x04\xe4\x02\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x95\x01\x01\x12\x04\xe4\x02\x20I\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x95\x01\x02\x12\x04\xe4\x02LO\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x96\x01\x12\x04\xe5\x02\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x96\x01\x01\x12\x04\xe5\x02\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x96\x01\x02\x12\x04\xe5\x02UX\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x97\x01\x12\x04\xe6\x02\x20\\\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x97\x01\x01\x12\x04\xe6\x02\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x97\x01\x02\x12\x04\xe6\x02X[\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x98\x01\x12\x04\xe7\x02\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x98\x01\x01\x12\x04\xe7\x02\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x98\x01\x02\x12\x04\xe7\x02OR\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x99\x01\x12\x04\xe8\x02\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x99\x01\x01\x12\x04\xe8\x02\x20K\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x99\x01\x02\x12\x04\xe8\x02NQ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x9a\x01\x12\x04\xe9\x02\x20G\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x9a\x01\x01\x12\x04\xe9\x02\x20@\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x9a\x01\x02\x12\x04\xe9\x02CF\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x9b\x01\x12\x04\xea\x02\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x9b\x01\x01\x12\x04\xea\x02\x20K\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x9b\x01\x02\x12\x04\xea\x02NQ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x9c\x01\x12\x04\xeb\x02\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x9c\x01\x01\x12\x04\xeb\x02\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x9c\x01\x02\x12\x04\xeb\x02OR\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x9d\x01\x12\x04\xec\x02\x20I\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x9d\x01\x01\x12\x04\xec\x02\x20B\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x9d\x01\x02\x12\x04\xec\x02EH\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x9e\x01\x12\x04\xed\x02\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x9e\x01\x01\x12\x04\xed\x02\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x9e\x01\x02\x12\x04\xed\x02SV\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x9f\x01\x12\x04\xee\x02\x20J\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x9f\x01\x01\x12\x04\xee\x02\x20C\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x9f\x01\x02\x12\x04\xee\x02FI\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xa0\x01\x12\x04\xef\x02\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xa0\x01\x01\x12\x04\xef\x02\x20G\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xa0\x01\x02\x12\x04\xef\x02JM\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xa1\x01\x12\x04\xf0\x02\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xa1\x01\x01\x12\x04\xf0\x02\x20F\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xa1\x01\x02\x12\x04\xf0\x02IL\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xa2\x01\x12\x04\xf1\x02\x20Z\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xa2\x01\x01\x12\x04\xf1\x02\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xa2\x01\x02\x12\x04\xf1\x02VY\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xa3\x01\x12\x04\xf2\x02\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xa3\x01\x01\x12\x04\xf2\x02\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xa3\x01\x02\x12\x04\xf2\x02UX\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xa4\x01\x12\x04\xf3\x02\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xa4\x01\x01\x12\x04\xf3\x02\x20I\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xa4\x01\x02\x12\x04\xf3\x02LO\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xa5\x01\x12\x04\xf4\x02\x20]\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xa5\x01\x01\x12\x04\xf4\x02\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xa5\x01\x02\x12\x04\xf4\x02Y\\\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\
    \0\x02\xa6\x01\x12\x04\xf5\x02\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xa6\x01\x01\x12\x04\xf5\x02\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xa6\x01\x02\x12\x04\xf5\x02QT\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xa7\x01\x12\x04\xf6\x02\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xa7\x01\x01\x12\x04\xf6\x02\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xa7\x01\x02\x12\x04\xf6\x02SV\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xa8\x01\x12\x04\xf7\x02\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xa8\x01\x01\x12\x04\xf7\x02\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xa8\x01\x02\x12\x04\xf7\x02QT\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xa9\x01\x12\x04\xf8\x02\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xa9\x01\x01\x12\x04\xf8\x02\x20F\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xa9\x01\x02\x12\x04\xf8\x02IL\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xaa\x01\x12\x04\xf9\x02\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xaa\x01\x01\x12\x04\xf9\x02\x20H\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xaa\x01\x02\x12\x04\xf9\x02KN\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xab\x01\x12\x04\xfa\x02\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xab\x01\x01\x12\x04\xfa\x02\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xab\x01\x02\x12\x04\xfa\x02UX\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xac\x01\x12\x04\xfb\x02\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xac\x01\x01\x12\x04\xfb\x02\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xac\x01\x02\x12\x04\xfb\x02QT\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xad\x01\x12\x04\xfc\x02\x20\\\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xad\x01\x01\x12\x04\xfc\x02\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xad\x01\x02\x12\x04\xfc\x02X[\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xae\x01\x12\x04\xfd\x02\x20`\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xae\x01\x01\x12\x04\xfd\x02\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xae\x01\x02\x12\x04\xfd\x02\\_\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\
    \0\x02\xaf\x01\x12\x04\xfe\x02\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xaf\x01\x01\x12\x04\xfe\x02\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xaf\x01\x02\x12\x04\xfe\x02UX\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xb0\x01\x12\x04\xff\x02\x20Z\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xb0\x01\x01\x12\x04\xff\x02\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xb0\x01\x02\x12\x04\xff\x02VY\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xb1\x01\x12\x04\x80\x03\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xb1\x01\x01\x12\x04\x80\x03\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xb1\x01\x02\x12\x04\x80\x03QT\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xb2\x01\x12\x04\x81\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xb2\x01\x01\x12\x04\x81\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xb2\x01\x02\x12\x04\x81\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xb3\x01\x12\x04\x82\x03\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xb3\x01\x01\x12\x04\x82\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xb3\x01\x02\x12\x04\x82\x03SV\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xb4\x01\x12\x04\x83\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xb4\x01\x01\x12\x04\x83\x03\x20K\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xb4\x01\x02\x12\x04\x83\x03NQ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xb5\x01\x12\x04\x84\x03\x20\\\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xb5\x01\x01\x12\x04\x84\x03\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xb5\x01\x02\x12\x04\x84\x03X[\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xb6\x01\x12\x04\x85\x03\x20`\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xb6\x01\x01\x12\x04\x85\x03\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xb6\x01\x02\x12\x04\x85\x03\\_\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\
    \0\x02\xb7\x01\x12\x04\x86\x03\x20Q\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xb7\x01\x01\x12\x04\x86\x03\x20J\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xb7\x01\x02\x12\x04\x86\x03MP\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xb8\x01\x12\x04\x87\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xb8\x01\x01\x12\x04\x87\x03\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xb8\x01\x02\x12\x04\x87\x03OR\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xb9\x01\x12\x04\x88\x03\x20_\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xb9\x01\x01\x12\x04\x88\x03\x20X\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xb9\x01\x02\x12\x04\x88\x03[^\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xba\x01\x12\x04\x89\x03\x20e\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xba\x01\x01\x12\x04\x89\x03\x20^\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xba\x01\x02\x12\x04\x89\x03ad\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xbb\x01\x12\x04\x8a\x03\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xbb\x01\x01\x12\x04\x8a\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xbb\x01\x02\x12\x04\x8a\x03RU\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xbc\x01\x12\x04\x8b\x03\x20b\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xbc\x01\x01\x12\x04\x8b\x03\x20[\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xbc\x01\x02\x12\x04\x8b\x03^a\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xbd\x01\x12\x04\x8c\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xbd\x01\x01\x12\x04\x8c\x03\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xbd\x01\x02\x12\x04\x8c\x03OR\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xbe\x01\x12\x04\x8d\x03\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xbe\x01\x01\x12\x04\x8d\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xbe\x01\x02\x12\x04\x8d\x03UX\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xbf\x01\x12\x04\x8e\x03\x20^\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xbf\x01\x01\x12\x04\x8e\x03\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xbf\x01\x02\x12\x04\x8e\x03Z]\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xc0\x01\x12\x04\x8f\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xc0\x01\x01\x12\x04\x8f\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xc0\x01\x02\x12\x04\x8f\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xc1\x01\x12\x04\x90\x03\x20]\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xc1\x01\x01\x12\x04\x90\x03\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xc1\x01\x02\x12\x04\x90\x03Y\\\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\
    \0\x02\xc2\x01\x12\x04\x91\x03\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xc2\x01\x01\x12\x04\x91\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xc2\x01\x02\x12\x04\x91\x03UX\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xc3\x01\x12\x04\x92\x03\x20X\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xc3\x01\x01\x12\x04\x92\x03\x20Q\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xc3\x01\x02\x12\x04\x92\x03TW\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xc4\x01\x12\x04\x93\x03\x20X\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xc4\x01\x01\x12\x04\x93\x03\x20Q\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xc4\x01\x02\x12\x04\x93\x03TW\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xc5\x01\x12\x04\x94\x03\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xc5\x01\x01\x12\x04\x94\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xc5\x01\x02\x12\x04\x94\x03RU\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xc6\x01\x12\x04\x95\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xc6\x01\x01\x12\x04\x95\x03\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xc6\x01\x02\x12\x04\x95\x03OR\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xc7\x01\x12\x04\x96\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xc7\x01\x01\x12\x04\x96\x03\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xc7\x01\x02\x12\x04\x96\x03OR\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xc8\x01\x12\x04\x97\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xc8\x01\x01\x12\x04\x97\x03\x20H\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xc8\x01\x02\x12\x04\x97\x03KN\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xc9\x01\x12\x04\x98\x03\x20Z\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xc9\x01\x01\x12\x04\x98\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xc9\x01\x02\x12\x04\x98\x03VY\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xca\x01\x12\x04\x99\x03\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xca\x01\x01\x12\x04\x99\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xca\x01\x02\x12\x04\x99\x03SV\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xcb\x01\x12\x04\x9a\x03\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xcb\x01\x01\x12\x04\x9a\x03\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xcb\x01\x02\x12\x04\x9a\x03QT\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xcc\x01\x12\x04\x9b\x03\x20X\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xcc\x01\x01\x12\x04\x9b\x03\x20Q\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xcc\x01\x02\x12\x04\x9b\x03TW\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xcd\x01\x12\x04\x9c\x03\x20Q\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xcd\x01\x01\x12\x04\x9c\x03\x20J\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xcd\x01\x02\x12\x04\x9c\x03MP\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xce\x01\x12\x04\x9d\x03\x20Z\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xce\x01\x01\x12\x04\x9d\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xce\x01\x02\x12\x04\x9d\x03VY\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xcf\x01\x12\x04\x9e\x03\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xcf\x01\x01\x12\x04\x9e\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xcf\x01\x02\x12\x04\x9e\x03RU\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xd0\x01\x12\x04\x9f\x03\x20J\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xd0\x01\x01\x12\x04\x9f\x03\x20C\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xd0\x01\x02\x12\x04\x9f\x03FI\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xd1\x01\x12\x04\xa0\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xd1\x01\x01\x12\x04\xa0\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xd1\x01\x02\x12\x04\xa0\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xd2\x01\x12\x04\xa1\x03\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xd2\x01\x01\x12\x04\xa1\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xd2\x01\x02\x12\x04\xa1\x03RU\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xd3\x01\x12\x04\xa2\x03\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xd3\x01\x01\x12\x04\xa2\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xd3\x01\x02\x12\x04\xa2\x03UX\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xd4\x01\x12\x04\xa3\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xd4\x01\x01\x12\x04\xa3\x03\x20K\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xd4\x01\x02\x12\x04\xa3\x03NQ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xd5\x01\x12\x04\xa4\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xd5\x01\x01\x12\x04\xa4\x03\x20H\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xd5\x01\x02\x12\x04\xa4\x03KN\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xd6\x01\x12\x04\xa5\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xd6\x01\x01\x12\x04\xa5\x03\x20I\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xd6\x01\x02\x12\x04\xa5\x03LO\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xd7\x01\x12\x04\xa6\x03\x20J\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xd7\x01\x01\x12\x04\xa6\x03\x20C\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xd7\x01\x02\x12\x04\xa6\x03FI\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xd8\x01\x12\x04\xa7\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xd8\x01\x01\x12\x04\xa7\x03\x20K\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xd8\x01\x02\x12\x04\xa7\x03NQ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xd9\x01\x12\x04\xa8\x03\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xd9\x01\x01\x12\x04\xa8\x03\x20G\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xd9\x01\x02\x12\x04\xa8\x03JM\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xda\x01\x12\x04\xa9\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xda\x01\x01\x12\x04\xa9\x03\x20F\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xda\x01\x02\x12\x04\xa9\x03IL\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xdb\x01\x12\x04\xaa\x03\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xdb\x01\x01\x12\x04\xaa\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xdb\x01\x02\x12\x04\xaa\x03UX\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xdc\x01\x12\x04\xab\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xdc\x01\x01\x12\x04\xab\x03\x20H\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xdc\x01\x02\x12\x04\xab\x03KN\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xdd\x01\x12\x04\xac\x03\x20[\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xdd\x01\x01\x12\x04\xac\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xdd\x01\x02\x12\x04\xac\x03WZ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xde\x01\x12\x04\xad\x03\x20d\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xde\x01\x01\x12\x04\xad\x03\x20]\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xde\x01\x02\x12\x04\xad\x03`c\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xdf\x01\x12\x04\xae\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xdf\x01\x01\x12\x04\xae\x03\x20I\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xdf\x01\x02\x12\x04\xae\x03LO\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xe0\x01\x12\x04\xaf\x03\x20Q\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xe0\x01\x01\x12\x04\xaf\x03\x20J\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xe0\x01\x02\x12\x04\xaf\x03MP\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xe1\x01\x12\x04\xb0\x03\x20]\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xe1\x01\x01\x12\x04\xb0\x03\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xe1\x01\x02\x12\x04\xb0\x03Y\\\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\
    \0\x02\xe2\x01\x12\x04\xb1\x03\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xe2\x01\x01\x12\x04\xb1\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xe2\x01\x02\x12\x04\xb1\x03SV\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xe3\x01\x12\x04\xb2\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xe3\x01\x01\x12\x04\xb2\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xe3\x01\x02\x12\x04\xb2\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xe4\x01\x12\x04\xb3\x03\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xe4\x01\x01\x12\x04\xb3\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xe4\x01\x02\x12\x04\xb3\x03SV\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xe5\x01\x12\x04\xb4\x03\x20\\\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xe5\x01\x01\x12\x04\xb4\x03\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xe5\x01\x02\x12\x04\xb4\x03X[\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xe6\x01\x12\x04\xb5\x03\x20_\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xe6\x01\x01\x12\x04\xb5\x03\x20X\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xe6\x01\x02\x12\x04\xb5\x03[^\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xe7\x01\x12\x04\xb6\x03\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xe7\x01\x01\x12\x04\xb6\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xe7\x01\x02\x12\x04\xb6\x03UX\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xe8\x01\x12\x04\xb7\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xe8\x01\x01\x12\x04\xb7\x03\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xe8\x01\x02\x12\x04\xb7\x03OR\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xe9\x01\x12\x04\xb8\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xe9\x01\x01\x12\x04\xb8\x03\x20H\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xe9\x01\x02\x12\x04\xb8\x03KN\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xea\x01\x12\x04\xb9\x03\x20`\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xea\x01\x01\x12\x04\xb9\x03\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xea\x01\x02\x12\x04\xb9\x03\\_\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\
    \0\x02\xeb\x01\x12\x04\xba\x03\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xeb\x01\x01\x12\x04\xba\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xeb\x01\x02\x12\x04\xba\x03RU\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xec\x01\x12\x04\xbb\x03\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xec\x01\x01\x12\x04\xbb\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xec\x01\x02\x12\x04\xbb\x03SV\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xed\x01\x12\x04\xbc\x03\x20e\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xed\x01\x01\x12\x04\xbc\x03\x20^\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xed\x01\x02\x12\x04\xbc\x03ad\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xee\x01\x12\x04\xbd\x03\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xee\x01\x01\x12\x04\xbd\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xee\x01\x02\x12\x04\xbd\x03RU\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xef\x01\x12\x04\xbe\x03\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xef\x01\x01\x12\x04\xbe\x03\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xef\x01\x02\x12\x04\xbe\x03QT\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xf0\x01\x12\x04\xbf\x03\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xf0\x01\x01\x12\x04\xbf\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xf0\x01\x02\x12\x04\xbf\x03SV\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xf1\x01\x12\x04\xc0\x03\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xf1\x01\x01\x12\x04\xc0\x03\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xf1\x01\x02\x12\x04\xc0\x03QT\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xf2\x01\x12\x04\xc1\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xf2\x01\x01\x12\x04\xc1\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xf2\x01\x02\x12\x04\xc1\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xf3\x01\x12\x04\xc2\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xf3\x01\x01\x12\x04\xc2\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xf3\x01\x02\x12\x04\xc2\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xf4\x01\x12\x04\xc3\x03\x20X\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xf4\x01\x01\x12\x04\xc3\x03\x20Q\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xf4\x01\x02\x12\x04\xc3\x03TW\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xf5\x01\x12\x04\xc4\x03\x20Q\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xf5\x01\x01\x12\x04\xc4\x03\x20J\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xf5\x01\x02\x12\x04\xc4\x03MP\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xf6\x01\x12\x04\xc5\x03\x20U\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xf6\x01\x01\x12\x04\xc5\x03\x20N\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xf6\x01\x02\x12\x04\xc5\x03QT\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xf7\x01\x12\x04\xc6\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xf7\x01\x01\x12\x04\xc6\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xf7\x01\x02\x12\x04\xc6\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xf8\x01\x12\x04\xc7\x03\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xf8\x01\x01\x12\x04\xc7\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xf8\x01\x02\x12\x04\xc7\x03RU\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xf9\x01\x12\x04\xc8\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xf9\x01\x01\x12\x04\xc8\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xf9\x01\x02\x12\x04\xc8\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xfa\x01\x12\x04\xc9\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xfa\x01\x01\x12\x04\xc9\x03\x20I\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xfa\x01\x02\x12\x04\xc9\x03LO\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xfb\x01\x12\x04\xca\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xfb\x01\x01\x12\x04\xca\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xfb\x01\x02\x12\x04\xca\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xfc\x01\x12\x04\xcb\x03\x20Z\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xfc\x01\x01\x12\x04\xcb\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xfc\x01\x02\x12\x04\xcb\x03VY\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xfd\x01\x12\x04\xcc\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xfd\x01\x01\x12\x04\xcc\x03\x20K\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xfd\x01\x02\x12\x04\xcc\x03NQ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xfe\x01\x12\x04\xcd\x03\x20Z\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xfe\x01\x01\x12\x04\xcd\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xfe\x01\x02\x12\x04\xcd\x03VY\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\xff\x01\x12\x04\xce\x03\x20[\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\xff\x01\x01\x12\x04\xce\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\xff\x01\x02\x12\x04\xce\x03WZ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x80\x02\x12\x04\xcf\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x80\x02\x01\x12\x04\xcf\x03\x20K\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x80\x02\x02\x12\x04\xcf\x03NQ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x81\x02\x12\x04\xd0\x03\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x81\x02\x01\x12\x04\xd0\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x81\x02\x02\x12\x04\xd0\x03SV\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x82\x02\x12\x04\xd1\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x82\x02\x01\x12\x04\xd1\x03\x20K\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x82\x02\x02\x12\x04\xd1\x03NQ\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x83\x02\x12\x04\xd2\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x83\x02\x01\x12\x04\xd2\x03\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x83\x02\x02\x12\x04\xd2\x03OR\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x84\x02\x12\x04\xd3\x03\x20W\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x84\x02\x01\x12\x04\xd3\x03\x20P\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x84\x02\x02\x12\x04\xd3\x03SV\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x85\x02\x12\x04\xd4\x03\x20a\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x85\x02\x01\x12\x04\xd4\x03\x20Z\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x85\x02\x02\x12\x04\xd4\x03]`\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x86\x02\x12\x04\xd5\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x86\x02\x01\x12\x04\xd5\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x86\x02\x02\x12\x04\xd5\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x87\x02\x12\x04\xd6\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x87\x02\x01\x12\x04\xd6\x03\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x87\x02\x02\x12\x04\xd6\x03OR\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x88\x02\x12\x04\xd7\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x88\x02\x01\x12\x04\xd7\x03\x20H\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x88\x02\x02\x12\x04\xd7\x03KN\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x89\x02\x12\x04\xd8\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x89\x02\x01\x12\x04\xd8\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x89\x02\x02\x12\x04\xd8\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8a\x02\x12\x04\xd9\x03\x20V\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8a\x02\x01\x12\x04\xd9\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8a\x02\x02\x12\x04\xd9\x03RU\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8b\x02\x12\x04\xda\x03\x208\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8b\x02\x01\x12\x04\xda\x03\x201\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8b\x02\x02\x12\x04\xda\x0347\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8c\x02\x12\x04\xdb\x03\x20O\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8c\x02\x01\x12\x04\xdb\x03\x20H\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8c\x02\x02\x12\x04\xdb\x03KN\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8d\x02\x12\x04\xdc\x03\x20T\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8d\x02\x01\x12\x04\xdc\x03\x20M\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8d\x02\x02\x12\x04\xdc\x03PS\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8e\x02\x12\x04\xdd\x03\x20S\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8e\x02\x01\x12\x04\xdd\x03\x20L\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8e\x02\x02\x12\x04\xdd\x03OR\n\x13\n\x0b\x04\n\x03\0\x03\0\x04\0\
    \x02\x8f\x02\x12\x04\xde\x03\x20Y\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\0\
    \x02\x8f\x02\x01\x12\x04\xde\x03\x20R\n\x14\n\x0c\x04\n\x03\0\x03\0\x04\
    \0\x02\x8f\x02\x02\x12\x04\xde\x03UX\n\x10\n\x08\x04\n\x03\0\x03\0\x02\0\
    \x12\x04\xe1\x03\x18X\n\x11\n\t\x04\n\x03\0\x03\0\x02\0\x04\x12\x04\xe1\
    \x03\x18\x20\n\x11\n\t\x04\n\x03\0\x03\0\x02\0\x06\x12\x04\xe1\x03!N\n\
    \x11\n\t\x04\n\x03\0\x03\0\x02\0\x01\x12\x04\xe1\x03OS\n\x11\n\t\x04\n\
    \x03\0\x03\0\x02\0\x03\x12\x04\xe1\x03VW\n\x10\n\x08\x04\n\x03\0\x03\0\
    \x02\x01\x12\x04\xe2\x03\x188\n\x11\n\t\x04\n\x03\0\x03\0\x02\x01\x04\
    \x12\x04\xe2\x03\x18\x20\n\x11\n\t\x04\n\x03\0\x03\0\x02\x01\x05\x12\x04\
    \xe2\x03!&\n\x11\n\t\x04\n\x03\0\x03\0\x02\x01\x01\x12\x04\xe2\x03'3\n\
    \x11\n\t\x04\n\x03\0\x03\0\x02\x01\x03\x12\x04\xe2\x0367\n\x0e\n\x06\x04\
    \n\x03\0\x02\0\x12\x04\xe5\x03\x100\n\x0f\n\x07\x04\n\x03\0\x02\0\x04\
    \x12\x04\xe5\x03\x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\0\x05\x12\x04\xe5\
    \x03\x19\x1f\n\x0f\n\x07\x04\n\x03\0\x02\0\x01\x12\x04\xe5\x03\x20+\n\
    \x0f\n\x07\x04\n\x03\0\x02\0\x03\x12\x04\xe5\x03./\n\x0e\n\x06\x04\n\x03\
    \0\x02\x01\x12\x04\xe6\x03\x10E\n\x0f\n\x07\x04\n\x03\0\x02\x01\x04\x12\
    \x04\xe6\x03\x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\x01\x06\x12\x04\xe6\x03\
    \x196\n\x0f\n\x07\x04\n\x03\0\x02\x01\x01\x12\x04\xe6\x037@\n\x0f\n\x07\
    \x04\n\x03\0\x02\x01\x03\x12\x04\xe6\x03CD\n\x0c\n\x04\x04\n\x02\0\x12\
    \x04\xe9\x03\x08,\n\r\n\x05\x04\n\x02\0\x04\x12\x04\xe9\x03\x08\x10\n\r\
    \n\x05\x04\n\x02\0\x06\x12\x04\xe9\x03\x11\"\n\r\n\x05\x04\n\x02\0\x01\
    \x12\x04\xe9\x03#'\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xe9\x03*+\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::steammessages::file_descriptor().clone());
            deps.push(super::gcsdk_gcmessages::file_descriptor().clone());
            deps.push(super::dota_shared_enums::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(15);
            messages.push(CSODOTAPartyMember::generated_message_descriptor_data());
            messages.push(CSODOTAParty::generated_message_descriptor_data());
            messages.push(CSODOTAPartyInvite::generated_message_descriptor_data());
            messages.push(CMsgLeaverState::generated_message_descriptor_data());
            messages.push(CMsgReadyCheckStatus::generated_message_descriptor_data());
            messages.push(CMsgPartyReadyCheckRequest::generated_message_descriptor_data());
            messages.push(CMsgPartyReadyCheckResponse::generated_message_descriptor_data());
            messages.push(CMsgPartyReadyCheckAcknowledge::generated_message_descriptor_data());
            messages.push(CMsgLobbyEventGameDetails::generated_message_descriptor_data());
            messages.push(CMsgMatchMatchmakingStats::generated_message_descriptor_data());
            messages.push(CMvpData::generated_message_descriptor_data());
            messages.push(csodotaparty_invite::PartyMember::generated_message_descriptor_data());
            messages.push(cmsg_ready_check_status::ReadyMember::generated_message_descriptor_data());
            messages.push(cmvp_data::MvpDatum::generated_message_descriptor_data());
            messages.push(cmvp_data::mvp_datum::MvpAccolade::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(9);
            enums.push(ELaneSelection::generated_enum_descriptor_data());
            enums.push(ELaneSelectionFlags::generated_enum_descriptor_data());
            enums.push(EPartyMatchmakingFlags::generated_enum_descriptor_data());
            enums.push(EHighPriorityMMState::generated_enum_descriptor_data());
            enums.push(EReadyCheckStatus::generated_enum_descriptor_data());
            enums.push(EReadyCheckRequestResult::generated_enum_descriptor_data());
            enums.push(EMatchBehaviorScoreVariance::generated_enum_descriptor_data());
            enums.push(csodotaparty::State::generated_enum_descriptor_data());
            enums.push(cmvp_data::mvp_datum::mvp_accolade::MvpAccoladeType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
