// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_client_enums.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.ETournamentTemplate)
pub enum ETournamentTemplate {
    // @@protoc_insertion_point(enum_value:dota.ETournamentTemplate.k_ETournamentTemplate_None)
    k_ETournamentTemplate_None = 0,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTemplate.k_ETournamentTemplate_AutomatedWin3)
    k_ETournamentTemplate_AutomatedWin3 = 1,
}

impl ::protobuf::Enum for ETournamentTemplate {
    const NAME: &'static str = "ETournamentTemplate";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentTemplate> {
        match value {
            0 => ::std::option::Option::Some(ETournamentTemplate::k_ETournamentTemplate_None),
            1 => ::std::option::Option::Some(ETournamentTemplate::k_ETournamentTemplate_AutomatedWin3),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentTemplate> {
        match str {
            "k_ETournamentTemplate_None" => ::std::option::Option::Some(ETournamentTemplate::k_ETournamentTemplate_None),
            "k_ETournamentTemplate_AutomatedWin3" => ::std::option::Option::Some(ETournamentTemplate::k_ETournamentTemplate_AutomatedWin3),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentTemplate] = &[
        ETournamentTemplate::k_ETournamentTemplate_None,
        ETournamentTemplate::k_ETournamentTemplate_AutomatedWin3,
    ];
}

impl ::protobuf::EnumFull for ETournamentTemplate {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ETournamentTemplate").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ETournamentTemplate {
    fn default() -> Self {
        ETournamentTemplate::k_ETournamentTemplate_None
    }
}

impl ETournamentTemplate {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ETournamentTemplate>("ETournamentTemplate")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.ETournamentGameState)
pub enum ETournamentGameState {
    // @@protoc_insertion_point(enum_value:dota.ETournamentGameState.k_ETournamentGameState_Unknown)
    k_ETournamentGameState_Unknown = 0,
    // @@protoc_insertion_point(enum_value:dota.ETournamentGameState.k_ETournamentGameState_Canceled)
    k_ETournamentGameState_Canceled = 1,
    // @@protoc_insertion_point(enum_value:dota.ETournamentGameState.k_ETournamentGameState_Scheduled)
    k_ETournamentGameState_Scheduled = 2,
    // @@protoc_insertion_point(enum_value:dota.ETournamentGameState.k_ETournamentGameState_Active)
    k_ETournamentGameState_Active = 3,
    // @@protoc_insertion_point(enum_value:dota.ETournamentGameState.k_ETournamentGameState_RadVictory)
    k_ETournamentGameState_RadVictory = 20,
    // @@protoc_insertion_point(enum_value:dota.ETournamentGameState.k_ETournamentGameState_DireVictory)
    k_ETournamentGameState_DireVictory = 21,
    // @@protoc_insertion_point(enum_value:dota.ETournamentGameState.k_ETournamentGameState_RadVictoryByForfeit)
    k_ETournamentGameState_RadVictoryByForfeit = 22,
    // @@protoc_insertion_point(enum_value:dota.ETournamentGameState.k_ETournamentGameState_DireVictoryByForfeit)
    k_ETournamentGameState_DireVictoryByForfeit = 23,
    // @@protoc_insertion_point(enum_value:dota.ETournamentGameState.k_ETournamentGameState_ServerFailure)
    k_ETournamentGameState_ServerFailure = 40,
    // @@protoc_insertion_point(enum_value:dota.ETournamentGameState.k_ETournamentGameState_NotNeeded)
    k_ETournamentGameState_NotNeeded = 41,
}

impl ::protobuf::Enum for ETournamentGameState {
    const NAME: &'static str = "ETournamentGameState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentGameState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Unknown),
            1 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Canceled),
            2 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Scheduled),
            3 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Active),
            20 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_RadVictory),
            21 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_DireVictory),
            22 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_RadVictoryByForfeit),
            23 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_DireVictoryByForfeit),
            40 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_ServerFailure),
            41 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_NotNeeded),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentGameState> {
        match str {
            "k_ETournamentGameState_Unknown" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Unknown),
            "k_ETournamentGameState_Canceled" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Canceled),
            "k_ETournamentGameState_Scheduled" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Scheduled),
            "k_ETournamentGameState_Active" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Active),
            "k_ETournamentGameState_RadVictory" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_RadVictory),
            "k_ETournamentGameState_DireVictory" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_DireVictory),
            "k_ETournamentGameState_RadVictoryByForfeit" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_RadVictoryByForfeit),
            "k_ETournamentGameState_DireVictoryByForfeit" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_DireVictoryByForfeit),
            "k_ETournamentGameState_ServerFailure" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_ServerFailure),
            "k_ETournamentGameState_NotNeeded" => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_NotNeeded),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentGameState] = &[
        ETournamentGameState::k_ETournamentGameState_Unknown,
        ETournamentGameState::k_ETournamentGameState_Canceled,
        ETournamentGameState::k_ETournamentGameState_Scheduled,
        ETournamentGameState::k_ETournamentGameState_Active,
        ETournamentGameState::k_ETournamentGameState_RadVictory,
        ETournamentGameState::k_ETournamentGameState_DireVictory,
        ETournamentGameState::k_ETournamentGameState_RadVictoryByForfeit,
        ETournamentGameState::k_ETournamentGameState_DireVictoryByForfeit,
        ETournamentGameState::k_ETournamentGameState_ServerFailure,
        ETournamentGameState::k_ETournamentGameState_NotNeeded,
    ];
}

impl ::protobuf::EnumFull for ETournamentGameState {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ETournamentGameState").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ETournamentGameState::k_ETournamentGameState_Unknown => 0,
            ETournamentGameState::k_ETournamentGameState_Canceled => 1,
            ETournamentGameState::k_ETournamentGameState_Scheduled => 2,
            ETournamentGameState::k_ETournamentGameState_Active => 3,
            ETournamentGameState::k_ETournamentGameState_RadVictory => 4,
            ETournamentGameState::k_ETournamentGameState_DireVictory => 5,
            ETournamentGameState::k_ETournamentGameState_RadVictoryByForfeit => 6,
            ETournamentGameState::k_ETournamentGameState_DireVictoryByForfeit => 7,
            ETournamentGameState::k_ETournamentGameState_ServerFailure => 8,
            ETournamentGameState::k_ETournamentGameState_NotNeeded => 9,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ETournamentGameState {
    fn default() -> Self {
        ETournamentGameState::k_ETournamentGameState_Unknown
    }
}

impl ETournamentGameState {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ETournamentGameState>("ETournamentGameState")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.ETournamentTeamState)
pub enum ETournamentTeamState {
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Unknown)
    k_ETournamentTeamState_Unknown = 0,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Node1)
    k_ETournamentTeamState_Node1 = 1,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_NodeMax)
    k_ETournamentTeamState_NodeMax = 1024,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Eliminated)
    k_ETournamentTeamState_Eliminated = 14003,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Forfeited)
    k_ETournamentTeamState_Forfeited = 14004,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished1st)
    k_ETournamentTeamState_Finished1st = 15001,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished2nd)
    k_ETournamentTeamState_Finished2nd = 15002,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished3rd)
    k_ETournamentTeamState_Finished3rd = 15003,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished4th)
    k_ETournamentTeamState_Finished4th = 15004,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished5th)
    k_ETournamentTeamState_Finished5th = 15005,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished6th)
    k_ETournamentTeamState_Finished6th = 15006,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished7th)
    k_ETournamentTeamState_Finished7th = 15007,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished8th)
    k_ETournamentTeamState_Finished8th = 15008,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished9th)
    k_ETournamentTeamState_Finished9th = 15009,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished10th)
    k_ETournamentTeamState_Finished10th = 15010,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished11th)
    k_ETournamentTeamState_Finished11th = 15011,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished12th)
    k_ETournamentTeamState_Finished12th = 15012,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished13th)
    k_ETournamentTeamState_Finished13th = 15013,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished14th)
    k_ETournamentTeamState_Finished14th = 15014,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished15th)
    k_ETournamentTeamState_Finished15th = 15015,
    // @@protoc_insertion_point(enum_value:dota.ETournamentTeamState.k_ETournamentTeamState_Finished16th)
    k_ETournamentTeamState_Finished16th = 15016,
}

impl ::protobuf::Enum for ETournamentTeamState {
    const NAME: &'static str = "ETournamentTeamState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentTeamState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Unknown),
            1 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Node1),
            1024 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_NodeMax),
            14003 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Eliminated),
            14004 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Forfeited),
            15001 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished1st),
            15002 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished2nd),
            15003 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished3rd),
            15004 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished4th),
            15005 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished5th),
            15006 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished6th),
            15007 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished7th),
            15008 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished8th),
            15009 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished9th),
            15010 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished10th),
            15011 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished11th),
            15012 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished12th),
            15013 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished13th),
            15014 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished14th),
            15015 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished15th),
            15016 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished16th),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentTeamState> {
        match str {
            "k_ETournamentTeamState_Unknown" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Unknown),
            "k_ETournamentTeamState_Node1" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Node1),
            "k_ETournamentTeamState_NodeMax" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_NodeMax),
            "k_ETournamentTeamState_Eliminated" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Eliminated),
            "k_ETournamentTeamState_Forfeited" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Forfeited),
            "k_ETournamentTeamState_Finished1st" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished1st),
            "k_ETournamentTeamState_Finished2nd" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished2nd),
            "k_ETournamentTeamState_Finished3rd" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished3rd),
            "k_ETournamentTeamState_Finished4th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished4th),
            "k_ETournamentTeamState_Finished5th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished5th),
            "k_ETournamentTeamState_Finished6th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished6th),
            "k_ETournamentTeamState_Finished7th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished7th),
            "k_ETournamentTeamState_Finished8th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished8th),
            "k_ETournamentTeamState_Finished9th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished9th),
            "k_ETournamentTeamState_Finished10th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished10th),
            "k_ETournamentTeamState_Finished11th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished11th),
            "k_ETournamentTeamState_Finished12th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished12th),
            "k_ETournamentTeamState_Finished13th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished13th),
            "k_ETournamentTeamState_Finished14th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished14th),
            "k_ETournamentTeamState_Finished15th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished15th),
            "k_ETournamentTeamState_Finished16th" => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished16th),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentTeamState] = &[
        ETournamentTeamState::k_ETournamentTeamState_Unknown,
        ETournamentTeamState::k_ETournamentTeamState_Node1,
        ETournamentTeamState::k_ETournamentTeamState_NodeMax,
        ETournamentTeamState::k_ETournamentTeamState_Eliminated,
        ETournamentTeamState::k_ETournamentTeamState_Forfeited,
        ETournamentTeamState::k_ETournamentTeamState_Finished1st,
        ETournamentTeamState::k_ETournamentTeamState_Finished2nd,
        ETournamentTeamState::k_ETournamentTeamState_Finished3rd,
        ETournamentTeamState::k_ETournamentTeamState_Finished4th,
        ETournamentTeamState::k_ETournamentTeamState_Finished5th,
        ETournamentTeamState::k_ETournamentTeamState_Finished6th,
        ETournamentTeamState::k_ETournamentTeamState_Finished7th,
        ETournamentTeamState::k_ETournamentTeamState_Finished8th,
        ETournamentTeamState::k_ETournamentTeamState_Finished9th,
        ETournamentTeamState::k_ETournamentTeamState_Finished10th,
        ETournamentTeamState::k_ETournamentTeamState_Finished11th,
        ETournamentTeamState::k_ETournamentTeamState_Finished12th,
        ETournamentTeamState::k_ETournamentTeamState_Finished13th,
        ETournamentTeamState::k_ETournamentTeamState_Finished14th,
        ETournamentTeamState::k_ETournamentTeamState_Finished15th,
        ETournamentTeamState::k_ETournamentTeamState_Finished16th,
    ];
}

impl ::protobuf::EnumFull for ETournamentTeamState {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ETournamentTeamState").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ETournamentTeamState::k_ETournamentTeamState_Unknown => 0,
            ETournamentTeamState::k_ETournamentTeamState_Node1 => 1,
            ETournamentTeamState::k_ETournamentTeamState_NodeMax => 2,
            ETournamentTeamState::k_ETournamentTeamState_Eliminated => 3,
            ETournamentTeamState::k_ETournamentTeamState_Forfeited => 4,
            ETournamentTeamState::k_ETournamentTeamState_Finished1st => 5,
            ETournamentTeamState::k_ETournamentTeamState_Finished2nd => 6,
            ETournamentTeamState::k_ETournamentTeamState_Finished3rd => 7,
            ETournamentTeamState::k_ETournamentTeamState_Finished4th => 8,
            ETournamentTeamState::k_ETournamentTeamState_Finished5th => 9,
            ETournamentTeamState::k_ETournamentTeamState_Finished6th => 10,
            ETournamentTeamState::k_ETournamentTeamState_Finished7th => 11,
            ETournamentTeamState::k_ETournamentTeamState_Finished8th => 12,
            ETournamentTeamState::k_ETournamentTeamState_Finished9th => 13,
            ETournamentTeamState::k_ETournamentTeamState_Finished10th => 14,
            ETournamentTeamState::k_ETournamentTeamState_Finished11th => 15,
            ETournamentTeamState::k_ETournamentTeamState_Finished12th => 16,
            ETournamentTeamState::k_ETournamentTeamState_Finished13th => 17,
            ETournamentTeamState::k_ETournamentTeamState_Finished14th => 18,
            ETournamentTeamState::k_ETournamentTeamState_Finished15th => 19,
            ETournamentTeamState::k_ETournamentTeamState_Finished16th => 20,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ETournamentTeamState {
    fn default() -> Self {
        ETournamentTeamState::k_ETournamentTeamState_Unknown
    }
}

impl ETournamentTeamState {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ETournamentTeamState>("ETournamentTeamState")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.ETournamentState)
pub enum ETournamentState {
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_Unknown)
    k_ETournamentState_Unknown = 0,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_CanceledByAdmin)
    k_ETournamentState_CanceledByAdmin = 1,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_Completed)
    k_ETournamentState_Completed = 2,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_Merged)
    k_ETournamentState_Merged = 3,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_ServerFailure)
    k_ETournamentState_ServerFailure = 4,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_TeamAbandoned)
    k_ETournamentState_TeamAbandoned = 5,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_TeamTimeoutForfeit)
    k_ETournamentState_TeamTimeoutForfeit = 6,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_TeamTimeoutRefund)
    k_ETournamentState_TeamTimeoutRefund = 7,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_ServerFailureGrantedVictory)
    k_ETournamentState_ServerFailureGrantedVictory = 8,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_TeamTimeoutGrantedVictory)
    k_ETournamentState_TeamTimeoutGrantedVictory = 9,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_InProgress)
    k_ETournamentState_InProgress = 100,
    // @@protoc_insertion_point(enum_value:dota.ETournamentState.k_ETournamentState_WaitingToMerge)
    k_ETournamentState_WaitingToMerge = 101,
}

impl ::protobuf::Enum for ETournamentState {
    const NAME: &'static str = "ETournamentState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Unknown),
            1 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_CanceledByAdmin),
            2 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Completed),
            3 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Merged),
            4 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_ServerFailure),
            5 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamAbandoned),
            6 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutForfeit),
            7 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutRefund),
            8 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_ServerFailureGrantedVictory),
            9 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutGrantedVictory),
            100 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_InProgress),
            101 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_WaitingToMerge),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentState> {
        match str {
            "k_ETournamentState_Unknown" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Unknown),
            "k_ETournamentState_CanceledByAdmin" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_CanceledByAdmin),
            "k_ETournamentState_Completed" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Completed),
            "k_ETournamentState_Merged" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Merged),
            "k_ETournamentState_ServerFailure" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_ServerFailure),
            "k_ETournamentState_TeamAbandoned" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamAbandoned),
            "k_ETournamentState_TeamTimeoutForfeit" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutForfeit),
            "k_ETournamentState_TeamTimeoutRefund" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutRefund),
            "k_ETournamentState_ServerFailureGrantedVictory" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_ServerFailureGrantedVictory),
            "k_ETournamentState_TeamTimeoutGrantedVictory" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutGrantedVictory),
            "k_ETournamentState_InProgress" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_InProgress),
            "k_ETournamentState_WaitingToMerge" => ::std::option::Option::Some(ETournamentState::k_ETournamentState_WaitingToMerge),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentState] = &[
        ETournamentState::k_ETournamentState_Unknown,
        ETournamentState::k_ETournamentState_CanceledByAdmin,
        ETournamentState::k_ETournamentState_Completed,
        ETournamentState::k_ETournamentState_Merged,
        ETournamentState::k_ETournamentState_ServerFailure,
        ETournamentState::k_ETournamentState_TeamAbandoned,
        ETournamentState::k_ETournamentState_TeamTimeoutForfeit,
        ETournamentState::k_ETournamentState_TeamTimeoutRefund,
        ETournamentState::k_ETournamentState_ServerFailureGrantedVictory,
        ETournamentState::k_ETournamentState_TeamTimeoutGrantedVictory,
        ETournamentState::k_ETournamentState_InProgress,
        ETournamentState::k_ETournamentState_WaitingToMerge,
    ];
}

impl ::protobuf::EnumFull for ETournamentState {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ETournamentState").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ETournamentState::k_ETournamentState_Unknown => 0,
            ETournamentState::k_ETournamentState_CanceledByAdmin => 1,
            ETournamentState::k_ETournamentState_Completed => 2,
            ETournamentState::k_ETournamentState_Merged => 3,
            ETournamentState::k_ETournamentState_ServerFailure => 4,
            ETournamentState::k_ETournamentState_TeamAbandoned => 5,
            ETournamentState::k_ETournamentState_TeamTimeoutForfeit => 6,
            ETournamentState::k_ETournamentState_TeamTimeoutRefund => 7,
            ETournamentState::k_ETournamentState_ServerFailureGrantedVictory => 8,
            ETournamentState::k_ETournamentState_TeamTimeoutGrantedVictory => 9,
            ETournamentState::k_ETournamentState_InProgress => 10,
            ETournamentState::k_ETournamentState_WaitingToMerge => 11,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ETournamentState {
    fn default() -> Self {
        ETournamentState::k_ETournamentState_Unknown
    }
}

impl ETournamentState {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ETournamentState>("ETournamentState")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.ETournamentNodeState)
pub enum ETournamentNodeState {
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_Unknown)
    k_ETournamentNodeState_Unknown = 0,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_Canceled)
    k_ETournamentNodeState_Canceled = 1,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_TeamsNotYetAssigned)
    k_ETournamentNodeState_TeamsNotYetAssigned = 2,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_InBetweenGames)
    k_ETournamentNodeState_InBetweenGames = 3,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_GameInProgress)
    k_ETournamentNodeState_GameInProgress = 4,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_A_Won)
    k_ETournamentNodeState_A_Won = 5,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_B_Won)
    k_ETournamentNodeState_B_Won = 6,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_A_WonByForfeit)
    k_ETournamentNodeState_A_WonByForfeit = 7,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_B_WonByForfeit)
    k_ETournamentNodeState_B_WonByForfeit = 8,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_A_Bye)
    k_ETournamentNodeState_A_Bye = 9,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_A_Abandoned)
    k_ETournamentNodeState_A_Abandoned = 10,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_ServerFailure)
    k_ETournamentNodeState_ServerFailure = 11,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_A_TimeoutForfeit)
    k_ETournamentNodeState_A_TimeoutForfeit = 12,
    // @@protoc_insertion_point(enum_value:dota.ETournamentNodeState.k_ETournamentNodeState_A_TimeoutRefund)
    k_ETournamentNodeState_A_TimeoutRefund = 13,
}

impl ::protobuf::Enum for ETournamentNodeState {
    const NAME: &'static str = "ETournamentNodeState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentNodeState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_Unknown),
            1 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_Canceled),
            2 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_TeamsNotYetAssigned),
            3 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_InBetweenGames),
            4 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_GameInProgress),
            5 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Won),
            6 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_B_Won),
            7 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_WonByForfeit),
            8 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_B_WonByForfeit),
            9 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Bye),
            10 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Abandoned),
            11 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_ServerFailure),
            12 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_TimeoutForfeit),
            13 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_TimeoutRefund),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentNodeState> {
        match str {
            "k_ETournamentNodeState_Unknown" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_Unknown),
            "k_ETournamentNodeState_Canceled" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_Canceled),
            "k_ETournamentNodeState_TeamsNotYetAssigned" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_TeamsNotYetAssigned),
            "k_ETournamentNodeState_InBetweenGames" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_InBetweenGames),
            "k_ETournamentNodeState_GameInProgress" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_GameInProgress),
            "k_ETournamentNodeState_A_Won" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Won),
            "k_ETournamentNodeState_B_Won" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_B_Won),
            "k_ETournamentNodeState_A_WonByForfeit" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_WonByForfeit),
            "k_ETournamentNodeState_B_WonByForfeit" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_B_WonByForfeit),
            "k_ETournamentNodeState_A_Bye" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Bye),
            "k_ETournamentNodeState_A_Abandoned" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Abandoned),
            "k_ETournamentNodeState_ServerFailure" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_ServerFailure),
            "k_ETournamentNodeState_A_TimeoutForfeit" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_TimeoutForfeit),
            "k_ETournamentNodeState_A_TimeoutRefund" => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_TimeoutRefund),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentNodeState] = &[
        ETournamentNodeState::k_ETournamentNodeState_Unknown,
        ETournamentNodeState::k_ETournamentNodeState_Canceled,
        ETournamentNodeState::k_ETournamentNodeState_TeamsNotYetAssigned,
        ETournamentNodeState::k_ETournamentNodeState_InBetweenGames,
        ETournamentNodeState::k_ETournamentNodeState_GameInProgress,
        ETournamentNodeState::k_ETournamentNodeState_A_Won,
        ETournamentNodeState::k_ETournamentNodeState_B_Won,
        ETournamentNodeState::k_ETournamentNodeState_A_WonByForfeit,
        ETournamentNodeState::k_ETournamentNodeState_B_WonByForfeit,
        ETournamentNodeState::k_ETournamentNodeState_A_Bye,
        ETournamentNodeState::k_ETournamentNodeState_A_Abandoned,
        ETournamentNodeState::k_ETournamentNodeState_ServerFailure,
        ETournamentNodeState::k_ETournamentNodeState_A_TimeoutForfeit,
        ETournamentNodeState::k_ETournamentNodeState_A_TimeoutRefund,
    ];
}

impl ::protobuf::EnumFull for ETournamentNodeState {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ETournamentNodeState").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ETournamentNodeState {
    fn default() -> Self {
        ETournamentNodeState::k_ETournamentNodeState_Unknown
    }
}

impl ETournamentNodeState {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ETournamentNodeState>("ETournamentNodeState")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EDOTAGroupMergeResult)
pub enum EDOTAGroupMergeResult {
    // @@protoc_insertion_point(enum_value:dota.EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_OK)
    k_EDOTAGroupMergeResult_OK = 0,
    // @@protoc_insertion_point(enum_value:dota.EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_FAILED_GENERIC)
    k_EDOTAGroupMergeResult_FAILED_GENERIC = 1,
    // @@protoc_insertion_point(enum_value:dota.EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_NOT_LEADER)
    k_EDOTAGroupMergeResult_NOT_LEADER = 2,
    // @@protoc_insertion_point(enum_value:dota.EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS)
    k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS = 3,
    // @@protoc_insertion_point(enum_value:dota.EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_TOO_MANY_COACHES)
    k_EDOTAGroupMergeResult_TOO_MANY_COACHES = 4,
    // @@protoc_insertion_point(enum_value:dota.EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_ENGINE_MISMATCH)
    k_EDOTAGroupMergeResult_ENGINE_MISMATCH = 5,
    // @@protoc_insertion_point(enum_value:dota.EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_NO_SUCH_GROUP)
    k_EDOTAGroupMergeResult_NO_SUCH_GROUP = 6,
    // @@protoc_insertion_point(enum_value:dota.EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN)
    k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN = 7,
    // @@protoc_insertion_point(enum_value:dota.EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_ALREADY_INVITED)
    k_EDOTAGroupMergeResult_ALREADY_INVITED = 8,
    // @@protoc_insertion_point(enum_value:dota.EDOTAGroupMergeResult.k_EDOTAGroupMergeResult_NOT_INVITED)
    k_EDOTAGroupMergeResult_NOT_INVITED = 9,
}

impl ::protobuf::Enum for EDOTAGroupMergeResult {
    const NAME: &'static str = "EDOTAGroupMergeResult";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EDOTAGroupMergeResult> {
        match value {
            0 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OK),
            1 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_FAILED_GENERIC),
            2 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_LEADER),
            3 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS),
            4 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_COACHES),
            5 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ENGINE_MISMATCH),
            6 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NO_SUCH_GROUP),
            7 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN),
            8 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ALREADY_INVITED),
            9 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_INVITED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EDOTAGroupMergeResult> {
        match str {
            "k_EDOTAGroupMergeResult_OK" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OK),
            "k_EDOTAGroupMergeResult_FAILED_GENERIC" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_FAILED_GENERIC),
            "k_EDOTAGroupMergeResult_NOT_LEADER" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_LEADER),
            "k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS),
            "k_EDOTAGroupMergeResult_TOO_MANY_COACHES" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_COACHES),
            "k_EDOTAGroupMergeResult_ENGINE_MISMATCH" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ENGINE_MISMATCH),
            "k_EDOTAGroupMergeResult_NO_SUCH_GROUP" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NO_SUCH_GROUP),
            "k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN),
            "k_EDOTAGroupMergeResult_ALREADY_INVITED" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ALREADY_INVITED),
            "k_EDOTAGroupMergeResult_NOT_INVITED" => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_INVITED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EDOTAGroupMergeResult] = &[
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OK,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_FAILED_GENERIC,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_LEADER,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_COACHES,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ENGINE_MISMATCH,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NO_SUCH_GROUP,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ALREADY_INVITED,
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_INVITED,
    ];
}

impl ::protobuf::EnumFull for EDOTAGroupMergeResult {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EDOTAGroupMergeResult").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EDOTAGroupMergeResult {
    fn default() -> Self {
        EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OK
    }
}

impl EDOTAGroupMergeResult {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EDOTAGroupMergeResult>("EDOTAGroupMergeResult")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.EPartyBeaconType)
pub enum EPartyBeaconType {
    // @@protoc_insertion_point(enum_value:dota.EPartyBeaconType.k_EPartyBeaconType_Available)
    k_EPartyBeaconType_Available = 0,
    // @@protoc_insertion_point(enum_value:dota.EPartyBeaconType.k_EPartyBeaconType_Joinable)
    k_EPartyBeaconType_Joinable = 1,
}

impl ::protobuf::Enum for EPartyBeaconType {
    const NAME: &'static str = "EPartyBeaconType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EPartyBeaconType> {
        match value {
            0 => ::std::option::Option::Some(EPartyBeaconType::k_EPartyBeaconType_Available),
            1 => ::std::option::Option::Some(EPartyBeaconType::k_EPartyBeaconType_Joinable),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EPartyBeaconType> {
        match str {
            "k_EPartyBeaconType_Available" => ::std::option::Option::Some(EPartyBeaconType::k_EPartyBeaconType_Available),
            "k_EPartyBeaconType_Joinable" => ::std::option::Option::Some(EPartyBeaconType::k_EPartyBeaconType_Joinable),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EPartyBeaconType] = &[
        EPartyBeaconType::k_EPartyBeaconType_Available,
        EPartyBeaconType::k_EPartyBeaconType_Joinable,
    ];
}

impl ::protobuf::EnumFull for EPartyBeaconType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EPartyBeaconType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EPartyBeaconType {
    fn default() -> Self {
        EPartyBeaconType::k_EPartyBeaconType_Available
    }
}

impl EPartyBeaconType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EPartyBeaconType>("EPartyBeaconType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17dota_client_enums.proto\x12\x04dota\x1a\x17dota_shared_enums.proto\
    *^\n\x13ETournamentTemplate\x12\x1e\n\x1ak_ETournamentTemplate_None\x10\
    \0\x12'\n#k_ETournamentTemplate_AutomatedWin3\x10\x01*\xa8\x03\n\x14ETou\
    rnamentGameState\x12\"\n\x1ek_ETournamentGameState_Unknown\x10\0\x12#\n\
    \x1fk_ETournamentGameState_Canceled\x10\x01\x12$\n\x20k_ETournamentGameS\
    tate_Scheduled\x10\x02\x12!\n\x1dk_ETournamentGameState_Active\x10\x03\
    \x12%\n!k_ETournamentGameState_RadVictory\x10\x14\x12&\n\"k_ETournamentG\
    ameState_DireVictory\x10\x15\x12.\n*k_ETournamentGameState_RadVictoryByF\
    orfeit\x10\x16\x12/\n+k_ETournamentGameState_DireVictoryByForfeit\x10\
    \x17\x12(\n$k_ETournamentGameState_ServerFailure\x10(\x12$\n\x20k_ETourn\
    amentGameState_NotNeeded\x10)*\xe7\x06\n\x14ETournamentTeamState\x12\"\n\
    \x1ek_ETournamentTeamState_Unknown\x10\0\x12\x20\n\x1ck_ETournamentTeamS\
    tate_Node1\x10\x01\x12#\n\x1ek_ETournamentTeamState_NodeMax\x10\x80\x08\
    \x12&\n!k_ETournamentTeamState_Eliminated\x10\xb3m\x12%\n\x20k_ETourname\
    ntTeamState_Forfeited\x10\xb4m\x12'\n\"k_ETournamentTeamState_Finished1s\
    t\x10\x99u\x12'\n\"k_ETournamentTeamState_Finished2nd\x10\x9au\x12'\n\"k\
    _ETournamentTeamState_Finished3rd\x10\x9bu\x12'\n\"k_ETournamentTeamStat\
    e_Finished4th\x10\x9cu\x12'\n\"k_ETournamentTeamState_Finished5th\x10\
    \x9du\x12'\n\"k_ETournamentTeamState_Finished6th\x10\x9eu\x12'\n\"k_ETou\
    rnamentTeamState_Finished7th\x10\x9fu\x12'\n\"k_ETournamentTeamState_Fin\
    ished8th\x10\xa0u\x12'\n\"k_ETournamentTeamState_Finished9th\x10\xa1u\
    \x12(\n#k_ETournamentTeamState_Finished10th\x10\xa2u\x12(\n#k_ETournamen\
    tTeamState_Finished11th\x10\xa3u\x12(\n#k_ETournamentTeamState_Finished1\
    2th\x10\xa4u\x12(\n#k_ETournamentTeamState_Finished13th\x10\xa5u\x12(\n#\
    k_ETournamentTeamState_Finished14th\x10\xa6u\x12(\n#k_ETournamentTeamSta\
    te_Finished15th\x10\xa7u\x12(\n#k_ETournamentTeamState_Finished16th\x10\
    \xa8u*\xec\x03\n\x10ETournamentState\x12\x1e\n\x1ak_ETournamentState_Unk\
    nown\x10\0\x12&\n\"k_ETournamentState_CanceledByAdmin\x10\x01\x12\x20\n\
    \x1ck_ETournamentState_Completed\x10\x02\x12\x1d\n\x19k_ETournamentState\
    _Merged\x10\x03\x12$\n\x20k_ETournamentState_ServerFailure\x10\x04\x12$\
    \n\x20k_ETournamentState_TeamAbandoned\x10\x05\x12)\n%k_ETournamentState\
    _TeamTimeoutForfeit\x10\x06\x12(\n$k_ETournamentState_TeamTimeoutRefund\
    \x10\x07\x122\n.k_ETournamentState_ServerFailureGrantedVictory\x10\x08\
    \x120\n,k_ETournamentState_TeamTimeoutGrantedVictory\x10\t\x12!\n\x1dk_E\
    TournamentState_InProgress\x10d\x12%\n!k_ETournamentState_WaitingToMerge\
    \x10e*\xcc\x04\n\x14ETournamentNodeState\x12\"\n\x1ek_ETournamentNodeSta\
    te_Unknown\x10\0\x12#\n\x1fk_ETournamentNodeState_Canceled\x10\x01\x12.\
    \n*k_ETournamentNodeState_TeamsNotYetAssigned\x10\x02\x12)\n%k_ETourname\
    ntNodeState_InBetweenGames\x10\x03\x12)\n%k_ETournamentNodeState_GameInP\
    rogress\x10\x04\x12\x20\n\x1ck_ETournamentNodeState_A_Won\x10\x05\x12\
    \x20\n\x1ck_ETournamentNodeState_B_Won\x10\x06\x12)\n%k_ETournamentNodeS\
    tate_A_WonByForfeit\x10\x07\x12)\n%k_ETournamentNodeState_B_WonByForfeit\
    \x10\x08\x12\x20\n\x1ck_ETournamentNodeState_A_Bye\x10\t\x12&\n\"k_ETour\
    namentNodeState_A_Abandoned\x10\n\x12(\n$k_ETournamentNodeState_ServerFa\
    ilure\x10\x0b\x12+\n'k_ETournamentNodeState_A_TimeoutForfeit\x10\x0c\x12\
    *\n&k_ETournamentNodeState_A_TimeoutRefund\x10\r*\xc7\x03\n\x15EDOTAGrou\
    pMergeResult\x12\x1e\n\x1ak_EDOTAGroupMergeResult_OK\x10\0\x12*\n&k_EDOT\
    AGroupMergeResult_FAILED_GENERIC\x10\x01\x12&\n\"k_EDOTAGroupMergeResult\
    _NOT_LEADER\x10\x02\x12,\n(k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS\x10\
    \x03\x12,\n(k_EDOTAGroupMergeResult_TOO_MANY_COACHES\x10\x04\x12+\n'k_ED\
    OTAGroupMergeResult_ENGINE_MISMATCH\x10\x05\x12)\n%k_EDOTAGroupMergeResu\
    lt_NO_SUCH_GROUP\x10\x06\x120\n,k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_\
    OPEN\x10\x07\x12+\n'k_EDOTAGroupMergeResult_ALREADY_INVITED\x10\x08\x12'\
    \n#k_EDOTAGroupMergeResult_NOT_INVITED\x10\t*U\n\x10EPartyBeaconType\x12\
    \x20\n\x1ck_EPartyBeaconType_Available\x10\0\x12\x1f\n\x1bk_EPartyBeacon\
    Type_Joinable\x10\x01B%Z#github.com/dotabuff/manta/dota;dotaJ\xc3\x18\n\
    \x06\x12\x04\0\0a\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x03\0:\n\t\n\x02\x08\x0b\
    \x12\x03\x03\0:\n\t\n\x02\x03\0\x12\x03\x05\x07\x20\n\n\n\x02\x05\0\x12\
    \x04\x07\0\n\x01\n\n\n\x03\x05\0\x01\x12\x03\x07\x05\x18\n\x0b\n\x04\x05\
    \0\x02\0\x12\x03\x08\x08'\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x08\x08\"\
    \n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x08%&\n\x0b\n\x04\x05\0\x02\x01\x12\
    \x03\t\x080\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\t\x08+\n\x0c\n\x05\x05\
    \0\x02\x01\x02\x12\x03\t./\n\n\n\x02\x05\x01\x12\x04\x0c\0\x17\x01\n\n\n\
    \x03\x05\x01\x01\x12\x03\x0c\x05\x19\n\x0b\n\x04\x05\x01\x02\0\x12\x03\r\
    \x08+\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\r\x08&\n\x0c\n\x05\x05\x01\
    \x02\0\x02\x12\x03\r)*\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x0e\x08,\n\
    \x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x0e\x08'\n\x0c\n\x05\x05\x01\x02\
    \x01\x02\x12\x03\x0e*+\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x0f\x08-\n\
    \x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\x0f\x08(\n\x0c\n\x05\x05\x01\x02\
    \x02\x02\x12\x03\x0f+,\n\x0b\n\x04\x05\x01\x02\x03\x12\x03\x10\x08*\n\
    \x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\x10\x08%\n\x0c\n\x05\x05\x01\x02\
    \x03\x02\x12\x03\x10()\n\x0b\n\x04\x05\x01\x02\x04\x12\x03\x11\x08/\n\
    \x0c\n\x05\x05\x01\x02\x04\x01\x12\x03\x11\x08)\n\x0c\n\x05\x05\x01\x02\
    \x04\x02\x12\x03\x11,.\n\x0b\n\x04\x05\x01\x02\x05\x12\x03\x12\x080\n\
    \x0c\n\x05\x05\x01\x02\x05\x01\x12\x03\x12\x08*\n\x0c\n\x05\x05\x01\x02\
    \x05\x02\x12\x03\x12-/\n\x0b\n\x04\x05\x01\x02\x06\x12\x03\x13\x088\n\
    \x0c\n\x05\x05\x01\x02\x06\x01\x12\x03\x13\x082\n\x0c\n\x05\x05\x01\x02\
    \x06\x02\x12\x03\x1357\n\x0b\n\x04\x05\x01\x02\x07\x12\x03\x14\x089\n\
    \x0c\n\x05\x05\x01\x02\x07\x01\x12\x03\x14\x083\n\x0c\n\x05\x05\x01\x02\
    \x07\x02\x12\x03\x1468\n\x0b\n\x04\x05\x01\x02\x08\x12\x03\x15\x082\n\
    \x0c\n\x05\x05\x01\x02\x08\x01\x12\x03\x15\x08,\n\x0c\n\x05\x05\x01\x02\
    \x08\x02\x12\x03\x15/1\n\x0b\n\x04\x05\x01\x02\t\x12\x03\x16\x08.\n\x0c\
    \n\x05\x05\x01\x02\t\x01\x12\x03\x16\x08(\n\x0c\n\x05\x05\x01\x02\t\x02\
    \x12\x03\x16+-\n\n\n\x02\x05\x02\x12\x04\x19\0/\x01\n\n\n\x03\x05\x02\
    \x01\x12\x03\x19\x05\x19\n\x0b\n\x04\x05\x02\x02\0\x12\x03\x1a\x08+\n\
    \x0c\n\x05\x05\x02\x02\0\x01\x12\x03\x1a\x08&\n\x0c\n\x05\x05\x02\x02\0\
    \x02\x12\x03\x1a)*\n\x0b\n\x04\x05\x02\x02\x01\x12\x03\x1b\x08)\n\x0c\n\
    \x05\x05\x02\x02\x01\x01\x12\x03\x1b\x08$\n\x0c\n\x05\x05\x02\x02\x01\
    \x02\x12\x03\x1b'(\n\x0b\n\x04\x05\x02\x02\x02\x12\x03\x1c\x08.\n\x0c\n\
    \x05\x05\x02\x02\x02\x01\x12\x03\x1c\x08&\n\x0c\n\x05\x05\x02\x02\x02\
    \x02\x12\x03\x1c)-\n\x0b\n\x04\x05\x02\x02\x03\x12\x03\x1d\x082\n\x0c\n\
    \x05\x05\x02\x02\x03\x01\x12\x03\x1d\x08)\n\x0c\n\x05\x05\x02\x02\x03\
    \x02\x12\x03\x1d,1\n\x0b\n\x04\x05\x02\x02\x04\x12\x03\x1e\x081\n\x0c\n\
    \x05\x05\x02\x02\x04\x01\x12\x03\x1e\x08(\n\x0c\n\x05\x05\x02\x02\x04\
    \x02\x12\x03\x1e+0\n\x0b\n\x04\x05\x02\x02\x05\x12\x03\x1f\x083\n\x0c\n\
    \x05\x05\x02\x02\x05\x01\x12\x03\x1f\x08*\n\x0c\n\x05\x05\x02\x02\x05\
    \x02\x12\x03\x1f-2\n\x0b\n\x04\x05\x02\x02\x06\x12\x03\x20\x083\n\x0c\n\
    \x05\x05\x02\x02\x06\x01\x12\x03\x20\x08*\n\x0c\n\x05\x05\x02\x02\x06\
    \x02\x12\x03\x20-2\n\x0b\n\x04\x05\x02\x02\x07\x12\x03!\x083\n\x0c\n\x05\
    \x05\x02\x02\x07\x01\x12\x03!\x08*\n\x0c\n\x05\x05\x02\x02\x07\x02\x12\
    \x03!-2\n\x0b\n\x04\x05\x02\x02\x08\x12\x03\"\x083\n\x0c\n\x05\x05\x02\
    \x02\x08\x01\x12\x03\"\x08*\n\x0c\n\x05\x05\x02\x02\x08\x02\x12\x03\"-2\
    \n\x0b\n\x04\x05\x02\x02\t\x12\x03#\x083\n\x0c\n\x05\x05\x02\x02\t\x01\
    \x12\x03#\x08*\n\x0c\n\x05\x05\x02\x02\t\x02\x12\x03#-2\n\x0b\n\x04\x05\
    \x02\x02\n\x12\x03$\x083\n\x0c\n\x05\x05\x02\x02\n\x01\x12\x03$\x08*\n\
    \x0c\n\x05\x05\x02\x02\n\x02\x12\x03$-2\n\x0b\n\x04\x05\x02\x02\x0b\x12\
    \x03%\x083\n\x0c\n\x05\x05\x02\x02\x0b\x01\x12\x03%\x08*\n\x0c\n\x05\x05\
    \x02\x02\x0b\x02\x12\x03%-2\n\x0b\n\x04\x05\x02\x02\x0c\x12\x03&\x083\n\
    \x0c\n\x05\x05\x02\x02\x0c\x01\x12\x03&\x08*\n\x0c\n\x05\x05\x02\x02\x0c\
    \x02\x12\x03&-2\n\x0b\n\x04\x05\x02\x02\r\x12\x03'\x083\n\x0c\n\x05\x05\
    \x02\x02\r\x01\x12\x03'\x08*\n\x0c\n\x05\x05\x02\x02\r\x02\x12\x03'-2\n\
    \x0b\n\x04\x05\x02\x02\x0e\x12\x03(\x084\n\x0c\n\x05\x05\x02\x02\x0e\x01\
    \x12\x03(\x08+\n\x0c\n\x05\x05\x02\x02\x0e\x02\x12\x03(.3\n\x0b\n\x04\
    \x05\x02\x02\x0f\x12\x03)\x084\n\x0c\n\x05\x05\x02\x02\x0f\x01\x12\x03)\
    \x08+\n\x0c\n\x05\x05\x02\x02\x0f\x02\x12\x03).3\n\x0b\n\x04\x05\x02\x02\
    \x10\x12\x03*\x084\n\x0c\n\x05\x05\x02\x02\x10\x01\x12\x03*\x08+\n\x0c\n\
    \x05\x05\x02\x02\x10\x02\x12\x03*.3\n\x0b\n\x04\x05\x02\x02\x11\x12\x03+\
    \x084\n\x0c\n\x05\x05\x02\x02\x11\x01\x12\x03+\x08+\n\x0c\n\x05\x05\x02\
    \x02\x11\x02\x12\x03+.3\n\x0b\n\x04\x05\x02\x02\x12\x12\x03,\x084\n\x0c\
    \n\x05\x05\x02\x02\x12\x01\x12\x03,\x08+\n\x0c\n\x05\x05\x02\x02\x12\x02\
    \x12\x03,.3\n\x0b\n\x04\x05\x02\x02\x13\x12\x03-\x084\n\x0c\n\x05\x05\
    \x02\x02\x13\x01\x12\x03-\x08+\n\x0c\n\x05\x05\x02\x02\x13\x02\x12\x03-.\
    3\n\x0b\n\x04\x05\x02\x02\x14\x12\x03.\x084\n\x0c\n\x05\x05\x02\x02\x14\
    \x01\x12\x03.\x08+\n\x0c\n\x05\x05\x02\x02\x14\x02\x12\x03..3\n\n\n\x02\
    \x05\x03\x12\x041\0>\x01\n\n\n\x03\x05\x03\x01\x12\x031\x05\x15\n\x0b\n\
    \x04\x05\x03\x02\0\x12\x032\x08'\n\x0c\n\x05\x05\x03\x02\0\x01\x12\x032\
    \x08\"\n\x0c\n\x05\x05\x03\x02\0\x02\x12\x032%&\n\x0b\n\x04\x05\x03\x02\
    \x01\x12\x033\x08/\n\x0c\n\x05\x05\x03\x02\x01\x01\x12\x033\x08*\n\x0c\n\
    \x05\x05\x03\x02\x01\x02\x12\x033-.\n\x0b\n\x04\x05\x03\x02\x02\x12\x034\
    \x08)\n\x0c\n\x05\x05\x03\x02\x02\x01\x12\x034\x08$\n\x0c\n\x05\x05\x03\
    \x02\x02\x02\x12\x034'(\n\x0b\n\x04\x05\x03\x02\x03\x12\x035\x08&\n\x0c\
    \n\x05\x05\x03\x02\x03\x01\x12\x035\x08!\n\x0c\n\x05\x05\x03\x02\x03\x02\
    \x12\x035$%\n\x0b\n\x04\x05\x03\x02\x04\x12\x036\x08-\n\x0c\n\x05\x05\
    \x03\x02\x04\x01\x12\x036\x08(\n\x0c\n\x05\x05\x03\x02\x04\x02\x12\x036+\
    ,\n\x0b\n\x04\x05\x03\x02\x05\x12\x037\x08-\n\x0c\n\x05\x05\x03\x02\x05\
    \x01\x12\x037\x08(\n\x0c\n\x05\x05\x03\x02\x05\x02\x12\x037+,\n\x0b\n\
    \x04\x05\x03\x02\x06\x12\x038\x082\n\x0c\n\x05\x05\x03\x02\x06\x01\x12\
    \x038\x08-\n\x0c\n\x05\x05\x03\x02\x06\x02\x12\x03801\n\x0b\n\x04\x05\
    \x03\x02\x07\x12\x039\x081\n\x0c\n\x05\x05\x03\x02\x07\x01\x12\x039\x08,\
    \n\x0c\n\x05\x05\x03\x02\x07\x02\x12\x039/0\n\x0b\n\x04\x05\x03\x02\x08\
    \x12\x03:\x08;\n\x0c\n\x05\x05\x03\x02\x08\x01\x12\x03:\x086\n\x0c\n\x05\
    \x05\x03\x02\x08\x02\x12\x03:9:\n\x0b\n\x04\x05\x03\x02\t\x12\x03;\x089\
    \n\x0c\n\x05\x05\x03\x02\t\x01\x12\x03;\x084\n\x0c\n\x05\x05\x03\x02\t\
    \x02\x12\x03;78\n\x0b\n\x04\x05\x03\x02\n\x12\x03<\x08,\n\x0c\n\x05\x05\
    \x03\x02\n\x01\x12\x03<\x08%\n\x0c\n\x05\x05\x03\x02\n\x02\x12\x03<(+\n\
    \x0b\n\x04\x05\x03\x02\x0b\x12\x03=\x080\n\x0c\n\x05\x05\x03\x02\x0b\x01\
    \x12\x03=\x08)\n\x0c\n\x05\x05\x03\x02\x0b\x02\x12\x03=,/\n\n\n\x02\x05\
    \x04\x12\x04@\0O\x01\n\n\n\x03\x05\x04\x01\x12\x03@\x05\x19\n\x0b\n\x04\
    \x05\x04\x02\0\x12\x03A\x08+\n\x0c\n\x05\x05\x04\x02\0\x01\x12\x03A\x08&\
    \n\x0c\n\x05\x05\x04\x02\0\x02\x12\x03A)*\n\x0b\n\x04\x05\x04\x02\x01\
    \x12\x03B\x08,\n\x0c\n\x05\x05\x04\x02\x01\x01\x12\x03B\x08'\n\x0c\n\x05\
    \x05\x04\x02\x01\x02\x12\x03B*+\n\x0b\n\x04\x05\x04\x02\x02\x12\x03C\x08\
    7\n\x0c\n\x05\x05\x04\x02\x02\x01\x12\x03C\x082\n\x0c\n\x05\x05\x04\x02\
    \x02\x02\x12\x03C56\n\x0b\n\x04\x05\x04\x02\x03\x12\x03D\x082\n\x0c\n\
    \x05\x05\x04\x02\x03\x01\x12\x03D\x08-\n\x0c\n\x05\x05\x04\x02\x03\x02\
    \x12\x03D01\n\x0b\n\x04\x05\x04\x02\x04\x12\x03E\x082\n\x0c\n\x05\x05\
    \x04\x02\x04\x01\x12\x03E\x08-\n\x0c\n\x05\x05\x04\x02\x04\x02\x12\x03E0\
    1\n\x0b\n\x04\x05\x04\x02\x05\x12\x03F\x08)\n\x0c\n\x05\x05\x04\x02\x05\
    \x01\x12\x03F\x08$\n\x0c\n\x05\x05\x04\x02\x05\x02\x12\x03F'(\n\x0b\n\
    \x04\x05\x04\x02\x06\x12\x03G\x08)\n\x0c\n\x05\x05\x04\x02\x06\x01\x12\
    \x03G\x08$\n\x0c\n\x05\x05\x04\x02\x06\x02\x12\x03G'(\n\x0b\n\x04\x05\
    \x04\x02\x07\x12\x03H\x082\n\x0c\n\x05\x05\x04\x02\x07\x01\x12\x03H\x08-\
    \n\x0c\n\x05\x05\x04\x02\x07\x02\x12\x03H01\n\x0b\n\x04\x05\x04\x02\x08\
    \x12\x03I\x082\n\x0c\n\x05\x05\x04\x02\x08\x01\x12\x03I\x08-\n\x0c\n\x05\
    \x05\x04\x02\x08\x02\x12\x03I01\n\x0b\n\x04\x05\x04\x02\t\x12\x03J\x08)\
    \n\x0c\n\x05\x05\x04\x02\t\x01\x12\x03J\x08$\n\x0c\n\x05\x05\x04\x02\t\
    \x02\x12\x03J'(\n\x0b\n\x04\x05\x04\x02\n\x12\x03K\x080\n\x0c\n\x05\x05\
    \x04\x02\n\x01\x12\x03K\x08*\n\x0c\n\x05\x05\x04\x02\n\x02\x12\x03K-/\n\
    \x0b\n\x04\x05\x04\x02\x0b\x12\x03L\x082\n\x0c\n\x05\x05\x04\x02\x0b\x01\
    \x12\x03L\x08,\n\x0c\n\x05\x05\x04\x02\x0b\x02\x12\x03L/1\n\x0b\n\x04\
    \x05\x04\x02\x0c\x12\x03M\x085\n\x0c\n\x05\x05\x04\x02\x0c\x01\x12\x03M\
    \x08/\n\x0c\n\x05\x05\x04\x02\x0c\x02\x12\x03M24\n\x0b\n\x04\x05\x04\x02\
    \r\x12\x03N\x084\n\x0c\n\x05\x05\x04\x02\r\x01\x12\x03N\x08.\n\x0c\n\x05\
    \x05\x04\x02\r\x02\x12\x03N13\n\n\n\x02\x05\x05\x12\x04Q\0\\\x01\n\n\n\
    \x03\x05\x05\x01\x12\x03Q\x05\x1a\n\x0b\n\x04\x05\x05\x02\0\x12\x03R\x08\
    '\n\x0c\n\x05\x05\x05\x02\0\x01\x12\x03R\x08\"\n\x0c\n\x05\x05\x05\x02\0\
    \x02\x12\x03R%&\n\x0b\n\x04\x05\x05\x02\x01\x12\x03S\x083\n\x0c\n\x05\
    \x05\x05\x02\x01\x01\x12\x03S\x08.\n\x0c\n\x05\x05\x05\x02\x01\x02\x12\
    \x03S12\n\x0b\n\x04\x05\x05\x02\x02\x12\x03T\x08/\n\x0c\n\x05\x05\x05\
    \x02\x02\x01\x12\x03T\x08*\n\x0c\n\x05\x05\x05\x02\x02\x02\x12\x03T-.\n\
    \x0b\n\x04\x05\x05\x02\x03\x12\x03U\x085\n\x0c\n\x05\x05\x05\x02\x03\x01\
    \x12\x03U\x080\n\x0c\n\x05\x05\x05\x02\x03\x02\x12\x03U34\n\x0b\n\x04\
    \x05\x05\x02\x04\x12\x03V\x085\n\x0c\n\x05\x05\x05\x02\x04\x01\x12\x03V\
    \x080\n\x0c\n\x05\x05\x05\x02\x04\x02\x12\x03V34\n\x0b\n\x04\x05\x05\x02\
    \x05\x12\x03W\x084\n\x0c\n\x05\x05\x05\x02\x05\x01\x12\x03W\x08/\n\x0c\n\
    \x05\x05\x05\x02\x05\x02\x12\x03W23\n\x0b\n\x04\x05\x05\x02\x06\x12\x03X\
    \x082\n\x0c\n\x05\x05\x05\x02\x06\x01\x12\x03X\x08-\n\x0c\n\x05\x05\x05\
    \x02\x06\x02\x12\x03X01\n\x0b\n\x04\x05\x05\x02\x07\x12\x03Y\x089\n\x0c\
    \n\x05\x05\x05\x02\x07\x01\x12\x03Y\x084\n\x0c\n\x05\x05\x05\x02\x07\x02\
    \x12\x03Y78\n\x0b\n\x04\x05\x05\x02\x08\x12\x03Z\x084\n\x0c\n\x05\x05\
    \x05\x02\x08\x01\x12\x03Z\x08/\n\x0c\n\x05\x05\x05\x02\x08\x02\x12\x03Z2\
    3\n\x0b\n\x04\x05\x05\x02\t\x12\x03[\x080\n\x0c\n\x05\x05\x05\x02\t\x01\
    \x12\x03[\x08+\n\x0c\n\x05\x05\x05\x02\t\x02\x12\x03[./\n\n\n\x02\x05\
    \x06\x12\x04^\0a\x01\n\n\n\x03\x05\x06\x01\x12\x03^\x05\x15\n\x0b\n\x04\
    \x05\x06\x02\0\x12\x03_\x08)\n\x0c\n\x05\x05\x06\x02\0\x01\x12\x03_\x08$\
    \n\x0c\n\x05\x05\x06\x02\0\x02\x12\x03_'(\n\x0b\n\x04\x05\x06\x02\x01\
    \x12\x03`\x08(\n\x0c\n\x05\x05\x06\x02\x01\x01\x12\x03`\x08#\n\x0c\n\x05\
    \x05\x06\x02\x01\x02\x12\x03`&'\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::dota_shared_enums::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(7);
            enums.push(ETournamentTemplate::generated_enum_descriptor_data());
            enums.push(ETournamentGameState::generated_enum_descriptor_data());
            enums.push(ETournamentTeamState::generated_enum_descriptor_data());
            enums.push(ETournamentState::generated_enum_descriptor_data());
            enums.push(ETournamentNodeState::generated_enum_descriptor_data());
            enums.push(EDOTAGroupMergeResult::generated_enum_descriptor_data());
            enums.push(EPartyBeaconType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
