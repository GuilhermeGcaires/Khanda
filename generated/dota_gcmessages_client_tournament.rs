// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_tournament.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:dota.CMsgRequestWeekendTourneySchedule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgRequestWeekendTourneySchedule {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgRequestWeekendTourneySchedule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgRequestWeekendTourneySchedule {
    fn default() -> &'a CMsgRequestWeekendTourneySchedule {
        <CMsgRequestWeekendTourneySchedule as ::protobuf::Message>::default_instance()
    }
}

impl CMsgRequestWeekendTourneySchedule {
    pub fn new() -> CMsgRequestWeekendTourneySchedule {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgRequestWeekendTourneySchedule>(
            "CMsgRequestWeekendTourneySchedule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgRequestWeekendTourneySchedule {
    const NAME: &'static str = "CMsgRequestWeekendTourneySchedule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgRequestWeekendTourneySchedule {
        CMsgRequestWeekendTourneySchedule::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgRequestWeekendTourneySchedule {
        static instance: CMsgRequestWeekendTourneySchedule = CMsgRequestWeekendTourneySchedule {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgRequestWeekendTourneySchedule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgRequestWeekendTourneySchedule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgRequestWeekendTourneySchedule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgRequestWeekendTourneySchedule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgWeekendTourneySchedule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWeekendTourneySchedule {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgWeekendTourneySchedule.divisions)
    pub divisions: ::std::vec::Vec<cmsg_weekend_tourney_schedule::Division>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgWeekendTourneySchedule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWeekendTourneySchedule {
    fn default() -> &'a CMsgWeekendTourneySchedule {
        <CMsgWeekendTourneySchedule as ::protobuf::Message>::default_instance()
    }
}

impl CMsgWeekendTourneySchedule {
    pub fn new() -> CMsgWeekendTourneySchedule {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "divisions",
            |m: &CMsgWeekendTourneySchedule| { &m.divisions },
            |m: &mut CMsgWeekendTourneySchedule| { &mut m.divisions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgWeekendTourneySchedule>(
            "CMsgWeekendTourneySchedule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgWeekendTourneySchedule {
    const NAME: &'static str = "CMsgWeekendTourneySchedule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.divisions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.divisions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.divisions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWeekendTourneySchedule {
        CMsgWeekendTourneySchedule::new()
    }

    fn clear(&mut self) {
        self.divisions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWeekendTourneySchedule {
        static instance: CMsgWeekendTourneySchedule = CMsgWeekendTourneySchedule {
            divisions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgWeekendTourneySchedule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgWeekendTourneySchedule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgWeekendTourneySchedule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgWeekendTourneySchedule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgWeekendTourneySchedule`
pub mod cmsg_weekend_tourney_schedule {
    // @@protoc_insertion_point(message:dota.CMsgWeekendTourneySchedule.Division)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Division {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgWeekendTourneySchedule.Division.division_code)
        pub division_code: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgWeekendTourneySchedule.Division.time_window_open)
        pub time_window_open: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgWeekendTourneySchedule.Division.time_window_close)
        pub time_window_close: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgWeekendTourneySchedule.Division.time_window_open_next)
        pub time_window_open_next: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgWeekendTourneySchedule.Division.trophy_id)
        pub trophy_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgWeekendTourneySchedule.Division.free_weekend)
        pub free_weekend: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgWeekendTourneySchedule.Division.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Division {
        fn default() -> &'a Division {
            <Division as ::protobuf::Message>::default_instance()
        }
    }

    impl Division {
        pub fn new() -> Division {
            ::std::default::Default::default()
        }

        // optional uint32 division_code = 1;

        pub fn division_code(&self) -> u32 {
            self.division_code.unwrap_or(0)
        }

        pub fn clear_division_code(&mut self) {
            self.division_code = ::std::option::Option::None;
        }

        pub fn has_division_code(&self) -> bool {
            self.division_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_division_code(&mut self, v: u32) {
            self.division_code = ::std::option::Option::Some(v);
        }

        // optional uint32 time_window_open = 2;

        pub fn time_window_open(&self) -> u32 {
            self.time_window_open.unwrap_or(0)
        }

        pub fn clear_time_window_open(&mut self) {
            self.time_window_open = ::std::option::Option::None;
        }

        pub fn has_time_window_open(&self) -> bool {
            self.time_window_open.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_window_open(&mut self, v: u32) {
            self.time_window_open = ::std::option::Option::Some(v);
        }

        // optional uint32 time_window_close = 3;

        pub fn time_window_close(&self) -> u32 {
            self.time_window_close.unwrap_or(0)
        }

        pub fn clear_time_window_close(&mut self) {
            self.time_window_close = ::std::option::Option::None;
        }

        pub fn has_time_window_close(&self) -> bool {
            self.time_window_close.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_window_close(&mut self, v: u32) {
            self.time_window_close = ::std::option::Option::Some(v);
        }

        // optional uint32 time_window_open_next = 4;

        pub fn time_window_open_next(&self) -> u32 {
            self.time_window_open_next.unwrap_or(0)
        }

        pub fn clear_time_window_open_next(&mut self) {
            self.time_window_open_next = ::std::option::Option::None;
        }

        pub fn has_time_window_open_next(&self) -> bool {
            self.time_window_open_next.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_window_open_next(&mut self, v: u32) {
            self.time_window_open_next = ::std::option::Option::Some(v);
        }

        // optional uint32 trophy_id = 5;

        pub fn trophy_id(&self) -> u32 {
            self.trophy_id.unwrap_or(0)
        }

        pub fn clear_trophy_id(&mut self) {
            self.trophy_id = ::std::option::Option::None;
        }

        pub fn has_trophy_id(&self) -> bool {
            self.trophy_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_trophy_id(&mut self, v: u32) {
            self.trophy_id = ::std::option::Option::Some(v);
        }

        // optional bool free_weekend = 6;

        pub fn free_weekend(&self) -> bool {
            self.free_weekend.unwrap_or(false)
        }

        pub fn clear_free_weekend(&mut self) {
            self.free_weekend = ::std::option::Option::None;
        }

        pub fn has_free_weekend(&self) -> bool {
            self.free_weekend.is_some()
        }

        // Param is passed by value, moved
        pub fn set_free_weekend(&mut self, v: bool) {
            self.free_weekend = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "division_code",
                |m: &Division| { &m.division_code },
                |m: &mut Division| { &mut m.division_code },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_window_open",
                |m: &Division| { &m.time_window_open },
                |m: &mut Division| { &mut m.time_window_open },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_window_close",
                |m: &Division| { &m.time_window_close },
                |m: &mut Division| { &mut m.time_window_close },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_window_open_next",
                |m: &Division| { &m.time_window_open_next },
                |m: &mut Division| { &mut m.time_window_open_next },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "trophy_id",
                |m: &Division| { &m.trophy_id },
                |m: &mut Division| { &mut m.trophy_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "free_weekend",
                |m: &Division| { &m.free_weekend },
                |m: &mut Division| { &mut m.free_weekend },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Division>(
                "CMsgWeekendTourneySchedule.Division",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Division {
        const NAME: &'static str = "Division";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.division_code = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.time_window_open = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.time_window_close = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.time_window_open_next = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.trophy_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.free_weekend = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.division_code {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.time_window_open {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.time_window_close {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.time_window_open_next {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.trophy_id {
                my_size += ::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.free_weekend {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.division_code {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.time_window_open {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.time_window_close {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.time_window_open_next {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.trophy_id {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.free_weekend {
                os.write_bool(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Division {
            Division::new()
        }

        fn clear(&mut self) {
            self.division_code = ::std::option::Option::None;
            self.time_window_open = ::std::option::Option::None;
            self.time_window_close = ::std::option::Option::None;
            self.time_window_open_next = ::std::option::Option::None;
            self.trophy_id = ::std::option::Option::None;
            self.free_weekend = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Division {
            static instance: Division = Division {
                division_code: ::std::option::Option::None,
                time_window_open: ::std::option::Option::None,
                time_window_close: ::std::option::Option::None,
                time_window_open_next: ::std::option::Option::None,
                trophy_id: ::std::option::Option::None,
                free_weekend: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Division {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgWeekendTourneySchedule.Division").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Division {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Division {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgWeekendTourneyOpts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWeekendTourneyOpts {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgWeekendTourneyOpts.participating)
    pub participating: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:dota.CMsgWeekendTourneyOpts.division_id)
    pub division_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWeekendTourneyOpts.buyin)
    pub buyin: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWeekendTourneyOpts.skill_level)
    pub skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWeekendTourneyOpts.match_groups)
    pub match_groups: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWeekendTourneyOpts.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgWeekendTourneyOpts.pickup_team_name)
    pub pickup_team_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dota.CMsgWeekendTourneyOpts.pickup_team_logo)
    pub pickup_team_logo: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgWeekendTourneyOpts.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWeekendTourneyOpts {
    fn default() -> &'a CMsgWeekendTourneyOpts {
        <CMsgWeekendTourneyOpts as ::protobuf::Message>::default_instance()
    }
}

impl CMsgWeekendTourneyOpts {
    pub fn new() -> CMsgWeekendTourneyOpts {
        ::std::default::Default::default()
    }

    // optional bool participating = 1;

    pub fn participating(&self) -> bool {
        self.participating.unwrap_or(false)
    }

    pub fn clear_participating(&mut self) {
        self.participating = ::std::option::Option::None;
    }

    pub fn has_participating(&self) -> bool {
        self.participating.is_some()
    }

    // Param is passed by value, moved
    pub fn set_participating(&mut self, v: bool) {
        self.participating = ::std::option::Option::Some(v);
    }

    // optional uint32 division_id = 2;

    pub fn division_id(&self) -> u32 {
        self.division_id.unwrap_or(0)
    }

    pub fn clear_division_id(&mut self) {
        self.division_id = ::std::option::Option::None;
    }

    pub fn has_division_id(&self) -> bool {
        self.division_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_division_id(&mut self, v: u32) {
        self.division_id = ::std::option::Option::Some(v);
    }

    // optional uint32 buyin = 3;

    pub fn buyin(&self) -> u32 {
        self.buyin.unwrap_or(0)
    }

    pub fn clear_buyin(&mut self) {
        self.buyin = ::std::option::Option::None;
    }

    pub fn has_buyin(&self) -> bool {
        self.buyin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_buyin(&mut self, v: u32) {
        self.buyin = ::std::option::Option::Some(v);
    }

    // optional uint32 skill_level = 4;

    pub fn skill_level(&self) -> u32 {
        self.skill_level.unwrap_or(0)
    }

    pub fn clear_skill_level(&mut self) {
        self.skill_level = ::std::option::Option::None;
    }

    pub fn has_skill_level(&self) -> bool {
        self.skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_skill_level(&mut self, v: u32) {
        self.skill_level = ::std::option::Option::Some(v);
    }

    // optional uint32 match_groups = 5;

    pub fn match_groups(&self) -> u32 {
        self.match_groups.unwrap_or(0)
    }

    pub fn clear_match_groups(&mut self) {
        self.match_groups = ::std::option::Option::None;
    }

    pub fn has_match_groups(&self) -> bool {
        self.match_groups.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_groups(&mut self, v: u32) {
        self.match_groups = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id = 6;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional string pickup_team_name = 7;

    pub fn pickup_team_name(&self) -> &str {
        match self.pickup_team_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_pickup_team_name(&mut self) {
        self.pickup_team_name = ::std::option::Option::None;
    }

    pub fn has_pickup_team_name(&self) -> bool {
        self.pickup_team_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pickup_team_name(&mut self, v: ::std::string::String) {
        self.pickup_team_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pickup_team_name(&mut self) -> &mut ::std::string::String {
        if self.pickup_team_name.is_none() {
            self.pickup_team_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.pickup_team_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_pickup_team_name(&mut self) -> ::std::string::String {
        self.pickup_team_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 pickup_team_logo = 8;

    pub fn pickup_team_logo(&self) -> u64 {
        self.pickup_team_logo.unwrap_or(0)
    }

    pub fn clear_pickup_team_logo(&mut self) {
        self.pickup_team_logo = ::std::option::Option::None;
    }

    pub fn has_pickup_team_logo(&self) -> bool {
        self.pickup_team_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pickup_team_logo(&mut self, v: u64) {
        self.pickup_team_logo = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "participating",
            |m: &CMsgWeekendTourneyOpts| { &m.participating },
            |m: &mut CMsgWeekendTourneyOpts| { &mut m.participating },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "division_id",
            |m: &CMsgWeekendTourneyOpts| { &m.division_id },
            |m: &mut CMsgWeekendTourneyOpts| { &mut m.division_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "buyin",
            |m: &CMsgWeekendTourneyOpts| { &m.buyin },
            |m: &mut CMsgWeekendTourneyOpts| { &mut m.buyin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "skill_level",
            |m: &CMsgWeekendTourneyOpts| { &m.skill_level },
            |m: &mut CMsgWeekendTourneyOpts| { &mut m.skill_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "match_groups",
            |m: &CMsgWeekendTourneyOpts| { &m.match_groups },
            |m: &mut CMsgWeekendTourneyOpts| { &mut m.match_groups },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_id",
            |m: &CMsgWeekendTourneyOpts| { &m.team_id },
            |m: &mut CMsgWeekendTourneyOpts| { &mut m.team_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pickup_team_name",
            |m: &CMsgWeekendTourneyOpts| { &m.pickup_team_name },
            |m: &mut CMsgWeekendTourneyOpts| { &mut m.pickup_team_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pickup_team_logo",
            |m: &CMsgWeekendTourneyOpts| { &m.pickup_team_logo },
            |m: &mut CMsgWeekendTourneyOpts| { &mut m.pickup_team_logo },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgWeekendTourneyOpts>(
            "CMsgWeekendTourneyOpts",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgWeekendTourneyOpts {
    const NAME: &'static str = "CMsgWeekendTourneyOpts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.participating = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.division_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.buyin = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.match_groups = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.pickup_team_name = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.pickup_team_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.participating {
            my_size += 1 + 1;
        }
        if let Some(v) = self.division_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.buyin {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.skill_level {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.match_groups {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.team_id {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.pickup_team_name.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.pickup_team_logo {
            my_size += ::protobuf::rt::uint64_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.participating {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.division_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.buyin {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.skill_level {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.match_groups {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.pickup_team_name.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.pickup_team_logo {
            os.write_uint64(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWeekendTourneyOpts {
        CMsgWeekendTourneyOpts::new()
    }

    fn clear(&mut self) {
        self.participating = ::std::option::Option::None;
        self.division_id = ::std::option::Option::None;
        self.buyin = ::std::option::Option::None;
        self.skill_level = ::std::option::Option::None;
        self.match_groups = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.pickup_team_name = ::std::option::Option::None;
        self.pickup_team_logo = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWeekendTourneyOpts {
        static instance: CMsgWeekendTourneyOpts = CMsgWeekendTourneyOpts {
            participating: ::std::option::Option::None,
            division_id: ::std::option::Option::None,
            buyin: ::std::option::Option::None,
            skill_level: ::std::option::Option::None,
            match_groups: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            pickup_team_name: ::std::option::Option::None,
            pickup_team_logo: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgWeekendTourneyOpts {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgWeekendTourneyOpts").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgWeekendTourneyOpts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgWeekendTourneyOpts {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgWeekendTourneyLeave)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWeekendTourneyLeave {
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgWeekendTourneyLeave.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWeekendTourneyLeave {
    fn default() -> &'a CMsgWeekendTourneyLeave {
        <CMsgWeekendTourneyLeave as ::protobuf::Message>::default_instance()
    }
}

impl CMsgWeekendTourneyLeave {
    pub fn new() -> CMsgWeekendTourneyLeave {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgWeekendTourneyLeave>(
            "CMsgWeekendTourneyLeave",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgWeekendTourneyLeave {
    const NAME: &'static str = "CMsgWeekendTourneyLeave";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWeekendTourneyLeave {
        CMsgWeekendTourneyLeave::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWeekendTourneyLeave {
        static instance: CMsgWeekendTourneyLeave = CMsgWeekendTourneyLeave {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgWeekendTourneyLeave {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgWeekendTourneyLeave").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgWeekendTourneyLeave {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgWeekendTourneyLeave {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTATournament)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATournament {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.tournament_id)
    pub tournament_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.division_id)
    pub division_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.schedule_time)
    pub schedule_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.skill_level)
    pub skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.tournament_template)
    pub tournament_template: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_client_enums::ETournamentTemplate>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.state)
    pub state: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_client_enums::ETournamentState>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.state_seq_num)
    pub state_seq_num: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.season_trophy_id)
    pub season_trophy_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.teams)
    pub teams: ::std::vec::Vec<cmsg_dotatournament::Team>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.games)
    pub games: ::std::vec::Vec<cmsg_dotatournament::Game>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournament.nodes)
    pub nodes: ::std::vec::Vec<cmsg_dotatournament::Node>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATournament.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATournament {
    fn default() -> &'a CMsgDOTATournament {
        <CMsgDOTATournament as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATournament {
    pub fn new() -> CMsgDOTATournament {
        ::std::default::Default::default()
    }

    // optional uint32 tournament_id = 1;

    pub fn tournament_id(&self) -> u32 {
        self.tournament_id.unwrap_or(0)
    }

    pub fn clear_tournament_id(&mut self) {
        self.tournament_id = ::std::option::Option::None;
    }

    pub fn has_tournament_id(&self) -> bool {
        self.tournament_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tournament_id(&mut self, v: u32) {
        self.tournament_id = ::std::option::Option::Some(v);
    }

    // optional uint32 division_id = 2;

    pub fn division_id(&self) -> u32 {
        self.division_id.unwrap_or(0)
    }

    pub fn clear_division_id(&mut self) {
        self.division_id = ::std::option::Option::None;
    }

    pub fn has_division_id(&self) -> bool {
        self.division_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_division_id(&mut self, v: u32) {
        self.division_id = ::std::option::Option::Some(v);
    }

    // optional uint32 schedule_time = 3;

    pub fn schedule_time(&self) -> u32 {
        self.schedule_time.unwrap_or(0)
    }

    pub fn clear_schedule_time(&mut self) {
        self.schedule_time = ::std::option::Option::None;
    }

    pub fn has_schedule_time(&self) -> bool {
        self.schedule_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule_time(&mut self, v: u32) {
        self.schedule_time = ::std::option::Option::Some(v);
    }

    // optional uint32 skill_level = 4;

    pub fn skill_level(&self) -> u32 {
        self.skill_level.unwrap_or(0)
    }

    pub fn clear_skill_level(&mut self) {
        self.skill_level = ::std::option::Option::None;
    }

    pub fn has_skill_level(&self) -> bool {
        self.skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_skill_level(&mut self, v: u32) {
        self.skill_level = ::std::option::Option::Some(v);
    }

    // optional .dota.ETournamentTemplate tournament_template = 5;

    pub fn tournament_template(&self) -> super::dota_client_enums::ETournamentTemplate {
        match self.tournament_template {
            Some(e) => e.enum_value_or(super::dota_client_enums::ETournamentTemplate::k_ETournamentTemplate_None),
            None => super::dota_client_enums::ETournamentTemplate::k_ETournamentTemplate_None,
        }
    }

    pub fn clear_tournament_template(&mut self) {
        self.tournament_template = ::std::option::Option::None;
    }

    pub fn has_tournament_template(&self) -> bool {
        self.tournament_template.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tournament_template(&mut self, v: super::dota_client_enums::ETournamentTemplate) {
        self.tournament_template = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional .dota.ETournamentState state = 6;

    pub fn state(&self) -> super::dota_client_enums::ETournamentState {
        match self.state {
            Some(e) => e.enum_value_or(super::dota_client_enums::ETournamentState::k_ETournamentState_Unknown),
            None => super::dota_client_enums::ETournamentState::k_ETournamentState_Unknown,
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::dota_client_enums::ETournamentState) {
        self.state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 state_seq_num = 10;

    pub fn state_seq_num(&self) -> u32 {
        self.state_seq_num.unwrap_or(0)
    }

    pub fn clear_state_seq_num(&mut self) {
        self.state_seq_num = ::std::option::Option::None;
    }

    pub fn has_state_seq_num(&self) -> bool {
        self.state_seq_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state_seq_num(&mut self, v: u32) {
        self.state_seq_num = ::std::option::Option::Some(v);
    }

    // optional uint32 season_trophy_id = 11;

    pub fn season_trophy_id(&self) -> u32 {
        self.season_trophy_id.unwrap_or(0)
    }

    pub fn clear_season_trophy_id(&mut self) {
        self.season_trophy_id = ::std::option::Option::None;
    }

    pub fn has_season_trophy_id(&self) -> bool {
        self.season_trophy_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_season_trophy_id(&mut self, v: u32) {
        self.season_trophy_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tournament_id",
            |m: &CMsgDOTATournament| { &m.tournament_id },
            |m: &mut CMsgDOTATournament| { &mut m.tournament_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "division_id",
            |m: &CMsgDOTATournament| { &m.division_id },
            |m: &mut CMsgDOTATournament| { &mut m.division_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "schedule_time",
            |m: &CMsgDOTATournament| { &m.schedule_time },
            |m: &mut CMsgDOTATournament| { &mut m.schedule_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "skill_level",
            |m: &CMsgDOTATournament| { &m.skill_level },
            |m: &mut CMsgDOTATournament| { &mut m.skill_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tournament_template",
            |m: &CMsgDOTATournament| { &m.tournament_template },
            |m: &mut CMsgDOTATournament| { &mut m.tournament_template },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CMsgDOTATournament| { &m.state },
            |m: &mut CMsgDOTATournament| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state_seq_num",
            |m: &CMsgDOTATournament| { &m.state_seq_num },
            |m: &mut CMsgDOTATournament| { &mut m.state_seq_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "season_trophy_id",
            |m: &CMsgDOTATournament| { &m.season_trophy_id },
            |m: &mut CMsgDOTATournament| { &mut m.season_trophy_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "teams",
            |m: &CMsgDOTATournament| { &m.teams },
            |m: &mut CMsgDOTATournament| { &mut m.teams },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "games",
            |m: &CMsgDOTATournament| { &m.games },
            |m: &mut CMsgDOTATournament| { &mut m.games },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "nodes",
            |m: &CMsgDOTATournament| { &m.nodes },
            |m: &mut CMsgDOTATournament| { &mut m.nodes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATournament>(
            "CMsgDOTATournament",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATournament {
    const NAME: &'static str = "CMsgDOTATournament";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.division_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.schedule_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.tournament_template = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                48 => {
                    self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                80 => {
                    self.state_seq_num = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.season_trophy_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.teams.push(is.read_message()?);
                },
                66 => {
                    self.games.push(is.read_message()?);
                },
                74 => {
                    self.nodes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tournament_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.division_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.schedule_time {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.skill_level {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.tournament_template {
            my_size += ::protobuf::rt::int32_size(5, v.value());
        }
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::int32_size(6, v.value());
        }
        if let Some(v) = self.state_seq_num {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.season_trophy_id {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.games {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tournament_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.division_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.schedule_time {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.skill_level {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.tournament_template {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.state {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.state_seq_num {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.season_trophy_id {
            os.write_uint32(11, v)?;
        }
        for v in &self.teams {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.games {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.nodes {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATournament {
        CMsgDOTATournament::new()
    }

    fn clear(&mut self) {
        self.tournament_id = ::std::option::Option::None;
        self.division_id = ::std::option::Option::None;
        self.schedule_time = ::std::option::Option::None;
        self.skill_level = ::std::option::Option::None;
        self.tournament_template = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.state_seq_num = ::std::option::Option::None;
        self.season_trophy_id = ::std::option::Option::None;
        self.teams.clear();
        self.games.clear();
        self.nodes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATournament {
        static instance: CMsgDOTATournament = CMsgDOTATournament {
            tournament_id: ::std::option::Option::None,
            division_id: ::std::option::Option::None,
            schedule_time: ::std::option::Option::None,
            skill_level: ::std::option::Option::None,
            tournament_template: ::std::option::Option::None,
            state: ::std::option::Option::None,
            state_seq_num: ::std::option::Option::None,
            season_trophy_id: ::std::option::Option::None,
            teams: ::std::vec::Vec::new(),
            games: ::std::vec::Vec::new(),
            nodes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATournament {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATournament").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATournament {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATournament {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTATournament`
pub mod cmsg_dotatournament {
    // @@protoc_insertion_point(message:dota.CMsgDOTATournament.Team)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Team {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Team.team_gid)
        pub team_gid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Team.node_or_state)
        pub node_or_state: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Team.players)
        pub players: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Team.player_buyin)
        pub player_buyin: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Team.player_skill_level)
        pub player_skill_level: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Team.match_group_mask)
        pub match_group_mask: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Team.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Team.team_name)
        pub team_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Team.team_base_logo)
        pub team_base_logo: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Team.team_ui_logo)
        pub team_ui_logo: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATournament.Team.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Team {
        fn default() -> &'a Team {
            <Team as ::protobuf::Message>::default_instance()
        }
    }

    impl Team {
        pub fn new() -> Team {
            ::std::default::Default::default()
        }

        // optional fixed64 team_gid = 1;

        pub fn team_gid(&self) -> u64 {
            self.team_gid.unwrap_or(0)
        }

        pub fn clear_team_gid(&mut self) {
            self.team_gid = ::std::option::Option::None;
        }

        pub fn has_team_gid(&self) -> bool {
            self.team_gid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_gid(&mut self, v: u64) {
            self.team_gid = ::std::option::Option::Some(v);
        }

        // optional uint32 node_or_state = 2;

        pub fn node_or_state(&self) -> u32 {
            self.node_or_state.unwrap_or(0)
        }

        pub fn clear_node_or_state(&mut self) {
            self.node_or_state = ::std::option::Option::None;
        }

        pub fn has_node_or_state(&self) -> bool {
            self.node_or_state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_node_or_state(&mut self, v: u32) {
            self.node_or_state = ::std::option::Option::Some(v);
        }

        // optional uint32 match_group_mask = 12;

        pub fn match_group_mask(&self) -> u32 {
            self.match_group_mask.unwrap_or(0)
        }

        pub fn clear_match_group_mask(&mut self) {
            self.match_group_mask = ::std::option::Option::None;
        }

        pub fn has_match_group_mask(&self) -> bool {
            self.match_group_mask.is_some()
        }

        // Param is passed by value, moved
        pub fn set_match_group_mask(&mut self, v: u32) {
            self.match_group_mask = ::std::option::Option::Some(v);
        }

        // optional uint32 team_id = 4;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional string team_name = 5;

        pub fn team_name(&self) -> &str {
            match self.team_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_name(&mut self) {
            self.team_name = ::std::option::Option::None;
        }

        pub fn has_team_name(&self) -> bool {
            self.team_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_name(&mut self, v: ::std::string::String) {
            self.team_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
            if self.team_name.is_none() {
                self.team_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_name(&mut self) -> ::std::string::String {
            self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint64 team_base_logo = 7;

        pub fn team_base_logo(&self) -> u64 {
            self.team_base_logo.unwrap_or(0)
        }

        pub fn clear_team_base_logo(&mut self) {
            self.team_base_logo = ::std::option::Option::None;
        }

        pub fn has_team_base_logo(&self) -> bool {
            self.team_base_logo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_base_logo(&mut self, v: u64) {
            self.team_base_logo = ::std::option::Option::Some(v);
        }

        // optional uint64 team_ui_logo = 8;

        pub fn team_ui_logo(&self) -> u64 {
            self.team_ui_logo.unwrap_or(0)
        }

        pub fn clear_team_ui_logo(&mut self) {
            self.team_ui_logo = ::std::option::Option::None;
        }

        pub fn has_team_ui_logo(&self) -> bool {
            self.team_ui_logo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_ui_logo(&mut self, v: u64) {
            self.team_ui_logo = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(10);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_gid",
                |m: &Team| { &m.team_gid },
                |m: &mut Team| { &mut m.team_gid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "node_or_state",
                |m: &Team| { &m.node_or_state },
                |m: &mut Team| { &mut m.node_or_state },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "players",
                |m: &Team| { &m.players },
                |m: &mut Team| { &mut m.players },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "player_buyin",
                |m: &Team| { &m.player_buyin },
                |m: &mut Team| { &mut m.player_buyin },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "player_skill_level",
                |m: &Team| { &m.player_skill_level },
                |m: &mut Team| { &mut m.player_skill_level },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "match_group_mask",
                |m: &Team| { &m.match_group_mask },
                |m: &mut Team| { &mut m.match_group_mask },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_id",
                |m: &Team| { &m.team_id },
                |m: &mut Team| { &mut m.team_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_name",
                |m: &Team| { &m.team_name },
                |m: &mut Team| { &mut m.team_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_base_logo",
                |m: &Team| { &m.team_base_logo },
                |m: &mut Team| { &mut m.team_base_logo },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_ui_logo",
                |m: &Team| { &m.team_ui_logo },
                |m: &mut Team| { &mut m.team_ui_logo },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Team>(
                "CMsgDOTATournament.Team",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Team {
        const NAME: &'static str = "Team";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.team_gid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    16 => {
                        self.node_or_state = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        is.read_repeated_packed_uint32_into(&mut self.players)?;
                    },
                    24 => {
                        self.players.push(is.read_uint32()?);
                    },
                    74 => {
                        is.read_repeated_packed_uint32_into(&mut self.player_buyin)?;
                    },
                    72 => {
                        self.player_buyin.push(is.read_uint32()?);
                    },
                    82 => {
                        is.read_repeated_packed_uint32_into(&mut self.player_skill_level)?;
                    },
                    80 => {
                        self.player_skill_level.push(is.read_uint32()?);
                    },
                    96 => {
                        self.match_group_mask = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    42 => {
                        self.team_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    56 => {
                        self.team_base_logo = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    64 => {
                        self.team_ui_logo = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.team_gid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.node_or_state {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            for value in &self.players {
                my_size += ::protobuf::rt::uint32_size(3, *value);
            };
            for value in &self.player_buyin {
                my_size += ::protobuf::rt::uint32_size(9, *value);
            };
            for value in &self.player_skill_level {
                my_size += ::protobuf::rt::uint32_size(10, *value);
            };
            if let Some(v) = self.match_group_mask {
                my_size += ::protobuf::rt::uint32_size(12, v);
            }
            if let Some(v) = self.team_id {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.team_name.as_ref() {
                my_size += ::protobuf::rt::string_size(5, &v);
            }
            if let Some(v) = self.team_base_logo {
                my_size += ::protobuf::rt::uint64_size(7, v);
            }
            if let Some(v) = self.team_ui_logo {
                my_size += ::protobuf::rt::uint64_size(8, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.team_gid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.node_or_state {
                os.write_uint32(2, v)?;
            }
            for v in &self.players {
                os.write_uint32(3, *v)?;
            };
            for v in &self.player_buyin {
                os.write_uint32(9, *v)?;
            };
            for v in &self.player_skill_level {
                os.write_uint32(10, *v)?;
            };
            if let Some(v) = self.match_group_mask {
                os.write_uint32(12, v)?;
            }
            if let Some(v) = self.team_id {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.team_name.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.team_base_logo {
                os.write_uint64(7, v)?;
            }
            if let Some(v) = self.team_ui_logo {
                os.write_uint64(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Team {
            Team::new()
        }

        fn clear(&mut self) {
            self.team_gid = ::std::option::Option::None;
            self.node_or_state = ::std::option::Option::None;
            self.players.clear();
            self.player_buyin.clear();
            self.player_skill_level.clear();
            self.match_group_mask = ::std::option::Option::None;
            self.team_id = ::std::option::Option::None;
            self.team_name = ::std::option::Option::None;
            self.team_base_logo = ::std::option::Option::None;
            self.team_ui_logo = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Team {
            static instance: Team = Team {
                team_gid: ::std::option::Option::None,
                node_or_state: ::std::option::Option::None,
                players: ::std::vec::Vec::new(),
                player_buyin: ::std::vec::Vec::new(),
                player_skill_level: ::std::vec::Vec::new(),
                match_group_mask: ::std::option::Option::None,
                team_id: ::std::option::Option::None,
                team_name: ::std::option::Option::None,
                team_base_logo: ::std::option::Option::None,
                team_ui_logo: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Team {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATournament.Team").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Team {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Team {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTATournament.Game)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Game {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Game.node_idx)
        pub node_idx: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Game.lobby_id)
        pub lobby_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Game.match_id)
        pub match_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Game.team_a_good)
        pub team_a_good: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Game.state)
        pub state: ::std::option::Option<::protobuf::EnumOrUnknown<super::super::dota_client_enums::ETournamentGameState>>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Game.start_time)
        pub start_time: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATournament.Game.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Game {
        fn default() -> &'a Game {
            <Game as ::protobuf::Message>::default_instance()
        }
    }

    impl Game {
        pub fn new() -> Game {
            ::std::default::Default::default()
        }

        // optional uint32 node_idx = 1;

        pub fn node_idx(&self) -> u32 {
            self.node_idx.unwrap_or(0)
        }

        pub fn clear_node_idx(&mut self) {
            self.node_idx = ::std::option::Option::None;
        }

        pub fn has_node_idx(&self) -> bool {
            self.node_idx.is_some()
        }

        // Param is passed by value, moved
        pub fn set_node_idx(&mut self, v: u32) {
            self.node_idx = ::std::option::Option::Some(v);
        }

        // optional fixed64 lobby_id = 2;

        pub fn lobby_id(&self) -> u64 {
            self.lobby_id.unwrap_or(0)
        }

        pub fn clear_lobby_id(&mut self) {
            self.lobby_id = ::std::option::Option::None;
        }

        pub fn has_lobby_id(&self) -> bool {
            self.lobby_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_lobby_id(&mut self, v: u64) {
            self.lobby_id = ::std::option::Option::Some(v);
        }

        // optional uint64 match_id = 3;

        pub fn match_id(&self) -> u64 {
            self.match_id.unwrap_or(0)
        }

        pub fn clear_match_id(&mut self) {
            self.match_id = ::std::option::Option::None;
        }

        pub fn has_match_id(&self) -> bool {
            self.match_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_match_id(&mut self, v: u64) {
            self.match_id = ::std::option::Option::Some(v);
        }

        // optional bool team_a_good = 4;

        pub fn team_a_good(&self) -> bool {
            self.team_a_good.unwrap_or(false)
        }

        pub fn clear_team_a_good(&mut self) {
            self.team_a_good = ::std::option::Option::None;
        }

        pub fn has_team_a_good(&self) -> bool {
            self.team_a_good.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_a_good(&mut self, v: bool) {
            self.team_a_good = ::std::option::Option::Some(v);
        }

        // optional .dota.ETournamentGameState state = 5;

        pub fn state(&self) -> super::super::dota_client_enums::ETournamentGameState {
            match self.state {
                Some(e) => e.enum_value_or(super::super::dota_client_enums::ETournamentGameState::k_ETournamentGameState_Unknown),
                None => super::super::dota_client_enums::ETournamentGameState::k_ETournamentGameState_Unknown,
            }
        }

        pub fn clear_state(&mut self) {
            self.state = ::std::option::Option::None;
        }

        pub fn has_state(&self) -> bool {
            self.state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_state(&mut self, v: super::super::dota_client_enums::ETournamentGameState) {
            self.state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        // optional uint32 start_time = 6;

        pub fn start_time(&self) -> u32 {
            self.start_time.unwrap_or(0)
        }

        pub fn clear_start_time(&mut self) {
            self.start_time = ::std::option::Option::None;
        }

        pub fn has_start_time(&self) -> bool {
            self.start_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_start_time(&mut self, v: u32) {
            self.start_time = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "node_idx",
                |m: &Game| { &m.node_idx },
                |m: &mut Game| { &mut m.node_idx },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "lobby_id",
                |m: &Game| { &m.lobby_id },
                |m: &mut Game| { &mut m.lobby_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "match_id",
                |m: &Game| { &m.match_id },
                |m: &mut Game| { &mut m.match_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_a_good",
                |m: &Game| { &m.team_a_good },
                |m: &mut Game| { &mut m.team_a_good },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "state",
                |m: &Game| { &m.state },
                |m: &mut Game| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "start_time",
                |m: &Game| { &m.start_time },
                |m: &mut Game| { &mut m.start_time },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Game>(
                "CMsgDOTATournament.Game",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Game {
        const NAME: &'static str = "Game";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.node_idx = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    17 => {
                        self.lobby_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    24 => {
                        self.match_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    32 => {
                        self.team_a_good = ::std::option::Option::Some(is.read_bool()?);
                    },
                    40 => {
                        self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    48 => {
                        self.start_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.node_idx {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.lobby_id {
                my_size += 1 + 8;
            }
            if let Some(v) = self.match_id {
                my_size += ::protobuf::rt::uint64_size(3, v);
            }
            if let Some(v) = self.team_a_good {
                my_size += 1 + 1;
            }
            if let Some(v) = self.state {
                my_size += ::protobuf::rt::int32_size(5, v.value());
            }
            if let Some(v) = self.start_time {
                my_size += ::protobuf::rt::uint32_size(6, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.node_idx {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.lobby_id {
                os.write_fixed64(2, v)?;
            }
            if let Some(v) = self.match_id {
                os.write_uint64(3, v)?;
            }
            if let Some(v) = self.team_a_good {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.state {
                os.write_enum(5, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.start_time {
                os.write_uint32(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Game {
            Game::new()
        }

        fn clear(&mut self) {
            self.node_idx = ::std::option::Option::None;
            self.lobby_id = ::std::option::Option::None;
            self.match_id = ::std::option::Option::None;
            self.team_a_good = ::std::option::Option::None;
            self.state = ::std::option::Option::None;
            self.start_time = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Game {
            static instance: Game = Game {
                node_idx: ::std::option::Option::None,
                lobby_id: ::std::option::Option::None,
                match_id: ::std::option::Option::None,
                team_a_good: ::std::option::Option::None,
                state: ::std::option::Option::None,
                start_time: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Game {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATournament.Game").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Game {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Game {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTATournament.Node)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Node {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Node.node_id)
        pub node_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Node.team_idx_a)
        pub team_idx_a: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Node.team_idx_b)
        pub team_idx_b: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournament.Node.node_state)
        pub node_state: ::std::option::Option<::protobuf::EnumOrUnknown<super::super::dota_client_enums::ETournamentNodeState>>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATournament.Node.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Node {
        fn default() -> &'a Node {
            <Node as ::protobuf::Message>::default_instance()
        }
    }

    impl Node {
        pub fn new() -> Node {
            ::std::default::Default::default()
        }

        // optional uint32 node_id = 1;

        pub fn node_id(&self) -> u32 {
            self.node_id.unwrap_or(0)
        }

        pub fn clear_node_id(&mut self) {
            self.node_id = ::std::option::Option::None;
        }

        pub fn has_node_id(&self) -> bool {
            self.node_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_node_id(&mut self, v: u32) {
            self.node_id = ::std::option::Option::Some(v);
        }

        // optional uint32 team_idx_a = 2;

        pub fn team_idx_a(&self) -> u32 {
            self.team_idx_a.unwrap_or(0)
        }

        pub fn clear_team_idx_a(&mut self) {
            self.team_idx_a = ::std::option::Option::None;
        }

        pub fn has_team_idx_a(&self) -> bool {
            self.team_idx_a.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_idx_a(&mut self, v: u32) {
            self.team_idx_a = ::std::option::Option::Some(v);
        }

        // optional uint32 team_idx_b = 3;

        pub fn team_idx_b(&self) -> u32 {
            self.team_idx_b.unwrap_or(0)
        }

        pub fn clear_team_idx_b(&mut self) {
            self.team_idx_b = ::std::option::Option::None;
        }

        pub fn has_team_idx_b(&self) -> bool {
            self.team_idx_b.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_idx_b(&mut self, v: u32) {
            self.team_idx_b = ::std::option::Option::Some(v);
        }

        // optional .dota.ETournamentNodeState node_state = 4;

        pub fn node_state(&self) -> super::super::dota_client_enums::ETournamentNodeState {
            match self.node_state {
                Some(e) => e.enum_value_or(super::super::dota_client_enums::ETournamentNodeState::k_ETournamentNodeState_Unknown),
                None => super::super::dota_client_enums::ETournamentNodeState::k_ETournamentNodeState_Unknown,
            }
        }

        pub fn clear_node_state(&mut self) {
            self.node_state = ::std::option::Option::None;
        }

        pub fn has_node_state(&self) -> bool {
            self.node_state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_node_state(&mut self, v: super::super::dota_client_enums::ETournamentNodeState) {
            self.node_state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "node_id",
                |m: &Node| { &m.node_id },
                |m: &mut Node| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_idx_a",
                |m: &Node| { &m.team_idx_a },
                |m: &mut Node| { &mut m.team_idx_a },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_idx_b",
                |m: &Node| { &m.team_idx_b },
                |m: &mut Node| { &mut m.team_idx_b },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "node_state",
                |m: &Node| { &m.node_state },
                |m: &mut Node| { &mut m.node_state },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Node>(
                "CMsgDOTATournament.Node",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Node {
        const NAME: &'static str = "Node";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.node_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.team_idx_a = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.team_idx_b = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.node_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.node_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.team_idx_a {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.team_idx_b {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.node_state {
                my_size += ::protobuf::rt::int32_size(4, v.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.node_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.team_idx_a {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.team_idx_b {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.node_state {
                os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Node {
            Node::new()
        }

        fn clear(&mut self) {
            self.node_id = ::std::option::Option::None;
            self.team_idx_a = ::std::option::Option::None;
            self.team_idx_b = ::std::option::Option::None;
            self.node_state = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Node {
            static instance: Node = Node {
                node_id: ::std::option::Option::None,
                team_idx_a: ::std::option::Option::None,
                team_idx_b: ::std::option::Option::None,
                node_state: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Node {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATournament.Node").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Node {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Node {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTATournamentStateChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATournamentStateChange {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.new_tournament_id)
    pub new_tournament_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.event)
    pub event: ::std::option::Option<::protobuf::EnumOrUnknown<ETournamentEvent>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.new_tournament_state)
    pub new_tournament_state: ::std::option::Option<::protobuf::EnumOrUnknown<super::dota_client_enums::ETournamentState>>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.game_changes)
    pub game_changes: ::std::vec::Vec<cmsg_dotatournament_state_change::GameChange>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.team_changes)
    pub team_changes: ::std::vec::Vec<cmsg_dotatournament_state_change::TeamChange>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.merged_tournament_ids)
    pub merged_tournament_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.state_seq_num)
    pub state_seq_num: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTATournamentStateChange.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATournamentStateChange {
    fn default() -> &'a CMsgDOTATournamentStateChange {
        <CMsgDOTATournamentStateChange as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATournamentStateChange {
    pub fn new() -> CMsgDOTATournamentStateChange {
        ::std::default::Default::default()
    }

    // optional uint32 new_tournament_id = 1;

    pub fn new_tournament_id(&self) -> u32 {
        self.new_tournament_id.unwrap_or(0)
    }

    pub fn clear_new_tournament_id(&mut self) {
        self.new_tournament_id = ::std::option::Option::None;
    }

    pub fn has_new_tournament_id(&self) -> bool {
        self.new_tournament_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_tournament_id(&mut self, v: u32) {
        self.new_tournament_id = ::std::option::Option::Some(v);
    }

    // optional .dota.ETournamentEvent event = 2;

    pub fn event(&self) -> ETournamentEvent {
        match self.event {
            Some(e) => e.enum_value_or(ETournamentEvent::k_ETournamentEvent_None),
            None => ETournamentEvent::k_ETournamentEvent_None,
        }
    }

    pub fn clear_event(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_event(&self) -> bool {
        self.event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: ETournamentEvent) {
        self.event = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional .dota.ETournamentState new_tournament_state = 3;

    pub fn new_tournament_state(&self) -> super::dota_client_enums::ETournamentState {
        match self.new_tournament_state {
            Some(e) => e.enum_value_or(super::dota_client_enums::ETournamentState::k_ETournamentState_Unknown),
            None => super::dota_client_enums::ETournamentState::k_ETournamentState_Unknown,
        }
    }

    pub fn clear_new_tournament_state(&mut self) {
        self.new_tournament_state = ::std::option::Option::None;
    }

    pub fn has_new_tournament_state(&self) -> bool {
        self.new_tournament_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_tournament_state(&mut self, v: super::dota_client_enums::ETournamentState) {
        self.new_tournament_state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 state_seq_num = 7;

    pub fn state_seq_num(&self) -> u32 {
        self.state_seq_num.unwrap_or(0)
    }

    pub fn clear_state_seq_num(&mut self) {
        self.state_seq_num = ::std::option::Option::None;
    }

    pub fn has_state_seq_num(&self) -> bool {
        self.state_seq_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state_seq_num(&mut self, v: u32) {
        self.state_seq_num = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_tournament_id",
            |m: &CMsgDOTATournamentStateChange| { &m.new_tournament_id },
            |m: &mut CMsgDOTATournamentStateChange| { &mut m.new_tournament_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "event",
            |m: &CMsgDOTATournamentStateChange| { &m.event },
            |m: &mut CMsgDOTATournamentStateChange| { &mut m.event },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_tournament_state",
            |m: &CMsgDOTATournamentStateChange| { &m.new_tournament_state },
            |m: &mut CMsgDOTATournamentStateChange| { &mut m.new_tournament_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "game_changes",
            |m: &CMsgDOTATournamentStateChange| { &m.game_changes },
            |m: &mut CMsgDOTATournamentStateChange| { &mut m.game_changes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "team_changes",
            |m: &CMsgDOTATournamentStateChange| { &m.team_changes },
            |m: &mut CMsgDOTATournamentStateChange| { &mut m.team_changes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "merged_tournament_ids",
            |m: &CMsgDOTATournamentStateChange| { &m.merged_tournament_ids },
            |m: &mut CMsgDOTATournamentStateChange| { &mut m.merged_tournament_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state_seq_num",
            |m: &CMsgDOTATournamentStateChange| { &m.state_seq_num },
            |m: &mut CMsgDOTATournamentStateChange| { &mut m.state_seq_num },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTATournamentStateChange>(
            "CMsgDOTATournamentStateChange",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTATournamentStateChange {
    const NAME: &'static str = "CMsgDOTATournamentStateChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.new_tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.event = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.new_tournament_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    self.game_changes.push(is.read_message()?);
                },
                42 => {
                    self.team_changes.push(is.read_message()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.merged_tournament_ids)?;
                },
                48 => {
                    self.merged_tournament_ids.push(is.read_uint32()?);
                },
                56 => {
                    self.state_seq_num = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.new_tournament_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.event {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.new_tournament_state {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        for value in &self.game_changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.team_changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.merged_tournament_ids {
            my_size += ::protobuf::rt::uint32_size(6, *value);
        };
        if let Some(v) = self.state_seq_num {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.new_tournament_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.event {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.new_tournament_state {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.game_changes {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.team_changes {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.merged_tournament_ids {
            os.write_uint32(6, *v)?;
        };
        if let Some(v) = self.state_seq_num {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATournamentStateChange {
        CMsgDOTATournamentStateChange::new()
    }

    fn clear(&mut self) {
        self.new_tournament_id = ::std::option::Option::None;
        self.event = ::std::option::Option::None;
        self.new_tournament_state = ::std::option::Option::None;
        self.game_changes.clear();
        self.team_changes.clear();
        self.merged_tournament_ids.clear();
        self.state_seq_num = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATournamentStateChange {
        static instance: CMsgDOTATournamentStateChange = CMsgDOTATournamentStateChange {
            new_tournament_id: ::std::option::Option::None,
            event: ::std::option::Option::None,
            new_tournament_state: ::std::option::Option::None,
            game_changes: ::std::vec::Vec::new(),
            team_changes: ::std::vec::Vec::new(),
            merged_tournament_ids: ::std::vec::Vec::new(),
            state_seq_num: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTATournamentStateChange {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTATournamentStateChange").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTATournamentStateChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTATournamentStateChange {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTATournamentStateChange`
pub mod cmsg_dotatournament_state_change {
    // @@protoc_insertion_point(message:dota.CMsgDOTATournamentStateChange.GameChange)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct GameChange {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.GameChange.match_id)
        pub match_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.GameChange.new_state)
        pub new_state: ::std::option::Option<::protobuf::EnumOrUnknown<super::super::dota_client_enums::ETournamentGameState>>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATournamentStateChange.GameChange.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a GameChange {
        fn default() -> &'a GameChange {
            <GameChange as ::protobuf::Message>::default_instance()
        }
    }

    impl GameChange {
        pub fn new() -> GameChange {
            ::std::default::Default::default()
        }

        // optional uint64 match_id = 1;

        pub fn match_id(&self) -> u64 {
            self.match_id.unwrap_or(0)
        }

        pub fn clear_match_id(&mut self) {
            self.match_id = ::std::option::Option::None;
        }

        pub fn has_match_id(&self) -> bool {
            self.match_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_match_id(&mut self, v: u64) {
            self.match_id = ::std::option::Option::Some(v);
        }

        // optional .dota.ETournamentGameState new_state = 2;

        pub fn new_state(&self) -> super::super::dota_client_enums::ETournamentGameState {
            match self.new_state {
                Some(e) => e.enum_value_or(super::super::dota_client_enums::ETournamentGameState::k_ETournamentGameState_Unknown),
                None => super::super::dota_client_enums::ETournamentGameState::k_ETournamentGameState_Unknown,
            }
        }

        pub fn clear_new_state(&mut self) {
            self.new_state = ::std::option::Option::None;
        }

        pub fn has_new_state(&self) -> bool {
            self.new_state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_new_state(&mut self, v: super::super::dota_client_enums::ETournamentGameState) {
            self.new_state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "match_id",
                |m: &GameChange| { &m.match_id },
                |m: &mut GameChange| { &mut m.match_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "new_state",
                |m: &GameChange| { &m.new_state },
                |m: &mut GameChange| { &mut m.new_state },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GameChange>(
                "CMsgDOTATournamentStateChange.GameChange",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for GameChange {
        const NAME: &'static str = "GameChange";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.match_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.new_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.match_id {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.new_state {
                my_size += ::protobuf::rt::int32_size(2, v.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.match_id {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.new_state {
                os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> GameChange {
            GameChange::new()
        }

        fn clear(&mut self) {
            self.match_id = ::std::option::Option::None;
            self.new_state = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static GameChange {
            static instance: GameChange = GameChange {
                match_id: ::std::option::Option::None,
                new_state: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for GameChange {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATournamentStateChange.GameChange").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for GameChange {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for GameChange {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTATournamentStateChange.TeamChange)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TeamChange {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.TeamChange.team_gid)
        pub team_gid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.TeamChange.new_node_or_state)
        pub new_node_or_state: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTATournamentStateChange.TeamChange.old_node_or_state)
        pub old_node_or_state: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTATournamentStateChange.TeamChange.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TeamChange {
        fn default() -> &'a TeamChange {
            <TeamChange as ::protobuf::Message>::default_instance()
        }
    }

    impl TeamChange {
        pub fn new() -> TeamChange {
            ::std::default::Default::default()
        }

        // optional uint64 team_gid = 1;

        pub fn team_gid(&self) -> u64 {
            self.team_gid.unwrap_or(0)
        }

        pub fn clear_team_gid(&mut self) {
            self.team_gid = ::std::option::Option::None;
        }

        pub fn has_team_gid(&self) -> bool {
            self.team_gid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_gid(&mut self, v: u64) {
            self.team_gid = ::std::option::Option::Some(v);
        }

        // optional uint32 new_node_or_state = 2;

        pub fn new_node_or_state(&self) -> u32 {
            self.new_node_or_state.unwrap_or(0)
        }

        pub fn clear_new_node_or_state(&mut self) {
            self.new_node_or_state = ::std::option::Option::None;
        }

        pub fn has_new_node_or_state(&self) -> bool {
            self.new_node_or_state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_new_node_or_state(&mut self, v: u32) {
            self.new_node_or_state = ::std::option::Option::Some(v);
        }

        // optional uint32 old_node_or_state = 3;

        pub fn old_node_or_state(&self) -> u32 {
            self.old_node_or_state.unwrap_or(0)
        }

        pub fn clear_old_node_or_state(&mut self) {
            self.old_node_or_state = ::std::option::Option::None;
        }

        pub fn has_old_node_or_state(&self) -> bool {
            self.old_node_or_state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_old_node_or_state(&mut self, v: u32) {
            self.old_node_or_state = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_gid",
                |m: &TeamChange| { &m.team_gid },
                |m: &mut TeamChange| { &mut m.team_gid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "new_node_or_state",
                |m: &TeamChange| { &m.new_node_or_state },
                |m: &mut TeamChange| { &mut m.new_node_or_state },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "old_node_or_state",
                |m: &TeamChange| { &m.old_node_or_state },
                |m: &mut TeamChange| { &mut m.old_node_or_state },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TeamChange>(
                "CMsgDOTATournamentStateChange.TeamChange",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TeamChange {
        const NAME: &'static str = "TeamChange";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.team_gid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.new_node_or_state = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.old_node_or_state = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.team_gid {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.new_node_or_state {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.old_node_or_state {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.team_gid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.new_node_or_state {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.old_node_or_state {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TeamChange {
            TeamChange::new()
        }

        fn clear(&mut self) {
            self.team_gid = ::std::option::Option::None;
            self.new_node_or_state = ::std::option::Option::None;
            self.old_node_or_state = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TeamChange {
            static instance: TeamChange = TeamChange {
                team_gid: ::std::option::Option::None,
                new_node_or_state: ::std::option::Option::None,
                old_node_or_state: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TeamChange {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTATournamentStateChange.TeamChange").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TeamChange {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TeamChange {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.skill_level)
    pub skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_0)
    pub times_won_0: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_1)
    pub times_won_1: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_2)
    pub times_won_2: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_3)
    pub times_won_3: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_lost)
    pub times_bye_and_lost: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_won)
    pub times_bye_and_won: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_unusual_champ)
    pub times_unusual_champ: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.total_games_won)
    pub total_games_won: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.score)
    pub score: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    fn default() -> &'a CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
        <CMsgDOTAWeekendTourneyPlayerSkillLevelStats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    pub fn new() -> CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
        ::std::default::Default::default()
    }

    // optional uint32 skill_level = 1;

    pub fn skill_level(&self) -> u32 {
        self.skill_level.unwrap_or(0)
    }

    pub fn clear_skill_level(&mut self) {
        self.skill_level = ::std::option::Option::None;
    }

    pub fn has_skill_level(&self) -> bool {
        self.skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_skill_level(&mut self, v: u32) {
        self.skill_level = ::std::option::Option::Some(v);
    }

    // optional uint32 times_won_0 = 2;

    pub fn times_won_0(&self) -> u32 {
        self.times_won_0.unwrap_or(0)
    }

    pub fn clear_times_won_0(&mut self) {
        self.times_won_0 = ::std::option::Option::None;
    }

    pub fn has_times_won_0(&self) -> bool {
        self.times_won_0.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_won_0(&mut self, v: u32) {
        self.times_won_0 = ::std::option::Option::Some(v);
    }

    // optional uint32 times_won_1 = 3;

    pub fn times_won_1(&self) -> u32 {
        self.times_won_1.unwrap_or(0)
    }

    pub fn clear_times_won_1(&mut self) {
        self.times_won_1 = ::std::option::Option::None;
    }

    pub fn has_times_won_1(&self) -> bool {
        self.times_won_1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_won_1(&mut self, v: u32) {
        self.times_won_1 = ::std::option::Option::Some(v);
    }

    // optional uint32 times_won_2 = 4;

    pub fn times_won_2(&self) -> u32 {
        self.times_won_2.unwrap_or(0)
    }

    pub fn clear_times_won_2(&mut self) {
        self.times_won_2 = ::std::option::Option::None;
    }

    pub fn has_times_won_2(&self) -> bool {
        self.times_won_2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_won_2(&mut self, v: u32) {
        self.times_won_2 = ::std::option::Option::Some(v);
    }

    // optional uint32 times_won_3 = 5;

    pub fn times_won_3(&self) -> u32 {
        self.times_won_3.unwrap_or(0)
    }

    pub fn clear_times_won_3(&mut self) {
        self.times_won_3 = ::std::option::Option::None;
    }

    pub fn has_times_won_3(&self) -> bool {
        self.times_won_3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_won_3(&mut self, v: u32) {
        self.times_won_3 = ::std::option::Option::Some(v);
    }

    // optional uint32 times_bye_and_lost = 6;

    pub fn times_bye_and_lost(&self) -> u32 {
        self.times_bye_and_lost.unwrap_or(0)
    }

    pub fn clear_times_bye_and_lost(&mut self) {
        self.times_bye_and_lost = ::std::option::Option::None;
    }

    pub fn has_times_bye_and_lost(&self) -> bool {
        self.times_bye_and_lost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_bye_and_lost(&mut self, v: u32) {
        self.times_bye_and_lost = ::std::option::Option::Some(v);
    }

    // optional uint32 times_bye_and_won = 7;

    pub fn times_bye_and_won(&self) -> u32 {
        self.times_bye_and_won.unwrap_or(0)
    }

    pub fn clear_times_bye_and_won(&mut self) {
        self.times_bye_and_won = ::std::option::Option::None;
    }

    pub fn has_times_bye_and_won(&self) -> bool {
        self.times_bye_and_won.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_bye_and_won(&mut self, v: u32) {
        self.times_bye_and_won = ::std::option::Option::Some(v);
    }

    // optional uint32 times_unusual_champ = 10;

    pub fn times_unusual_champ(&self) -> u32 {
        self.times_unusual_champ.unwrap_or(0)
    }

    pub fn clear_times_unusual_champ(&mut self) {
        self.times_unusual_champ = ::std::option::Option::None;
    }

    pub fn has_times_unusual_champ(&self) -> bool {
        self.times_unusual_champ.is_some()
    }

    // Param is passed by value, moved
    pub fn set_times_unusual_champ(&mut self, v: u32) {
        self.times_unusual_champ = ::std::option::Option::Some(v);
    }

    // optional uint32 total_games_won = 8;

    pub fn total_games_won(&self) -> u32 {
        self.total_games_won.unwrap_or(0)
    }

    pub fn clear_total_games_won(&mut self) {
        self.total_games_won = ::std::option::Option::None;
    }

    pub fn has_total_games_won(&self) -> bool {
        self.total_games_won.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_games_won(&mut self, v: u32) {
        self.total_games_won = ::std::option::Option::Some(v);
    }

    // optional uint32 score = 9;

    pub fn score(&self) -> u32 {
        self.score.unwrap_or(0)
    }

    pub fn clear_score(&mut self) {
        self.score = ::std::option::Option::None;
    }

    pub fn has_score(&self) -> bool {
        self.score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: u32) {
        self.score = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "skill_level",
            |m: &CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &m.skill_level },
            |m: &mut CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &mut m.skill_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "times_won_0",
            |m: &CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &m.times_won_0 },
            |m: &mut CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &mut m.times_won_0 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "times_won_1",
            |m: &CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &m.times_won_1 },
            |m: &mut CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &mut m.times_won_1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "times_won_2",
            |m: &CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &m.times_won_2 },
            |m: &mut CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &mut m.times_won_2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "times_won_3",
            |m: &CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &m.times_won_3 },
            |m: &mut CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &mut m.times_won_3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "times_bye_and_lost",
            |m: &CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &m.times_bye_and_lost },
            |m: &mut CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &mut m.times_bye_and_lost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "times_bye_and_won",
            |m: &CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &m.times_bye_and_won },
            |m: &mut CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &mut m.times_bye_and_won },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "times_unusual_champ",
            |m: &CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &m.times_unusual_champ },
            |m: &mut CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &mut m.times_unusual_champ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "total_games_won",
            |m: &CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &m.total_games_won },
            |m: &mut CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &mut m.total_games_won },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "score",
            |m: &CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &m.score },
            |m: &mut CMsgDOTAWeekendTourneyPlayerSkillLevelStats| { &mut m.score },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAWeekendTourneyPlayerSkillLevelStats>(
            "CMsgDOTAWeekendTourneyPlayerSkillLevelStats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    const NAME: &'static str = "CMsgDOTAWeekendTourneyPlayerSkillLevelStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.times_won_0 = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.times_won_1 = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.times_won_2 = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.times_won_3 = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.times_bye_and_lost = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.times_bye_and_won = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.times_unusual_champ = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.total_games_won = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.score = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.skill_level {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.times_won_0 {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.times_won_1 {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.times_won_2 {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.times_won_3 {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.times_bye_and_lost {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.times_bye_and_won {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.times_unusual_champ {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.total_games_won {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.score {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.skill_level {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.times_won_0 {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.times_won_1 {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.times_won_2 {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.times_won_3 {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.times_bye_and_lost {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.times_bye_and_won {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.times_unusual_champ {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.total_games_won {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.score {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
        CMsgDOTAWeekendTourneyPlayerSkillLevelStats::new()
    }

    fn clear(&mut self) {
        self.skill_level = ::std::option::Option::None;
        self.times_won_0 = ::std::option::Option::None;
        self.times_won_1 = ::std::option::Option::None;
        self.times_won_2 = ::std::option::Option::None;
        self.times_won_3 = ::std::option::Option::None;
        self.times_bye_and_lost = ::std::option::Option::None;
        self.times_bye_and_won = ::std::option::Option::None;
        self.times_unusual_champ = ::std::option::Option::None;
        self.total_games_won = ::std::option::Option::None;
        self.score = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
        static instance: CMsgDOTAWeekendTourneyPlayerSkillLevelStats = CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
            skill_level: ::std::option::Option::None,
            times_won_0: ::std::option::Option::None,
            times_won_1: ::std::option::Option::None,
            times_won_2: ::std::option::Option::None,
            times_won_3: ::std::option::Option::None,
            times_bye_and_lost: ::std::option::Option::None,
            times_bye_and_won: ::std::option::Option::None,
            times_unusual_champ: ::std::option::Option::None,
            total_games_won: ::std::option::Option::None,
            score: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAWeekendTourneyPlayerSkillLevelStats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAWeekendTourneyPlayerStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAWeekendTourneyPlayerStats {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerStats.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerStats.season_trophy_id)
    pub season_trophy_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
    pub skill_levels: ::std::vec::Vec<CMsgDOTAWeekendTourneyPlayerSkillLevelStats>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerStats.current_tier)
    pub current_tier: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAWeekendTourneyPlayerStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAWeekendTourneyPlayerStats {
    fn default() -> &'a CMsgDOTAWeekendTourneyPlayerStats {
        <CMsgDOTAWeekendTourneyPlayerStats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAWeekendTourneyPlayerStats {
    pub fn new() -> CMsgDOTAWeekendTourneyPlayerStats {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 season_trophy_id = 2;

    pub fn season_trophy_id(&self) -> u32 {
        self.season_trophy_id.unwrap_or(0)
    }

    pub fn clear_season_trophy_id(&mut self) {
        self.season_trophy_id = ::std::option::Option::None;
    }

    pub fn has_season_trophy_id(&self) -> bool {
        self.season_trophy_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_season_trophy_id(&mut self, v: u32) {
        self.season_trophy_id = ::std::option::Option::Some(v);
    }

    // optional uint32 current_tier = 4;

    pub fn current_tier(&self) -> u32 {
        self.current_tier.unwrap_or(0)
    }

    pub fn clear_current_tier(&mut self) {
        self.current_tier = ::std::option::Option::None;
    }

    pub fn has_current_tier(&self) -> bool {
        self.current_tier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_tier(&mut self, v: u32) {
        self.current_tier = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CMsgDOTAWeekendTourneyPlayerStats| { &m.account_id },
            |m: &mut CMsgDOTAWeekendTourneyPlayerStats| { &mut m.account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "season_trophy_id",
            |m: &CMsgDOTAWeekendTourneyPlayerStats| { &m.season_trophy_id },
            |m: &mut CMsgDOTAWeekendTourneyPlayerStats| { &mut m.season_trophy_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "skill_levels",
            |m: &CMsgDOTAWeekendTourneyPlayerStats| { &m.skill_levels },
            |m: &mut CMsgDOTAWeekendTourneyPlayerStats| { &mut m.skill_levels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "current_tier",
            |m: &CMsgDOTAWeekendTourneyPlayerStats| { &m.current_tier },
            |m: &mut CMsgDOTAWeekendTourneyPlayerStats| { &mut m.current_tier },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAWeekendTourneyPlayerStats>(
            "CMsgDOTAWeekendTourneyPlayerStats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAWeekendTourneyPlayerStats {
    const NAME: &'static str = "CMsgDOTAWeekendTourneyPlayerStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.season_trophy_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.skill_levels.push(is.read_message()?);
                },
                32 => {
                    self.current_tier = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.season_trophy_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        for value in &self.skill_levels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.current_tier {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.season_trophy_id {
            os.write_uint32(2, v)?;
        }
        for v in &self.skill_levels {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.current_tier {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAWeekendTourneyPlayerStats {
        CMsgDOTAWeekendTourneyPlayerStats::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.season_trophy_id = ::std::option::Option::None;
        self.skill_levels.clear();
        self.current_tier = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAWeekendTourneyPlayerStats {
        static instance: CMsgDOTAWeekendTourneyPlayerStats = CMsgDOTAWeekendTourneyPlayerStats {
            account_id: ::std::option::Option::None,
            season_trophy_id: ::std::option::Option::None,
            skill_levels: ::std::vec::Vec::new(),
            current_tier: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAWeekendTourneyPlayerStats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAWeekendTourneyPlayerStats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAWeekendTourneyPlayerStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAWeekendTourneyPlayerStats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAWeekendTourneyPlayerStatsRequest {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerStatsRequest.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerStatsRequest.season_trophy_id)
    pub season_trophy_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAWeekendTourneyPlayerStatsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAWeekendTourneyPlayerStatsRequest {
    fn default() -> &'a CMsgDOTAWeekendTourneyPlayerStatsRequest {
        <CMsgDOTAWeekendTourneyPlayerStatsRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAWeekendTourneyPlayerStatsRequest {
    pub fn new() -> CMsgDOTAWeekendTourneyPlayerStatsRequest {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 season_trophy_id = 2;

    pub fn season_trophy_id(&self) -> u32 {
        self.season_trophy_id.unwrap_or(0)
    }

    pub fn clear_season_trophy_id(&mut self) {
        self.season_trophy_id = ::std::option::Option::None;
    }

    pub fn has_season_trophy_id(&self) -> bool {
        self.season_trophy_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_season_trophy_id(&mut self, v: u32) {
        self.season_trophy_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CMsgDOTAWeekendTourneyPlayerStatsRequest| { &m.account_id },
            |m: &mut CMsgDOTAWeekendTourneyPlayerStatsRequest| { &mut m.account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "season_trophy_id",
            |m: &CMsgDOTAWeekendTourneyPlayerStatsRequest| { &m.season_trophy_id },
            |m: &mut CMsgDOTAWeekendTourneyPlayerStatsRequest| { &mut m.season_trophy_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAWeekendTourneyPlayerStatsRequest>(
            "CMsgDOTAWeekendTourneyPlayerStatsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAWeekendTourneyPlayerStatsRequest {
    const NAME: &'static str = "CMsgDOTAWeekendTourneyPlayerStatsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.season_trophy_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.season_trophy_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.season_trophy_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAWeekendTourneyPlayerStatsRequest {
        CMsgDOTAWeekendTourneyPlayerStatsRequest::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.season_trophy_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAWeekendTourneyPlayerStatsRequest {
        static instance: CMsgDOTAWeekendTourneyPlayerStatsRequest = CMsgDOTAWeekendTourneyPlayerStatsRequest {
            account_id: ::std::option::Option::None,
            season_trophy_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAWeekendTourneyPlayerStatsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAWeekendTourneyPlayerStatsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAWeekendTourneyPlayerStatsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAWeekendTourneyPlayerStatsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dota.CMsgDOTAWeekendTourneyPlayerHistory)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAWeekendTourneyPlayerHistory {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
    pub tournaments: ::std::vec::Vec<cmsg_dotaweekend_tourney_player_history::Tournament>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAWeekendTourneyPlayerHistory.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAWeekendTourneyPlayerHistory {
    fn default() -> &'a CMsgDOTAWeekendTourneyPlayerHistory {
        <CMsgDOTAWeekendTourneyPlayerHistory as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAWeekendTourneyPlayerHistory {
    pub fn new() -> CMsgDOTAWeekendTourneyPlayerHistory {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CMsgDOTAWeekendTourneyPlayerHistory| { &m.account_id },
            |m: &mut CMsgDOTAWeekendTourneyPlayerHistory| { &mut m.account_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tournaments",
            |m: &CMsgDOTAWeekendTourneyPlayerHistory| { &m.tournaments },
            |m: &mut CMsgDOTAWeekendTourneyPlayerHistory| { &mut m.tournaments },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAWeekendTourneyPlayerHistory>(
            "CMsgDOTAWeekendTourneyPlayerHistory",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAWeekendTourneyPlayerHistory {
    const NAME: &'static str = "CMsgDOTAWeekendTourneyPlayerHistory";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.tournaments.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.tournaments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.tournaments {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAWeekendTourneyPlayerHistory {
        CMsgDOTAWeekendTourneyPlayerHistory::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.tournaments.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAWeekendTourneyPlayerHistory {
        static instance: CMsgDOTAWeekendTourneyPlayerHistory = CMsgDOTAWeekendTourneyPlayerHistory {
            account_id: ::std::option::Option::None,
            tournaments: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAWeekendTourneyPlayerHistory {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAWeekendTourneyPlayerHistory").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAWeekendTourneyPlayerHistory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAWeekendTourneyPlayerHistory {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTAWeekendTourneyPlayerHistory`
pub mod cmsg_dotaweekend_tourney_player_history {
    // @@protoc_insertion_point(message:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Tournament {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_id)
        pub tournament_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.start_time)
        pub start_time: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_tier)
        pub tournament_tier: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_date)
        pub team_date: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_result)
        pub team_result: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
        pub account_id: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
        pub team_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.season_trophy_id)
        pub season_trophy_id: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Tournament {
        fn default() -> &'a Tournament {
            <Tournament as ::protobuf::Message>::default_instance()
        }
    }

    impl Tournament {
        pub fn new() -> Tournament {
            ::std::default::Default::default()
        }

        // optional uint32 tournament_id = 1;

        pub fn tournament_id(&self) -> u32 {
            self.tournament_id.unwrap_or(0)
        }

        pub fn clear_tournament_id(&mut self) {
            self.tournament_id = ::std::option::Option::None;
        }

        pub fn has_tournament_id(&self) -> bool {
            self.tournament_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tournament_id(&mut self, v: u32) {
            self.tournament_id = ::std::option::Option::Some(v);
        }

        // optional uint32 start_time = 2;

        pub fn start_time(&self) -> u32 {
            self.start_time.unwrap_or(0)
        }

        pub fn clear_start_time(&mut self) {
            self.start_time = ::std::option::Option::None;
        }

        pub fn has_start_time(&self) -> bool {
            self.start_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_start_time(&mut self, v: u32) {
            self.start_time = ::std::option::Option::Some(v);
        }

        // optional uint32 tournament_tier = 3;

        pub fn tournament_tier(&self) -> u32 {
            self.tournament_tier.unwrap_or(0)
        }

        pub fn clear_tournament_tier(&mut self) {
            self.tournament_tier = ::std::option::Option::None;
        }

        pub fn has_tournament_tier(&self) -> bool {
            self.tournament_tier.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tournament_tier(&mut self, v: u32) {
            self.tournament_tier = ::std::option::Option::Some(v);
        }

        // optional uint32 team_id = 4;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional uint32 team_date = 5;

        pub fn team_date(&self) -> u32 {
            self.team_date.unwrap_or(0)
        }

        pub fn clear_team_date(&mut self) {
            self.team_date = ::std::option::Option::None;
        }

        pub fn has_team_date(&self) -> bool {
            self.team_date.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_date(&mut self, v: u32) {
            self.team_date = ::std::option::Option::Some(v);
        }

        // optional uint32 team_result = 6;

        pub fn team_result(&self) -> u32 {
            self.team_result.unwrap_or(0)
        }

        pub fn clear_team_result(&mut self) {
            self.team_result = ::std::option::Option::None;
        }

        pub fn has_team_result(&self) -> bool {
            self.team_result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_result(&mut self, v: u32) {
            self.team_result = ::std::option::Option::Some(v);
        }

        // optional string team_name = 8;

        pub fn team_name(&self) -> &str {
            match self.team_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_name(&mut self) {
            self.team_name = ::std::option::Option::None;
        }

        pub fn has_team_name(&self) -> bool {
            self.team_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_name(&mut self, v: ::std::string::String) {
            self.team_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
            if self.team_name.is_none() {
                self.team_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_name(&mut self) -> ::std::string::String {
            self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 season_trophy_id = 9;

        pub fn season_trophy_id(&self) -> u32 {
            self.season_trophy_id.unwrap_or(0)
        }

        pub fn clear_season_trophy_id(&mut self) {
            self.season_trophy_id = ::std::option::Option::None;
        }

        pub fn has_season_trophy_id(&self) -> bool {
            self.season_trophy_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_season_trophy_id(&mut self, v: u32) {
            self.season_trophy_id = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(9);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "tournament_id",
                |m: &Tournament| { &m.tournament_id },
                |m: &mut Tournament| { &mut m.tournament_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "start_time",
                |m: &Tournament| { &m.start_time },
                |m: &mut Tournament| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "tournament_tier",
                |m: &Tournament| { &m.tournament_tier },
                |m: &mut Tournament| { &mut m.tournament_tier },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_id",
                |m: &Tournament| { &m.team_id },
                |m: &mut Tournament| { &mut m.team_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_date",
                |m: &Tournament| { &m.team_date },
                |m: &mut Tournament| { &mut m.team_date },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_result",
                |m: &Tournament| { &m.team_result },
                |m: &mut Tournament| { &mut m.team_result },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "account_id",
                |m: &Tournament| { &m.account_id },
                |m: &mut Tournament| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "team_name",
                |m: &Tournament| { &m.team_name },
                |m: &mut Tournament| { &mut m.team_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "season_trophy_id",
                |m: &Tournament| { &m.season_trophy_id },
                |m: &mut Tournament| { &mut m.season_trophy_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Tournament>(
                "CMsgDOTAWeekendTourneyPlayerHistory.Tournament",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Tournament {
        const NAME: &'static str = "Tournament";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.start_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.tournament_tier = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.team_date = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.team_result = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    58 => {
                        is.read_repeated_packed_uint32_into(&mut self.account_id)?;
                    },
                    56 => {
                        self.account_id.push(is.read_uint32()?);
                    },
                    66 => {
                        self.team_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    72 => {
                        self.season_trophy_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.tournament_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.start_time {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.tournament_tier {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.team_id {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.team_date {
                my_size += ::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.team_result {
                my_size += ::protobuf::rt::uint32_size(6, v);
            }
            for value in &self.account_id {
                my_size += ::protobuf::rt::uint32_size(7, *value);
            };
            if let Some(v) = self.team_name.as_ref() {
                my_size += ::protobuf::rt::string_size(8, &v);
            }
            if let Some(v) = self.season_trophy_id {
                my_size += ::protobuf::rt::uint32_size(9, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.tournament_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.start_time {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.tournament_tier {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.team_id {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.team_date {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.team_result {
                os.write_uint32(6, v)?;
            }
            for v in &self.account_id {
                os.write_uint32(7, *v)?;
            };
            if let Some(v) = self.team_name.as_ref() {
                os.write_string(8, v)?;
            }
            if let Some(v) = self.season_trophy_id {
                os.write_uint32(9, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Tournament {
            Tournament::new()
        }

        fn clear(&mut self) {
            self.tournament_id = ::std::option::Option::None;
            self.start_time = ::std::option::Option::None;
            self.tournament_tier = ::std::option::Option::None;
            self.team_id = ::std::option::Option::None;
            self.team_date = ::std::option::Option::None;
            self.team_result = ::std::option::Option::None;
            self.account_id.clear();
            self.team_name = ::std::option::Option::None;
            self.season_trophy_id = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Tournament {
            static instance: Tournament = Tournament {
                tournament_id: ::std::option::Option::None,
                start_time: ::std::option::Option::None,
                tournament_tier: ::std::option::Option::None,
                team_id: ::std::option::Option::None,
                team_date: ::std::option::Option::None,
                team_result: ::std::option::Option::None,
                account_id: ::std::vec::Vec::new(),
                team_name: ::std::option::Option::None,
                season_trophy_id: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Tournament {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAWeekendTourneyPlayerHistory.Tournament").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Tournament {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Tournament {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:dota.CMsgDOTAWeekendTourneyParticipationDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAWeekendTourneyParticipationDetails {
    // message fields
    // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.divisions)
    pub divisions: ::std::vec::Vec<cmsg_dotaweekend_tourney_participation_details::Division>,
    // special fields
    // @@protoc_insertion_point(special_field:dota.CMsgDOTAWeekendTourneyParticipationDetails.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAWeekendTourneyParticipationDetails {
    fn default() -> &'a CMsgDOTAWeekendTourneyParticipationDetails {
        <CMsgDOTAWeekendTourneyParticipationDetails as ::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAWeekendTourneyParticipationDetails {
    pub fn new() -> CMsgDOTAWeekendTourneyParticipationDetails {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "divisions",
            |m: &CMsgDOTAWeekendTourneyParticipationDetails| { &m.divisions },
            |m: &mut CMsgDOTAWeekendTourneyParticipationDetails| { &mut m.divisions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDOTAWeekendTourneyParticipationDetails>(
            "CMsgDOTAWeekendTourneyParticipationDetails",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgDOTAWeekendTourneyParticipationDetails {
    const NAME: &'static str = "CMsgDOTAWeekendTourneyParticipationDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.divisions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.divisions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.divisions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAWeekendTourneyParticipationDetails {
        CMsgDOTAWeekendTourneyParticipationDetails::new()
    }

    fn clear(&mut self) {
        self.divisions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAWeekendTourneyParticipationDetails {
        static instance: CMsgDOTAWeekendTourneyParticipationDetails = CMsgDOTAWeekendTourneyParticipationDetails {
            divisions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgDOTAWeekendTourneyParticipationDetails {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDOTAWeekendTourneyParticipationDetails").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDOTAWeekendTourneyParticipationDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgDOTAWeekendTourneyParticipationDetails {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgDOTAWeekendTourneyParticipationDetails`
pub mod cmsg_dotaweekend_tourney_participation_details {
    // @@protoc_insertion_point(message:dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Tier {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.tier)
        pub tier: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players)
        pub players: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.teams)
        pub teams: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.winning_teams)
        pub winning_teams: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_2)
        pub players_streak_2: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_3)
        pub players_streak_3: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_4)
        pub players_streak_4: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_5)
        pub players_streak_5: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Tier {
        fn default() -> &'a Tier {
            <Tier as ::protobuf::Message>::default_instance()
        }
    }

    impl Tier {
        pub fn new() -> Tier {
            ::std::default::Default::default()
        }

        // optional uint32 tier = 1;

        pub fn tier(&self) -> u32 {
            self.tier.unwrap_or(0)
        }

        pub fn clear_tier(&mut self) {
            self.tier = ::std::option::Option::None;
        }

        pub fn has_tier(&self) -> bool {
            self.tier.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tier(&mut self, v: u32) {
            self.tier = ::std::option::Option::Some(v);
        }

        // optional uint32 players = 2;

        pub fn players(&self) -> u32 {
            self.players.unwrap_or(0)
        }

        pub fn clear_players(&mut self) {
            self.players = ::std::option::Option::None;
        }

        pub fn has_players(&self) -> bool {
            self.players.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players(&mut self, v: u32) {
            self.players = ::std::option::Option::Some(v);
        }

        // optional uint32 teams = 3;

        pub fn teams(&self) -> u32 {
            self.teams.unwrap_or(0)
        }

        pub fn clear_teams(&mut self) {
            self.teams = ::std::option::Option::None;
        }

        pub fn has_teams(&self) -> bool {
            self.teams.is_some()
        }

        // Param is passed by value, moved
        pub fn set_teams(&mut self, v: u32) {
            self.teams = ::std::option::Option::Some(v);
        }

        // optional uint32 winning_teams = 4;

        pub fn winning_teams(&self) -> u32 {
            self.winning_teams.unwrap_or(0)
        }

        pub fn clear_winning_teams(&mut self) {
            self.winning_teams = ::std::option::Option::None;
        }

        pub fn has_winning_teams(&self) -> bool {
            self.winning_teams.is_some()
        }

        // Param is passed by value, moved
        pub fn set_winning_teams(&mut self, v: u32) {
            self.winning_teams = ::std::option::Option::Some(v);
        }

        // optional uint32 players_streak_2 = 5;

        pub fn players_streak_2(&self) -> u32 {
            self.players_streak_2.unwrap_or(0)
        }

        pub fn clear_players_streak_2(&mut self) {
            self.players_streak_2 = ::std::option::Option::None;
        }

        pub fn has_players_streak_2(&self) -> bool {
            self.players_streak_2.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players_streak_2(&mut self, v: u32) {
            self.players_streak_2 = ::std::option::Option::Some(v);
        }

        // optional uint32 players_streak_3 = 6;

        pub fn players_streak_3(&self) -> u32 {
            self.players_streak_3.unwrap_or(0)
        }

        pub fn clear_players_streak_3(&mut self) {
            self.players_streak_3 = ::std::option::Option::None;
        }

        pub fn has_players_streak_3(&self) -> bool {
            self.players_streak_3.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players_streak_3(&mut self, v: u32) {
            self.players_streak_3 = ::std::option::Option::Some(v);
        }

        // optional uint32 players_streak_4 = 7;

        pub fn players_streak_4(&self) -> u32 {
            self.players_streak_4.unwrap_or(0)
        }

        pub fn clear_players_streak_4(&mut self) {
            self.players_streak_4 = ::std::option::Option::None;
        }

        pub fn has_players_streak_4(&self) -> bool {
            self.players_streak_4.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players_streak_4(&mut self, v: u32) {
            self.players_streak_4 = ::std::option::Option::Some(v);
        }

        // optional uint32 players_streak_5 = 8;

        pub fn players_streak_5(&self) -> u32 {
            self.players_streak_5.unwrap_or(0)
        }

        pub fn clear_players_streak_5(&mut self) {
            self.players_streak_5 = ::std::option::Option::None;
        }

        pub fn has_players_streak_5(&self) -> bool {
            self.players_streak_5.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players_streak_5(&mut self, v: u32) {
            self.players_streak_5 = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(8);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "tier",
                |m: &Tier| { &m.tier },
                |m: &mut Tier| { &mut m.tier },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "players",
                |m: &Tier| { &m.players },
                |m: &mut Tier| { &mut m.players },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "teams",
                |m: &Tier| { &m.teams },
                |m: &mut Tier| { &mut m.teams },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "winning_teams",
                |m: &Tier| { &m.winning_teams },
                |m: &mut Tier| { &mut m.winning_teams },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "players_streak_2",
                |m: &Tier| { &m.players_streak_2 },
                |m: &mut Tier| { &mut m.players_streak_2 },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "players_streak_3",
                |m: &Tier| { &m.players_streak_3 },
                |m: &mut Tier| { &mut m.players_streak_3 },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "players_streak_4",
                |m: &Tier| { &m.players_streak_4 },
                |m: &mut Tier| { &mut m.players_streak_4 },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "players_streak_5",
                |m: &Tier| { &m.players_streak_5 },
                |m: &mut Tier| { &mut m.players_streak_5 },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Tier>(
                "CMsgDOTAWeekendTourneyParticipationDetails.Tier",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Tier {
        const NAME: &'static str = "Tier";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.tier = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.players = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.teams = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.winning_teams = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.players_streak_2 = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.players_streak_3 = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    56 => {
                        self.players_streak_4 = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    64 => {
                        self.players_streak_5 = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.tier {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.players {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.teams {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.winning_teams {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.players_streak_2 {
                my_size += ::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.players_streak_3 {
                my_size += ::protobuf::rt::uint32_size(6, v);
            }
            if let Some(v) = self.players_streak_4 {
                my_size += ::protobuf::rt::uint32_size(7, v);
            }
            if let Some(v) = self.players_streak_5 {
                my_size += ::protobuf::rt::uint32_size(8, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.tier {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.players {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.teams {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.winning_teams {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.players_streak_2 {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.players_streak_3 {
                os.write_uint32(6, v)?;
            }
            if let Some(v) = self.players_streak_4 {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.players_streak_5 {
                os.write_uint32(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Tier {
            Tier::new()
        }

        fn clear(&mut self) {
            self.tier = ::std::option::Option::None;
            self.players = ::std::option::Option::None;
            self.teams = ::std::option::Option::None;
            self.winning_teams = ::std::option::Option::None;
            self.players_streak_2 = ::std::option::Option::None;
            self.players_streak_3 = ::std::option::Option::None;
            self.players_streak_4 = ::std::option::Option::None;
            self.players_streak_5 = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Tier {
            static instance: Tier = Tier {
                tier: ::std::option::Option::None,
                players: ::std::option::Option::None,
                teams: ::std::option::Option::None,
                winning_teams: ::std::option::Option::None,
                players_streak_2: ::std::option::Option::None,
                players_streak_3: ::std::option::Option::None,
                players_streak_4: ::std::option::Option::None,
                players_streak_5: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Tier {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAWeekendTourneyParticipationDetails.Tier").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Tier {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Tier {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Division {
        // message fields
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.division_id)
        pub division_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.schedule_time)
        pub schedule_time: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
        pub tiers: ::std::vec::Vec<Tier>,
        // special fields
        // @@protoc_insertion_point(special_field:dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Division {
        fn default() -> &'a Division {
            <Division as ::protobuf::Message>::default_instance()
        }
    }

    impl Division {
        pub fn new() -> Division {
            ::std::default::Default::default()
        }

        // optional uint32 division_id = 1;

        pub fn division_id(&self) -> u32 {
            self.division_id.unwrap_or(0)
        }

        pub fn clear_division_id(&mut self) {
            self.division_id = ::std::option::Option::None;
        }

        pub fn has_division_id(&self) -> bool {
            self.division_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_division_id(&mut self, v: u32) {
            self.division_id = ::std::option::Option::Some(v);
        }

        // optional uint32 schedule_time = 2;

        pub fn schedule_time(&self) -> u32 {
            self.schedule_time.unwrap_or(0)
        }

        pub fn clear_schedule_time(&mut self) {
            self.schedule_time = ::std::option::Option::None;
        }

        pub fn has_schedule_time(&self) -> bool {
            self.schedule_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_schedule_time(&mut self, v: u32) {
            self.schedule_time = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "division_id",
                |m: &Division| { &m.division_id },
                |m: &mut Division| { &mut m.division_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "schedule_time",
                |m: &Division| { &m.schedule_time },
                |m: &mut Division| { &mut m.schedule_time },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "tiers",
                |m: &Division| { &m.tiers },
                |m: &mut Division| { &mut m.tiers },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Division>(
                "CMsgDOTAWeekendTourneyParticipationDetails.Division",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Division {
        const NAME: &'static str = "Division";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.division_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.schedule_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.tiers.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.division_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.schedule_time {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            for value in &self.tiers {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.division_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.schedule_time {
                os.write_uint32(2, v)?;
            }
            for v in &self.tiers {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Division {
            Division::new()
        }

        fn clear(&mut self) {
            self.division_id = ::std::option::Option::None;
            self.schedule_time = ::std::option::Option::None;
            self.tiers.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Division {
            static instance: Division = Division {
                division_id: ::std::option::Option::None,
                schedule_time: ::std::option::Option::None,
                tiers: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Division {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgDOTAWeekendTourneyParticipationDetails.Division").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Division {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Division {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:dota.ETournamentEvent)
pub enum ETournamentEvent {
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_None)
    k_ETournamentEvent_None = 0,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_TournamentCreated)
    k_ETournamentEvent_TournamentCreated = 1,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_TournamentsMerged)
    k_ETournamentEvent_TournamentsMerged = 2,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_GameOutcome)
    k_ETournamentEvent_GameOutcome = 3,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_TeamGivenBye)
    k_ETournamentEvent_TeamGivenBye = 4,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_TournamentCanceledByAdmin)
    k_ETournamentEvent_TournamentCanceledByAdmin = 5,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_TeamAbandoned)
    k_ETournamentEvent_TeamAbandoned = 6,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_ScheduledGameStarted)
    k_ETournamentEvent_ScheduledGameStarted = 7,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_Canceled)
    k_ETournamentEvent_Canceled = 8,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund)
    k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund = 9,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit)
    k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit = 10,
    // @@protoc_insertion_point(enum_value:dota.ETournamentEvent.k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory)
    k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory = 11,
}

impl ::protobuf::Enum for ETournamentEvent {
    const NAME: &'static str = "ETournamentEvent";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentEvent> {
        match value {
            0 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_None),
            1 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentCreated),
            2 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentsMerged),
            3 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_GameOutcome),
            4 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamGivenBye),
            5 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentCanceledByAdmin),
            6 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamAbandoned),
            7 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_ScheduledGameStarted),
            8 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_Canceled),
            9 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund),
            10 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit),
            11 => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETournamentEvent> {
        match str {
            "k_ETournamentEvent_None" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_None),
            "k_ETournamentEvent_TournamentCreated" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentCreated),
            "k_ETournamentEvent_TournamentsMerged" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentsMerged),
            "k_ETournamentEvent_GameOutcome" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_GameOutcome),
            "k_ETournamentEvent_TeamGivenBye" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamGivenBye),
            "k_ETournamentEvent_TournamentCanceledByAdmin" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TournamentCanceledByAdmin),
            "k_ETournamentEvent_TeamAbandoned" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamAbandoned),
            "k_ETournamentEvent_ScheduledGameStarted" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_ScheduledGameStarted),
            "k_ETournamentEvent_Canceled" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_Canceled),
            "k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund),
            "k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit),
            "k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory" => ::std::option::Option::Some(ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETournamentEvent] = &[
        ETournamentEvent::k_ETournamentEvent_None,
        ETournamentEvent::k_ETournamentEvent_TournamentCreated,
        ETournamentEvent::k_ETournamentEvent_TournamentsMerged,
        ETournamentEvent::k_ETournamentEvent_GameOutcome,
        ETournamentEvent::k_ETournamentEvent_TeamGivenBye,
        ETournamentEvent::k_ETournamentEvent_TournamentCanceledByAdmin,
        ETournamentEvent::k_ETournamentEvent_TeamAbandoned,
        ETournamentEvent::k_ETournamentEvent_ScheduledGameStarted,
        ETournamentEvent::k_ETournamentEvent_Canceled,
        ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund,
        ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit,
        ETournamentEvent::k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory,
    ];
}

impl ::protobuf::EnumFull for ETournamentEvent {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ETournamentEvent").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ETournamentEvent {
    fn default() -> Self {
        ETournamentEvent::k_ETournamentEvent_None
    }
}

impl ETournamentEvent {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ETournamentEvent>("ETournamentEvent")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'dota_gcmessages_client_tournament.proto\x12\x04dota\x1a\x17dota_clien\
    t_enums.proto\"#\n!CMsgRequestWeekendTourneySchedule\"\xe0\x02\n\x1aCMsg\
    WeekendTourneySchedule\x12G\n\tdivisions\x18\x01\x20\x03(\x0b2).dota.CMs\
    gWeekendTourneySchedule.DivisionR\tdivisions\x1a\xf8\x01\n\x08Division\
    \x12#\n\rdivision_code\x18\x01\x20\x01(\rR\x0cdivisionCode\x12(\n\x10tim\
    e_window_open\x18\x02\x20\x01(\rR\x0etimeWindowOpen\x12*\n\x11time_windo\
    w_close\x18\x03\x20\x01(\rR\x0ftimeWindowClose\x121\n\x15time_window_ope\
    n_next\x18\x04\x20\x01(\rR\x12timeWindowOpenNext\x12\x1b\n\ttrophy_id\
    \x18\x05\x20\x01(\rR\x08trophyId\x12!\n\x0cfree_weekend\x18\x06\x20\x01(\
    \x08R\x0bfreeWeekend\"\xa6\x02\n\x16CMsgWeekendTourneyOpts\x12$\n\rparti\
    cipating\x18\x01\x20\x01(\x08R\rparticipating\x12\x1f\n\x0bdivision_id\
    \x18\x02\x20\x01(\rR\ndivisionId\x12\x14\n\x05buyin\x18\x03\x20\x01(\rR\
    \x05buyin\x12\x1f\n\x0bskill_level\x18\x04\x20\x01(\rR\nskillLevel\x12!\
    \n\x0cmatch_groups\x18\x05\x20\x01(\rR\x0bmatchGroups\x12\x17\n\x07team_\
    id\x18\x06\x20\x01(\rR\x06teamId\x12(\n\x10pickup_team_name\x18\x07\x20\
    \x01(\tR\x0epickupTeamName\x12(\n\x10pickup_team_logo\x18\x08\x20\x01(\
    \x04R\x0epickupTeamLogo\"\x19\n\x17CMsgWeekendTourneyLeave\"\xc6\t\n\x12\
    CMsgDOTATournament\x12#\n\rtournament_id\x18\x01\x20\x01(\rR\x0ctourname\
    ntId\x12\x1f\n\x0bdivision_id\x18\x02\x20\x01(\rR\ndivisionId\x12#\n\rsc\
    hedule_time\x18\x03\x20\x01(\rR\x0cscheduleTime\x12\x1f\n\x0bskill_level\
    \x18\x04\x20\x01(\rR\nskillLevel\x12J\n\x13tournament_template\x18\x05\
    \x20\x01(\x0e2\x19.dota.ETournamentTemplateR\x12tournamentTemplate\x12,\
    \n\x05state\x18\x06\x20\x01(\x0e2\x16.dota.ETournamentStateR\x05state\
    \x12\"\n\rstate_seq_num\x18\n\x20\x01(\rR\x0bstateSeqNum\x12(\n\x10seaso\
    n_trophy_id\x18\x0b\x20\x01(\rR\x0eseasonTrophyId\x123\n\x05teams\x18\
    \x07\x20\x03(\x0b2\x1d.dota.CMsgDOTATournament.TeamR\x05teams\x123\n\x05\
    games\x18\x08\x20\x03(\x0b2\x1d.dota.CMsgDOTATournament.GameR\x05games\
    \x123\n\x05nodes\x18\t\x20\x03(\x0b2\x1d.dota.CMsgDOTATournament.NodeR\
    \x05nodes\x1a\xd8\x02\n\x04Team\x12\x19\n\x08team_gid\x18\x01\x20\x01(\
    \x06R\x07teamGid\x12\"\n\rnode_or_state\x18\x02\x20\x01(\rR\x0bnodeOrSta\
    te\x12\x18\n\x07players\x18\x03\x20\x03(\rR\x07players\x12!\n\x0cplayer_\
    buyin\x18\t\x20\x03(\rR\x0bplayerBuyin\x12,\n\x12player_skill_level\x18\
    \n\x20\x03(\rR\x10playerSkillLevel\x12(\n\x10match_group_mask\x18\x0c\
    \x20\x01(\rR\x0ematchGroupMask\x12\x17\n\x07team_id\x18\x04\x20\x01(\rR\
    \x06teamId\x12\x1b\n\tteam_name\x18\x05\x20\x01(\tR\x08teamName\x12$\n\
    \x0eteam_base_logo\x18\x07\x20\x01(\x04R\x0cteamBaseLogo\x12\x20\n\x0cte\
    am_ui_logo\x18\x08\x20\x01(\x04R\nteamUiLogo\x1a\xc8\x01\n\x04Game\x12\
    \x19\n\x08node_idx\x18\x01\x20\x01(\rR\x07nodeIdx\x12\x19\n\x08lobby_id\
    \x18\x02\x20\x01(\x06R\x07lobbyId\x12\x19\n\x08match_id\x18\x03\x20\x01(\
    \x04R\x07matchId\x12\x1e\n\x0bteam_a_good\x18\x04\x20\x01(\x08R\tteamAGo\
    od\x120\n\x05state\x18\x05\x20\x01(\x0e2\x1a.dota.ETournamentGameStateR\
    \x05state\x12\x1d\n\nstart_time\x18\x06\x20\x01(\rR\tstartTime\x1a\x96\
    \x01\n\x04Node\x12\x17\n\x07node_id\x18\x01\x20\x01(\rR\x06nodeId\x12\
    \x1c\n\nteam_idx_a\x18\x02\x20\x01(\rR\x08teamIdxA\x12\x1c\n\nteam_idx_b\
    \x18\x03\x20\x01(\rR\x08teamIdxB\x129\n\nnode_state\x18\x04\x20\x01(\x0e\
    2\x1a.dota.ETournamentNodeStateR\tnodeState\"\xa2\x05\n\x1dCMsgDOTATourn\
    amentStateChange\x12*\n\x11new_tournament_id\x18\x01\x20\x01(\rR\x0fnewT\
    ournamentId\x12,\n\x05event\x18\x02\x20\x01(\x0e2\x16.dota.ETournamentEv\
    entR\x05event\x12H\n\x14new_tournament_state\x18\x03\x20\x01(\x0e2\x16.d\
    ota.ETournamentStateR\x12newTournamentState\x12Q\n\x0cgame_changes\x18\
    \x04\x20\x03(\x0b2..dota.CMsgDOTATournamentStateChange.GameChangeR\x0bga\
    meChanges\x12Q\n\x0cteam_changes\x18\x05\x20\x03(\x0b2..dota.CMsgDOTATou\
    rnamentStateChange.TeamChangeR\x0bteamChanges\x122\n\x15merged_tournamen\
    t_ids\x18\x06\x20\x03(\rR\x13mergedTournamentIds\x12\"\n\rstate_seq_num\
    \x18\x07\x20\x01(\rR\x0bstateSeqNum\x1a`\n\nGameChange\x12\x19\n\x08matc\
    h_id\x18\x01\x20\x01(\x04R\x07matchId\x127\n\tnew_state\x18\x02\x20\x01(\
    \x0e2\x1a.dota.ETournamentGameStateR\x08newState\x1a}\n\nTeamChange\x12\
    \x19\n\x08team_gid\x18\x01\x20\x01(\x04R\x07teamGid\x12)\n\x11new_node_o\
    r_state\x18\x02\x20\x01(\rR\x0enewNodeOrState\x12)\n\x11old_node_or_stat\
    e\x18\x03\x20\x01(\rR\x0eoldNodeOrState\"\x94\x03\n+CMsgDOTAWeekendTourn\
    eyPlayerSkillLevelStats\x12\x1f\n\x0bskill_level\x18\x01\x20\x01(\rR\nsk\
    illLevel\x12\x1e\n\x0btimes_won_0\x18\x02\x20\x01(\rR\ttimesWon0\x12\x1e\
    \n\x0btimes_won_1\x18\x03\x20\x01(\rR\ttimesWon1\x12\x1e\n\x0btimes_won_\
    2\x18\x04\x20\x01(\rR\ttimesWon2\x12\x1e\n\x0btimes_won_3\x18\x05\x20\
    \x01(\rR\ttimesWon3\x12+\n\x12times_bye_and_lost\x18\x06\x20\x01(\rR\x0f\
    timesByeAndLost\x12)\n\x11times_bye_and_won\x18\x07\x20\x01(\rR\x0etimes\
    ByeAndWon\x12.\n\x13times_unusual_champ\x18\n\x20\x01(\rR\x11timesUnusua\
    lChamp\x12&\n\x0ftotal_games_won\x18\x08\x20\x01(\rR\rtotalGamesWon\x12\
    \x14\n\x05score\x18\t\x20\x01(\rR\x05score\"\xe5\x01\n!CMsgDOTAWeekendTo\
    urneyPlayerStats\x12\x1d\n\naccount_id\x18\x01\x20\x01(\rR\taccountId\
    \x12(\n\x10season_trophy_id\x18\x02\x20\x01(\rR\x0eseasonTrophyId\x12T\n\
    \x0cskill_levels\x18\x03\x20\x03(\x0b21.dota.CMsgDOTAWeekendTourneyPlaye\
    rSkillLevelStatsR\x0bskillLevels\x12!\n\x0ccurrent_tier\x18\x04\x20\x01(\
    \rR\x0bcurrentTier\"s\n(CMsgDOTAWeekendTourneyPlayerStatsRequest\x12\x1d\
    \n\naccount_id\x18\x01\x20\x01(\rR\taccountId\x12(\n\x10season_trophy_id\
    \x18\x02\x20\x01(\rR\x0eseasonTrophyId\"\xd5\x03\n#CMsgDOTAWeekendTourne\
    yPlayerHistory\x12\x1d\n\naccount_id\x18\x01\x20\x01(\rR\taccountId\x12V\
    \n\x0btournaments\x18\x03\x20\x03(\x0b24.dota.CMsgDOTAWeekendTourneyPlay\
    erHistory.TournamentR\x0btournaments\x1a\xb6\x02\n\nTournament\x12#\n\rt\
    ournament_id\x18\x01\x20\x01(\rR\x0ctournamentId\x12\x1d\n\nstart_time\
    \x18\x02\x20\x01(\rR\tstartTime\x12'\n\x0ftournament_tier\x18\x03\x20\
    \x01(\rR\x0etournamentTier\x12\x17\n\x07team_id\x18\x04\x20\x01(\rR\x06t\
    eamId\x12\x1b\n\tteam_date\x18\x05\x20\x01(\rR\x08teamDate\x12\x1f\n\x0b\
    team_result\x18\x06\x20\x01(\rR\nteamResult\x12\x1d\n\naccount_id\x18\
    \x07\x20\x03(\rR\taccountId\x12\x1b\n\tteam_name\x18\x08\x20\x01(\tR\x08\
    teamName\x12(\n\x10season_trophy_id\x18\t\x20\x01(\rR\x0eseasonTrophyId\
    \"\xbf\x04\n*CMsgDOTAWeekendTourneyParticipationDetails\x12W\n\tdivision\
    s\x18\x01\x20\x03(\x0b29.dota.CMsgDOTAWeekendTourneyParticipationDetails\
    .DivisionR\tdivisions\x1a\x97\x02\n\x04Tier\x12\x12\n\x04tier\x18\x01\
    \x20\x01(\rR\x04tier\x12\x18\n\x07players\x18\x02\x20\x01(\rR\x07players\
    \x12\x14\n\x05teams\x18\x03\x20\x01(\rR\x05teams\x12#\n\rwinning_teams\
    \x18\x04\x20\x01(\rR\x0cwinningTeams\x12(\n\x10players_streak_2\x18\x05\
    \x20\x01(\rR\x0eplayersStreak2\x12(\n\x10players_streak_3\x18\x06\x20\
    \x01(\rR\x0eplayersStreak3\x12(\n\x10players_streak_4\x18\x07\x20\x01(\r\
    R\x0eplayersStreak4\x12(\n\x10players_streak_5\x18\x08\x20\x01(\rR\x0epl\
    ayersStreak5\x1a\x9d\x01\n\x08Division\x12\x1f\n\x0bdivision_id\x18\x01\
    \x20\x01(\rR\ndivisionId\x12#\n\rschedule_time\x18\x02\x20\x01(\rR\x0csc\
    heduleTime\x12K\n\x05tiers\x18\x03\x20\x03(\x0b25.dota.CMsgDOTAWeekendTo\
    urneyParticipationDetails.TierR\x05tiers*\xb6\x04\n\x10ETournamentEvent\
    \x12\x1b\n\x17k_ETournamentEvent_None\x10\0\x12(\n$k_ETournamentEvent_To\
    urnamentCreated\x10\x01\x12(\n$k_ETournamentEvent_TournamentsMerged\x10\
    \x02\x12\"\n\x1ek_ETournamentEvent_GameOutcome\x10\x03\x12#\n\x1fk_ETour\
    namentEvent_TeamGivenBye\x10\x04\x120\n,k_ETournamentEvent_TournamentCan\
    celedByAdmin\x10\x05\x12$\n\x20k_ETournamentEvent_TeamAbandoned\x10\x06\
    \x12+\n'k_ETournamentEvent_ScheduledGameStarted\x10\x07\x12\x1f\n\x1bk_E\
    TournamentEvent_Canceled\x10\x08\x12?\n;k_ETournamentEvent_TeamParticipa\
    tionTimedOut_EntryFeeRefund\x10\t\x12@\n<k_ETournamentEvent_TeamParticip\
    ationTimedOut_EntryFeeForfeit\x10\n\x12?\n;k_ETournamentEvent_TeamPartic\
    ipationTimedOut_GrantedVictory\x10\x0bB%Z#github.com/dotabuff/manta/dota\
    ;dotaJ\x8eB\n\x07\x12\x05\0\0\xb1\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x03\0:\
    \n\t\n\x02\x08\x0b\x12\x03\x03\0:\n\t\n\x02\x03\0\x12\x03\x05\x07\x20\n\
    \n\n\x02\x05\0\x12\x04\x07\0\x14\x01\n\n\n\x03\x05\0\x01\x12\x03\x07\x05\
    \x15\n\x0b\n\x04\x05\0\x02\0\x12\x03\x08\x08$\n\x0c\n\x05\x05\0\x02\0\
    \x01\x12\x03\x08\x08\x1f\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x08\"#\n\
    \x0b\n\x04\x05\0\x02\x01\x12\x03\t\x081\n\x0c\n\x05\x05\0\x02\x01\x01\
    \x12\x03\t\x08,\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\t/0\n\x0b\n\x04\
    \x05\0\x02\x02\x12\x03\n\x081\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\n\
    \x08,\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\n/0\n\x0b\n\x04\x05\0\x02\
    \x03\x12\x03\x0b\x08+\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x0b\x08&\n\
    \x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x0b)*\n\x0b\n\x04\x05\0\x02\x04\x12\
    \x03\x0c\x08,\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x0c\x08'\n\x0c\n\x05\
    \x05\0\x02\x04\x02\x12\x03\x0c*+\n\x0b\n\x04\x05\0\x02\x05\x12\x03\r\x08\
    9\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\r\x084\n\x0c\n\x05\x05\0\x02\x05\
    \x02\x12\x03\r78\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x0e\x08-\n\x0c\n\x05\
    \x05\0\x02\x06\x01\x12\x03\x0e\x08(\n\x0c\n\x05\x05\0\x02\x06\x02\x12\
    \x03\x0e+,\n\x0b\n\x04\x05\0\x02\x07\x12\x03\x0f\x084\n\x0c\n\x05\x05\0\
    \x02\x07\x01\x12\x03\x0f\x08/\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\x0f2\
    3\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x10\x08(\n\x0c\n\x05\x05\0\x02\x08\
    \x01\x12\x03\x10\x08#\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\x10&'\n\x0b\
    \n\x04\x05\0\x02\t\x12\x03\x11\x08H\n\x0c\n\x05\x05\0\x02\t\x01\x12\x03\
    \x11\x08C\n\x0c\n\x05\x05\0\x02\t\x02\x12\x03\x11FG\n\x0b\n\x04\x05\0\
    \x02\n\x12\x03\x12\x08J\n\x0c\n\x05\x05\0\x02\n\x01\x12\x03\x12\x08D\n\
    \x0c\n\x05\x05\0\x02\n\x02\x12\x03\x12GI\n\x0b\n\x04\x05\0\x02\x0b\x12\
    \x03\x13\x08I\n\x0c\n\x05\x05\0\x02\x0b\x01\x12\x03\x13\x08C\n\x0c\n\x05\
    \x05\0\x02\x0b\x02\x12\x03\x13FH\n\n\n\x02\x04\0\x12\x04\x16\0\x17\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x16\x08)\n\n\n\x02\x04\x01\x12\x04\x19\0$\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\"\n\x0c\n\x04\x04\x01\x03\0\x12\
    \x04\x1a\x08!\t\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03\x1a\x10\x18\n\r\n\
    \x06\x04\x01\x03\0\x02\0\x12\x03\x1b\x102\n\x0e\n\x07\x04\x01\x03\0\x02\
    \0\x04\x12\x03\x1b\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\x03\
    \x1b\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\x02\0\x01\x12\x03\x1b\x20-\n\x0e\
    \n\x07\x04\x01\x03\0\x02\0\x03\x12\x03\x1b01\n\r\n\x06\x04\x01\x03\0\x02\
    \x01\x12\x03\x1c\x105\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x04\x12\x03\x1c\
    \x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x05\x12\x03\x1c\x19\x1f\n\x0e\
    \n\x07\x04\x01\x03\0\x02\x01\x01\x12\x03\x1c\x200\n\x0e\n\x07\x04\x01\
    \x03\0\x02\x01\x03\x12\x03\x1c34\n\r\n\x06\x04\x01\x03\0\x02\x02\x12\x03\
    \x1d\x106\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x04\x12\x03\x1d\x10\x18\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x02\x05\x12\x03\x1d\x19\x1f\n\x0e\n\x07\x04\
    \x01\x03\0\x02\x02\x01\x12\x03\x1d\x201\n\x0e\n\x07\x04\x01\x03\0\x02\
    \x02\x03\x12\x03\x1d45\n\r\n\x06\x04\x01\x03\0\x02\x03\x12\x03\x1e\x10:\
    \n\x0e\n\x07\x04\x01\x03\0\x02\x03\x04\x12\x03\x1e\x10\x18\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x03\x05\x12\x03\x1e\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x03\x01\x12\x03\x1e\x205\n\x0e\n\x07\x04\x01\x03\0\x02\x03\x03\x12\
    \x03\x1e89\n\r\n\x06\x04\x01\x03\0\x02\x04\x12\x03\x1f\x10.\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x04\x04\x12\x03\x1f\x10\x18\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x04\x05\x12\x03\x1f\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x01\
    \x12\x03\x1f\x20)\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x03\x12\x03\x1f,-\n\
    \r\n\x06\x04\x01\x03\0\x02\x05\x12\x03\x20\x10/\n\x0e\n\x07\x04\x01\x03\
    \0\x02\x05\x04\x12\x03\x20\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x05\x05\
    \x12\x03\x20\x19\x1d\n\x0e\n\x07\x04\x01\x03\0\x02\x05\x01\x12\x03\x20\
    \x1e*\n\x0e\n\x07\x04\x01\x03\0\x02\x05\x03\x12\x03\x20-.\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03#\x08C\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03#\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03#\x114\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03#5>\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03#AB\n\n\n\x02\x04\
    \x02\x12\x04&\0/\x01\n\n\n\x03\x04\x02\x01\x12\x03&\x08\x1e\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03'\x08(\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03'\x08\
    \x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03'\x11\x15\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03'\x16#\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03'&'\n\x0b\
    \n\x04\x04\x02\x02\x01\x12\x03(\x08(\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\
    \x03(\x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03(\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03(\x18#\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03(&'\n\x0b\n\x04\x04\x02\x02\x02\x12\x03)\x08\"\n\x0c\n\x05\x04\
    \x02\x02\x02\x04\x12\x03)\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03)\x11\x17\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03)\x18\x1d\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03)\x20!\n\x0b\n\x04\x04\x02\x02\x03\x12\
    \x03*\x08(\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03*\x08\x10\n\x0c\n\x05\
    \x04\x02\x02\x03\x05\x12\x03*\x11\x17\n\x0c\n\x05\x04\x02\x02\x03\x01\
    \x12\x03*\x18#\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03*&'\n\x0b\n\x04\
    \x04\x02\x02\x04\x12\x03+\x08)\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03+\
    \x08\x10\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03+\x11\x17\n\x0c\n\x05\
    \x04\x02\x02\x04\x01\x12\x03+\x18$\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\
    \x03+'(\n\x0b\n\x04\x04\x02\x02\x05\x12\x03,\x08$\n\x0c\n\x05\x04\x02\
    \x02\x05\x04\x12\x03,\x08\x10\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03,\
    \x11\x17\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03,\x18\x1f\n\x0c\n\x05\
    \x04\x02\x02\x05\x03\x12\x03,\"#\n\x0b\n\x04\x04\x02\x02\x06\x12\x03-\
    \x08-\n\x0c\n\x05\x04\x02\x02\x06\x04\x12\x03-\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x06\x05\x12\x03-\x11\x17\n\x0c\n\x05\x04\x02\x02\x06\x01\x12\
    \x03-\x18(\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03-+,\n\x0b\n\x04\x04\
    \x02\x02\x07\x12\x03.\x08-\n\x0c\n\x05\x04\x02\x02\x07\x04\x12\x03.\x08\
    \x10\n\x0c\n\x05\x04\x02\x02\x07\x05\x12\x03.\x11\x17\n\x0c\n\x05\x04\
    \x02\x02\x07\x01\x12\x03.\x18(\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03.+\
    ,\n\n\n\x02\x04\x03\x12\x041\02\x01\n\n\n\x03\x04\x03\x01\x12\x031\x08\
    \x1f\n\n\n\x02\x04\x04\x12\x044\0]\x01\n\n\n\x03\x04\x04\x01\x12\x034\
    \x08\x1a\n\x0c\n\x04\x04\x04\x03\0\x12\x045\x08@\t\n\x0c\n\x05\x04\x04\
    \x03\0\x01\x12\x035\x10\x14\n\r\n\x06\x04\x04\x03\0\x02\0\x12\x036\x10.\
    \n\x0e\n\x07\x04\x04\x03\0\x02\0\x04\x12\x036\x10\x18\n\x0e\n\x07\x04\
    \x04\x03\0\x02\0\x05\x12\x036\x19\x20\n\x0e\n\x07\x04\x04\x03\0\x02\0\
    \x01\x12\x036!)\n\x0e\n\x07\x04\x04\x03\0\x02\0\x03\x12\x036,-\n\r\n\x06\
    \x04\x04\x03\0\x02\x01\x12\x037\x102\n\x0e\n\x07\x04\x04\x03\0\x02\x01\
    \x04\x12\x037\x10\x18\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x05\x12\x037\x19\
    \x1f\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x01\x12\x037\x20-\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x01\x03\x12\x03701\n\r\n\x06\x04\x04\x03\0\x02\x02\x12\
    \x038\x10,\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x04\x12\x038\x10\x18\n\x0e\
    \n\x07\x04\x04\x03\0\x02\x02\x05\x12\x038\x19\x1f\n\x0e\n\x07\x04\x04\
    \x03\0\x02\x02\x01\x12\x038\x20'\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x03\
    \x12\x038*+\n\r\n\x06\x04\x04\x03\0\x02\x03\x12\x039\x101\n\x0e\n\x07\
    \x04\x04\x03\0\x02\x03\x04\x12\x039\x10\x18\n\x0e\n\x07\x04\x04\x03\0\
    \x02\x03\x05\x12\x039\x19\x1f\n\x0e\n\x07\x04\x04\x03\0\x02\x03\x01\x12\
    \x039\x20,\n\x0e\n\x07\x04\x04\x03\0\x02\x03\x03\x12\x039/0\n\r\n\x06\
    \x04\x04\x03\0\x02\x04\x12\x03:\x108\n\x0e\n\x07\x04\x04\x03\0\x02\x04\
    \x04\x12\x03:\x10\x18\n\x0e\n\x07\x04\x04\x03\0\x02\x04\x05\x12\x03:\x19\
    \x1f\n\x0e\n\x07\x04\x04\x03\0\x02\x04\x01\x12\x03:\x202\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x04\x03\x12\x03:57\n\r\n\x06\x04\x04\x03\0\x02\x05\x12\
    \x03;\x106\n\x0e\n\x07\x04\x04\x03\0\x02\x05\x04\x12\x03;\x10\x18\n\x0e\
    \n\x07\x04\x04\x03\0\x02\x05\x05\x12\x03;\x19\x1f\n\x0e\n\x07\x04\x04\
    \x03\0\x02\x05\x01\x12\x03;\x200\n\x0e\n\x07\x04\x04\x03\0\x02\x05\x03\
    \x12\x03;35\n\r\n\x06\x04\x04\x03\0\x02\x06\x12\x03<\x10,\n\x0e\n\x07\
    \x04\x04\x03\0\x02\x06\x04\x12\x03<\x10\x18\n\x0e\n\x07\x04\x04\x03\0\
    \x02\x06\x05\x12\x03<\x19\x1f\n\x0e\n\x07\x04\x04\x03\0\x02\x06\x01\x12\
    \x03<\x20'\n\x0e\n\x07\x04\x04\x03\0\x02\x06\x03\x12\x03<*+\n\r\n\x06\
    \x04\x04\x03\0\x02\x07\x12\x03=\x10.\n\x0e\n\x07\x04\x04\x03\0\x02\x07\
    \x04\x12\x03=\x10\x18\n\x0e\n\x07\x04\x04\x03\0\x02\x07\x05\x12\x03=\x19\
    \x1f\n\x0e\n\x07\x04\x04\x03\0\x02\x07\x01\x12\x03=\x20)\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x07\x03\x12\x03=,-\n\r\n\x06\x04\x04\x03\0\x02\x08\x12\
    \x03>\x103\n\x0e\n\x07\x04\x04\x03\0\x02\x08\x04\x12\x03>\x10\x18\n\x0e\
    \n\x07\x04\x04\x03\0\x02\x08\x05\x12\x03>\x19\x1f\n\x0e\n\x07\x04\x04\
    \x03\0\x02\x08\x01\x12\x03>\x20.\n\x0e\n\x07\x04\x04\x03\0\x02\x08\x03\
    \x12\x03>12\n\r\n\x06\x04\x04\x03\0\x02\t\x12\x03?\x101\n\x0e\n\x07\x04\
    \x04\x03\0\x02\t\x04\x12\x03?\x10\x18\n\x0e\n\x07\x04\x04\x03\0\x02\t\
    \x05\x12\x03?\x19\x1f\n\x0e\n\x07\x04\x04\x03\0\x02\t\x01\x12\x03?\x20,\
    \n\x0e\n\x07\x04\x04\x03\0\x02\t\x03\x12\x03?/0\n\x0c\n\x04\x04\x04\x03\
    \x01\x12\x04B\x08I\t\n\x0c\n\x05\x04\x04\x03\x01\x01\x12\x03B\x10\x14\n\
    \r\n\x06\x04\x04\x03\x01\x02\0\x12\x03C\x10-\n\x0e\n\x07\x04\x04\x03\x01\
    \x02\0\x04\x12\x03C\x10\x18\n\x0e\n\x07\x04\x04\x03\x01\x02\0\x05\x12\
    \x03C\x19\x1f\n\x0e\n\x07\x04\x04\x03\x01\x02\0\x01\x12\x03C\x20(\n\x0e\
    \n\x07\x04\x04\x03\x01\x02\0\x03\x12\x03C+,\n\r\n\x06\x04\x04\x03\x01\
    \x02\x01\x12\x03D\x10.\n\x0e\n\x07\x04\x04\x03\x01\x02\x01\x04\x12\x03D\
    \x10\x18\n\x0e\n\x07\x04\x04\x03\x01\x02\x01\x05\x12\x03D\x19\x20\n\x0e\
    \n\x07\x04\x04\x03\x01\x02\x01\x01\x12\x03D!)\n\x0e\n\x07\x04\x04\x03\
    \x01\x02\x01\x03\x12\x03D,-\n\r\n\x06\x04\x04\x03\x01\x02\x02\x12\x03E\
    \x10-\n\x0e\n\x07\x04\x04\x03\x01\x02\x02\x04\x12\x03E\x10\x18\n\x0e\n\
    \x07\x04\x04\x03\x01\x02\x02\x05\x12\x03E\x19\x1f\n\x0e\n\x07\x04\x04\
    \x03\x01\x02\x02\x01\x12\x03E\x20(\n\x0e\n\x07\x04\x04\x03\x01\x02\x02\
    \x03\x12\x03E+,\n\r\n\x06\x04\x04\x03\x01\x02\x03\x12\x03F\x10.\n\x0e\n\
    \x07\x04\x04\x03\x01\x02\x03\x04\x12\x03F\x10\x18\n\x0e\n\x07\x04\x04\
    \x03\x01\x02\x03\x05\x12\x03F\x19\x1d\n\x0e\n\x07\x04\x04\x03\x01\x02\
    \x03\x01\x12\x03F\x1e)\n\x0e\n\x07\x04\x04\x03\x01\x02\x03\x03\x12\x03F,\
    -\n\r\n\x06\x04\x04\x03\x01\x02\x04\x12\x03G\x108\n\x0e\n\x07\x04\x04\
    \x03\x01\x02\x04\x04\x12\x03G\x10\x18\n\x0e\n\x07\x04\x04\x03\x01\x02\
    \x04\x06\x12\x03G\x19-\n\x0e\n\x07\x04\x04\x03\x01\x02\x04\x01\x12\x03G.\
    3\n\x0e\n\x07\x04\x04\x03\x01\x02\x04\x03\x12\x03G67\n\r\n\x06\x04\x04\
    \x03\x01\x02\x05\x12\x03H\x10/\n\x0e\n\x07\x04\x04\x03\x01\x02\x05\x04\
    \x12\x03H\x10\x18\n\x0e\n\x07\x04\x04\x03\x01\x02\x05\x05\x12\x03H\x19\
    \x1f\n\x0e\n\x07\x04\x04\x03\x01\x02\x05\x01\x12\x03H\x20*\n\x0e\n\x07\
    \x04\x04\x03\x01\x02\x05\x03\x12\x03H-.\n\x0c\n\x04\x04\x04\x03\x02\x12\
    \x04K\x08P\t\n\x0c\n\x05\x04\x04\x03\x02\x01\x12\x03K\x10\x14\n\r\n\x06\
    \x04\x04\x03\x02\x02\0\x12\x03L\x10,\n\x0e\n\x07\x04\x04\x03\x02\x02\0\
    \x04\x12\x03L\x10\x18\n\x0e\n\x07\x04\x04\x03\x02\x02\0\x05\x12\x03L\x19\
    \x1f\n\x0e\n\x07\x04\x04\x03\x02\x02\0\x01\x12\x03L\x20'\n\x0e\n\x07\x04\
    \x04\x03\x02\x02\0\x03\x12\x03L*+\n\r\n\x06\x04\x04\x03\x02\x02\x01\x12\
    \x03M\x10/\n\x0e\n\x07\x04\x04\x03\x02\x02\x01\x04\x12\x03M\x10\x18\n\
    \x0e\n\x07\x04\x04\x03\x02\x02\x01\x05\x12\x03M\x19\x1f\n\x0e\n\x07\x04\
    \x04\x03\x02\x02\x01\x01\x12\x03M\x20*\n\x0e\n\x07\x04\x04\x03\x02\x02\
    \x01\x03\x12\x03M-.\n\r\n\x06\x04\x04\x03\x02\x02\x02\x12\x03N\x10/\n\
    \x0e\n\x07\x04\x04\x03\x02\x02\x02\x04\x12\x03N\x10\x18\n\x0e\n\x07\x04\
    \x04\x03\x02\x02\x02\x05\x12\x03N\x19\x1f\n\x0e\n\x07\x04\x04\x03\x02\
    \x02\x02\x01\x12\x03N\x20*\n\x0e\n\x07\x04\x04\x03\x02\x02\x02\x03\x12\
    \x03N-.\n\r\n\x06\x04\x04\x03\x02\x02\x03\x12\x03O\x10=\n\x0e\n\x07\x04\
    \x04\x03\x02\x02\x03\x04\x12\x03O\x10\x18\n\x0e\n\x07\x04\x04\x03\x02\
    \x02\x03\x06\x12\x03O\x19-\n\x0e\n\x07\x04\x04\x03\x02\x02\x03\x01\x12\
    \x03O.8\n\x0e\n\x07\x04\x04\x03\x02\x02\x03\x03\x12\x03O;<\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03R\x08*\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03R\x08\
    \x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03R\x11\x17\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03R\x18%\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03R()\n\x0b\
    \n\x04\x04\x04\x02\x01\x12\x03S\x08(\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\
    \x03S\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03S\x11\x17\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03S\x18#\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03S&'\n\x0b\n\x04\x04\x04\x02\x02\x12\x03T\x08*\n\x0c\n\x05\x04\
    \x04\x02\x02\x04\x12\x03T\x08\x10\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\
    \x03T\x11\x17\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03T\x18%\n\x0c\n\x05\
    \x04\x04\x02\x02\x03\x12\x03T()\n\x0b\n\x04\x04\x04\x02\x03\x12\x03U\x08\
    (\n\x0c\n\x05\x04\x04\x02\x03\x04\x12\x03U\x08\x10\n\x0c\n\x05\x04\x04\
    \x02\x03\x05\x12\x03U\x11\x17\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03U\
    \x18#\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03U&'\n\x0b\n\x04\x04\x04\x02\
    \x04\x12\x03V\x08=\n\x0c\n\x05\x04\x04\x02\x04\x04\x12\x03V\x08\x10\n\
    \x0c\n\x05\x04\x04\x02\x04\x06\x12\x03V\x11$\n\x0c\n\x05\x04\x04\x02\x04\
    \x01\x12\x03V%8\n\x0c\n\x05\x04\x04\x02\x04\x03\x12\x03V;<\n\x0b\n\x04\
    \x04\x04\x02\x05\x12\x03W\x08,\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\x03W\
    \x08\x10\n\x0c\n\x05\x04\x04\x02\x05\x06\x12\x03W\x11!\n\x0c\n\x05\x04\
    \x04\x02\x05\x01\x12\x03W\"'\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03W*+\
    \n\x0b\n\x04\x04\x04\x02\x06\x12\x03X\x08+\n\x0c\n\x05\x04\x04\x02\x06\
    \x04\x12\x03X\x08\x10\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\x03X\x11\x17\n\
    \x0c\n\x05\x04\x04\x02\x06\x01\x12\x03X\x18%\n\x0c\n\x05\x04\x04\x02\x06\
    \x03\x12\x03X(*\n\x0b\n\x04\x04\x04\x02\x07\x12\x03Y\x08.\n\x0c\n\x05\
    \x04\x04\x02\x07\x04\x12\x03Y\x08\x10\n\x0c\n\x05\x04\x04\x02\x07\x05\
    \x12\x03Y\x11\x17\n\x0c\n\x05\x04\x04\x02\x07\x01\x12\x03Y\x18(\n\x0c\n\
    \x05\x04\x04\x02\x07\x03\x12\x03Y+-\n\x0b\n\x04\x04\x04\x02\x08\x12\x03Z\
    \x083\n\x0c\n\x05\x04\x04\x02\x08\x04\x12\x03Z\x08\x10\n\x0c\n\x05\x04\
    \x04\x02\x08\x06\x12\x03Z\x11(\n\x0c\n\x05\x04\x04\x02\x08\x01\x12\x03Z)\
    .\n\x0c\n\x05\x04\x04\x02\x08\x03\x12\x03Z12\n\x0b\n\x04\x04\x04\x02\t\
    \x12\x03[\x083\n\x0c\n\x05\x04\x04\x02\t\x04\x12\x03[\x08\x10\n\x0c\n\
    \x05\x04\x04\x02\t\x06\x12\x03[\x11(\n\x0c\n\x05\x04\x04\x02\t\x01\x12\
    \x03[).\n\x0c\n\x05\x04\x04\x02\t\x03\x12\x03[12\n\x0b\n\x04\x04\x04\x02\
    \n\x12\x03\\\x083\n\x0c\n\x05\x04\x04\x02\n\x04\x12\x03\\\x08\x10\n\x0c\
    \n\x05\x04\x04\x02\n\x06\x12\x03\\\x11(\n\x0c\n\x05\x04\x04\x02\n\x01\
    \x12\x03\\).\n\x0c\n\x05\x04\x04\x02\n\x03\x12\x03\\12\n\n\n\x02\x04\x05\
    \x12\x04_\0r\x01\n\n\n\x03\x04\x05\x01\x12\x03_\x08%\n\x0c\n\x04\x04\x05\
    \x03\0\x12\x04`\x08c\t\n\x0c\n\x05\x04\x05\x03\0\x01\x12\x03`\x10\x1a\n\
    \r\n\x06\x04\x05\x03\0\x02\0\x12\x03a\x10-\n\x0e\n\x07\x04\x05\x03\0\x02\
    \0\x04\x12\x03a\x10\x18\n\x0e\n\x07\x04\x05\x03\0\x02\0\x05\x12\x03a\x19\
    \x1f\n\x0e\n\x07\x04\x05\x03\0\x02\0\x01\x12\x03a\x20(\n\x0e\n\x07\x04\
    \x05\x03\0\x02\0\x03\x12\x03a+,\n\r\n\x06\x04\x05\x03\0\x02\x01\x12\x03b\
    \x10<\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x04\x12\x03b\x10\x18\n\x0e\n\x07\
    \x04\x05\x03\0\x02\x01\x06\x12\x03b\x19-\n\x0e\n\x07\x04\x05\x03\0\x02\
    \x01\x01\x12\x03b.7\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x03\x12\x03b:;\n\
    \x0c\n\x04\x04\x05\x03\x01\x12\x04e\x08i\t\n\x0c\n\x05\x04\x05\x03\x01\
    \x01\x12\x03e\x10\x1a\n\r\n\x06\x04\x05\x03\x01\x02\0\x12\x03f\x10-\n\
    \x0e\n\x07\x04\x05\x03\x01\x02\0\x04\x12\x03f\x10\x18\n\x0e\n\x07\x04\
    \x05\x03\x01\x02\0\x05\x12\x03f\x19\x1f\n\x0e\n\x07\x04\x05\x03\x01\x02\
    \0\x01\x12\x03f\x20(\n\x0e\n\x07\x04\x05\x03\x01\x02\0\x03\x12\x03f+,\n\
    \r\n\x06\x04\x05\x03\x01\x02\x01\x12\x03g\x106\n\x0e\n\x07\x04\x05\x03\
    \x01\x02\x01\x04\x12\x03g\x10\x18\n\x0e\n\x07\x04\x05\x03\x01\x02\x01\
    \x05\x12\x03g\x19\x1f\n\x0e\n\x07\x04\x05\x03\x01\x02\x01\x01\x12\x03g\
    \x201\n\x0e\n\x07\x04\x05\x03\x01\x02\x01\x03\x12\x03g45\n\r\n\x06\x04\
    \x05\x03\x01\x02\x02\x12\x03h\x106\n\x0e\n\x07\x04\x05\x03\x01\x02\x02\
    \x04\x12\x03h\x10\x18\n\x0e\n\x07\x04\x05\x03\x01\x02\x02\x05\x12\x03h\
    \x19\x1f\n\x0e\n\x07\x04\x05\x03\x01\x02\x02\x01\x12\x03h\x201\n\x0e\n\
    \x07\x04\x05\x03\x01\x02\x02\x03\x12\x03h45\n\x0b\n\x04\x04\x05\x02\0\
    \x12\x03k\x08.\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03k\x08\x10\n\x0c\n\
    \x05\x04\x05\x02\0\x05\x12\x03k\x11\x17\n\x0c\n\x05\x04\x05\x02\0\x01\
    \x12\x03k\x18)\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03k,-\n\x0b\n\x04\x04\
    \x05\x02\x01\x12\x03l\x08,\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03l\x08\
    \x10\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03l\x11!\n\x0c\n\x05\x04\x05\
    \x02\x01\x01\x12\x03l\"'\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03l*+\n\
    \x0b\n\x04\x04\x05\x02\x02\x12\x03m\x08;\n\x0c\n\x05\x04\x05\x02\x02\x04\
    \x12\x03m\x08\x10\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\x03m\x11!\n\x0c\n\
    \x05\x04\x05\x02\x02\x01\x12\x03m\"6\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\
    \x03m9:\n\x0b\n\x04\x04\x05\x02\x03\x12\x03n\x08K\n\x0c\n\x05\x04\x05\
    \x02\x03\x04\x12\x03n\x08\x10\n\x0c\n\x05\x04\x05\x02\x03\x06\x12\x03n\
    \x119\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03n:F\n\x0c\n\x05\x04\x05\x02\
    \x03\x03\x12\x03nIJ\n\x0b\n\x04\x04\x05\x02\x04\x12\x03o\x08K\n\x0c\n\
    \x05\x04\x05\x02\x04\x04\x12\x03o\x08\x10\n\x0c\n\x05\x04\x05\x02\x04\
    \x06\x12\x03o\x119\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\x03o:F\n\x0c\n\
    \x05\x04\x05\x02\x04\x03\x12\x03oIJ\n\x0b\n\x04\x04\x05\x02\x05\x12\x03p\
    \x082\n\x0c\n\x05\x04\x05\x02\x05\x04\x12\x03p\x08\x10\n\x0c\n\x05\x04\
    \x05\x02\x05\x05\x12\x03p\x11\x17\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\
    \x03p\x18-\n\x0c\n\x05\x04\x05\x02\x05\x03\x12\x03p01\n\x0b\n\x04\x04\
    \x05\x02\x06\x12\x03q\x08*\n\x0c\n\x05\x04\x05\x02\x06\x04\x12\x03q\x08\
    \x10\n\x0c\n\x05\x04\x05\x02\x06\x05\x12\x03q\x11\x17\n\x0c\n\x05\x04\
    \x05\x02\x06\x01\x12\x03q\x18%\n\x0c\n\x05\x04\x05\x02\x06\x03\x12\x03q(\
    )\n\n\n\x02\x04\x06\x12\x04t\0\x7f\x01\n\n\n\x03\x04\x06\x01\x12\x03t\
    \x083\n\x0b\n\x04\x04\x06\x02\0\x12\x03u\x08(\n\x0c\n\x05\x04\x06\x02\0\
    \x04\x12\x03u\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03u\x11\x17\n\
    \x0c\n\x05\x04\x06\x02\0\x01\x12\x03u\x18#\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03u&'\n\x0b\n\x04\x04\x06\x02\x01\x12\x03v\x08(\n\x0c\n\x05\x04\
    \x06\x02\x01\x04\x12\x03v\x08\x10\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\
    \x03v\x11\x17\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03v\x18#\n\x0c\n\x05\
    \x04\x06\x02\x01\x03\x12\x03v&'\n\x0b\n\x04\x04\x06\x02\x02\x12\x03w\x08\
    (\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\x03w\x08\x10\n\x0c\n\x05\x04\x06\
    \x02\x02\x05\x12\x03w\x11\x17\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03w\
    \x18#\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03w&'\n\x0b\n\x04\x04\x06\x02\
    \x03\x12\x03x\x08(\n\x0c\n\x05\x04\x06\x02\x03\x04\x12\x03x\x08\x10\n\
    \x0c\n\x05\x04\x06\x02\x03\x05\x12\x03x\x11\x17\n\x0c\n\x05\x04\x06\x02\
    \x03\x01\x12\x03x\x18#\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03x&'\n\x0b\
    \n\x04\x04\x06\x02\x04\x12\x03y\x08(\n\x0c\n\x05\x04\x06\x02\x04\x04\x12\
    \x03y\x08\x10\n\x0c\n\x05\x04\x06\x02\x04\x05\x12\x03y\x11\x17\n\x0c\n\
    \x05\x04\x06\x02\x04\x01\x12\x03y\x18#\n\x0c\n\x05\x04\x06\x02\x04\x03\
    \x12\x03y&'\n\x0b\n\x04\x04\x06\x02\x05\x12\x03z\x08/\n\x0c\n\x05\x04\
    \x06\x02\x05\x04\x12\x03z\x08\x10\n\x0c\n\x05\x04\x06\x02\x05\x05\x12\
    \x03z\x11\x17\n\x0c\n\x05\x04\x06\x02\x05\x01\x12\x03z\x18*\n\x0c\n\x05\
    \x04\x06\x02\x05\x03\x12\x03z-.\n\x0b\n\x04\x04\x06\x02\x06\x12\x03{\x08\
    .\n\x0c\n\x05\x04\x06\x02\x06\x04\x12\x03{\x08\x10\n\x0c\n\x05\x04\x06\
    \x02\x06\x05\x12\x03{\x11\x17\n\x0c\n\x05\x04\x06\x02\x06\x01\x12\x03{\
    \x18)\n\x0c\n\x05\x04\x06\x02\x06\x03\x12\x03{,-\n\x0b\n\x04\x04\x06\x02\
    \x07\x12\x03|\x081\n\x0c\n\x05\x04\x06\x02\x07\x04\x12\x03|\x08\x10\n\
    \x0c\n\x05\x04\x06\x02\x07\x05\x12\x03|\x11\x17\n\x0c\n\x05\x04\x06\x02\
    \x07\x01\x12\x03|\x18+\n\x0c\n\x05\x04\x06\x02\x07\x03\x12\x03|.0\n\x0b\
    \n\x04\x04\x06\x02\x08\x12\x03}\x08,\n\x0c\n\x05\x04\x06\x02\x08\x04\x12\
    \x03}\x08\x10\n\x0c\n\x05\x04\x06\x02\x08\x05\x12\x03}\x11\x17\n\x0c\n\
    \x05\x04\x06\x02\x08\x01\x12\x03}\x18'\n\x0c\n\x05\x04\x06\x02\x08\x03\
    \x12\x03}*+\n\x0b\n\x04\x04\x06\x02\t\x12\x03~\x08\"\n\x0c\n\x05\x04\x06\
    \x02\t\x04\x12\x03~\x08\x10\n\x0c\n\x05\x04\x06\x02\t\x05\x12\x03~\x11\
    \x17\n\x0c\n\x05\x04\x06\x02\t\x01\x12\x03~\x18\x1d\n\x0c\n\x05\x04\x06\
    \x02\t\x03\x12\x03~\x20!\n\x0c\n\x02\x04\x07\x12\x06\x81\x01\0\x86\x01\
    \x01\n\x0b\n\x03\x04\x07\x01\x12\x04\x81\x01\x08)\n\x0c\n\x04\x04\x07\
    \x02\0\x12\x04\x82\x01\x08'\n\r\n\x05\x04\x07\x02\0\x04\x12\x04\x82\x01\
    \x08\x10\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\x82\x01\x11\x17\n\r\n\x05\
    \x04\x07\x02\0\x01\x12\x04\x82\x01\x18\"\n\r\n\x05\x04\x07\x02\0\x03\x12\
    \x04\x82\x01%&\n\x0c\n\x04\x04\x07\x02\x01\x12\x04\x83\x01\x08-\n\r\n\
    \x05\x04\x07\x02\x01\x04\x12\x04\x83\x01\x08\x10\n\r\n\x05\x04\x07\x02\
    \x01\x05\x12\x04\x83\x01\x11\x17\n\r\n\x05\x04\x07\x02\x01\x01\x12\x04\
    \x83\x01\x18(\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\x83\x01+,\n\x0c\n\
    \x04\x04\x07\x02\x02\x12\x04\x84\x01\x08N\n\r\n\x05\x04\x07\x02\x02\x04\
    \x12\x04\x84\x01\x08\x10\n\r\n\x05\x04\x07\x02\x02\x06\x12\x04\x84\x01\
    \x11<\n\r\n\x05\x04\x07\x02\x02\x01\x12\x04\x84\x01=I\n\r\n\x05\x04\x07\
    \x02\x02\x03\x12\x04\x84\x01LM\n\x0c\n\x04\x04\x07\x02\x03\x12\x04\x85\
    \x01\x08)\n\r\n\x05\x04\x07\x02\x03\x04\x12\x04\x85\x01\x08\x10\n\r\n\
    \x05\x04\x07\x02\x03\x05\x12\x04\x85\x01\x11\x17\n\r\n\x05\x04\x07\x02\
    \x03\x01\x12\x04\x85\x01\x18$\n\r\n\x05\x04\x07\x02\x03\x03\x12\x04\x85\
    \x01'(\n\x0c\n\x02\x04\x08\x12\x06\x88\x01\0\x8b\x01\x01\n\x0b\n\x03\x04\
    \x08\x01\x12\x04\x88\x01\x080\n\x0c\n\x04\x04\x08\x02\0\x12\x04\x89\x01\
    \x08'\n\r\n\x05\x04\x08\x02\0\x04\x12\x04\x89\x01\x08\x10\n\r\n\x05\x04\
    \x08\x02\0\x05\x12\x04\x89\x01\x11\x17\n\r\n\x05\x04\x08\x02\0\x01\x12\
    \x04\x89\x01\x18\"\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\x89\x01%&\n\x0c\n\
    \x04\x04\x08\x02\x01\x12\x04\x8a\x01\x08-\n\r\n\x05\x04\x08\x02\x01\x04\
    \x12\x04\x8a\x01\x08\x10\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\x8a\x01\
    \x11\x17\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\x8a\x01\x18(\n\r\n\x05\
    \x04\x08\x02\x01\x03\x12\x04\x8a\x01+,\n\x0c\n\x02\x04\t\x12\x06\x8d\x01\
    \0\x9c\x01\x01\n\x0b\n\x03\x04\t\x01\x12\x04\x8d\x01\x08+\n\x0e\n\x04\
    \x04\t\x03\0\x12\x06\x8e\x01\x08\x98\x01\t\n\r\n\x05\x04\t\x03\0\x01\x12\
    \x04\x8e\x01\x10\x1a\n\x0e\n\x06\x04\t\x03\0\x02\0\x12\x04\x8f\x01\x102\
    \n\x0f\n\x07\x04\t\x03\0\x02\0\x04\x12\x04\x8f\x01\x10\x18\n\x0f\n\x07\
    \x04\t\x03\0\x02\0\x05\x12\x04\x8f\x01\x19\x1f\n\x0f\n\x07\x04\t\x03\0\
    \x02\0\x01\x12\x04\x8f\x01\x20-\n\x0f\n\x07\x04\t\x03\0\x02\0\x03\x12\
    \x04\x8f\x0101\n\x0e\n\x06\x04\t\x03\0\x02\x01\x12\x04\x90\x01\x10/\n\
    \x0f\n\x07\x04\t\x03\0\x02\x01\x04\x12\x04\x90\x01\x10\x18\n\x0f\n\x07\
    \x04\t\x03\0\x02\x01\x05\x12\x04\x90\x01\x19\x1f\n\x0f\n\x07\x04\t\x03\0\
    \x02\x01\x01\x12\x04\x90\x01\x20*\n\x0f\n\x07\x04\t\x03\0\x02\x01\x03\
    \x12\x04\x90\x01-.\n\x0e\n\x06\x04\t\x03\0\x02\x02\x12\x04\x91\x01\x104\
    \n\x0f\n\x07\x04\t\x03\0\x02\x02\x04\x12\x04\x91\x01\x10\x18\n\x0f\n\x07\
    \x04\t\x03\0\x02\x02\x05\x12\x04\x91\x01\x19\x1f\n\x0f\n\x07\x04\t\x03\0\
    \x02\x02\x01\x12\x04\x91\x01\x20/\n\x0f\n\x07\x04\t\x03\0\x02\x02\x03\
    \x12\x04\x91\x0123\n\x0e\n\x06\x04\t\x03\0\x02\x03\x12\x04\x92\x01\x10,\
    \n\x0f\n\x07\x04\t\x03\0\x02\x03\x04\x12\x04\x92\x01\x10\x18\n\x0f\n\x07\
    \x04\t\x03\0\x02\x03\x05\x12\x04\x92\x01\x19\x1f\n\x0f\n\x07\x04\t\x03\0\
    \x02\x03\x01\x12\x04\x92\x01\x20'\n\x0f\n\x07\x04\t\x03\0\x02\x03\x03\
    \x12\x04\x92\x01*+\n\x0e\n\x06\x04\t\x03\0\x02\x04\x12\x04\x93\x01\x10.\
    \n\x0f\n\x07\x04\t\x03\0\x02\x04\x04\x12\x04\x93\x01\x10\x18\n\x0f\n\x07\
    \x04\t\x03\0\x02\x04\x05\x12\x04\x93\x01\x19\x1f\n\x0f\n\x07\x04\t\x03\0\
    \x02\x04\x01\x12\x04\x93\x01\x20)\n\x0f\n\x07\x04\t\x03\0\x02\x04\x03\
    \x12\x04\x93\x01,-\n\x0e\n\x06\x04\t\x03\0\x02\x05\x12\x04\x94\x01\x100\
    \n\x0f\n\x07\x04\t\x03\0\x02\x05\x04\x12\x04\x94\x01\x10\x18\n\x0f\n\x07\
    \x04\t\x03\0\x02\x05\x05\x12\x04\x94\x01\x19\x1f\n\x0f\n\x07\x04\t\x03\0\
    \x02\x05\x01\x12\x04\x94\x01\x20+\n\x0f\n\x07\x04\t\x03\0\x02\x05\x03\
    \x12\x04\x94\x01./\n\x0e\n\x06\x04\t\x03\0\x02\x06\x12\x04\x95\x01\x10/\
    \n\x0f\n\x07\x04\t\x03\0\x02\x06\x04\x12\x04\x95\x01\x10\x18\n\x0f\n\x07\
    \x04\t\x03\0\x02\x06\x05\x12\x04\x95\x01\x19\x1f\n\x0f\n\x07\x04\t\x03\0\
    \x02\x06\x01\x12\x04\x95\x01\x20*\n\x0f\n\x07\x04\t\x03\0\x02\x06\x03\
    \x12\x04\x95\x01-.\n\x0e\n\x06\x04\t\x03\0\x02\x07\x12\x04\x96\x01\x10.\
    \n\x0f\n\x07\x04\t\x03\0\x02\x07\x04\x12\x04\x96\x01\x10\x18\n\x0f\n\x07\
    \x04\t\x03\0\x02\x07\x05\x12\x04\x96\x01\x19\x1f\n\x0f\n\x07\x04\t\x03\0\
    \x02\x07\x01\x12\x04\x96\x01\x20)\n\x0f\n\x07\x04\t\x03\0\x02\x07\x03\
    \x12\x04\x96\x01,-\n\x0e\n\x06\x04\t\x03\0\x02\x08\x12\x04\x97\x01\x105\
    \n\x0f\n\x07\x04\t\x03\0\x02\x08\x04\x12\x04\x97\x01\x10\x18\n\x0f\n\x07\
    \x04\t\x03\0\x02\x08\x05\x12\x04\x97\x01\x19\x1f\n\x0f\n\x07\x04\t\x03\0\
    \x02\x08\x01\x12\x04\x97\x01\x200\n\x0f\n\x07\x04\t\x03\0\x02\x08\x03\
    \x12\x04\x97\x0134\n\x0c\n\x04\x04\t\x02\0\x12\x04\x9a\x01\x08'\n\r\n\
    \x05\x04\t\x02\0\x04\x12\x04\x9a\x01\x08\x10\n\r\n\x05\x04\t\x02\0\x05\
    \x12\x04\x9a\x01\x11\x17\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x9a\x01\x18\"\
    \n\r\n\x05\x04\t\x02\0\x03\x12\x04\x9a\x01%&\n\x0c\n\x04\x04\t\x02\x01\
    \x12\x04\x9b\x01\x08P\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\x9b\x01\x08\
    \x10\n\r\n\x05\x04\t\x02\x01\x06\x12\x04\x9b\x01\x11?\n\r\n\x05\x04\t\
    \x02\x01\x01\x12\x04\x9b\x01@K\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\x9b\
    \x01NO\n\x0c\n\x02\x04\n\x12\x06\x9e\x01\0\xb1\x01\x01\n\x0b\n\x03\x04\n\
    \x01\x12\x04\x9e\x01\x082\n\x0e\n\x04\x04\n\x03\0\x12\x06\x9f\x01\x08\
    \xa8\x01\t\n\r\n\x05\x04\n\x03\0\x01\x12\x04\x9f\x01\x10\x14\n\x0e\n\x06\
    \x04\n\x03\0\x02\0\x12\x04\xa0\x01\x10)\n\x0f\n\x07\x04\n\x03\0\x02\0\
    \x04\x12\x04\xa0\x01\x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\0\x05\x12\x04\
    \xa0\x01\x19\x1f\n\x0f\n\x07\x04\n\x03\0\x02\0\x01\x12\x04\xa0\x01\x20$\
    \n\x0f\n\x07\x04\n\x03\0\x02\0\x03\x12\x04\xa0\x01'(\n\x0e\n\x06\x04\n\
    \x03\0\x02\x01\x12\x04\xa1\x01\x10,\n\x0f\n\x07\x04\n\x03\0\x02\x01\x04\
    \x12\x04\xa1\x01\x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\x01\x05\x12\x04\xa1\
    \x01\x19\x1f\n\x0f\n\x07\x04\n\x03\0\x02\x01\x01\x12\x04\xa1\x01\x20'\n\
    \x0f\n\x07\x04\n\x03\0\x02\x01\x03\x12\x04\xa1\x01*+\n\x0e\n\x06\x04\n\
    \x03\0\x02\x02\x12\x04\xa2\x01\x10*\n\x0f\n\x07\x04\n\x03\0\x02\x02\x04\
    \x12\x04\xa2\x01\x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\x02\x05\x12\x04\xa2\
    \x01\x19\x1f\n\x0f\n\x07\x04\n\x03\0\x02\x02\x01\x12\x04\xa2\x01\x20%\n\
    \x0f\n\x07\x04\n\x03\0\x02\x02\x03\x12\x04\xa2\x01()\n\x0e\n\x06\x04\n\
    \x03\0\x02\x03\x12\x04\xa3\x01\x102\n\x0f\n\x07\x04\n\x03\0\x02\x03\x04\
    \x12\x04\xa3\x01\x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\x03\x05\x12\x04\xa3\
    \x01\x19\x1f\n\x0f\n\x07\x04\n\x03\0\x02\x03\x01\x12\x04\xa3\x01\x20-\n\
    \x0f\n\x07\x04\n\x03\0\x02\x03\x03\x12\x04\xa3\x0101\n\x0e\n\x06\x04\n\
    \x03\0\x02\x04\x12\x04\xa4\x01\x105\n\x0f\n\x07\x04\n\x03\0\x02\x04\x04\
    \x12\x04\xa4\x01\x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\x04\x05\x12\x04\xa4\
    \x01\x19\x1f\n\x0f\n\x07\x04\n\x03\0\x02\x04\x01\x12\x04\xa4\x01\x200\n\
    \x0f\n\x07\x04\n\x03\0\x02\x04\x03\x12\x04\xa4\x0134\n\x0e\n\x06\x04\n\
    \x03\0\x02\x05\x12\x04\xa5\x01\x105\n\x0f\n\x07\x04\n\x03\0\x02\x05\x04\
    \x12\x04\xa5\x01\x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\x05\x05\x12\x04\xa5\
    \x01\x19\x1f\n\x0f\n\x07\x04\n\x03\0\x02\x05\x01\x12\x04\xa5\x01\x200\n\
    \x0f\n\x07\x04\n\x03\0\x02\x05\x03\x12\x04\xa5\x0134\n\x0e\n\x06\x04\n\
    \x03\0\x02\x06\x12\x04\xa6\x01\x105\n\x0f\n\x07\x04\n\x03\0\x02\x06\x04\
    \x12\x04\xa6\x01\x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\x06\x05\x12\x04\xa6\
    \x01\x19\x1f\n\x0f\n\x07\x04\n\x03\0\x02\x06\x01\x12\x04\xa6\x01\x200\n\
    \x0f\n\x07\x04\n\x03\0\x02\x06\x03\x12\x04\xa6\x0134\n\x0e\n\x06\x04\n\
    \x03\0\x02\x07\x12\x04\xa7\x01\x105\n\x0f\n\x07\x04\n\x03\0\x02\x07\x04\
    \x12\x04\xa7\x01\x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\x07\x05\x12\x04\xa7\
    \x01\x19\x1f\n\x0f\n\x07\x04\n\x03\0\x02\x07\x01\x12\x04\xa7\x01\x200\n\
    \x0f\n\x07\x04\n\x03\0\x02\x07\x03\x12\x04\xa7\x0134\n\x0e\n\x04\x04\n\
    \x03\x01\x12\x06\xaa\x01\x08\xae\x01\t\n\r\n\x05\x04\n\x03\x01\x01\x12\
    \x04\xaa\x01\x10\x18\n\x0e\n\x06\x04\n\x03\x01\x02\0\x12\x04\xab\x01\x10\
    0\n\x0f\n\x07\x04\n\x03\x01\x02\0\x04\x12\x04\xab\x01\x10\x18\n\x0f\n\
    \x07\x04\n\x03\x01\x02\0\x05\x12\x04\xab\x01\x19\x1f\n\x0f\n\x07\x04\n\
    \x03\x01\x02\0\x01\x12\x04\xab\x01\x20+\n\x0f\n\x07\x04\n\x03\x01\x02\0\
    \x03\x12\x04\xab\x01./\n\x0e\n\x06\x04\n\x03\x01\x02\x01\x12\x04\xac\x01\
    \x102\n\x0f\n\x07\x04\n\x03\x01\x02\x01\x04\x12\x04\xac\x01\x10\x18\n\
    \x0f\n\x07\x04\n\x03\x01\x02\x01\x05\x12\x04\xac\x01\x19\x1f\n\x0f\n\x07\
    \x04\n\x03\x01\x02\x01\x01\x12\x04\xac\x01\x20-\n\x0f\n\x07\x04\n\x03\
    \x01\x02\x01\x03\x12\x04\xac\x0101\n\x0e\n\x06\x04\n\x03\x01\x02\x02\x12\
    \x04\xad\x01\x10S\n\x0f\n\x07\x04\n\x03\x01\x02\x02\x04\x12\x04\xad\x01\
    \x10\x18\n\x0f\n\x07\x04\n\x03\x01\x02\x02\x06\x12\x04\xad\x01\x19H\n\
    \x0f\n\x07\x04\n\x03\x01\x02\x02\x01\x12\x04\xad\x01IN\n\x0f\n\x07\x04\n\
    \x03\x01\x02\x02\x03\x12\x04\xad\x01QR\n\x0c\n\x04\x04\n\x02\0\x12\x04\
    \xb0\x01\x08S\n\r\n\x05\x04\n\x02\0\x04\x12\x04\xb0\x01\x08\x10\n\r\n\
    \x05\x04\n\x02\0\x06\x12\x04\xb0\x01\x11D\n\r\n\x05\x04\n\x02\0\x01\x12\
    \x04\xb0\x01EN\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xb0\x01QR\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::dota_client_enums::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(20);
            messages.push(CMsgRequestWeekendTourneySchedule::generated_message_descriptor_data());
            messages.push(CMsgWeekendTourneySchedule::generated_message_descriptor_data());
            messages.push(CMsgWeekendTourneyOpts::generated_message_descriptor_data());
            messages.push(CMsgWeekendTourneyLeave::generated_message_descriptor_data());
            messages.push(CMsgDOTATournament::generated_message_descriptor_data());
            messages.push(CMsgDOTATournamentStateChange::generated_message_descriptor_data());
            messages.push(CMsgDOTAWeekendTourneyPlayerSkillLevelStats::generated_message_descriptor_data());
            messages.push(CMsgDOTAWeekendTourneyPlayerStats::generated_message_descriptor_data());
            messages.push(CMsgDOTAWeekendTourneyPlayerStatsRequest::generated_message_descriptor_data());
            messages.push(CMsgDOTAWeekendTourneyPlayerHistory::generated_message_descriptor_data());
            messages.push(CMsgDOTAWeekendTourneyParticipationDetails::generated_message_descriptor_data());
            messages.push(cmsg_weekend_tourney_schedule::Division::generated_message_descriptor_data());
            messages.push(cmsg_dotatournament::Team::generated_message_descriptor_data());
            messages.push(cmsg_dotatournament::Game::generated_message_descriptor_data());
            messages.push(cmsg_dotatournament::Node::generated_message_descriptor_data());
            messages.push(cmsg_dotatournament_state_change::GameChange::generated_message_descriptor_data());
            messages.push(cmsg_dotatournament_state_change::TeamChange::generated_message_descriptor_data());
            messages.push(cmsg_dotaweekend_tourney_player_history::Tournament::generated_message_descriptor_data());
            messages.push(cmsg_dotaweekend_tourney_participation_details::Tier::generated_message_descriptor_data());
            messages.push(cmsg_dotaweekend_tourney_participation_details::Division::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ETournamentEvent::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
